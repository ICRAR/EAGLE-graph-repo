{
    "modelData": {
        "filePath": "sympy_concrete.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "sympy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "27bcb33cc247e9df242bdb7e8158430321a3869e91bc3559ffd07996263388ff",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695173702.511233,
        "numLGNodes": 9
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Product.doit",
            "description": "Evaluate objects that are not evaluated by default like limits,\n    integrals, sums and products. All objects of this kind will be\n    evaluated recursively, unless some species were excluded via 'hints'\n    or unless the 'deep' hint was set to 'False'.\n    \n    >>> from sympy import Integral\n    >>> from sympy.abc import x\n    \n    >>> 2*Integral(x, x)\n    2*Integral(x, x)\n    \n    >>> (2*Integral(x, x)).doit()\n    x**2\n    \n    >>> (2*Integral(x, x)).doit(deep=False)\n    2*Integral(x, x)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "175a6077cb93346bcfee9dccf4fbc8b48dfb49b19e2234e11dbf703573df9ab9",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.products.Product",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "hints",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.products.Product.doit",
                    "defaultValue": "sympy.concrete.products.Product.doit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Product.is_convergent",
            "description": "See docs of :obj:`.Sum.is_convergent()` for explanation of convergence\n    in SymPy.\n    \n    Explanation\n    ===========\n    \n    The infinite product:\n    \n    .. math::\n    \n        \\prod_{1 \\leq i < \\infty} f(i)\n    \n    is defined by the sequence of partial products:\n    \n    .. math::\n    \n        \\prod_{i=1}^{n} f(i) = f(1) f(2) \\cdots f(n)\n    \n    as n increases without bound. The product converges to a non-zero\n    value if and only if the sum:\n    \n    .. math::\n    \n        \\sum_{1 \\leq i < \\infty} \\log{f(n)}\n    \n    converges.\n    \n    Examples\n    ========\n    \n    >>> from sympy import Product, Symbol, cos, pi, exp, oo\n    >>> n = Symbol('n', integer=True)\n    >>> Product(n/(n + 1), (n, 1, oo)).is_convergent()\n    False\n    >>> Product(1/n**2, (n, 1, oo)).is_convergent()\n    False\n    >>> Product(cos(pi/n), (n, 1, oo)).is_convergent()\n    True\n    >>> Product(exp(-n**2), (n, 1, oo)).is_convergent()\n    False\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Infinite_product",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "565bde081845a13f04fde8d917e8c1df3ac8b719c9c6a155dd045726a23c87f0",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.products.Product",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.products.Product.is_convergent",
                    "defaultValue": "sympy.concrete.products.Product.is_convergent",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Product.reverse_order",
            "description": "Reverse the order of a limit in a Product.\n    \n    Explanation\n    ===========\n    \n    ``reverse_order(expr, *indices)`` reverses some limits in the expression\n    ``expr`` which can be either a ``Sum`` or a ``Product``. The selectors in\n    the argument ``indices`` specify some indices whose limits get reversed.\n    These selectors are either variable names or numerical indices counted\n    starting from the inner-most limit tuple.\n    \n    Examples\n    ========\n    \n    >>> from sympy import gamma, Product, simplify, Sum\n    >>> from sympy.abc import x, y, a, b, c, d\n    >>> P = Product(x, (x, a, b))\n    >>> Pr = P.reverse_order(x)\n    >>> Pr\n    Product(1/x, (x, b + 1, a - 1))\n    >>> Pr = Pr.doit()\n    >>> Pr\n    1/RisingFactorial(b + 1, a - b - 1)\n    >>> simplify(Pr.rewrite(gamma))\n    Piecewise((gamma(b + 1)/gamma(a), b > -1), ((-1)**(-a + b + 1)*gamma(1 - a)/gamma(-b), True))\n    >>> P = P.doit()\n    >>> P\n    RisingFactorial(a, -a + b + 1)\n    >>> simplify(P.rewrite(gamma))\n    Piecewise((gamma(b + 1)/gamma(a), a > 0), ((-1)**(-a + b + 1)*gamma(1 - a)/gamma(-b), True))\n    \n    While one should prefer variable names when specifying which limits\n    to reverse, the index counting notation comes in handy in case there\n    are several symbols with the same name.\n    \n    >>> S = Sum(x*y, (x, a, b), (y, c, d))\n    >>> S\n    Sum(x*y, (x, a, b), (y, c, d))\n    >>> S0 = S.reverse_order(0)\n    >>> S0\n    Sum(-x*y, (x, b + 1, a - 1), (y, c, d))\n    >>> S1 = S0.reverse_order(1)\n    >>> S1\n    Sum(x*y, (x, b + 1, a - 1), (y, d + 1, c - 1))\n    \n    Of course we can mix both notations:\n    \n    >>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(x, 1)\n    Sum(x*y, (x, b + 1, a - 1), (y, 6, 1))\n    >>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x)\n    Sum(x*y, (x, b + 1, a - 1), (y, 6, 1))\n    \n    See Also\n    ========\n    \n    sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index,\n    reorder_limit,\n    sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder\n    \n    References\n    ==========\n    \n    .. [1] Michael Karr, \"Summation in Finite Terms\", Journal of the ACM,\n           Volume 28 Issue 2, April 1981, Pages 305-350\n           https://dl.acm.org/doi/10.1145/322248.322255",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0040b381b5813edd71877c47b8409e6320f9e4d5708992a784db1648f6fcdb8",
            "fields": [
                {
                    "name": "expr",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.products.Product.reverse_order",
                    "defaultValue": "sympy.concrete.products.Product.reverse_order",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Sum.doit",
            "description": "Evaluate objects that are not evaluated by default like limits,\n    integrals, sums and products. All objects of this kind will be\n    evaluated recursively, unless some species were excluded via 'hints'\n    or unless the 'deep' hint was set to 'False'.\n    \n    >>> from sympy import Integral\n    >>> from sympy.abc import x\n    \n    >>> 2*Integral(x, x)\n    2*Integral(x, x)\n    \n    >>> (2*Integral(x, x)).doit()\n    x**2\n    \n    >>> (2*Integral(x, x)).doit(deep=False)\n    2*Integral(x, x)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "57fa261dd301438c24aeb3f52af98064ae95836dd222c89d2cf7d6bf6fb0dab7",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.summations.Sum",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "hints",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.summations.Sum.doit",
                    "defaultValue": "sympy.concrete.summations.Sum.doit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Sum.euler_maclaurin",
            "description": "Return an Euler-Maclaurin approximation of self, where m is the\n    number of leading terms to sum directly and n is the number of\n    terms in the tail.\n    \n    With m = n = 0, this is simply the corresponding integral\n    plus a first-order endpoint correction.\n    \n    Returns (s, e) where s is the Euler-Maclaurin approximation\n    and e is the estimated error (taken to be the magnitude of\n    the first omitted term in the tail):\n    \n        >>> from sympy.abc import k, a, b\n        >>> from sympy import Sum\n        >>> Sum(1/k, (k, 2, 5)).doit().evalf()\n        1.28333333333333\n        >>> s, e = Sum(1/k, (k, 2, 5)).euler_maclaurin()\n        >>> s\n        -log(2) + 7/20 + log(5)\n        >>> from sympy import sstr\n        >>> print(sstr((s.evalf(), e.evalf()), full_prec=True))\n        (1.26629073187415, 0.0175000000000000)\n    \n    The endpoints may be symbolic:\n    \n        >>> s, e = Sum(1/k, (k, a, b)).euler_maclaurin()\n        >>> s\n        -log(a) + log(b) + 1/(2*b) + 1/(2*a)\n        >>> e\n        Abs(1/(12*b**2) - 1/(12*a**2))\n    \n    If the function is a polynomial of degree at most 2n+1, the\n    Euler-Maclaurin formula becomes exact (and e = 0 is returned):\n    \n        >>> Sum(k, (k, 2, b)).euler_maclaurin()\n        (b**2/2 + b/2 - 1, 0)\n        >>> Sum(k, (k, 2, b)).doit()\n        b**2/2 + b/2 - 1\n    \n    With a nonzero eps specified, the summation is ended\n    as soon as the remainder term is less than the epsilon.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b1cb261cd2ff9578be536b26f3020503903d268e84fccfe23085b34b051d5113",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.summations.Sum",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "m",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eps",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "eval_integral",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.summations.Sum.euler_maclaurin",
                    "defaultValue": "sympy.concrete.summations.Sum.euler_maclaurin",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Sum.eval_zeta_function",
            "description": "Check whether the function matches with the zeta function.\n    \n    If it matches, then return a `Piecewise` expression because\n    zeta function does not converge unless `s > 1` and `q > 0`",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "37ed69ec10d75bc9e7fb7b512b64a4f55231d1027a8917d90721a18babf7d05c",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.summations.Sum",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "limits",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.summations.Sum.eval_zeta_function",
                    "defaultValue": "sympy.concrete.summations.Sum.eval_zeta_function",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Sum.is_absolutely_convergent",
            "description": "Checks for the absolute convergence of an infinite series.\n    \n    Same as checking convergence of absolute value of sequence_term of\n    an infinite series.\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Absolute_convergence\n    \n    Examples\n    ========\n    \n    >>> from sympy import Sum, Symbol, oo\n    >>> n = Symbol('n', integer=True)\n    >>> Sum((-1)**n, (n, 1, oo)).is_absolutely_convergent()\n    False\n    >>> Sum((-1)**n/n**2, (n, 1, oo)).is_absolutely_convergent()\n    True\n    \n    See Also\n    ========\n    \n    Sum.is_convergent",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6eadf8eb8d9875b338bbc9d39f0506658ce7af48f0a70b9d039491b06450d141",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.summations.Sum",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.summations.Sum.is_absolutely_convergent",
                    "defaultValue": "sympy.concrete.summations.Sum.is_absolutely_convergent",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Sum.is_convergent",
            "description": "Checks for the convergence of a Sum.\n    \n    Explanation\n    ===========\n    \n    We divide the study of convergence of infinite sums and products in\n    two parts.\n    \n    First Part:\n    One part is the question whether all the terms are well defined, i.e.,\n    they are finite in a sum and also non-zero in a product. Zero\n    is the analogy of (minus) infinity in products as\n    :math:`e^{-\\infty} = 0`.\n    \n    Second Part:\n    The second part is the question of convergence after infinities,\n    and zeros in products, have been omitted assuming that their number\n    is finite. This means that we only consider the tail of the sum or\n    product, starting from some point after which all terms are well\n    defined.\n    \n    For example, in a sum of the form:\n    \n    .. math::\n    \n        \\sum_{1 \\leq i < \\infty} \\frac{1}{n^2 + an + b}\n    \n    where a and b are numbers. The routine will return true, even if there\n    are infinities in the term sequence (at most two). An analogous\n    product would be:\n    \n    .. math::\n    \n        \\prod_{1 \\leq i < \\infty} e^{\\frac{1}{n^2 + an + b}}\n    \n    This is how convergence is interpreted. It is concerned with what\n    happens at the limit. Finding the bad terms is another independent\n    matter.\n    \n    Note: It is responsibility of user to see that the sum or product\n    is well defined.\n    \n    There are various tests employed to check the convergence like\n    divergence test, root test, integral test, alternating series test,\n    comparison tests, Dirichlet tests. It returns true if Sum is convergent\n    and false if divergent and NotImplementedError if it cannot be checked.\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Convergence_tests\n    \n    Examples\n    ========\n    \n    >>> from sympy import factorial, S, Sum, Symbol, oo\n    >>> n = Symbol('n', integer=True)\n    >>> Sum(n/(n - 1), (n, 4, 7)).is_convergent()\n    True\n    >>> Sum(n/(2*n + 1), (n, 1, oo)).is_convergent()\n    False\n    >>> Sum(factorial(n)/5**n, (n, 1, oo)).is_convergent()\n    False\n    >>> Sum(1/n**(S(6)/5), (n, 1, oo)).is_convergent()\n    True\n    \n    See Also\n    ========\n    \n    Sum.is_absolutely_convergent\n    sympy.concrete.products.Product.is_convergent",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "97c62e71913d9d3e2255caa1146fc270f5871801921f246965544d988c13e2a7",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.summations.Sum",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.summations.Sum.is_convergent",
                    "defaultValue": "sympy.concrete.summations.Sum.is_convergent",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Sum.reverse_order",
            "description": "Reverse the order of a limit in a Sum.\n    \n    Explanation\n    ===========\n    \n    ``reverse_order(self, *indices)`` reverses some limits in the expression\n    ``self`` which can be either a ``Sum`` or a ``Product``. The selectors in\n    the argument ``indices`` specify some indices whose limits get reversed.\n    These selectors are either variable names or numerical indices counted\n    starting from the inner-most limit tuple.\n    \n    Examples\n    ========\n    \n    >>> from sympy import Sum\n    >>> from sympy.abc import x, y, a, b, c, d\n    \n    >>> Sum(x, (x, 0, 3)).reverse_order(x)\n    Sum(-x, (x, 4, -1))\n    >>> Sum(x*y, (x, 1, 5), (y, 0, 6)).reverse_order(x, y)\n    Sum(x*y, (x, 6, 0), (y, 7, -1))\n    >>> Sum(x, (x, a, b)).reverse_order(x)\n    Sum(-x, (x, b + 1, a - 1))\n    >>> Sum(x, (x, a, b)).reverse_order(0)\n    Sum(-x, (x, b + 1, a - 1))\n    \n    While one should prefer variable names when specifying which limits\n    to reverse, the index counting notation comes in handy in case there\n    are several symbols with the same name.\n    \n    >>> S = Sum(x**2, (x, a, b), (x, c, d))\n    >>> S\n    Sum(x**2, (x, a, b), (x, c, d))\n    >>> S0 = S.reverse_order(0)\n    >>> S0\n    Sum(-x**2, (x, b + 1, a - 1), (x, c, d))\n    >>> S1 = S0.reverse_order(1)\n    >>> S1\n    Sum(x**2, (x, b + 1, a - 1), (x, d + 1, c - 1))\n    \n    Of course we can mix both notations:\n    \n    >>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(x, 1)\n    Sum(x*y, (x, b + 1, a - 1), (y, 6, 1))\n    >>> Sum(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x)\n    Sum(x*y, (x, b + 1, a - 1), (y, 6, 1))\n    \n    See Also\n    ========\n    \n    sympy.concrete.expr_with_intlimits.ExprWithIntLimits.index, reorder_limit,\n    sympy.concrete.expr_with_intlimits.ExprWithIntLimits.reorder\n    \n    References\n    ==========\n    \n    .. [1] Michael Karr, \"Summation in Finite Terms\", Journal of the ACM,\n           Volume 28 Issue 2, April 1981, Pages 305-350\n           https://dl.acm.org/doi/10.1145/322248.322255",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1fd6dac4ec89473f5b2ae93250b6ee9bfc3e996de6b75f3e0105b0e89435674a",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.concrete.summations.Sum",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.concrete.summations.Sum.reverse_order",
                    "defaultValue": "sympy.concrete.summations.Sum.reverse_order",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}