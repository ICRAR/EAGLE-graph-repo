{
    "modelData": {
        "filePath": "sympy_discrete.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "This module contains functions which operate on discrete sequences.\n\nTransforms - ``fft``, ``ifft``, ``ntt``, ``intt``, ``fwht``, ``ifwht``,\n            ``mobius_transform``, ``inverse_mobius_transform``\n\nConvolutions - ``convolution``, ``convolution_fft``, ``convolution_ntt``,\n            ``convolution_fwht``, ``convolution_subset``,\n            ``covering_product``, ``intersecting_product``",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "tmp",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "23371bed3ddddcd1dd0bdb6b64df13261807e2ee668000098f577ec2b21c962f",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695135167.031433,
        "numLGNodes": 11
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.convolution",
            "description": "Performs convolution by determining the type of desired\n    convolution using hints.\n    \n    Exactly one of ``dps``, ``prime``, ``dyadic``, ``subset`` arguments\n    should be specified explicitly for identifying the type of convolution,\n    and the argument ``cycle`` can be specified optionally.\n    \n    For the default arguments, linear convolution is performed using **FFT**.\n    \n    Parameters\n    ==========\n    \n    a, b : iterables\n        The sequences for which convolution is performed.\n    cycle : Integer\n        Specifies the length for doing cyclic convolution.\n    dps : Integer\n        Specifies the number of decimal digits for precision for\n        performing **FFT** on the sequence.\n    prime : Integer\n        Prime modulus of the form `(m 2^k + 1)` to be used for\n        performing **NTT** on the sequence.\n    dyadic : bool\n        Identifies the convolution type as dyadic (*bitwise-XOR*)\n        convolution, which is performed using **FWHT**.\n    subset : bool\n        Identifies the convolution type as subset convolution.\n    \n    Examples\n    ========\n    \n    >>> from sympy import convolution, symbols, S, I\n    >>> u, v, w, x, y, z = symbols('u v w x y z')\n    \n    >>> convolution([1 + 2*I, 4 + 3*I], [S(5)/4, 6], dps=3)\n    [1.25 + 2.5*I, 11.0 + 15.8*I, 24.0 + 18.0*I]\n    >>> convolution([1, 2, 3], [4, 5, 6], cycle=3)\n    [31, 31, 28]\n    \n    >>> convolution([111, 777], [888, 444], prime=19*2**10 + 1)\n    [1283, 19351, 14219]\n    >>> convolution([111, 777], [888, 444], prime=19*2**10 + 1, cycle=2)\n    [15502, 19351]\n    \n    >>> convolution([u, v], [x, y, z], dyadic=True)\n    [u*x + v*y, u*y + v*x, u*z, v*z]\n    >>> convolution([u, v], [x, y, z], dyadic=True, cycle=2)\n    [u*x + u*z + v*y, u*y + v*x + v*z]\n    \n    >>> convolution([u, v, w], [x, y, z], subset=True)\n    [u*x, u*y + v*x, u*z + w*x, v*z + w*y]\n    >>> convolution([u, v, w], [x, y, z], subset=True, cycle=3)\n    [u*x + v*z + w*y, u*y + v*x, u*z + w*x]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cd3545d07f36da3aacce2002ae423f2895a9527d828107c45f5bca5e7c4adfe7",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cycle",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prime",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dyadic",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "subset",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.convolutions.convolution",
                    "defaultValue": "sympy.discrete.convolutions.convolution",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.covering_product",
            "description": "Returns the covering product of given sequences.\n    \n    The indices of each argument, considered as bit strings, correspond to\n    subsets of a finite set.\n    \n    The covering product of given sequences is a sequence which contains\n    the sum of products of the elements of the given sequences grouped by\n    the *bitwise-OR* of the corresponding indices.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    definition of subset based on bitmasks (indices) requires the size of\n    sequence to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    a, b : iterables\n        The sequences for which covering product is to be obtained.\n    \n    Examples\n    ========\n    \n    >>> from sympy import symbols, S, I, covering_product\n    >>> u, v, x, y, z = symbols('u v x y z')\n    \n    >>> covering_product([u, v], [x, y])\n    [u*x, u*y + v*x + v*y]\n    >>> covering_product([u, v, x], [y, z])\n    [u*y, u*z + v*y + v*z, x*y, x*z]\n    \n    >>> covering_product([1, S(2)/3], [3, 4 + 5*I])\n    [3, 26/3 + 25*I/3]\n    >>> covering_product([1, 3, S(5)/7], [7, 8])\n    [7, 53, 5, 40/7]\n    \n    References\n    ==========\n    \n    .. [1] https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2025da8951d38c233f91d5f201076ae9d3d8f4726786552061dcf66d9e0a3aba",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.convolutions.covering_product",
                    "defaultValue": "sympy.discrete.convolutions.covering_product",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.fft",
            "description": "Performs the Discrete Fourier Transform (**DFT**) in the complex domain.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    *radix-2 FFT* requires the number of sample points to be a power of 2.\n    \n    This method should be used with default arguments only for short sequences\n    as the complexity of expressions increases with the size of the sequence.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which **DFT** is to be applied.\n    dps : Integer\n        Specifies the number of decimal digits for precision.\n    \n    Examples\n    ========\n    \n    >>> from sympy import fft, ifft\n    \n    >>> fft([1, 2, 3, 4])\n    [10, -2 - 2*I, -2, -2 + 2*I]\n    >>> ifft(_)\n    [1, 2, 3, 4]\n    \n    >>> ifft([1, 2, 3, 4])\n    [5/2, -1/2 + I/2, -1/2, -1/2 - I/2]\n    >>> fft(_)\n    [1, 2, 3, 4]\n    \n    >>> ifft([1, 7, 3, 4], dps=15)\n    [3.75, -0.5 - 0.75*I, -1.75, -0.5 + 0.75*I]\n    >>> fft(_)\n    [1.0, 7.0, 3.0, 4.0]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm\n    .. [2] https://mathworld.wolfram.com/FastFourierTransform.html",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2aca7b0430b0e41e176b13623c93c2284af9adc992bebd0eef9d8e3e1712eef4",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.fft",
                    "defaultValue": "sympy.discrete.transforms.fft",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.fwht",
            "description": "Performs the Walsh Hadamard Transform (**WHT**), and uses Hadamard\n    ordering for the sequence.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    *radix-2 FWHT* requires the number of sample points to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which WHT is to be applied.\n    \n    Examples\n    ========\n    \n    >>> from sympy import fwht, ifwht\n    >>> fwht([4, 2, 2, 0, 0, 2, -2, 0])\n    [8, 0, 8, 0, 8, 8, 0, 0]\n    >>> ifwht(_)\n    [4, 2, 2, 0, 0, 2, -2, 0]\n    \n    >>> ifwht([19, -1, 11, -9, -7, 13, -15, 5])\n    [2, 0, 4, 0, 3, 10, 0, 0]\n    >>> fwht(_)\n    [19, -1, 11, -9, -7, 13, -15, 5]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Hadamard_transform\n    .. [2] https://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bc626c5cf28c1200ff5265a1c042e3f55dac89f00c907ec7e7e3b1c3939aa3a7",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.fwht",
                    "defaultValue": "sympy.discrete.transforms.fwht",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.ifft",
            "description": "Performs the Discrete Fourier Transform (**DFT**) in the complex domain.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    *radix-2 FFT* requires the number of sample points to be a power of 2.\n    \n    This method should be used with default arguments only for short sequences\n    as the complexity of expressions increases with the size of the sequence.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which **DFT** is to be applied.\n    dps : Integer\n        Specifies the number of decimal digits for precision.\n    \n    Examples\n    ========\n    \n    >>> from sympy import fft, ifft\n    \n    >>> fft([1, 2, 3, 4])\n    [10, -2 - 2*I, -2, -2 + 2*I]\n    >>> ifft(_)\n    [1, 2, 3, 4]\n    \n    >>> ifft([1, 2, 3, 4])\n    [5/2, -1/2 + I/2, -1/2, -1/2 - I/2]\n    >>> fft(_)\n    [1, 2, 3, 4]\n    \n    >>> ifft([1, 7, 3, 4], dps=15)\n    [3.75, -0.5 - 0.75*I, -1.75, -0.5 + 0.75*I]\n    >>> fft(_)\n    [1.0, 7.0, 3.0, 4.0]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm\n    .. [2] https://mathworld.wolfram.com/FastFourierTransform.html",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1f2308762cffd0d1d14579c0296529da011c2da1e110d0166af73ef0a97b3271",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dps",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.ifft",
                    "defaultValue": "sympy.discrete.transforms.ifft",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.ifwht",
            "description": "Performs the Walsh Hadamard Transform (**WHT**), and uses Hadamard\n    ordering for the sequence.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    *radix-2 FWHT* requires the number of sample points to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which WHT is to be applied.\n    \n    Examples\n    ========\n    \n    >>> from sympy import fwht, ifwht\n    >>> fwht([4, 2, 2, 0, 0, 2, -2, 0])\n    [8, 0, 8, 0, 8, 8, 0, 0]\n    >>> ifwht(_)\n    [4, 2, 2, 0, 0, 2, -2, 0]\n    \n    >>> ifwht([19, -1, 11, -9, -7, 13, -15, 5])\n    [2, 0, 4, 0, 3, 10, 0, 0]\n    >>> fwht(_)\n    [19, -1, 11, -9, -7, 13, -15, 5]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Hadamard_transform\n    .. [2] https://en.wikipedia.org/wiki/Fast_Walsh%E2%80%93Hadamard_transform",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "be6c95320d42fce11ad7105763959c4b66761ad9a3f112e5cac7918a17004434",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.ifwht",
                    "defaultValue": "sympy.discrete.transforms.ifwht",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.intersecting_product",
            "description": "Returns the intersecting product of given sequences.\n    \n    The indices of each argument, considered as bit strings, correspond to\n    subsets of a finite set.\n    \n    The intersecting product of given sequences is the sequence which\n    contains the sum of products of the elements of the given sequences\n    grouped by the *bitwise-AND* of the corresponding indices.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    definition of subset based on bitmasks (indices) requires the size of\n    sequence to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    a, b : iterables\n        The sequences for which intersecting product is to be obtained.\n    \n    Examples\n    ========\n    \n    >>> from sympy import symbols, S, I, intersecting_product\n    >>> u, v, x, y, z = symbols('u v x y z')\n    \n    >>> intersecting_product([u, v], [x, y])\n    [u*x + u*y + v*x, v*y]\n    >>> intersecting_product([u, v, x], [y, z])\n    [u*y + u*z + v*y + x*y + x*z, v*z, 0, 0]\n    \n    >>> intersecting_product([1, S(2)/3], [3, 4 + 5*I])\n    [9 + 5*I, 8/3 + 10*I/3]\n    >>> intersecting_product([1, 3, S(5)/7], [7, 8])\n    [327/7, 24, 0, 0]\n    \n    References\n    ==========\n    \n    .. [1] https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "358e0074000f4a52f830dd9a782ec3841d4d9287470ee0b47d34dc652233cf19",
            "fields": [
                {
                    "name": "a",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.convolutions.intersecting_product",
                    "defaultValue": "sympy.discrete.convolutions.intersecting_product",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.intt",
            "description": "Performs the Number Theoretic Transform (**NTT**), which specializes the\n    Discrete Fourier Transform (**DFT**) over quotient ring `Z/pZ` for prime\n    `p` instead of complex numbers `C`.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    *radix-2 NTT* requires the number of sample points to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which **DFT** is to be applied.\n    prime : Integer\n        Prime modulus of the form `(m 2^k + 1)` to be used for performing\n        **NTT** on the sequence.\n    \n    Examples\n    ========\n    \n    >>> from sympy import ntt, intt\n    >>> ntt([1, 2, 3, 4], prime=3*2**8 + 1)\n    [10, 643, 767, 122]\n    >>> intt(_, 3*2**8 + 1)\n    [1, 2, 3, 4]\n    >>> intt([1, 2, 3, 4], prime=3*2**8 + 1)\n    [387, 415, 384, 353]\n    >>> ntt(_, prime=3*2**8 + 1)\n    [1, 2, 3, 4]\n    \n    References\n    ==========\n    \n    .. [1] http://www.apfloat.org/ntt.html\n    .. [2] https://mathworld.wolfram.com/NumberTheoreticTransform.html\n    .. [3] https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e6eb7cf55d10e517ff0cbcd2c822f4ea5c839c18eea387476e11881a34d6cb68",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prime",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.intt",
                    "defaultValue": "sympy.discrete.transforms.intt",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.inverse_mobius_transform",
            "description": "Performs the Mobius Transform for subset lattice with indices of\n    sequence as bitmasks.\n    \n    The indices of each argument, considered as bit strings, correspond\n    to subsets of a finite set.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    definition of subset/superset based on bitmasks (indices) requires\n    the size of sequence to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which Mobius Transform is to be applied.\n    subset : bool\n        Specifies if Mobius Transform is applied by enumerating subsets\n        or supersets of the given set.\n    \n    Examples\n    ========\n    \n    >>> from sympy import symbols\n    >>> from sympy import mobius_transform, inverse_mobius_transform\n    >>> x, y, z = symbols('x y z')\n    \n    >>> mobius_transform([x, y, z])\n    [x, x + y, x + z, x + y + z]\n    >>> inverse_mobius_transform(_)\n    [x, y, z, 0]\n    \n    >>> mobius_transform([x, y, z], subset=False)\n    [x + y + z, y, z, 0]\n    >>> inverse_mobius_transform(_, subset=False)\n    [x, y, z, 0]\n    \n    >>> mobius_transform([1, 2, 3, 4])\n    [1, 3, 4, 10]\n    >>> inverse_mobius_transform(_)\n    [1, 2, 3, 4]\n    >>> mobius_transform([1, 2, 3, 4], subset=False)\n    [10, 6, 7, 4]\n    >>> inverse_mobius_transform(_, subset=False)\n    [1, 2, 3, 4]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula\n    .. [2] https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf\n    .. [3] https://arxiv.org/pdf/1211.0189.pdf",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a2a2013976343b345fc8d4c17c365583b55f40c419e1d80164b4fe016c6d8ebd",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "subset",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.inverse_mobius_transform",
                    "defaultValue": "sympy.discrete.transforms.inverse_mobius_transform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.mobius_transform",
            "description": "Performs the Mobius Transform for subset lattice with indices of\n    sequence as bitmasks.\n    \n    The indices of each argument, considered as bit strings, correspond\n    to subsets of a finite set.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    definition of subset/superset based on bitmasks (indices) requires\n    the size of sequence to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which Mobius Transform is to be applied.\n    subset : bool\n        Specifies if Mobius Transform is applied by enumerating subsets\n        or supersets of the given set.\n    \n    Examples\n    ========\n    \n    >>> from sympy import symbols\n    >>> from sympy import mobius_transform, inverse_mobius_transform\n    >>> x, y, z = symbols('x y z')\n    \n    >>> mobius_transform([x, y, z])\n    [x, x + y, x + z, x + y + z]\n    >>> inverse_mobius_transform(_)\n    [x, y, z, 0]\n    \n    >>> mobius_transform([x, y, z], subset=False)\n    [x + y + z, y, z, 0]\n    >>> inverse_mobius_transform(_, subset=False)\n    [x, y, z, 0]\n    \n    >>> mobius_transform([1, 2, 3, 4])\n    [1, 3, 4, 10]\n    >>> inverse_mobius_transform(_)\n    [1, 2, 3, 4]\n    >>> mobius_transform([1, 2, 3, 4], subset=False)\n    [10, 6, 7, 4]\n    >>> inverse_mobius_transform(_, subset=False)\n    [1, 2, 3, 4]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula\n    .. [2] https://people.csail.mit.edu/rrw/presentations/subset-conv.pdf\n    .. [3] https://arxiv.org/pdf/1211.0189.pdf",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3b2e96da2235d275814827c097ffbec765090eefeaee37ba9e7d010f61fb90f2",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "subset",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.mobius_transform",
                    "defaultValue": "sympy.discrete.transforms.mobius_transform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.discrete.ntt",
            "description": "Performs the Number Theoretic Transform (**NTT**), which specializes the\n    Discrete Fourier Transform (**DFT**) over quotient ring `Z/pZ` for prime\n    `p` instead of complex numbers `C`.\n    \n    The sequence is automatically padded to the right with zeros, as the\n    *radix-2 NTT* requires the number of sample points to be a power of 2.\n    \n    Parameters\n    ==========\n    \n    seq : iterable\n        The sequence on which **DFT** is to be applied.\n    prime : Integer\n        Prime modulus of the form `(m 2^k + 1)` to be used for performing\n        **NTT** on the sequence.\n    \n    Examples\n    ========\n    \n    >>> from sympy import ntt, intt\n    >>> ntt([1, 2, 3, 4], prime=3*2**8 + 1)\n    [10, 643, 767, 122]\n    >>> intt(_, 3*2**8 + 1)\n    [1, 2, 3, 4]\n    >>> intt([1, 2, 3, 4], prime=3*2**8 + 1)\n    [387, 415, 384, 353]\n    >>> ntt(_, prime=3*2**8 + 1)\n    [1, 2, 3, 4]\n    \n    References\n    ==========\n    \n    .. [1] http://www.apfloat.org/ntt.html\n    .. [2] https://mathworld.wolfram.com/NumberTheoreticTransform.html\n    .. [3] https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general%29",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cc3363048f8481ab844dd2a32d9dba224ebe815b2ae24e2795bac367d5e2542d",
            "fields": [
                {
                    "name": "seq",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prime",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.discrete.transforms.ntt",
                    "defaultValue": "sympy.discrete.transforms.ntt",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}