{
    "modelData": {
        "filePath": "sympy_calculus.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "Calculus-related methods.",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "tmp",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "85252e8c49c562b9b2e7a2906e0e1502b908e13e237bc66b86975211534b4fe5",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695135166.924034,
        "numLGNodes": 20
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "AccumulationBounds.intersection",
            "description": "Returns the intersection of 'self' and 'other'.\n    Here other can be an instance of :py:class:`~.FiniteSet` or AccumulationBounds.\n    \n    Parameters\n    ==========\n    \n    other : AccumulationBounds\n        Another AccumulationBounds object with which the intersection\n        has to be computed.\n    \n    Returns\n    =======\n    \n    AccumulationBounds\n        Intersection of ``self`` and ``other``.\n    \n    Examples\n    ========\n    \n    >>> from sympy import AccumBounds, FiniteSet\n    >>> AccumBounds(1, 3).intersection(AccumBounds(2, 4))\n    AccumBounds(2, 3)\n    \n    >>> AccumBounds(1, 3).intersection(AccumBounds(4, 6))\n    EmptySet\n    \n    >>> AccumBounds(1, 4).intersection(FiniteSet(1, 2, 5))\n    {1, 2}",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56a4258a1929c362d081559fdf1676fbbcfdbe702390711b226050f5707addca",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.calculus.accumulationbounds.AccumulationBounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.accumulationbounds.AccumulationBounds.intersection",
                    "defaultValue": "sympy.calculus.accumulationbounds.AccumulationBounds.intersection",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "AccumulationBounds.union",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e6ddfce7afc9064c9dd199331600096eb09972c3cf7a4f993c5a732fc8fbb3c4",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "sympy.calculus.accumulationbounds.AccumulationBounds",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "other",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.accumulationbounds.AccumulationBounds.union",
                    "defaultValue": "sympy.calculus.accumulationbounds.AccumulationBounds.union",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.apply_finite_diff",
            "description": "Calculates the finite difference approximation of\n    the derivative of requested order at ``x0`` from points\n    provided in ``x_list`` and ``y_list``.\n    \n    Parameters\n    ==========\n    \n    order: int\n        order of derivative to approximate. 0 corresponds to interpolation.\n    x_list: sequence\n        Sequence of (unique) values for the independent variable.\n    y_list: sequence\n        The function value at corresponding values for the independent\n        variable in x_list.\n    x0: Number or Symbol\n        At what value of the independent variable the derivative should be\n        evaluated. Defaults to 0.\n    \n    Returns\n    =======\n    \n    sympy.core.add.Add or sympy.core.numbers.Number\n        The finite difference expression approximating the requested\n        derivative order at ``x0``.\n    \n    Examples\n    ========\n    \n    >>> from sympy import apply_finite_diff\n    >>> cube = lambda arg: (1.0*arg)**3\n    >>> xlist = range(-3,3+1)\n    >>> apply_finite_diff(2, xlist, map(cube, xlist), 2) - 12 # doctest: +SKIP\n    -3.55271367880050e-15\n    \n    we see that the example above only contain rounding errors.\n    apply_finite_diff can also be used on more abstract objects:\n    \n    >>> from sympy import IndexedBase, Idx\n    >>> x, y = map(IndexedBase, 'xy')\n    >>> i = Idx('i')\n    >>> x_list, y_list = zip(*[(x[i+j], y[i+j]) for j in range(-1,2)])\n    >>> apply_finite_diff(1, x_list, y_list, x[i])\n    ((x[i + 1] - x[i])/(-x[i - 1] + x[i]) - 1)*y[i]/(x[i + 1] - x[i]) -\n    (x[i + 1] - x[i])*y[i - 1]/((x[i + 1] - x[i - 1])*(-x[i - 1] + x[i])) +\n    (-x[i - 1] + x[i])*y[i + 1]/((x[i + 1] - x[i - 1])*(x[i + 1] - x[i]))\n    \n    Notes\n    =====\n    \n    Order = 0 corresponds to interpolation.\n    Only supply so many points you think makes sense\n    to around x0 when extracting the derivative (the function\n    need to be well behaved within that region). Also beware\n    of Runge's phenomenon.\n    \n    See also\n    ========\n    \n    sympy.calculus.finite_diff.finite_diff_weights\n    \n    References\n    ==========\n    \n    Fortran 90 implementation with Python interface for numerics: finitediff_\n    \n    .. _finitediff: https://github.com/bjodah/finitediff",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6ef54392bf37b5c25a0bf9deb72d293d70fddb4ac4f8a5c37eea41f4de397721",
            "fields": [
                {
                    "name": "order",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_list",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y_list",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": "Zero",
                    "defaultValue": "Zero",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.finite_diff.apply_finite_diff",
                    "defaultValue": "sympy.calculus.finite_diff.apply_finite_diff",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.differentiate_finite",
            "description": "Differentiate expr and replace Derivatives with finite differences.\n    \n    Parameters\n    ==========\n    \n    expr : expression\n    \\*symbols : differentiate with respect to symbols\n    points: sequence, coefficient or undefined function, optional\n        see ``Derivative.as_finite_difference``\n    x0: number or Symbol, optional\n        see ``Derivative.as_finite_difference``\n    wrt: Symbol, optional\n        see ``Derivative.as_finite_difference``\n    \n    Examples\n    ========\n    \n    >>> from sympy import sin, Function, differentiate_finite\n    >>> from sympy.abc import x, y, h\n    >>> f, g = Function('f'), Function('g')\n    >>> differentiate_finite(f(x)*g(x), x, points=[x-h, x+h])\n    -f(-h + x)*g(-h + x)/(2*h) + f(h + x)*g(h + x)/(2*h)\n    \n    ``differentiate_finite`` works on any expression, including the expressions\n    with embedded derivatives:\n    \n    >>> differentiate_finite(f(x) + sin(x), x, 2)\n    -2*f(x) + f(x - 1) + f(x + 1) - 2*sin(x) + sin(x - 1) + sin(x + 1)\n    >>> differentiate_finite(f(x, y), x, y)\n    f(x - 1/2, y - 1/2) - f(x - 1/2, y + 1/2) - f(x + 1/2, y - 1/2) + f(x + 1/2, y + 1/2)\n    >>> differentiate_finite(f(x)*g(x).diff(x), x)\n    (-g(x) + g(x + 1))*f(x + 1/2) - (g(x) - g(x - 1))*f(x - 1/2)\n    \n    To make finite difference with non-constant discretization step use\n    undefined functions:\n    \n    >>> dx = Function('dx')\n    >>> differentiate_finite(f(x)*g(x).diff(x), points=dx(x))\n    -(-g(x - dx(x)/2 - dx(x - dx(x)/2)/2)/dx(x - dx(x)/2) +\n    g(x - dx(x)/2 + dx(x - dx(x)/2)/2)/dx(x - dx(x)/2))*f(x - dx(x)/2)/dx(x) +\n    (-g(x + dx(x)/2 - dx(x + dx(x)/2)/2)/dx(x + dx(x)/2) +\n    g(x + dx(x)/2 + dx(x + dx(x)/2)/2)/dx(x + dx(x)/2))*f(x + dx(x)/2)/dx(x)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "730351ca3f80c124c836aa168471b8384cbd7f0c0dd273a0d0652d35d5e2160b",
            "fields": [
                {
                    "name": "expr",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbols",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "points",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "wrt",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "evaluate",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.finite_diff.differentiate_finite",
                    "defaultValue": "sympy.calculus.finite_diff.differentiate_finite",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.euler_equations",
            "description": "Find the Euler-Lagrange equations [1]_ for a given Lagrangian.\n    \n    Parameters\n    ==========\n    \n    L : Expr\n        The Lagrangian that should be a function of the functions listed\n        in the second argument and their derivatives.\n    \n        For example, in the case of two functions $f(x,y)$, $g(x,y)$ and\n        two independent variables $x$, $y$ the Lagrangian has the form:\n    \n            .. math:: L\\left(f(x,y),g(x,y),\\frac{\\partial f(x,y)}{\\partial x},\n                      \\frac{\\partial f(x,y)}{\\partial y},\n                      \\frac{\\partial g(x,y)}{\\partial x},\n                      \\frac{\\partial g(x,y)}{\\partial y},x,y\\right)\n    \n        In many cases it is not necessary to provide anything, except the\n        Lagrangian, it will be auto-detected (and an error raised if this\n        cannot be done).\n    \n    funcs : Function or an iterable of Functions\n        The functions that the Lagrangian depends on. The Euler equations\n        are differential equations for each of these functions.\n    \n    vars : Symbol or an iterable of Symbols\n        The Symbols that are the independent variables of the functions.\n    \n    Returns\n    =======\n    \n    eqns : list of Eq\n        The list of differential equations, one for each function.\n    \n    Examples\n    ========\n    \n    >>> from sympy import euler_equations, Symbol, Function\n    >>> x = Function('x')\n    >>> t = Symbol('t')\n    >>> L = (x(t).diff(t))**2/2 - x(t)**2/2\n    >>> euler_equations(L, x(t), t)\n    [Eq(-x(t) - Derivative(x(t), (t, 2)), 0)]\n    >>> u = Function('u')\n    >>> x = Symbol('x')\n    >>> L = (u(t, x).diff(t))**2/2 - (u(t, x).diff(x))**2/2\n    >>> euler_equations(L, u(t, x), [t, x])\n    [Eq(-Derivative(u(t, x), (t, 2)) + Derivative(u(t, x), (x, 2)), 0)]\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Euler%E2%80%93Lagrange_equation",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "53952c68c1365d019ae87a56ccbff809097f91303f88cd5ca3186537594952b9",
            "fields": [
                {
                    "name": "L",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "funcs",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "vars",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.euler.euler_equations",
                    "defaultValue": "sympy.calculus.euler.euler_equations",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.finite_diff_weights",
            "description": "Calculates the finite difference weights for an arbitrarily spaced\n    one-dimensional grid (``x_list``) for derivatives at ``x0`` of order\n    0, 1, ..., up to ``order`` using a recursive formula. Order of accuracy\n    is at least ``len(x_list) - order``, if ``x_list`` is defined correctly.\n    \n    Parameters\n    ==========\n    \n    order: int\n        Up to what derivative order weights should be calculated.\n        0 corresponds to interpolation.\n    x_list: sequence\n        Sequence of (unique) values for the independent variable.\n        It is useful (but not necessary) to order ``x_list`` from\n        nearest to furthest from ``x0``; see examples below.\n    x0: Number or Symbol\n        Root or value of the independent variable for which the finite\n        difference weights should be generated. Default is ``S.One``.\n    \n    Returns\n    =======\n    \n    list\n        A list of sublists, each corresponding to coefficients for\n        increasing derivative order, and each containing lists of\n        coefficients for increasing subsets of x_list.\n    \n    Examples\n    ========\n    \n    >>> from sympy import finite_diff_weights, S\n    >>> res = finite_diff_weights(1, [-S(1)/2, S(1)/2, S(3)/2, S(5)/2], 0)\n    >>> res\n    [[[1, 0, 0, 0],\n      [1/2, 1/2, 0, 0],\n      [3/8, 3/4, -1/8, 0],\n      [5/16, 15/16, -5/16, 1/16]],\n     [[0, 0, 0, 0],\n      [-1, 1, 0, 0],\n      [-1, 1, 0, 0],\n      [-23/24, 7/8, 1/8, -1/24]]]\n    >>> res[0][-1]  # FD weights for 0th derivative, using full x_list\n    [5/16, 15/16, -5/16, 1/16]\n    >>> res[1][-1]  # FD weights for 1st derivative\n    [-23/24, 7/8, 1/8, -1/24]\n    >>> res[1][-2]  # FD weights for 1st derivative, using x_list[:-1]\n    [-1, 1, 0, 0]\n    >>> res[1][-1][0]  # FD weight for 1st deriv. for x_list[0]\n    -23/24\n    >>> res[1][-1][1]  # FD weight for 1st deriv. for x_list[1], etc.\n    7/8\n    \n    Each sublist contains the most accurate formula at the end.\n    Note, that in the above example ``res[1][1]`` is the same as ``res[1][2]``.\n    Since res[1][2] has an order of accuracy of\n    ``len(x_list[:3]) - order = 3 - 1 = 2``, the same is true for ``res[1][1]``!\n    \n    >>> res = finite_diff_weights(1, [S(0), S(1), -S(1), S(2), -S(2)], 0)[1]\n    >>> res\n    [[0, 0, 0, 0, 0],\n     [-1, 1, 0, 0, 0],\n     [0, 1/2, -1/2, 0, 0],\n     [-1/2, 1, -1/3, -1/6, 0],\n     [0, 2/3, -2/3, -1/12, 1/12]]\n    >>> res[0]  # no approximation possible, using x_list[0] only\n    [0, 0, 0, 0, 0]\n    >>> res[1]  # classic forward step approximation\n    [-1, 1, 0, 0, 0]\n    >>> res[2]  # classic centered approximation\n    [0, 1/2, -1/2, 0, 0]\n    >>> res[3:]  # higher order approximations\n    [[-1/2, 1, -1/3, -1/6, 0], [0, 2/3, -2/3, -1/12, 1/12]]\n    \n    Let us compare this to a differently defined ``x_list``. Pay attention to\n    ``foo[i][k]`` corresponding to the gridpoint defined by ``x_list[k]``.\n    \n    >>> foo = finite_diff_weights(1, [-S(2), -S(1), S(0), S(1), S(2)], 0)[1]\n    >>> foo\n    [[0, 0, 0, 0, 0],\n     [-1, 1, 0, 0, 0],\n     [1/2, -2, 3/2, 0, 0],\n     [1/6, -1, 1/2, 1/3, 0],\n     [1/12, -2/3, 0, 2/3, -1/12]]\n    >>> foo[1]  # not the same and of lower accuracy as res[1]!\n    [-1, 1, 0, 0, 0]\n    >>> foo[2]  # classic double backward step approximation\n    [1/2, -2, 3/2, 0, 0]\n    >>> foo[4]  # the same as res[4]\n    [1/12, -2/3, 0, 2/3, -1/12]\n    \n    Note that, unless you plan on using approximations based on subsets of\n    ``x_list``, the order of gridpoints does not matter.\n    \n    The capability to generate weights at arbitrary points can be\n    used e.g. to minimize Runge's phenomenon by using Chebyshev nodes:\n    \n    >>> from sympy import cos, symbols, pi, simplify\n    >>> N, (h, x) = 4, symbols('h x')\n    >>> x_list = [x+h*cos(i*pi/(N)) for i in range(N,-1,-1)] # chebyshev nodes\n    >>> print(x_list)\n    [-h + x, -sqrt(2)*h/2 + x, x, sqrt(2)*h/2 + x, h + x]\n    >>> mycoeffs = finite_diff_weights(1, x_list, 0)[1][4]\n    >>> [simplify(c) for c in  mycoeffs] #doctest: +NORMALIZE_WHITESPACE\n    [(h**3/2 + h**2*x - 3*h*x**2 - 4*x**3)/h**4,\n    (-sqrt(2)*h**3 - 4*h**2*x + 3*sqrt(2)*h*x**2 + 8*x**3)/h**4,\n    (6*h**2*x - 8*x**3)/h**4,\n    (sqrt(2)*h**3 - 4*h**2*x - 3*sqrt(2)*h*x**2 + 8*x**3)/h**4,\n    (-h**3/2 + h**2*x + 3*h*x**2 - 4*x**3)/h**4]\n    \n    Notes\n    =====\n    \n    If weights for a finite difference approximation of 3rd order\n    derivative is wanted, weights for 0th, 1st and 2nd order are\n    calculated \"for free\", so are formulae using subsets of ``x_list``.\n    This is something one can take advantage of to save computational cost.\n    Be aware that one should define ``x_list`` from nearest to furthest from\n    ``x0``. If not, subsets of ``x_list`` will yield poorer approximations,\n    which might not grand an order of accuracy of ``len(x_list) - order``.\n    \n    See also\n    ========\n    \n    sympy.calculus.finite_diff.apply_finite_diff\n    \n    References\n    ==========\n    \n    .. [1] Generation of Finite Difference Formulas on Arbitrarily Spaced\n            Grids, Bengt Fornberg; Mathematics of computation; 51; 184;\n            (1988); 699-706; doi:10.1090/S0025-5718-1988-0935077-0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d8259936b43dc3126c18bbee3da074b6b431d5d5776e7ef75feb17a6b04b3403",
            "fields": [
                {
                    "name": "order",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_list",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x0",
                    "value": "One",
                    "defaultValue": "One",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.finite_diff.finite_diff_weights",
                    "defaultValue": "sympy.calculus.finite_diff.finite_diff_weights",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.is_convex",
            "description": "Determines the  convexity of the function passed in the argument.\n    \n    Parameters\n    ==========\n    \n    f : :py:class:`~.Expr`\n        The concerned function.\n    syms : Tuple of :py:class:`~.Symbol`\n        The variables with respect to which the convexity is to be determined.\n    domain : :py:class:`~.Interval`, optional\n        The domain over which the convexity of the function has to be checked.\n        If unspecified, S.Reals will be the default domain.\n    \n    Returns\n    =======\n    \n    bool\n        The method returns ``True`` if the function is convex otherwise it\n        returns ``False``.\n    \n    Raises\n    ======\n    \n    NotImplementedError\n        The check for the convexity of multivariate functions is not implemented yet.\n    \n    Notes\n    =====\n    \n    To determine concavity of a function pass `-f` as the concerned function.\n    To determine logarithmic convexity of a function pass `\\log(f)` as\n    concerned function.\n    To determine logarithmic concavity of a function pass `-\\log(f)` as\n    concerned function.\n    \n    Currently, convexity check of multivariate functions is not handled.\n    \n    Examples\n    ========\n    \n    >>> from sympy import is_convex, symbols, exp, oo, Interval\n    >>> x = symbols('x')\n    >>> is_convex(exp(x), x)\n    True\n    >>> is_convex(x**3, x, domain = Interval(-1, oo))\n    False\n    >>> is_convex(1/x**2, x, domain=Interval.open(0, oo))\n    True\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Convex_function\n    .. [2] http://www.ifp.illinois.edu/~angelia/L3_convfunc.pdf\n    .. [3] https://en.wikipedia.org/wiki/Logarithmically_convex_function\n    .. [4] https://en.wikipedia.org/wiki/Logarithmically_concave_function\n    .. [5] https://en.wikipedia.org/wiki/Concave_function",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e2a4c53d0f02fc04f519ad557808d2f97fe2b4ef3d2ca29ca16ef6056f85c56f",
            "fields": [
                {
                    "name": "f",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "syms",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "domain",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.util.is_convex",
                    "defaultValue": "sympy.calculus.util.is_convex",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.is_decreasing",
            "description": "Return whether the function is decreasing in the given interval.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function which is being checked.\n    interval : Set, optional\n        The range of values in which we are testing (defaults to set of\n        all real numbers).\n    symbol : Symbol, optional\n        The symbol present in expression which gets varied over the given range.\n    \n    Returns\n    =======\n    \n    Boolean\n        True if ``expression`` is decreasing (either strictly decreasing or\n        constant) in the given ``interval``, False otherwise.\n    \n    Examples\n    ========\n    \n    >>> from sympy import is_decreasing\n    >>> from sympy.abc import x, y\n    >>> from sympy import S, Interval, oo\n    >>> is_decreasing(1/(x**2 - 3*x), Interval.open(S(3)/2, 3))\n    True\n    >>> is_decreasing(1/(x**2 - 3*x), Interval.open(1.5, 3))\n    True\n    >>> is_decreasing(1/(x**2 - 3*x), Interval.Lopen(3, oo))\n    True\n    >>> is_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, S(3)/2))\n    False\n    >>> is_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, 1.5))\n    False\n    >>> is_decreasing(-x**2, Interval(-oo, 0))\n    False\n    >>> is_decreasing(-x**2 + y, Interval(-oo, 0), x)\n    False",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6cf2275a3dd4aa25fc2f42d00e05b42f6ce9aeeafe8ef3a289c1699d6c3f7e42",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.is_decreasing",
                    "defaultValue": "sympy.calculus.singularities.is_decreasing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.is_increasing",
            "description": "Return whether the function is increasing in the given interval.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function which is being checked.\n    interval : Set, optional\n        The range of values in which we are testing (defaults to set of\n        all real numbers).\n    symbol : Symbol, optional\n        The symbol present in expression which gets varied over the given range.\n    \n    Returns\n    =======\n    \n    Boolean\n        True if ``expression`` is increasing (either strictly increasing or\n        constant) in the given ``interval``, False otherwise.\n    \n    Examples\n    ========\n    \n    >>> from sympy import is_increasing\n    >>> from sympy.abc import x, y\n    >>> from sympy import S, Interval, oo\n    >>> is_increasing(x**3 - 3*x**2 + 4*x, S.Reals)\n    True\n    >>> is_increasing(-x**2, Interval(-oo, 0))\n    True\n    >>> is_increasing(-x**2, Interval(0, oo))\n    False\n    >>> is_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval(-2, 3))\n    False\n    >>> is_increasing(x**2 + y, Interval(1, 2), x)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "98903299ddd0188522f577b84327e07c63ff2c99fab00ae1441e6c655547fd69",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.is_increasing",
                    "defaultValue": "sympy.calculus.singularities.is_increasing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.is_monotonic",
            "description": "Return whether the function is monotonic in the given interval.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function which is being checked.\n    interval : Set, optional\n        The range of values in which we are testing (defaults to set of\n        all real numbers).\n    symbol : Symbol, optional\n        The symbol present in expression which gets varied over the given range.\n    \n    Returns\n    =======\n    \n    Boolean\n        True if ``expression`` is monotonic in the given ``interval``,\n        False otherwise.\n    \n    Raises\n    ======\n    \n    NotImplementedError\n        Monotonicity check has not been implemented for the queried function.\n    \n    Examples\n    ========\n    \n    >>> from sympy import is_monotonic\n    >>> from sympy.abc import x, y\n    >>> from sympy import S, Interval, oo\n    >>> is_monotonic(1/(x**2 - 3*x), Interval.open(S(3)/2, 3))\n    True\n    >>> is_monotonic(1/(x**2 - 3*x), Interval.open(1.5, 3))\n    True\n    >>> is_monotonic(1/(x**2 - 3*x), Interval.Lopen(3, oo))\n    True\n    >>> is_monotonic(x**3 - 3*x**2 + 4*x, S.Reals)\n    True\n    >>> is_monotonic(-x**2, S.Reals)\n    False\n    >>> is_monotonic(x**2 + y + 1, Interval(1, 2), x)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "71ed919a99ffd63ba6a2eba6561c88a23a15ae56ef3f156e2997a2132a8c9641",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.is_monotonic",
                    "defaultValue": "sympy.calculus.singularities.is_monotonic",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.is_strictly_decreasing",
            "description": "Return whether the function is strictly decreasing in the given interval.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function which is being checked.\n    interval : Set, optional\n        The range of values in which we are testing (defaults to set of\n        all real numbers).\n    symbol : Symbol, optional\n        The symbol present in expression which gets varied over the given range.\n    \n    Returns\n    =======\n    \n    Boolean\n        True if ``expression`` is strictly decreasing in the given ``interval``,\n        False otherwise.\n    \n    Examples\n    ========\n    \n    >>> from sympy import is_strictly_decreasing\n    >>> from sympy.abc import x, y\n    >>> from sympy import S, Interval, oo\n    >>> is_strictly_decreasing(1/(x**2 - 3*x), Interval.Lopen(3, oo))\n    True\n    >>> is_strictly_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, S(3)/2))\n    False\n    >>> is_strictly_decreasing(1/(x**2 - 3*x), Interval.Ropen(-oo, 1.5))\n    False\n    >>> is_strictly_decreasing(-x**2, Interval(-oo, 0))\n    False\n    >>> is_strictly_decreasing(-x**2 + y, Interval(-oo, 0), x)\n    False",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8ca4e43f709656ebe98cb53125e5335d444f3fe665c7ab713fea7145e255d17d",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.is_strictly_decreasing",
                    "defaultValue": "sympy.calculus.singularities.is_strictly_decreasing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.is_strictly_increasing",
            "description": "Return whether the function is strictly increasing in the given interval.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function which is being checked.\n    interval : Set, optional\n        The range of values in which we are testing (defaults to set of\n        all real numbers).\n    symbol : Symbol, optional\n        The symbol present in expression which gets varied over the given range.\n    \n    Returns\n    =======\n    \n    Boolean\n        True if ``expression`` is strictly increasing in the given ``interval``,\n        False otherwise.\n    \n    Examples\n    ========\n    \n    >>> from sympy import is_strictly_increasing\n    >>> from sympy.abc import x, y\n    >>> from sympy import Interval, oo\n    >>> is_strictly_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval.Ropen(-oo, -2))\n    True\n    >>> is_strictly_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval.Lopen(3, oo))\n    True\n    >>> is_strictly_increasing(4*x**3 - 6*x**2 - 72*x + 30, Interval.open(-2, 3))\n    False\n    >>> is_strictly_increasing(-x**2, Interval(0, oo))\n    False\n    >>> is_strictly_increasing(-x**2 + y, Interval(-oo, 0), x)\n    False",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "869ac561096da806881b868572be453ba77be154c5d2b0ef473bf7752a8aa3b5",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.is_strictly_increasing",
                    "defaultValue": "sympy.calculus.singularities.is_strictly_increasing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.maximum",
            "description": "Returns the maximum value of a function in the given domain.\n    \n    Parameters\n    ==========\n    \n    f : :py:class:`~.Expr`\n        The concerned function.\n    symbol : :py:class:`~.Symbol`\n        The variable for maximum value needs to be determined.\n    domain : :py:class:`~.Interval`\n        The domain over which the maximum have to be checked.\n        If unspecified, then the global maximum is returned.\n    \n    Returns\n    =======\n    \n    number\n        Maximum value of the function in given domain.\n    \n    Examples\n    ========\n    \n    >>> from sympy import Interval, Symbol, S, sin, cos, pi, maximum\n    >>> x = Symbol('x')\n    \n    >>> f = -x**2 + 2*x + 5\n    >>> maximum(f, x, S.Reals)\n    6\n    \n    >>> maximum(sin(x), x, Interval(-pi, pi/4))\n    sqrt(2)/2\n    \n    >>> maximum(sin(x)*cos(x), x)\n    1/2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e1bf445cc7f2e59e62aea6ef73c0beddf3f88bfc0f58b8f57cef3d851b805553",
            "fields": [
                {
                    "name": "f",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "domain",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.util.maximum",
                    "defaultValue": "sympy.calculus.util.maximum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.minimum",
            "description": "Returns the minimum value of a function in the given domain.\n    \n    Parameters\n    ==========\n    \n    f : :py:class:`~.Expr`\n        The concerned function.\n    symbol : :py:class:`~.Symbol`\n        The variable for minimum value needs to be determined.\n    domain : :py:class:`~.Interval`\n        The domain over which the minimum have to be checked.\n        If unspecified, then the global minimum is returned.\n    \n    Returns\n    =======\n    \n    number\n        Minimum value of the function in the given domain.\n    \n    Examples\n    ========\n    \n    >>> from sympy import Interval, Symbol, S, sin, cos, minimum\n    >>> x = Symbol('x')\n    \n    >>> f = x**2 + 2*x + 5\n    >>> minimum(f, x, S.Reals)\n    4\n    \n    >>> minimum(sin(x), x, Interval(2, 3))\n    sin(3)\n    \n    >>> minimum(sin(x)*cos(x), x)\n    -1/2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e407a5b00c30e98f60f296aba69e2aad26501132d50dc8d0d9993b9545c042d",
            "fields": [
                {
                    "name": "f",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "domain",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.util.minimum",
                    "defaultValue": "sympy.calculus.util.minimum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.not_empty_in",
            "description": "Finds the domain of the functions in ``finset_intersection`` in which the\n    ``finite_set`` is not-empty.\n    \n    Parameters\n    ==========\n    \n    finset_intersection : Intersection of FiniteSet\n        The unevaluated intersection of FiniteSet containing\n        real-valued functions with Union of Sets\n    syms : Tuple of symbols\n        Symbol for which domain is to be found\n    \n    Raises\n    ======\n    \n    NotImplementedError\n        The algorithms to find the non-emptiness of the given FiniteSet are\n        not yet implemented.\n    ValueError\n        The input is not valid.\n    RuntimeError\n        It is a bug, please report it to the github issue tracker\n        (https://github.com/sympy/sympy/issues).\n    \n    Examples\n    ========\n    \n    >>> from sympy import FiniteSet, Interval, not_empty_in, oo\n    >>> from sympy.abc import x\n    >>> not_empty_in(FiniteSet(x/2).intersect(Interval(0, 1)), x)\n    Interval(0, 2)\n    >>> not_empty_in(FiniteSet(x, x**2).intersect(Interval(1, 2)), x)\n    Union(Interval(1, 2), Interval(-sqrt(2), -1))\n    >>> not_empty_in(FiniteSet(x**2/(x + 2)).intersect(Interval(1, oo)), x)\n    Union(Interval.Lopen(-2, -1), Interval(2, oo))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09549ca65ac47dc50ffacefd8df216b93ce936c1ba0014cf98fa3640a85fac48",
            "fields": [
                {
                    "name": "finset_intersection",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "syms",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.util.not_empty_in",
                    "defaultValue": "sympy.calculus.util.not_empty_in",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.periodicity",
            "description": "Tests the given function for periodicity in the given symbol.\n    \n    Parameters\n    ==========\n    \n    f : :py:class:`~.Expr`\n        The concerned function.\n    symbol : :py:class:`~.Symbol`\n        The variable for which the period is to be determined.\n    check : bool, optional\n        The flag to verify whether the value being returned is a period or not.\n    \n    Returns\n    =======\n    \n    period\n        The period of the function is returned.\n        ``None`` is returned when the function is aperiodic or has a complex period.\n        The value of $0$ is returned as the period of a constant function.\n    \n    Raises\n    ======\n    \n    NotImplementedError\n        The value of the period computed cannot be verified.\n    \n    \n    Notes\n    =====\n    \n    Currently, we do not support functions with a complex period.\n    The period of functions having complex periodic values such\n    as ``exp``, ``sinh`` is evaluated to ``None``.\n    \n    The value returned might not be the \"fundamental\" period of the given\n    function i.e. it may not be the smallest periodic value of the function.\n    \n    The verification of the period through the ``check`` flag is not reliable\n    due to internal simplification of the given expression. Hence, it is set\n    to ``False`` by default.\n    \n    Examples\n    ========\n    >>> from sympy import periodicity, Symbol, sin, cos, tan, exp\n    >>> x = Symbol('x')\n    >>> f = sin(x) + sin(2*x) + sin(3*x)\n    >>> periodicity(f, x)\n    2*pi\n    >>> periodicity(sin(x)*cos(x), x)\n    pi\n    >>> periodicity(exp(tan(2*x) - 1), x)\n    pi/2\n    >>> periodicity(sin(4*x)**cos(2*x), x)\n    pi\n    >>> periodicity(exp(x), x)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "18c475141ac844cc9ea8b3adc540756eae30c80bb6b9fcf8f2f7d21ca9e10f44",
            "fields": [
                {
                    "name": "f",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "check",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.util.periodicity",
                    "defaultValue": "sympy.calculus.util.periodicity",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.singularities",
            "description": "Find singularities of a given function.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function in which singularities need to be found.\n    symbol : Symbol\n        The symbol over the values of which the singularity in\n        expression in being searched for.\n    \n    Returns\n    =======\n    \n    Set\n        A set of values for ``symbol`` for which ``expression`` has a\n        singularity. An ``EmptySet`` is returned if ``expression`` has no\n        singularities for any given value of ``Symbol``.\n    \n    Raises\n    ======\n    \n    NotImplementedError\n        Methods for determining the singularities of this function have\n        not been developed.\n    \n    Notes\n    =====\n    \n    This function does not find non-isolated singularities\n    nor does it find branch points of the expression.\n    \n    Currently supported functions are:\n        - univariate continuous (real or complex) functions\n    \n    References\n    ==========\n    \n    .. [1] https://en.wikipedia.org/wiki/Mathematical_singularity\n    \n    Examples\n    ========\n    \n    >>> from sympy import singularities, Symbol, log\n    >>> x = Symbol('x', real=True)\n    >>> y = Symbol('y', real=False)\n    >>> singularities(x**2 + x + 1, x)\n    EmptySet\n    >>> singularities(1/(x + 1), x)\n    {-1}\n    >>> singularities(1/(y**2 + 1), y)\n    {-I, I}\n    >>> singularities(1/(y**3 + 1), y)\n    {-1, 1/2 - sqrt(3)*I/2, 1/2 + sqrt(3)*I/2}\n    >>> singularities(log(x), x)\n    {0}",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "86302506454ef1b470ea6a6cd0917bfe27db12ec9345257b3fe79a53a27fc1e2",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "domain",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.singularities",
                    "defaultValue": "sympy.calculus.singularities.singularities",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.stationary_points",
            "description": "Returns the stationary points of a function (where derivative of the\n    function is 0) in the given domain.\n    \n    Parameters\n    ==========\n    \n    f : :py:class:`~.Expr`\n        The concerned function.\n    symbol : :py:class:`~.Symbol`\n        The variable for which the stationary points are to be determined.\n    domain : :py:class:`~.Interval`\n        The domain over which the stationary points have to be checked.\n        If unspecified, ``S.Reals`` will be the default domain.\n    \n    Returns\n    =======\n    \n    Set\n        A set of stationary points for the function. If there are no\n        stationary point, an :py:class:`~.EmptySet` is returned.\n    \n    Examples\n    ========\n    \n    >>> from sympy import Interval, Symbol, S, sin, pi, pprint, stationary_points\n    >>> x = Symbol('x')\n    \n    >>> stationary_points(1/x, x, S.Reals)\n    EmptySet\n    \n    >>> pprint(stationary_points(sin(x), x), use_unicode=False)\n              pi                              3*pi\n    {2*n*pi + -- | n in Integers} U {2*n*pi + ---- | n in Integers}\n              2                                2\n    \n    >>> stationary_points(sin(x),x, Interval(0, 4*pi))\n    {pi/2, 3*pi/2, 5*pi/2, 7*pi/2}",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9cbffd734199099951eb983e5cada1db9839714ec1309e24d30e0b692ace230e",
            "fields": [
                {
                    "name": "f",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "domain",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.util.stationary_points",
                    "defaultValue": "sympy.calculus.util.stationary_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.singularities.filldedent",
            "description": "Strips leading and trailing empty lines from a copy of ``s``, then dedents,\n    fills and returns it.\n    \n    Empty line stripping serves to deal with docstrings like this one that\n    start with a newline after the initial triple quote, inserting an empty\n    line at the beginning of the string.\n    \n    Additional keyword arguments will be passed to ``textwrap.fill()``.\n    \n    See Also\n    ========\n    strlines, rawlines",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa65a325e246a88d86f37c734aa96a1c9ddf90c7d1ae69fae7e5cddbb2ec8bb4",
            "fields": [
                {
                    "name": "s",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "w",
                    "value": "70",
                    "defaultValue": "70",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.utilities.misc.filldedent",
                    "defaultValue": "sympy.utilities.misc.filldedent",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.calculus.singularities.monotonicity_helper",
            "description": "Helper function for functions checking function monotonicity.\n    \n    Parameters\n    ==========\n    \n    expression : Expr\n        The target function which is being checked\n    predicate : function\n        The property being tested for. The function takes in an integer\n        and returns a boolean. The integer input is the derivative and\n        the boolean result should be true if the property is being held,\n        and false otherwise.\n    interval : Set, optional\n        The range of values in which we are testing, defaults to all reals.\n    symbol : Symbol, optional\n        The symbol present in expression which gets varied over the given range.\n    \n    It returns a boolean indicating whether the interval in which\n    the function's derivative satisfies given predicate is a superset\n    of the given interval.\n    \n    Returns\n    =======\n    \n    Boolean\n        True if ``predicate`` is true for all the derivatives when ``symbol``\n        is varied in ``range``, False otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "106e97ce24a61be16c5347c35b270e2be88244d7ca6ffcc4669c91ce8dbf00aa",
            "fields": [
                {
                    "name": "expression",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "predicate",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "Reals",
                    "defaultValue": "Reals",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "symbol",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.calculus.singularities.monotonicity_helper",
                    "defaultValue": "sympy.calculus.singularities.monotonicity_helper",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}