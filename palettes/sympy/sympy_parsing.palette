{
    "modelData": {
        "filePath": "sympy_parsing.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "Used for translating a string into a SymPy expression.",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "tmp",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "d604325057ced24fd7dbf9c149d7b2d4b2117c1a9a4e3975bee526147c025ed5",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695025467.152772,
        "numLGNodes": 1
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "sympy.parsing.parse_expr",
            "description": "Converts the string ``s`` to a SymPy expression, in ``local_dict``.\n    \n    Parameters\n    ==========\n    \n    s : str\n        The string to parse.\n    \n    local_dict : dict, optional\n        A dictionary of local variables to use when parsing.\n    \n    global_dict : dict, optional\n        A dictionary of global variables. By default, this is initialized\n        with ``from sympy import *``; provide this parameter to override\n        this behavior (for instance, to parse ``\"Q & S\"``).\n    \n    transformations : tuple or str\n        A tuple of transformation functions used to modify the tokens of the\n        parsed expression before evaluation. The default transformations\n        convert numeric literals into their SymPy equivalents, convert\n        undefined variables into SymPy symbols, and allow the use of standard\n        mathematical factorial notation (e.g. ``x!``). Selection via\n        string is available (see below).\n    \n    evaluate : bool, optional\n        When False, the order of the arguments will remain as they were in the\n        string and automatic simplification that would normally occur is\n        suppressed. (see examples)\n    \n    Examples\n    ========\n    \n    >>> from sympy.parsing.sympy_parser import parse_expr\n    >>> parse_expr(\"1/2\")\n    1/2\n    >>> type(_)\n    <class 'sympy.core.numbers.Half'>\n    >>> from sympy.parsing.sympy_parser import standard_transformations,\\\n    ... implicit_multiplication_application\n    >>> transformations = (standard_transformations +\n    ...     (implicit_multiplication_application,))\n    >>> parse_expr(\"2x\", transformations=transformations)\n    2*x\n    \n    When evaluate=False, some automatic simplifications will not occur:\n    \n    >>> parse_expr(\"2**3\"), parse_expr(\"2**3\", evaluate=False)\n    (8, 2**3)\n    \n    In addition the order of the arguments will not be made canonical.\n    This feature allows one to tell exactly how the expression was entered:\n    \n    >>> a = parse_expr('1 + x', evaluate=False)\n    >>> b = parse_expr('x + 1', evaluate=0)\n    >>> a == b\n    False\n    >>> a.args\n    (1, x)\n    >>> b.args\n    (x, 1)\n    \n    Note, however, that when these expressions are printed they will\n    appear the same:\n    \n    >>> assert str(a) == str(b)\n    \n    As a convenience, transformations can be seen by printing ``transformations``:\n    \n    >>> from sympy.parsing.sympy_parser import transformations\n    \n    >>> print(transformations)\n    0: lambda_notation\n    1: auto_symbol\n    2: repeated_decimals\n    3: auto_number\n    4: factorial_notation\n    5: implicit_multiplication_application\n    6: convert_xor\n    7: implicit_application\n    8: implicit_multiplication\n    9: convert_equals_signs\n    10: function_exponentiation\n    11: rationalize\n    \n    The ``T`` object provides a way to select these transformations:\n    \n    >>> from sympy.parsing.sympy_parser import T\n    \n    If you print it, you will see the same list as shown above.\n    \n    >>> str(T) == str(transformations)\n    True\n    \n    Standard slicing will return a tuple of transformations:\n    \n    >>> T[:5] == standard_transformations\n    True\n    \n    So ``T`` can be used to specify the parsing transformations:\n    \n    >>> parse_expr(\"2x\", transformations=T[:5])\n    Traceback (most recent call last):\n    ...\n    SyntaxError: invalid syntax\n    >>> parse_expr(\"2x\", transformations=T[:6])\n    2*x\n    >>> parse_expr('.3', transformations=T[3, 11])\n    3/10\n    >>> parse_expr('.3x', transformations=T[:])\n    3*x/10\n    \n    As a further convenience, strings 'implicit' and 'all' can be used\n    to select 0-5 and all the transformations, respectively.\n    \n    >>> parse_expr('.3x', transformations='all')\n    3*x/10\n    \n    See Also\n    ========\n    \n    stringify_expr, eval_expr, standard_transformations,\n    implicit_multiplication_application",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5faae92fb2d0b8b9e3a36dcf10f7ab198fe476621b44c89fba60de9a8f067b74",
            "fields": [
                {
                    "name": "s",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "local_dict",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transformations",
                    "value": "'tuple'",
                    "defaultValue": "'tuple'",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "global_dict",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "evaluate",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "sympy.parsing.sympy_parser.parse_expr",
                    "defaultValue": "sympy.parsing.sympy_parser.parse_expr",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}