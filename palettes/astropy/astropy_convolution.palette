{
    "modelData": {
        "filePath": "astropy_convolution.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.5.5",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "astropy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "9a39e920c005b9d711185826112bcc1ee61112a1ea8da75b395b814b04f18cc9",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1752679300.254743,
        "numLGNodes": 56
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hre99em9",
            "name": "AiryDisk2DKernel.__init__",
            "description": "\n2D Airy disk kernel.\n    \n    This kernel models the diffraction pattern of a circular aperture.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    radius : float\n        The radius of the Airy disk kernel (radius of the first zero).\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*radius + 1\u230b.\n    y_size : int, optional\n        Size in y direction of the kernel array. Default = \u230a8*radius + 1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Box2DKernel, Tophat2DKernel, RickerWavelet2DKernel,\n    Ring2DKernel, TrapezoidDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import AiryDisk2DKernel\n        airydisk_2D_kernel = AiryDisk2DKernel(10)\n        plt.imshow(airydisk_2D_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c256793c9e6b6543bebe9bb2cb5a07e6fc8db1e8a0be4a563a474e6d6e7c94e6",
            "fields": [
                {
                    "id": "qctrjr82",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to AiryDisk2DKernel object",
                    "type": "Object:astropy.convolution.kernels.AiryDisk2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gv9pcm2e",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "The radius of the Airy disk kernel (radius of the first zero).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "byjn27il",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h08yb_l9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.AiryDisk2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.AiryDisk2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d608xmq8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5gcm85w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kdzg0qdf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swkjxlo5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.AiryDisk2DKernel",
                    "defaultValue": "astropy.convolution.kernels.AiryDisk2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "naa306l2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zg0kuoxq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "o610t9h9",
            "name": "AiryDisk2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0111b5ccd6bfe9fc99912f4fd6bdfc2b98bb54181153d8523957433eceb2366",
            "fields": [
                {
                    "id": "by9uivo4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.AiryDisk2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.AiryDisk2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xswnvivx",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0r1ds8c3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.AiryDisk2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.AiryDisk2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "khxg89lx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4wbxkes7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lcxlxej5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2b6p3paa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.AiryDisk2DKernel",
                    "defaultValue": "astropy.convolution.kernels.AiryDisk2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eahygosm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jza4norz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dnvdasub",
            "name": "Box1DKernel.__init__",
            "description": "\n1D Box filter kernel.\n    \n    The Box filter or running mean is a smoothing filter. It is not isotropic\n    and can produce artifacts when applied repeatedly to the same data.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    By default the Box kernel uses the ``linear_interp`` discretization mode,\n    which allows non-shifting, even-sized kernels.  This is achieved by\n    weighting the edge pixels with 1/2. E.g a Box kernel with an effective\n    smoothing of 4 pixel would have the following array: [0.5, 1, 1, 1, 0.5].\n    \n    Parameters\n    ----------\n    width : number\n        Width of the filter kernel.\n    mode : {'linear_interp', 'center', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'linear_interp' (default)\n                Discretize model by linearly interpolating\n                between the values at the corners of the bin.\n            * 'center'\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian1DKernel, Trapezoid1DKernel, RickerWavelet1DKernel\n    \n    Examples\n    --------\n    Kernel response function:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Box1DKernel\n        box_1D_kernel = Box1DKernel(9)\n        plt.plot(box_1D_kernel, drawstyle='steps')\n        plt.xlim(-1, 9)\n        plt.xlabel('x [pixels]')\n        plt.ylabel('value')\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ded188aa6f4ab13425db33fde19206a69d5200b7c7d68a33e152464499fe2ddc",
            "fields": [
                {
                    "id": "8hvibuqf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Box1DKernel object",
                    "type": "Object:astropy.convolution.kernels.Box1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2um2o6o0",
                    "encoding": "",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the filter kernel.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wlz0q8x3",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7dk66d_2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Box1DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Box1DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oczvlrld",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsmqrjj2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ld455uka",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6tyuuzc8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Box1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Box1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "75f1omca",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6yxf3bqv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4o_phlm7",
            "name": "Box1DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "54155bad3f161b66d6d7c98eadbb7df70ae6da7b93c070fd9adc4016de5be9d1",
            "fields": [
                {
                    "id": "1q384o0t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Box1DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Box1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73i2ud8x",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70j89h3n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Box1DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Box1DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tjrpdcwg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k0f6311h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1d9io3f7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zxou2t7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Box1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Box1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0hllruj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sfwv4sg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_lii1vpv",
            "name": "Box2DKernel.__init__",
            "description": "\n2D Box filter kernel.\n    \n    The Box filter or running mean is a smoothing filter. It is not isotropic\n    and can produce artifacts when applied repeatedly to the same data.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    By default the Box kernel uses the ``linear_interp`` discretization mode,\n    which allows non-shifting, even-sized kernels.  This is achieved by\n    weighting the edge pixels with 1/2.\n    \n    Parameters\n    ----------\n    width : number\n        Width of the filter kernel.\n    mode : {'linear_interp', 'center', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'linear_interp' (default)\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'center'\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Tophat2DKernel, RickerWavelet2DKernel, Ring2DKernel,\n    TrapezoidDisk2DKernel, AiryDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Box2DKernel\n        box_2D_kernel = Box2DKernel(9)\n        plt.imshow(box_2D_kernel, interpolation='none', origin='lower',\n                   vmin=0.0, vmax=0.015)\n        plt.xlim(-1, 9)\n        plt.ylim(-1, 9)\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "62d4407e37fb6a7769fb4b90388f71a841bb4a4645ddf2bd6ff72096906f0658",
            "fields": [
                {
                    "id": "kk60rr2c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Box2DKernel object",
                    "type": "Object:astropy.convolution.kernels.Box2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "orqz6m8n",
                    "encoding": "",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the filter kernel.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "71vns4rt",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9zew5bb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Box2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Box2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1bl44fy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "02r81f6u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aj_l3f38",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jsofjugy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Box2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Box2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gfxk7rnx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "enb5czd8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ne37qqzh",
            "name": "Box2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "908a8196cdd350602f8facf20b0c00ffe45b60d9d34accef163f7d7deda82660",
            "fields": [
                {
                    "id": "sp_26sde",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Box2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Box2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nwn6y_or",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7jmrij5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Box2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Box2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_kfxzeg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3m7bwxyj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zy5vblwj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkpbzp3k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Box2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Box2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_xgy6iq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bq703q6_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qxhoesve",
            "name": "CustomKernel.__init__",
            "description": "\nCreate filter kernel from list or array.\n    \n    Parameters\n    ----------\n    array : list or array\n        Filter kernel array. Size must be odd.\n    \n    Raises\n    ------\n    TypeError\n        If array is not a list or array.\n    `~astropy.convolution.KernelSizeError`\n        If array size is even.\n    \n    See Also\n    --------\n    Model2DKernel, Model1DKernel\n    \n    Examples\n    --------\n    Define one dimensional array:\n    \n        >>> from astropy.convolution.kernels import CustomKernel\n        >>> import numpy as np\n        >>> array = np.array([1, 2, 3, 2, 1])\n        >>> kernel = CustomKernel(array)\n        >>> kernel.dimension\n        1\n    \n    Define two dimensional array:\n    \n        >>> array = np.array([[1, 1, 1], [1, 2, 1], [1, 1, 1]])\n        >>> kernel = CustomKernel(array)\n        >>> kernel.dimension\n        2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa437939c8ff5f6d6664227e16b7bcf87c5f1edb5fb0dd48e33a322bf9e667aa",
            "fields": [
                {
                    "id": "bbmm5dl_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to CustomKernel object",
                    "type": "Object:astropy.convolution.kernels.CustomKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9pn3uztr",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Filter kernel array. Size must be odd.",
                    "type": "list or array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7m3ral7t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.CustomKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.CustomKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8lt8i0a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y92lqdt9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oat6ueum",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "efygcfuh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.CustomKernel",
                    "defaultValue": "astropy.convolution.kernels.CustomKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5bu__8l2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eo6zsejn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oaflwck3",
            "name": "CustomKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "916c817840aedb5f8f1b847cda0637a4aa8ab8115a93e98422a3b8ff68556262",
            "fields": [
                {
                    "id": "8oq6w1wk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.CustomKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.CustomKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4e106nu",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "okggsr_e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.CustomKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.CustomKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bruqpxlq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhn3_jql",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nxceaxsz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5k_jcw8p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.CustomKernel",
                    "defaultValue": "astropy.convolution.kernels.CustomKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hki6w19h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28_4pp2j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2l2he4o3",
            "name": "Gaussian1DKernel.__init__",
            "description": "\n1D Gaussian filter kernel.\n    \n    The Gaussian filter is a filter with great smoothing properties. It is\n    isotropic and does not produce artifacts.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    stddev : number\n        Standard deviation of the Gaussian kernel.\n    x_size : int, optional\n        Size of the kernel array. Default = \u230a8*stddev+1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by linearly interpolating\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin. Very slow.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10. If the factor\n        is too large, evaluation can be very slow.\n    \n    See Also\n    --------\n    Box1DKernel, Trapezoid1DKernel, RickerWavelet1DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Gaussian1DKernel\n        gauss_1D_kernel = Gaussian1DKernel(10)\n        plt.plot(gauss_1D_kernel, drawstyle='steps')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('value')\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1e159d9631a8aa4387465d96441e7ce6e6835d587694c9843482d00258f08a05",
            "fields": [
                {
                    "id": "29n79hbi",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Gaussian1DKernel object",
                    "type": "Object:astropy.convolution.kernels.Gaussian1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wp634gcg",
                    "encoding": "",
                    "name": "stddev",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation of the Gaussian kernel.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yajhc3gy",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fsmg9tsp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Gaussian1DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Gaussian1DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmsdjmnh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3897s74",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2a9mdsld",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zw98_3u6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Gaussian1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Gaussian1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kaccglz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vw8q98_b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ng9hhhll",
            "name": "Gaussian1DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "06b9dde7e39e41c2707a7bf6b5dba8f461beb0c1db10faf1af93a2e79b6edded",
            "fields": [
                {
                    "id": "xbyl2r33",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Gaussian1DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Gaussian1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_40bzpfn",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qh_tzkgh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Gaussian1DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Gaussian1DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jobjp15p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31y82nwu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fqrzapn5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af9o7764",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Gaussian1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Gaussian1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eusjymgb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2ts42xl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vd30aft6",
            "name": "Gaussian2DKernel.__init__",
            "description": "\n2D Gaussian filter kernel.\n    \n    The Gaussian filter is a filter with great smoothing properties. It is\n    isotropic and does not produce artifacts.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    x_stddev : float\n        Standard deviation of the Gaussian in x before rotating by theta.\n    y_stddev : float\n        Standard deviation of the Gaussian in y before rotating by theta.\n    theta : float or `~astropy.units.Quantity` ['angle']\n        Rotation angle. If passed as a float, it is assumed to be in radians.\n        The rotation angle increases counterclockwise.\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*stddev + 1\u230b.\n    y_size : int, optional\n        Size in y direction of the kernel array. Default = \u230a8*stddev + 1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Box2DKernel, Tophat2DKernel, RickerWavelet2DKernel, Ring2DKernel,\n    TrapezoidDisk2DKernel, AiryDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Gaussian2DKernel\n        gaussian_2D_kernel = Gaussian2DKernel(10)\n        plt.imshow(gaussian_2D_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a4e218699b7f0b511797cf0882de2c6c1a6acb8fb8706c7319ddc552e8f7c10e",
            "fields": [
                {
                    "id": "havr2yjk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Gaussian2DKernel object",
                    "type": "Object:astropy.convolution.kernels.Gaussian2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4eht17yx",
                    "encoding": "",
                    "name": "x_stddev",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation of the Gaussian in x before rotating by theta.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy7_h0wq",
                    "encoding": "",
                    "name": "y_stddev",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation of the Gaussian in y before rotating by theta.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5r93m4i8",
                    "encoding": "",
                    "name": "theta",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Rotation angle. If passed as a float, it is assumed to be in radians.\nThe rotation angle increases counterclockwise.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pdwttskd",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6v7v5h4i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Gaussian2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Gaussian2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0vn96yc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40d2vlk7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "whbatk7m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zes7j9oe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Gaussian2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Gaussian2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oq_jmshe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0pkwyl9u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g6eiwvrc",
            "name": "Gaussian2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "432f533ad772012af0e5436c08024b5c70057a3112601a12c176a1252df4ac42",
            "fields": [
                {
                    "id": "nyiji1_1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Gaussian2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Gaussian2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yn_zswwc",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mh5twkj9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Gaussian2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Gaussian2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8wgubqc4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lasxaa5r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1kmo47pd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fjl49of0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Gaussian2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Gaussian2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xpqenor1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08q2iecj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hk870dh9",
            "name": "Kernel.__init__",
            "description": "\nConvolution kernel base class.\n    \n    Parameters\n    ----------\n    array : ndarray\n        Kernel array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6e346761256b7d5b30fa5a47288f869e3579fe3048c96f985b0adf52c5982e2a",
            "fields": [
                {
                    "id": "tire7as7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Kernel object",
                    "type": "Object:astropy.convolution.core.Kernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6cfzuoy",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4cz123hl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.Kernel.__init__",
                    "defaultValue": "astropy.convolution.core.Kernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "afxsurl2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nslz46v_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "685dc2tx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7op1b00v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core.Kernel",
                    "defaultValue": "astropy.convolution.core.Kernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnd4qky6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pembe1zy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lms6ks2w",
            "name": "Kernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e3402e1938977238e13efd66ece4f2a19c8daa28c3449a439c457f0573bef06c",
            "fields": [
                {
                    "id": "1qjjt7mw",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.core.Kernel.normalize object",
                    "type": "Object:astropy.convolution.core.Kernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfx9xacm",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1aeo14a0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.Kernel.normalize",
                    "defaultValue": "astropy.convolution.core.Kernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qpb_k7lh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xopl8q_l",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4_86xodg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cygbivpf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core.Kernel",
                    "defaultValue": "astropy.convolution.core.Kernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "th1ky598",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xo83rn92",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vocosr5_",
            "name": "Kernel1D.__init__",
            "description": "\nBase class for 1D filter kernels.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.FittableModel`\n        Model to be evaluated.\n    x_size : int or None, optional\n        Size of the kernel array. Default = \u230a8*width+1\u230b.\n        Only used if ``array`` is None.\n    array : ndarray or None, optional\n        Kernel array.\n    width : number\n        Width of the filter kernel.\n    mode : str, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by linearly interpolating\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d6cdaa99927c25156f412337959dfac3654ea654278a1ab47f9a479f01b0707",
            "fields": [
                {
                    "id": "tgrvaytz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Kernel1D object",
                    "type": "Object:astropy.convolution.core.Kernel1D",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0bs4p5f4",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Model to be evaluated.",
                    "type": "astropy.modeling.FittableModel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sua8kgdh",
                    "encoding": "",
                    "name": "x_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of the kernel array. Default = \u230a8*width+1\u230b.\nOnly used if ``array`` is None.",
                    "type": "int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s68vgqtn",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel array.",
                    "type": "ndarray or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbpb3hq4",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eecupp5z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.Kernel1D.__init__",
                    "defaultValue": "astropy.convolution.core.Kernel1D.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4lebapb5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kemujd1i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "40qf8f2h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6yk8m6pb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core.Kernel1D",
                    "defaultValue": "astropy.convolution.core.Kernel1D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ggpycef",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mae0vn7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "s2f4wssd",
            "name": "Kernel1D.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b36e4b513f631ca52fe4aa348be35d27d1613be9fd7eed67355774a74068907b",
            "fields": [
                {
                    "id": "3vngo_f6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.core.Kernel1D.normalize object",
                    "type": "Object:astropy.convolution.core.Kernel1D",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljgiyvoc",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dx5oltvu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.Kernel1D.normalize",
                    "defaultValue": "astropy.convolution.core.Kernel1D.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7pss_p0v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mj57x_w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uspagy4e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uuoa7v39",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core.Kernel1D",
                    "defaultValue": "astropy.convolution.core.Kernel1D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bg3mohob",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nqqgy1o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "05rijj8g",
            "name": "Kernel2D.__init__",
            "description": "\nBase class for 2D filter kernels.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.FittableModel`\n        Model to be evaluated.\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*width + 1\u230b.\n        Only used if ``array`` is None.\n    y_size : int, optional\n        Size in y direction of the kernel array. Default = \u230a8*width + 1\u230b.\n        Only used if ``array`` is None,\n    array : ndarray or None, optional\n        Kernel array. Default is None.\n    mode : str, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    width : number\n        Width of the filter kernel.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9f5d3b28e9159fd43863276fcfa4589b7f4ffb6048f3beade30ba3b2f1c282c7",
            "fields": [
                {
                    "id": "v3znkn70",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Kernel2D object",
                    "type": "Object:astropy.convolution.core.Kernel2D",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ot1bs4e",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Model to be evaluated.",
                    "type": "astropy.modeling.FittableModel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mrutth7c",
                    "encoding": "",
                    "name": "x_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size in x direction of the kernel array. Default = \u230a8*width + 1\u230b.\nOnly used if ``array`` is None.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_9tb9h6",
                    "encoding": "",
                    "name": "y_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size in y direction of the kernel array. Default = \u230a8*width + 1\u230b.\nOnly used if ``array`` is None,",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_xko3hm",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel array. Default is None.",
                    "type": "ndarray or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "768e4f_b",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vik71fj4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.Kernel2D.__init__",
                    "defaultValue": "astropy.convolution.core.Kernel2D.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oweg017l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pvv92i7n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cnomvbu2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "55orrgnq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core.Kernel2D",
                    "defaultValue": "astropy.convolution.core.Kernel2D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_ezsv0m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sqmyhfac",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "szptdgax",
            "name": "Kernel2D.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4d61c1a41d0edde29fb9013408b74febd8d45a222176bd5b0145f0ae4d5056b6",
            "fields": [
                {
                    "id": "v_f4s3x5",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.core.Kernel2D.normalize object",
                    "type": "Object:astropy.convolution.core.Kernel2D",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fjvki3v",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zoyw8au9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.Kernel2D.normalize",
                    "defaultValue": "astropy.convolution.core.Kernel2D.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "drua6h7e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2i3qxmit",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e0csv1ow",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6t8cgnz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core.Kernel2D",
                    "defaultValue": "astropy.convolution.core.Kernel2D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5r3fq7i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_8patu9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qqvyh79h",
            "name": "KernelArithmeticError.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12276ffcb607bab75d02bbf2785c4323182744a38b762457be2da86be3c0f075",
            "fields": [
                {
                    "id": "8p903d2o",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.utils.KernelArithmeticError.with_traceback object",
                    "type": "Object:astropy.convolution.utils.KernelArithmeticError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uxz7q7a",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "je3vdfma",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.utils.KernelArithmeticError.with_traceback",
                    "defaultValue": "astropy.convolution.utils.KernelArithmeticError.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "itc3er3y",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zd_pinuw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e1yryp3g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7uaq3_yf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.utils.KernelArithmeticError",
                    "defaultValue": "astropy.convolution.utils.KernelArithmeticError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0e404y54",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mt_e7ydf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dzm9r3lv",
            "name": "KernelError.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41a0fce0c132b8ace942246ebd90ba40317bb02a8882ec2c698ba0eba890c204",
            "fields": [
                {
                    "id": "42i5kic1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.utils.KernelError.with_traceback object",
                    "type": "Object:astropy.convolution.utils.KernelError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u41hropp",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nuz_0qhm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.utils.KernelError.with_traceback",
                    "defaultValue": "astropy.convolution.utils.KernelError.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xsc1dpav",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "btsmz8_k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6gw5k3r9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7arwx5yi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.utils.KernelError",
                    "defaultValue": "astropy.convolution.utils.KernelError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4xsq5fh8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_1wfwvt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8pxkkkxs",
            "name": "KernelSizeError.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "df74fd397376a847781c55274e846f8bb7afb0d097aa6093abeb9f53d17d87d7",
            "fields": [
                {
                    "id": "qlfl3xzx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.utils.KernelSizeError.with_traceback object",
                    "type": "Object:astropy.convolution.utils.KernelSizeError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cl58ys39",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tmj1tphx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.utils.KernelSizeError.with_traceback",
                    "defaultValue": "astropy.convolution.utils.KernelSizeError.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpe0n02f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3cnweprq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4dl_9vdq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a7zi8cg6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.utils.KernelSizeError",
                    "defaultValue": "astropy.convolution.utils.KernelSizeError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3gdqsnmd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b6oyytrj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6lwu73sy",
            "name": "Model1DKernel.__init__",
            "description": "\nCreate kernel from 1D model.\n    \n    The model has to be centered on x = 0.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.Fittable1DModel`\n        Kernel response function model\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*width +1\u230b.\n        Must be odd.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by linearly interpolating\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    Raises\n    ------\n    TypeError\n        If model is not an instance of `~astropy.modeling.Fittable1DModel`\n    \n    See Also\n    --------\n    Model2DKernel : Create kernel from `~astropy.modeling.Fittable2DModel`\n    CustomKernel : Create kernel from list or array\n    \n    Examples\n    --------\n    Define a Gaussian1D model:\n    \n        >>> from astropy.modeling.models import Gaussian1D\n        >>> from astropy.convolution.kernels import Model1DKernel\n        >>> gauss = Gaussian1D(1, 0, 2)\n    \n    And create a custom one dimensional kernel from it:\n    \n        >>> gauss_kernel = Model1DKernel(gauss, x_size=9)\n    \n    This kernel can now be used like a usual Astropy kernel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3d1212c88016c4ce78c1ffd8f7bfa78e416e7fea380fa968c6b488ef3a5eddfa",
            "fields": [
                {
                    "id": "unpnu_1g",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Model1DKernel object",
                    "type": "Object:astropy.convolution.kernels.Model1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0aqiyc5",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel response function model",
                    "type": "astropy.modeling.Fittable1DModel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdxtsu96",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ws7rmc81",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Model1DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Model1DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_zfrb_l4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdrwdvz6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b8capj2h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7dvhnxep",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Model1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Model1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yyn2q1gd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "us61s1ce",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "snyjbues",
            "name": "Model1DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6024df9c26264a3300b47e1f69ad2f2be981b75c96f142b7ca35f0d73ae97fa6",
            "fields": [
                {
                    "id": "2mqhwd2q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Model1DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Model1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4cwv2i6c",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5araad2u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Model1DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Model1DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbf63gop",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mh1hqsuz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jjp03_ij",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "343548go",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Model1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Model1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybgm4r3m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3chqv2f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lei7qmfs",
            "name": "Model2DKernel.__init__",
            "description": "\nCreate kernel from 2D model.\n    \n    The model has to be centered on x = 0 and y = 0.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.Fittable2DModel`\n        Kernel response function model\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*width +1\u230b.\n        Must be odd.\n    y_size : int, optional\n        Size in y direction of the kernel array. Default = \u230a8*width +1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    Raises\n    ------\n    TypeError\n        If model is not an instance of `~astropy.modeling.Fittable2DModel`\n    \n    See Also\n    --------\n    Model1DKernel : Create kernel from `~astropy.modeling.Fittable1DModel`\n    CustomKernel : Create kernel from list or array\n    \n    Examples\n    --------\n    Define a Gaussian2D model:\n    \n        >>> from astropy.modeling.models import Gaussian2D\n        >>> from astropy.convolution.kernels import Model2DKernel\n        >>> gauss = Gaussian2D(1, 0, 0, 2, 2)\n    \n    And create a custom two dimensional kernel from it:\n    \n        >>> gauss_kernel = Model2DKernel(gauss, x_size=9)\n    \n    This kernel can now be used like a usual astropy kernel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "57669d2f266d0236c71dd9592480e1dc89856b53259e5c715fdd52c7d5749ce1",
            "fields": [
                {
                    "id": "yei5ganl",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Model2DKernel object",
                    "type": "Object:astropy.convolution.kernels.Model2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tms30gh_",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel response function model",
                    "type": "astropy.modeling.Fittable2DModel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5elglqu",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xk0af8dp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Model2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Model2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4y8mw8g2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdfspd8j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s44qhmct",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dzmn_o3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Model2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Model2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7h9vuy8g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8pc19lpb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "a0eety0z",
            "name": "Model2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5f7f21b4f36e8d4514731b013b6671e278a3c451028424995f4f523271923fc",
            "fields": [
                {
                    "id": "87jn_i19",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Model2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Model2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhpellf9",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bymmo2_u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Model2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Model2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1j9go3yv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "di19miee",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "syge3y44",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0a2j3629",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Model2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Model2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1603nwm0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbf4gy0y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k_tnvltd",
            "name": "Moffat2DKernel.__init__",
            "description": "\n2D Moffat kernel.\n    \n    This kernel is a typical model for a seeing limited PSF.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    gamma : float\n        Core width of the Moffat model.\n    alpha : float\n        Power index of the Moffat model.\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*radius + 1\u230b.\n    y_size : int, optional\n        Size in y direction of the kernel array. Default = \u230a8*radius + 1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Box2DKernel, Tophat2DKernel, RickerWavelet2DKernel,\n    Ring2DKernel, TrapezoidDisk2DKernel, AiryDisk2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Moffat2DKernel\n        moffat_2D_kernel = Moffat2DKernel(3, 2)\n        plt.imshow(moffat_2D_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7c97ce47ce2f81f10c884ece54f5f1a75263fea81a674060a5a3fc2ab8d996b2",
            "fields": [
                {
                    "id": "unzl_wam",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Moffat2DKernel object",
                    "type": "Object:astropy.convolution.kernels.Moffat2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ts6tkish",
                    "encoding": "",
                    "name": "gamma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Core width of the Moffat model.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8xw_too",
                    "encoding": "",
                    "name": "alpha",
                    "value": "",
                    "defaultValue": "",
                    "description": "Power index of the Moffat model.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ilxmjme",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "glbx9x65",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Moffat2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Moffat2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aid7rgwj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mvz_0830",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b2qqpkdt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yzvpjlae",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Moffat2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Moffat2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qrxx6deu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "07nvqbz2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d9set22d",
            "name": "Moffat2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5096ad8d276e1f17d317262b1d1042f0d0545184571354b8c28e49341623577c",
            "fields": [
                {
                    "id": "5qqpiv72",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Moffat2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Moffat2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wj4uocgb",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "014p6zog",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Moffat2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Moffat2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u739i1tr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p424wf5g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c8letajl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6rsllp1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Moffat2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Moffat2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ryovha0x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "54rmt0kd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6bb75qlq",
            "name": "RickerWavelet1DKernel.__init__",
            "description": "\n1D Ricker wavelet filter kernel (sometimes known as a \"Mexican Hat\"\n    kernel).\n    \n    The Ricker wavelet, or inverted Gaussian-Laplace filter, is a\n    bandpass filter. It smooths the data and removes slowly varying\n    or constant structures (e.g. Background). It is useful for peak or\n    multi-scale detection.\n    \n    This kernel is derived from a normalized Gaussian function, by\n    computing the second derivative. This results in an amplitude\n    at the kernels center of 1. / (sqrt(2 * pi) * width ** 3). The\n    normalization is the same as for `scipy.ndimage.gaussian_laplace`,\n    except for a minus sign.\n    \n    .. note::\n    \n        See https://github.com/astropy/astropy/pull/9445 for discussions\n        related to renaming of this kernel.\n    \n    Parameters\n    ----------\n    width : number\n        Width of the filter kernel, defined as the standard deviation\n        of the Gaussian function from which it is derived.\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*width +1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by linearly interpolating\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Box1DKernel, Gaussian1DKernel, Trapezoid1DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import RickerWavelet1DKernel\n        ricker_1d_kernel = RickerWavelet1DKernel(10)\n        plt.plot(ricker_1d_kernel, drawstyle='steps')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('value')\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd4d67ca7ad9585209b26f037a2b2fd14e8fb53a199ee7b8c42f361fef292131",
            "fields": [
                {
                    "id": "p4g97iwe",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RickerWavelet1DKernel object",
                    "type": "Object:astropy.convolution.kernels.RickerWavelet1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_nufxwm",
                    "encoding": "",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the filter kernel, defined as the standard deviation\nof the Gaussian function from which it is derived.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9sb4h84",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5mfuefx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.RickerWavelet1DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet1DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wdqgua07",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "82fl2bfc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sh6c2kjw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frbjod__",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.RickerWavelet1DKernel",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4vz0izuq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b30k_8aa",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "avwcwgf9",
            "name": "RickerWavelet1DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "35af092005db85383fd442ade468dea8fdc489aba3564f718b21e4b87777e1bb",
            "fields": [
                {
                    "id": "nm0q23d2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.RickerWavelet1DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.RickerWavelet1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eps8v0bt",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v616fwce",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.RickerWavelet1DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet1DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ezscqv5a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbbp6p05",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8hgabxcr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ciyoryfz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.RickerWavelet1DKernel",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "583n5lyi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2d73lji9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5w7ihb7m",
            "name": "RickerWavelet2DKernel.__init__",
            "description": "\n2D Ricker wavelet filter kernel (sometimes known as a \"Mexican Hat\"\n    kernel).\n    \n    The Ricker wavelet, or inverted Gaussian-Laplace filter, is a\n    bandpass filter. It smooths the data and removes slowly varying\n    or constant structures (e.g. Background). It is useful for peak or\n    multi-scale detection.\n    \n    This kernel is derived from a normalized Gaussian function, by\n    computing the second derivative. This results in an amplitude\n    at the kernels center of 1. / (pi * width ** 4). The normalization\n    is the same as for `scipy.ndimage.gaussian_laplace`, except\n    for a minus sign.\n    \n    .. note::\n    \n        See https://github.com/astropy/astropy/pull/9445 for discussions\n        related to renaming of this kernel.\n    \n    Parameters\n    ----------\n    width : number\n        Width of the filter kernel, defined as the standard deviation\n        of the Gaussian function from which it is derived.\n    x_size : int, optional\n        Size in x direction of the kernel array. Default = \u230a8*width +1\u230b.\n    y_size : int, optional\n        Size in y direction of the kernel array. Default = \u230a8*width +1\u230b.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Box2DKernel, Tophat2DKernel, Ring2DKernel,\n    TrapezoidDisk2DKernel, AiryDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import RickerWavelet2DKernel\n        ricker_2d_kernel = RickerWavelet2DKernel(10)\n        plt.imshow(ricker_2d_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2ba3b076e841a29c6be86840ab23236d1fcf9e0bf1ad1bc664acb442e3c9fdc5",
            "fields": [
                {
                    "id": "kvdsmipz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RickerWavelet2DKernel object",
                    "type": "Object:astropy.convolution.kernels.RickerWavelet2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zgfatz6g",
                    "encoding": "",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the filter kernel, defined as the standard deviation\nof the Gaussian function from which it is derived.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mu_pfc_7",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_0ewmgcn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.RickerWavelet2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lqibpa3c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1374d4eu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "32jyvpf1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xp68ejs5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.RickerWavelet2DKernel",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2ghchc9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6hunrk7r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4z552a1v",
            "name": "RickerWavelet2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b9cf47682e36136d7d8e4e42706f95427364034c53e8cad01e0978e0823edaa",
            "fields": [
                {
                    "id": "zvm9iv7o",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.RickerWavelet2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.RickerWavelet2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_85w7m70",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "omlsig3h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.RickerWavelet2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8uowjxx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7u5ak15x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0oihbslo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "adt97h7w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.RickerWavelet2DKernel",
                    "defaultValue": "astropy.convolution.kernels.RickerWavelet2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4gom9vc7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ub761ui",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qcuw0ycw",
            "name": "Ring2DKernel.__init__",
            "description": "\n2D Ring filter kernel.\n    \n    The Ring filter kernel is the difference between two Tophat kernels of\n    different width. This kernel is useful for, e.g., background estimation.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    radius_in : number\n        Inner radius of the ring kernel.\n    width : number\n        Width of the ring kernel.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Box2DKernel, Tophat2DKernel, RickerWavelet2DKernel,\n    TrapezoidDisk2DKernel, AiryDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Ring2DKernel\n        ring_2D_kernel = Ring2DKernel(9, 8)\n        plt.imshow(ring_2D_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7be9b6f93435343842ba8206d8d82adc6b328236c9781c42f4530807977f85a",
            "fields": [
                {
                    "id": "j1lrljub",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Ring2DKernel object",
                    "type": "Object:astropy.convolution.kernels.Ring2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1978n39",
                    "encoding": "",
                    "name": "radius_in",
                    "value": "",
                    "defaultValue": "",
                    "description": "Inner radius of the ring kernel.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_jgki4u",
                    "encoding": "",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the ring kernel.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_0_qcnr",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yk8veju",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Ring2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Ring2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5he_v44",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_6q71fs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rjnwrs5w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zi3di5gk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Ring2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Ring2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kf29lx5o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "niqjz2fi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "esevltye",
            "name": "Ring2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8d6756ecc226c038728ed8f53cde6f3dcd9c5ea48e1a7efdb12051ffd0b2318a",
            "fields": [
                {
                    "id": "bb7zkhb7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Ring2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Ring2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "444vy6sd",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bm7uy04c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Ring2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Ring2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jttmx88w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "chkxihbs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "57rp2er3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yezuqvl1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Ring2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Ring2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9dw4dkk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "taz7avtp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_2konvt3",
            "name": "Tophat2DKernel.__init__",
            "description": "\n2D Tophat filter kernel.\n    \n    The Tophat filter is an isotropic smoothing filter. It can produce\n    artifacts when applied repeatedly on the same data.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    radius : int\n        Radius of the filter kernel.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Box2DKernel, RickerWavelet2DKernel, Ring2DKernel,\n    TrapezoidDisk2DKernel, AiryDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Tophat2DKernel\n        tophat_2D_kernel = Tophat2DKernel(40)\n        plt.imshow(tophat_2D_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0e0eb802fa34e619c6bb252098d719f09d36f6c7bbba8780da6321d951553ad",
            "fields": [
                {
                    "id": "rznqa90e",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Tophat2DKernel object",
                    "type": "Object:astropy.convolution.kernels.Tophat2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "icgwi16u",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "Radius of the filter kernel.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1g32nomm",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8vlg3t49",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Tophat2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Tophat2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hz5ccegu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hahl3p_w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0k_lj454",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vky67ic6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Tophat2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Tophat2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny1myipo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7cmxrti6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "p99tp_r1",
            "name": "Tophat2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "267152f08491460e52d9a08359ea0dd04706dd823496a8e35b0be5976aadf71a",
            "fields": [
                {
                    "id": "34l0cm5p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Tophat2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Tophat2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qs6e3vd",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ey2_8se1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Tophat2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Tophat2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "efr2hulf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gukuz8uc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0hruirqn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "can3ak2d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Tophat2DKernel",
                    "defaultValue": "astropy.convolution.kernels.Tophat2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zza8kvvo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy_jt3lq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5iaz9wp6",
            "name": "Trapezoid1DKernel.__init__",
            "description": "\n1D trapezoid kernel.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    width : number\n        Width of the filter kernel, defined as the width of the constant part,\n        before it begins to slope down.\n    slope : number\n        Slope of the filter kernel's tails\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by linearly interpolating\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Box1DKernel, Gaussian1DKernel, RickerWavelet1DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import Trapezoid1DKernel\n        trapezoid_1D_kernel = Trapezoid1DKernel(17, slope=0.2)\n        plt.plot(trapezoid_1D_kernel, drawstyle='steps')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('amplitude')\n        plt.xlim(-1, 28)\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "22d0cd021ec4e78be225dbd422c20e210e91de358f5dc13f099c30607edf8d69",
            "fields": [
                {
                    "id": "3gs52z29",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Trapezoid1DKernel object",
                    "type": "Object:astropy.convolution.kernels.Trapezoid1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oc6lehnw",
                    "encoding": "",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the filter kernel, defined as the width of the constant part,\nbefore it begins to slope down.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "42a8aq4l",
                    "encoding": "",
                    "name": "slope",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Slope of the filter kernel's tails",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2ullr7m",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cvjsaak7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Trapezoid1DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.Trapezoid1DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6fwbwz4j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v74bqbb9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5c2ju5kr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkrrihjm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Trapezoid1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Trapezoid1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dkye_cf1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ihz56on5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nnuji_7t",
            "name": "Trapezoid1DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b103b536efbe0f8232f741b741ad222782c81141c9c1dd715053cb4ca5081432",
            "fields": [
                {
                    "id": "tqyzj3u6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.Trapezoid1DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.Trapezoid1DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "myga2gba",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45jpi3wk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.Trapezoid1DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.Trapezoid1DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "de0r0rcd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3hjy_isr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9krtekm9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2lk942i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.Trapezoid1DKernel",
                    "defaultValue": "astropy.convolution.kernels.Trapezoid1DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yxrccydk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5rdufugz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pq9esosa",
            "name": "TrapezoidDisk2DKernel.__init__",
            "description": "\n2D trapezoid kernel.\n    \n    The generated kernel is normalized so that it integrates to 1.\n    \n    Parameters\n    ----------\n    radius : number\n        Width of the filter kernel, defined as the width of the constant part,\n        before it begins to slope down.\n    slope : number\n        Slope of the filter kernel's tails\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following discretization modes:\n            * 'center' (default)\n                Discretize model by taking the value\n                at the center of the bin.\n            * 'linear_interp'\n                Discretize model by performing a bilinear interpolation\n                between the values at the corners of the bin.\n            * 'oversample'\n                Discretize model by taking the average\n                on an oversampled grid.\n            * 'integrate'\n                Discretize model by integrating the\n                model over the bin.\n    factor : number, optional\n        Factor of oversampling. Default factor = 10.\n    \n    See Also\n    --------\n    Gaussian2DKernel, Box2DKernel, Tophat2DKernel, RickerWavelet2DKernel,\n    Ring2DKernel, AiryDisk2DKernel, Moffat2DKernel\n    \n    Examples\n    --------\n    Kernel response:\n    \n     .. plot::\n        :include-source:\n    \n        import matplotlib.pyplot as plt\n        from astropy.convolution import TrapezoidDisk2DKernel\n        trapezoid_2D_kernel = TrapezoidDisk2DKernel(20, slope=0.2)\n        plt.imshow(trapezoid_2D_kernel, interpolation='none', origin='lower')\n        plt.xlabel('x [pixels]')\n        plt.ylabel('y [pixels]')\n        plt.colorbar()\n        plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "477e0be3e2ef7d67e63717f8011100ea7864f890fdcfb55fb3c37d43469ccca1",
            "fields": [
                {
                    "id": "2dvz5ti8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to TrapezoidDisk2DKernel object",
                    "type": "Object:astropy.convolution.kernels.TrapezoidDisk2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnw1fl2_",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "Width of the filter kernel, defined as the width of the constant part,\nbefore it begins to slope down.",
                    "type": "number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vlmaqapx",
                    "encoding": "",
                    "name": "slope",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Slope of the filter kernel's tails",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "le9hzv33",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vd1hne7g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.TrapezoidDisk2DKernel.__init__",
                    "defaultValue": "astropy.convolution.kernels.TrapezoidDisk2DKernel.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nw3gdyei",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wdzc6k3q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bdhm8e32",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghfdrsax",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.TrapezoidDisk2DKernel",
                    "defaultValue": "astropy.convolution.kernels.TrapezoidDisk2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1krbfsnw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vfg2mnkt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "65d46h5e",
            "name": "TrapezoidDisk2DKernel.normalize",
            "description": "Normalize the filter kernel.\n    \n    Parameters\n    ----------\n    mode : {'integral', 'peak'}\n        One of the following modes:\n            * 'integral' (default)\n                Kernel is normalized such that its integral = 1.\n            * 'peak'\n                Kernel is normalized such that its peak = 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "39ca131d8176dbef3201e626818375a83f260e42d4d88a4155d7a60ef26f3dc7",
            "fields": [
                {
                    "id": "lu6z8fmc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.convolution.kernels.TrapezoidDisk2DKernel.normalize object",
                    "type": "Object:astropy.convolution.kernels.TrapezoidDisk2DKernel",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fgdhp5zk",
                    "encoding": "",
                    "name": "mode",
                    "value": "integral",
                    "defaultValue": "integral",
                    "description": "One of the following modes:\n    * 'integral' (default)\n        Kernel is normalized such that its integral = 1.\n    * 'peak'\n        Kernel is normalized such that its peak = 1.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8vyr6_3r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernels.TrapezoidDisk2DKernel.normalize",
                    "defaultValue": "astropy.convolution.kernels.TrapezoidDisk2DKernel.normalize",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sy56is6g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ox6xdohg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "g46zsvl6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z31ykuk4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.kernels.TrapezoidDisk2DKernel",
                    "defaultValue": "astropy.convolution.kernels.TrapezoidDisk2DKernel",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j__gb37n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_h2t5did",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cz1jeh40",
            "name": "convolution.convolve",
            "description": "Convolve an array with a kernel.\n    \n    This routine differs from `scipy.ndimage.convolve` because\n    it includes a special treatment for ``NaN`` values. Rather than\n    including ``NaN`` values in the array in the convolution calculation, which\n    causes large ``NaN`` holes in the convolved array, ``NaN`` values are\n    replaced with interpolated values using the kernel as an interpolation\n    function.\n    \n    Parameters\n    ----------\n    array : `~astropy.nddata.NDData` or array-like\n        The array to convolve. This should be a 1, 2, or 3-dimensional array\n        or a list or a set of nested lists representing a 1, 2, or\n        3-dimensional array.  If an `~astropy.nddata.NDData`, the ``mask`` of\n        the `~astropy.nddata.NDData` will be used as the ``mask`` argument.\n    kernel : `numpy.ndarray` or `~astropy.convolution.Kernel`\n        The convolution kernel. The number of dimensions should match those for\n        the array, and the dimensions should be odd in all directions.  If a\n        masked array, the masked values will be replaced by ``fill_value``.\n    boundary : str, optional\n        A flag indicating how to handle boundaries:\n            * `None`\n                Set the ``result`` values to zero where the kernel\n                extends beyond the edge of the array.\n            * 'fill'\n                Set values outside the array boundary to ``fill_value`` (default).\n            * 'wrap'\n                Periodic boundary that wrap to the other side of ``array``.\n            * 'extend'\n                Set values outside the array to the nearest ``array``\n                value.\n    fill_value : float, optional\n        The value to use outside the array when using ``boundary='fill'``.\n    normalize_kernel : bool, optional\n        Whether to normalize the kernel to have a sum of one.\n    nan_treatment : {'interpolate', 'fill'}, optional\n        The method used to handle NaNs in the input ``array``:\n            * ``'interpolate'``: ``NaN`` values are replaced with\n              interpolated values using the kernel as an interpolation\n              function. Note that if the kernel has a sum equal to\n              zero, NaN interpolation is not possible and will raise an\n              exception.\n            * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n              prior to convolution.\n    preserve_nan : bool, optional\n        After performing convolution, should pixels that were originally NaN\n        again become NaN?\n    mask : None or ndarray, optional\n        A \"mask\" array.  Shape must match ``array``, and anything that is masked\n        (i.e., not 0/`False`) will be set to NaN for the convolution.  If\n        `None`, no masking will be performed unless ``array`` is a masked array.\n        If ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\n        masked if it is masked in either ``mask`` *or* ``array.mask``.\n    normalization_zero_tol : float, optional\n        The absolute tolerance on whether the kernel is different than zero.\n        If the kernel sums to zero to within this precision, it cannot be\n        normalized. Default is \"1e-8\".\n    \n    Returns\n    -------\n    result : `numpy.ndarray`\n        An array with the same dimensions and as the input array,\n        convolved with kernel.  The data type depends on the input\n        array type.  If array is a floating point type, then the\n        return array keeps the same data type, otherwise the type\n        is ``numpy.float``.\n    \n    Notes\n    -----\n    For masked arrays, masked values are treated as NaNs.  The convolution\n    is always done at ``numpy.float`` precision.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c1e094f9714f5ee47779c6f2d1b58815c96d608f58dd25ca7aeef81d154dd995",
            "fields": [
                {
                    "id": "fjggt6hn",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array to convolve. This should be a 1, 2, or 3-dimensional array\nor a list or a set of nested lists representing a 1, 2, or\n3-dimensional array.  If an `~astropy.nddata.NDData`, the ``mask`` of\nthe `~astropy.nddata.NDData` will be used as the ``mask`` argument.",
                    "type": "astropy.nddata.NDData or array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n22ziupi",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The convolution kernel. The number of dimensions should match those for\nthe array, and the dimensions should be odd in all directions.  If a\nmasked array, the masked values will be replaced by ``fill_value``.",
                    "type": "numpy.ndarray or astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qs0emuc7",
                    "encoding": "",
                    "name": "boundary",
                    "value": "fill",
                    "defaultValue": "fill",
                    "description": "A flag indicating how to handle boundaries:\n    * `None`\n        Set the ``result`` values to zero where the kernel\n        extends beyond the edge of the array.\n    * 'fill'\n        Set values outside the array boundary to ``fill_value`` (default).\n    * 'wrap'\n        Periodic boundary that wrap to the other side of ``array``.\n    * 'extend'\n        Set values outside the array to the nearest ``array``\n        value.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ih1d3ymr",
                    "encoding": "",
                    "name": "fill_value",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The value to use outside the array when using ``boundary='fill'``.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1n4btou",
                    "encoding": "",
                    "name": "nan_treatment",
                    "value": "interpolate",
                    "defaultValue": "interpolate",
                    "description": "The method used to handle NaNs in the input ``array``:\n    * ``'interpolate'``: ``NaN`` values are replaced with\n      interpolated values using the kernel as an interpolation\n      function. Note that if the kernel has a sum equal to\n      zero, NaN interpolation is not possible and will raise an\n      exception.\n    * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n      prior to convolution.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1f0di904",
                    "encoding": "",
                    "name": "normalize_kernel",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to normalize the kernel to have a sum of one.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmw3wapd",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "A \"mask\" array.  Shape must match ``array``, and anything that is masked\n(i.e., not 0/`False`) will be set to NaN for the convolution.  If\n`None`, no masking will be performed unless ``array`` is a masked array.\nIf ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\nmasked if it is masked in either ``mask`` *or* ``array.mask``.",
                    "type": "None or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9uxi2i1r",
                    "encoding": "",
                    "name": "preserve_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "After performing convolution, should pixels that were originally NaN\nagain become NaN?",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "myinmyv2",
                    "encoding": "",
                    "name": "normalization_zero_tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "The absolute tolerance on whether the kernel is different than zero.\nIf the kernel sums to zero to within this precision, it cannot be\nnormalized. Default is \"1e-8\".",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhh5uur6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73dnsjeh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "176xc_jp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a5xh81x8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t72f1b72",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hz296jcr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6807en_w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "javi7qqz",
            "name": "convolution.convolve_fft",
            "description": "Convolve an ndarray with an nd-kernel.  Returns a convolved image with\n    ``shape = array.shape``.  Assumes kernel is centered.\n    \n    `convolve_fft` is very similar to `convolve` in that it replaces ``NaN``\n    values in the original image with interpolated values using the kernel as\n    an interpolation function.  However, it also includes many additional\n    options specific to the implementation.\n    \n    `convolve_fft` differs from `scipy.signal.fftconvolve` in a few ways:\n    \n    * It can treat ``NaN`` values as zeros or interpolate over them.\n    * ``inf`` values are treated as ``NaN``\n    * It optionally pads to the nearest faster sizes to improve FFT speed.\n      These sizes are optimized for the numpy and scipy implementations, and\n      ``fftconvolve`` uses them by default as well; when using other external\n      functions (see below), results may vary.\n    * Its only valid ``mode`` is 'same' (i.e., the same shape array is returned)\n    * It lets you use your own fft, e.g.,\n      `pyFFTW <https://pypi.org/project/pyFFTW/>`_ or\n      `pyFFTW3 <https://pypi.org/project/PyFFTW3/0.2.1/>`_ , which can lead to\n      performance improvements, depending on your system configuration.  pyFFTW3\n      is threaded, and therefore may yield significant performance benefits on\n      multi-core machines at the cost of greater memory requirements.  Specify\n      the ``fftn`` and ``ifftn`` keywords to override the default, which is\n      `numpy.fft.fftn` and `numpy.fft.ifftn`.  The `scipy.fft` functions also\n      offer somewhat better performance and a multi-threaded option.\n    \n    Parameters\n    ----------\n    array : `numpy.ndarray`\n        Array to be convolved with ``kernel``.  It can be of any\n        dimensionality, though only 1, 2, and 3d arrays have been tested.\n    kernel : `numpy.ndarray` or `astropy.convolution.Kernel`\n        The convolution kernel. The number of dimensions should match those\n        for the array.  The dimensions *do not* have to be odd in all directions,\n        unlike in the non-fft `convolve` function.  The kernel will be\n        normalized if ``normalize_kernel`` is set.  It is assumed to be centered\n        (i.e., shifts may result if your kernel is asymmetric)\n    boundary : {'fill', 'wrap'}, optional\n        A flag indicating how to handle boundaries:\n    \n            * 'fill': set values outside the array boundary to fill_value\n              (default)\n            * 'wrap': periodic boundary\n    \n        The `None` and 'extend' parameters are not supported for FFT-based\n        convolution.\n    fill_value : float, optional\n        The value to use outside the array when using boundary='fill'.\n    nan_treatment : {'interpolate', 'fill'}, optional\n        The method used to handle NaNs in the input ``array``:\n            * ``'interpolate'``: ``NaN`` values are replaced with\n              interpolated values using the kernel as an interpolation\n              function. Note that if the kernel has a sum equal to\n              zero, NaN interpolation is not possible and will raise an\n              exception.\n            * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n              prior to convolution.\n    normalize_kernel : callable or boolean, optional\n        If specified, this is the function to divide kernel by to normalize it.\n        e.g., ``normalize_kernel=np.sum`` means that kernel will be modified to be:\n        ``kernel = kernel / np.sum(kernel)``.  If True, defaults to\n        ``normalize_kernel = np.sum``.\n    normalization_zero_tol : float, optional\n        The absolute tolerance on whether the kernel is different than zero.\n        If the kernel sums to zero to within this precision, it cannot be\n        normalized. Default is \"1e-8\".\n    preserve_nan : bool, optional\n        After performing convolution, should pixels that were originally NaN\n        again become NaN?\n    mask : None or ndarray, optional\n        A \"mask\" array.  Shape must match ``array``, and anything that is masked\n        (i.e., not 0/`False`) will be set to NaN for the convolution.  If\n        `None`, no masking will be performed unless ``array`` is a masked array.\n        If ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\n        masked if it is masked in either ``mask`` *or* ``array.mask``.\n    crop : bool, optional\n        Default on.  Return an image of the size of the larger of the input\n        image and the kernel.\n        If the image and kernel are asymmetric in opposite directions, will\n        return the largest image in both directions.\n        For example, if an input image has shape [100,3] but a kernel with shape\n        [6,6] is used, the output will be [100,6].\n    return_fft : bool, optional\n        Return the ``fft(image)*fft(kernel)`` instead of the convolution (which is\n        ``ifft(fft(image)*fft(kernel))``).  Useful for making PSDs.\n    fft_pad : bool, optional\n        Default on.  Zero-pad image to the nearest size supporting more efficient\n        execution of the FFT, generally values factorizable into the first 3-5\n        prime numbers.  With ``boundary='wrap'``, this will be disabled.\n    psf_pad : bool, optional\n        Zero-pad image to be at least the sum of the image sizes to avoid\n        edge-wrapping when smoothing.  This is enabled by default with\n        ``boundary='fill'``, but it can be overridden with a boolean option.\n        ``boundary='wrap'`` and ``psf_pad=True`` are not compatible.\n    min_wt : float, optional\n        If ignoring ``NaN`` / zeros, force all grid points with a weight less than\n        this value to ``NaN`` (the weight of a grid point with *no* ignored\n        neighbors is 1.0).\n        If ``min_wt`` is zero, then all zero-weight points will be set to zero\n        instead of ``NaN`` (which they would be otherwise, because 1/0 = nan).\n        See the examples below.\n    allow_huge : bool, optional\n        Allow huge arrays in the FFT?  If False, will raise an exception if the\n        array or kernel size is >1 GB.\n    fftn : callable, optional\n        The fft function.  Can be overridden to use your own ffts,\n        e.g. an fftw3 wrapper or scipy's fftn, ``fft=scipy.fftpack.fftn``.\n    ifftn : callable, optional\n        The inverse fft function. Can be overridden the same way ``fttn``.\n    complex_dtype : complex type, optional\n        Which complex dtype to use.  `numpy` has a range of options, from 64 to\n        256.\n    dealias: bool, optional\n        Default off. Zero-pad image to enable explicit dealiasing\n        of convolution. With ``boundary='wrap'``, this will be disabled.\n        Note that for an input of nd dimensions this will increase\n        the size of the temporary arrays by at least ``1.5**nd``.\n        This may result in significantly more memory usage.\n    \n    Returns\n    -------\n    default : ndarray\n        ``array`` convolved with ``kernel``.  If ``return_fft`` is set, returns\n        ``fft(array) * fft(kernel)``.  If crop is not set, returns the\n        image, but with the fft-padded size instead of the input size.\n    \n    Raises\n    ------\n    `ValueError`\n        If the array is bigger than 1 GB after padding, will raise this\n        exception unless ``allow_huge`` is True.\n    \n    See Also\n    --------\n    convolve:\n        Convolve is a non-fft version of this code.  It is more memory\n        efficient and for small kernels can be faster.\n    \n    Notes\n    -----\n    With ``psf_pad=True`` and a large PSF, the resulting data\n    can become large and consume a lot of memory. See Issue\n    https://github.com/astropy/astropy/pull/4366 and the update in\n    https://github.com/astropy/astropy/pull/11533 for further details.\n    \n    Dealiasing of pseudospectral convolutions is necessary for\n    numerical stability of the underlying algorithms. A common\n    method for handling this is to zero pad the image by at least\n    1/2 to eliminate the wavenumbers which have been aliased\n    by convolution. This is so that the aliased 1/3 of the\n    results of the convolution computation can be thrown out. See\n    https://doi.org/10.1175/1520-0469(1971)028%3C1074:OTEOAI%3E2.0.CO;2\n    https://iopscience.iop.org/article/10.1088/1742-6596/318/7/072037\n    \n    Note that if dealiasing is necessary to your application, but your\n    process is memory constrained, you may want to consider using\n    FFTW++: https://github.com/dealias/fftwpp. It includes python\n    wrappers for a pseudospectral convolution which will implicitly\n    dealias your convolution without the need for additional padding.\n    Note that one cannot use FFTW++'s convlution directly in this\n    method as in handles the entire convolution process internally.\n    Additionally, FFTW++ includes other useful pseudospectral methods to\n    consider.\n    \n    Examples\n    --------\n    >>> convolve_fft([1, 0, 3], [1, 1, 1])\n    array([0.33333333, 1.33333333, 1.        ])\n    \n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1])\n    array([0.5, 2. , 1.5])\n    \n    >>> convolve_fft([1, 0, 3], [0, 1, 0])  # doctest: +FLOAT_CMP\n    array([ 1.00000000e+00, -3.70074342e-17,  3.00000000e+00])\n    \n    >>> convolve_fft([1, 2, 3], [1])\n    array([1., 2., 3.])\n    \n    >>> convolve_fft([1, np.nan, 3], [0, 1, 0], nan_treatment='interpolate')\n    array([1., 0., 3.])\n    \n    >>> convolve_fft([1, np.nan, 3], [0, 1, 0], nan_treatment='interpolate',\n    ...              min_wt=1e-8)\n    array([ 1., nan,  3.])\n    \n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate')\n    array([0.5, 2. , 1.5])\n    \n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate',\n    ...               normalize_kernel=True)\n    array([0.5, 2. , 1.5])\n    \n    >>> import scipy.fft  # optional - requires scipy\n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate',\n    ...               normalize_kernel=True,\n    ...               fftn=scipy.fft.fftn, ifftn=scipy.fft.ifftn)\n    array([0.5, 2. , 1.5])\n    \n    >>> fft_mp = lambda a: scipy.fft.fftn(a, workers=-1)  # use all available cores\n    >>> ifft_mp = lambda a: scipy.fft.ifftn(a, workers=-1)\n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate',\n    ...               normalize_kernel=True, fftn=fft_mp, ifftn=ifft_mp)\n    array([0.5, 2. , 1.5])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2ac899ac0ded4b2365f57c508c1cbbe0ca3bceeb42b949d196983c3881531018",
            "fields": [
                {
                    "id": "w8v3ctvh",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to be convolved with ``kernel``.  It can be of any\ndimensionality, though only 1, 2, and 3d arrays have been tested.",
                    "type": "numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjwd4hmv",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The convolution kernel. The number of dimensions should match those\nfor the array.  The dimensions *do not* have to be odd in all directions,\nunlike in the non-fft `convolve` function.  The kernel will be\nnormalized if ``normalize_kernel`` is set.  It is assumed to be centered\n(i.e., shifts may result if your kernel is asymmetric)",
                    "type": "numpy.ndarray or astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lihmbks0",
                    "encoding": "",
                    "name": "boundary",
                    "value": "fill",
                    "defaultValue": "fill",
                    "description": "A flag indicating how to handle boundaries:\n\n    * 'fill': set values outside the array boundary to fill_value\n      (default)\n    * 'wrap': periodic boundary\n\nThe `None` and 'extend' parameters are not supported for FFT-based\nconvolution.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgd5gw4n",
                    "encoding": "",
                    "name": "fill_value",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The value to use outside the array when using boundary='fill'.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1bj6xru",
                    "encoding": "",
                    "name": "nan_treatment",
                    "value": "interpolate",
                    "defaultValue": "interpolate",
                    "description": "The method used to handle NaNs in the input ``array``:\n    * ``'interpolate'``: ``NaN`` values are replaced with\n      interpolated values using the kernel as an interpolation\n      function. Note that if the kernel has a sum equal to\n      zero, NaN interpolation is not possible and will raise an\n      exception.\n    * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n      prior to convolution.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0jwxq4k",
                    "encoding": "",
                    "name": "normalize_kernel",
                    "value": true,
                    "defaultValue": true,
                    "description": "If specified, this is the function to divide kernel by to normalize it.\ne.g., ``normalize_kernel=np.sum`` means that kernel will be modified to be:\n``kernel = kernel / np.sum(kernel)``.  If True, defaults to\n``normalize_kernel = np.sum``.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ph3i_j6m",
                    "encoding": "",
                    "name": "normalization_zero_tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "The absolute tolerance on whether the kernel is different than zero.\nIf the kernel sums to zero to within this precision, it cannot be\nnormalized. Default is \"1e-8\".",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swwva5_j",
                    "encoding": "",
                    "name": "preserve_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "After performing convolution, should pixels that were originally NaN\nagain become NaN?",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfgduhgg",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "A \"mask\" array.  Shape must match ``array``, and anything that is masked\n(i.e., not 0/`False`) will be set to NaN for the convolution.  If\n`None`, no masking will be performed unless ``array`` is a masked array.\nIf ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\nmasked if it is masked in either ``mask`` *or* ``array.mask``.",
                    "type": "None or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dxh3whec",
                    "encoding": "",
                    "name": "crop",
                    "value": true,
                    "defaultValue": true,
                    "description": "Default on.  Return an image of the size of the larger of the input\nimage and the kernel.\nIf the image and kernel are asymmetric in opposite directions, will\nreturn the largest image in both directions.\nFor example, if an input image has shape [100,3] but a kernel with shape\n[6,6] is used, the output will be [100,6].",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1uef46v",
                    "encoding": "",
                    "name": "return_fft",
                    "value": false,
                    "defaultValue": false,
                    "description": "Return the ``fft(image)*fft(kernel)`` instead of the convolution (which is\n``ifft(fft(image)*fft(kernel))``).  Useful for making PSDs.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1rz34kvn",
                    "encoding": "",
                    "name": "fft_pad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default on.  Zero-pad image to the nearest size supporting more efficient\nexecution of the FFT, generally values factorizable into the first 3-5\nprime numbers.  With ``boundary='wrap'``, this will be disabled.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "thdopf3v",
                    "encoding": "",
                    "name": "psf_pad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Zero-pad image to be at least the sum of the image sizes to avoid\nedge-wrapping when smoothing.  This is enabled by default with\n``boundary='fill'``, but it can be overridden with a boolean option.\n``boundary='wrap'`` and ``psf_pad=True`` are not compatible.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vmpeomz0",
                    "encoding": "",
                    "name": "min_wt",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "If ignoring ``NaN`` / zeros, force all grid points with a weight less than\nthis value to ``NaN`` (the weight of a grid point with *no* ignored\nneighbors is 1.0).\nIf ``min_wt`` is zero, then all zero-weight points will be set to zero\ninstead of ``NaN`` (which they would be otherwise, because 1/0 = nan).\nSee the examples below.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d93j4_ft",
                    "encoding": "",
                    "name": "allow_huge",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow huge arrays in the FFT?  If False, will raise an exception if the\narray or kernel size is >1 GB.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmnqjl5g",
                    "encoding": "",
                    "name": "fftn",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "The fft function.  Can be overridden to use your own ffts,\ne.g. an fftw3 wrapper or scipy's fftn, ``fft=scipy.fftpack.fftn``.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_0178t6",
                    "encoding": "",
                    "name": "ifftn",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "The inverse fft function. Can be overridden the same way ``fttn``.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1zonv_tt",
                    "encoding": "",
                    "name": "complex_dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Which complex dtype to use.  `numpy` has a range of options, from 64 to\n256.",
                    "type": "type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oylvx2sl",
                    "encoding": "",
                    "name": "dealias",
                    "value": false,
                    "defaultValue": false,
                    "description": "Default off. Zero-pad image to enable explicit dealiasing\nof convolution. With ``boundary='wrap'``, this will be disabled.\nNote that for an input of nd dimensions this will increase\nthe size of the temporary arrays by at least ``1.5**nd``.\nThis may result in significantly more memory usage.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "derk3yl7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve_fft",
                    "defaultValue": "astropy.convolution.convolve_fft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7f6h94t1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n4c3zzgi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "azpo1l01",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3cix04ae",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "re9212eq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w6m3anbl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zludk7ta",
            "name": "convolution.convolve_models",
            "description": "Convolve two models using `~astropy.convolution.convolve_fft`.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.core.Model`\n        Functional model\n    kernel : `~astropy.modeling.core.Model`\n        Convolution kernel\n    mode : str\n        Keyword representing which function to use for convolution.\n            * 'convolve_fft' : use `~astropy.convolution.convolve_fft` function.\n            * 'convolve' : use `~astropy.convolution.convolve`.\n    **kwargs : dict\n        Keyword arguments to me passed either to `~astropy.convolution.convolve`\n        or `~astropy.convolution.convolve_fft` depending on ``mode``.\n    \n    Returns\n    -------\n    default : `~astropy.modeling.core.CompoundModel`\n        Convolved model",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "92ca55d8c9d1482602ba9d5e9da8d7304dc4fc8eea3dc9069133cb5de6efd44c",
            "fields": [
                {
                    "id": "4opj3xy0",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Functional model",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "63g3l0l0",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convolution kernel",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbyzfu7x",
                    "encoding": "",
                    "name": "mode",
                    "value": "convolve_fft",
                    "defaultValue": "convolve_fft",
                    "description": "Keyword representing which function to use for convolution.\n    * 'convolve_fft' : use `~astropy.convolution.convolve_fft` function.\n    * 'convolve' : use `~astropy.convolution.convolve`.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ib_asssz",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ld5at31j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve_models",
                    "defaultValue": "astropy.convolution.convolve_models",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4p0_da25",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_v672g7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n4tw0wgn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "841uef2m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kqtc7wb9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z94g4o8f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g4sowji4",
            "name": "convolution.convolve_models_fft",
            "description": "Convolve two models using `~astropy.convolution.convolve_fft`.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.core.Model`\n        Functional model\n    kernel : `~astropy.modeling.core.Model`\n        Convolution kernel\n    bounding_box : tuple\n        The bounding box which encompasses enough of the support of both\n        the ``model`` and ``kernel`` so that an accurate convolution can be\n        computed.\n    resolution : float\n        The resolution that one wishes to approximate the convolution\n        integral at.\n    cache : optional, bool\n        Default value True. Allow for the storage of the convolution\n        computation for later reuse.\n    **kwargs : dict\n        Keyword arguments to be passed either to `~astropy.convolution.convolve`\n        or `~astropy.convolution.convolve_fft` depending on ``mode``.\n    \n    Returns\n    -------\n    default : `~astropy.modeling.core.CompoundModel`\n        Convolved model",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d37f3f42c216cea05a23a508131d8a7e1666ba134511ec3db7adc374be712567",
            "fields": [
                {
                    "id": "q9jftlad",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Functional model",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ag9sutq",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convolution kernel",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1xeccxn",
                    "encoding": "",
                    "name": "bounding_box",
                    "value": "",
                    "defaultValue": "",
                    "description": "The bounding box which encompasses enough of the support of both\nthe ``model`` and ``kernel`` so that an accurate convolution can be\ncomputed.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5n_yn6jh",
                    "encoding": "",
                    "name": "resolution",
                    "value": "",
                    "defaultValue": "",
                    "description": "The resolution that one wishes to approximate the convolution\nintegral at.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_wxa9vr",
                    "encoding": "",
                    "name": "cache",
                    "value": true,
                    "defaultValue": true,
                    "description": "Default value True. Allow for the storage of the convolution\ncomputation for later reuse.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3lh_zo4m",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "byk8mmc6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve_models_fft",
                    "defaultValue": "astropy.convolution.convolve_models_fft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "boeck1c4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpun81ur",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ntujbsl2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ocaseqbf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o78vz5b4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "em3k8mu8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "21kjbl21",
            "name": "convolution.discretize_model",
            "description": "Evaluate an analytical model function on a pixel grid.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.Model` or callable.\n        Analytical model function to be discretized. A callable that is\n        not a `~astropy.modeling.Model` instance is converted to a model\n        using `~astropy.modeling.custom_model`.\n    x_range : 2-tuple\n        Lower and upper bounds of x pixel values at which the model is\n        evaluated. The upper bound is non-inclusive. A ``x_range`` of\n        ``(0, 3)`` means the model will be evaluated at x pixels 0, 1,\n        and 2. The difference between the upper and lower bound must be\n        a whole number so that the output array size is well defined.\n    y_range : 2-tuple or `None`, optional\n        Lower and upper bounds of y pixel values at which the model is\n        evaluated. The upper bound is non-inclusive. A ``y_range`` of\n        ``(0, 3)`` means the model will be evaluated at y pixels of 0,\n        1, and 2. The difference between the upper and lower bound must\n        be a whole number so that the output array size is well defined.\n        ``y_range`` is necessary only for 2D models.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following modes:\n            * ``'center'`` (default)\n                Discretize model by taking the value at the center of\n                the pixel bins.\n            * ``'linear_interp'``\n                Discretize model by linearly interpolating between the\n                values at the edges (1D) or corners (2D) of the pixel\n                bins. For 2D models, the interpolation is bilinear.\n            * ``'oversample'``\n                Discretize model by taking the average of model values\n                in the pixel bins on an oversampled grid. Use the\n                ``factor`` keyword to set the integer oversampling\n                factor.\n            * ``'integrate'``\n                Discretize model by integrating the model over the pixel\n                bins using `scipy.integrate.quad`. This mode conserves\n                the model integral on a subpixel scale, but is very\n                slow.\n    factor : int, optional\n        The integer oversampling factor used when ``mode='oversample'``.\n        Ignored otherwise.\n    \n    Returns\n    -------\n    array : `numpy.ndarray`\n        The discretized model array.\n    \n    Examples\n    --------\n    In this example, we define a\n    `~astropy.modeling.functional_models.Gaussian1D` model that has been\n    normalized so that it sums to 1.0. We then discretize this model\n    using the ``'center'``, ``'linear_interp'``, and ``'oversample'``\n    (with ``factor=10``) modes.\n    \n    .. plot::\n        :show-source-link:\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        from astropy.convolution.utils import discretize_model\n        from astropy.modeling.models import Gaussian1D\n    \n        gauss_1D = Gaussian1D(1 / (0.5 * np.sqrt(2 * np.pi)), 0, 0.5)\n        x_range = (-2, 3)\n        x = np.arange(*x_range)\n        y_center = discretize_model(gauss_1D, x_range, mode='center')\n        y_edge = discretize_model(gauss_1D, x_range, mode='linear_interp')\n        y_oversample = discretize_model(gauss_1D, x_range, mode='oversample')\n    \n        fig, ax = plt.subplots(figsize=(8, 6))\n        label = f'center (sum={y_center.sum():.3f})'\n        ax.plot(x, y_center, '.-', label=label)\n        label = f'linear_interp (sum={y_edge.sum():.3f})'\n        ax.plot(x, y_edge, '.-', label=label)\n        label = f'oversample (sum={y_oversample.sum():.3f})'\n        ax.plot(x, y_oversample, '.-', label=label)\n        ax.set_xlabel('x')\n        ax.set_ylabel('Value')\n        plt.legend()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "545ff1413f08387e728390fc0a8db38f8fd384353df0a42724a9046de25fe39d",
            "fields": [
                {
                    "id": "gezidwuo",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Analytical model function to be discretized. A callable that is\nnot a `~astropy.modeling.Model` instance is converted to a model\nusing `~astropy.modeling.custom_model`.",
                    "type": "astropy.modeling.Model or callable.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8i9vnw59",
                    "encoding": "",
                    "name": "x_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower and upper bounds of x pixel values at which the model is\nevaluated. The upper bound is non-inclusive. A ``x_range`` of\n``(0, 3)`` means the model will be evaluated at x pixels 0, 1,\nand 2. The difference between the upper and lower bound must be\na whole number so that the output array size is well defined.",
                    "type": "2-tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z28qmjgc",
                    "encoding": "",
                    "name": "y_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower and upper bounds of y pixel values at which the model is\nevaluated. The upper bound is non-inclusive. A ``y_range`` of\n``(0, 3)`` means the model will be evaluated at y pixels of 0,\n1, and 2. The difference between the upper and lower bound must\nbe a whole number so that the output array size is well defined.\n``y_range`` is necessary only for 2D models.",
                    "type": "2-tuple or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40uu4l9l",
                    "encoding": "",
                    "name": "mode",
                    "value": "center",
                    "defaultValue": "center",
                    "description": "One of the following modes:\n    * ``'center'`` (default)\n        Discretize model by taking the value at the center of\n        the pixel bins.\n    * ``'linear_interp'``\n        Discretize model by linearly interpolating between the\n        values at the edges (1D) or corners (2D) of the pixel\n        bins. For 2D models, the interpolation is bilinear.\n    * ``'oversample'``\n        Discretize model by taking the average of model values\n        in the pixel bins on an oversampled grid. Use the\n        ``factor`` keyword to set the integer oversampling\n        factor.\n    * ``'integrate'``\n        Discretize model by integrating the model over the pixel\n        bins using `scipy.integrate.quad`. This mode conserves\n        the model integral on a subpixel scale, but is very\n        slow.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3tw0wsg",
                    "encoding": "",
                    "name": "factor",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "The integer oversampling factor used when ``mode='oversample'``.\nIgnored otherwise.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ro0eowhd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.discretize_model",
                    "defaultValue": "astropy.convolution.discretize_model",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ud3v55j7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_qr3a3g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eyn2s0rc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r2fvoksb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "narcctnp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ojtt9oko",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e169ntbh",
            "name": "convolution.interpolate_replace_nans",
            "description": "Given a data set containing NaNs, replace the NaNs by interpolating from\n    neighboring data points with a given kernel.\n    \n    Parameters\n    ----------\n    array : `numpy.ndarray`\n        Array to be convolved with ``kernel``.  It can be of any\n        dimensionality, though only 1, 2, and 3d arrays have been tested.\n    kernel : `numpy.ndarray` or `astropy.convolution.Kernel`\n        The convolution kernel. The number of dimensions should match those\n        for the array.  The dimensions *do not* have to be odd in all directions,\n        unlike in the non-fft `convolve` function.  The kernel will be\n        normalized if ``normalize_kernel`` is set.  It is assumed to be centered\n        (i.e., shifts may result if your kernel is asymmetric).  The kernel\n        *must be normalizable* (i.e., its sum cannot be zero).\n    convolve : `convolve` or `convolve_fft`\n        One of the two convolution functions defined in this package.\n    \n    Returns\n    -------\n    newarray : `numpy.ndarray`\n        A copy of the original array with NaN pixels replaced with their\n        interpolated counterparts",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "896dd3a8ea730ebdd2171e927b0e5a66b0372bd5ccb8ba29516a79b6803f2115",
            "fields": [
                {
                    "id": "pmuhcu09",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to be convolved with ``kernel``.  It can be of any\ndimensionality, though only 1, 2, and 3d arrays have been tested.",
                    "type": "numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbm9ih9b",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The convolution kernel. The number of dimensions should match those\nfor the array.  The dimensions *do not* have to be odd in all directions,\nunlike in the non-fft `convolve` function.  The kernel will be\nnormalized if ``normalize_kernel`` is set.  It is assumed to be centered\n(i.e., shifts may result if your kernel is asymmetric).  The kernel\n*must be normalizable* (i.e., its sum cannot be zero).",
                    "type": "numpy.ndarray or astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3e8snix8",
                    "encoding": "",
                    "name": "convolve",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "One of the two convolution functions defined in this package.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qjdjn481",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fyykhyxy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.interpolate_replace_nans",
                    "defaultValue": "astropy.convolution.interpolate_replace_nans",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_s1m2oi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4c0i9sgb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jwnusas2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyrt4m2i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5cuadkx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgfpg4t3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7un902pp",
            "name": "convolution.kernel_arithmetics",
            "description": "Add, subtract or multiply two kernels.\n    \n    Parameters\n    ----------\n    kernel : `astropy.convolution.Kernel`\n        Kernel instance.\n    value : `astropy.convolution.Kernel`, float, or int\n        Value to operate with.\n    operation : {'add', 'sub', 'mul'}\n        One of the following operations:\n            * 'add'\n                Add two kernels\n            * 'sub'\n                Subtract two kernels\n            * 'mul'\n                Multiply kernel with number or convolve two kernels.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "83634dcb39001ba996b20b9e33e46dc56194020e19a5df1e8f7727f79c49e5ed",
            "fields": [
                {
                    "id": "6ionkjjz",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel instance.",
                    "type": "astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0j2283f",
                    "encoding": "",
                    "name": "value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value to operate with.",
                    "type": "astropy.convolution.Kernel, float, or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7qt9rly",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "One of the following operations:\n    * 'add'\n        Add two kernels\n    * 'sub'\n        Subtract two kernels\n    * 'mul'\n        Multiply kernel with number or convolve two kernels.",
                    "type": "{'add', 'sub', 'mul'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b6zatll5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.kernel_arithmetics",
                    "defaultValue": "astropy.convolution.kernel_arithmetics",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wu8j0kjf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vxb4zcek",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1v24utii",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mgs3e5kv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution",
                    "defaultValue": "astropy.convolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pn89i6dj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rx7s0tl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4ol31eyz",
            "name": "convolve.convolve",
            "description": "Convolve an array with a kernel.\n    \n    This routine differs from `scipy.ndimage.convolve` because\n    it includes a special treatment for ``NaN`` values. Rather than\n    including ``NaN`` values in the array in the convolution calculation, which\n    causes large ``NaN`` holes in the convolved array, ``NaN`` values are\n    replaced with interpolated values using the kernel as an interpolation\n    function.\n    \n    Parameters\n    ----------\n    array : `~astropy.nddata.NDData` or array-like\n        The array to convolve. This should be a 1, 2, or 3-dimensional array\n        or a list or a set of nested lists representing a 1, 2, or\n        3-dimensional array.  If an `~astropy.nddata.NDData`, the ``mask`` of\n        the `~astropy.nddata.NDData` will be used as the ``mask`` argument.\n    kernel : `numpy.ndarray` or `~astropy.convolution.Kernel`\n        The convolution kernel. The number of dimensions should match those for\n        the array, and the dimensions should be odd in all directions.  If a\n        masked array, the masked values will be replaced by ``fill_value``.\n    boundary : str, optional\n        A flag indicating how to handle boundaries:\n            * `None`\n                Set the ``result`` values to zero where the kernel\n                extends beyond the edge of the array.\n            * 'fill'\n                Set values outside the array boundary to ``fill_value`` (default).\n            * 'wrap'\n                Periodic boundary that wrap to the other side of ``array``.\n            * 'extend'\n                Set values outside the array to the nearest ``array``\n                value.\n    fill_value : float, optional\n        The value to use outside the array when using ``boundary='fill'``.\n    normalize_kernel : bool, optional\n        Whether to normalize the kernel to have a sum of one.\n    nan_treatment : {'interpolate', 'fill'}, optional\n        The method used to handle NaNs in the input ``array``:\n            * ``'interpolate'``: ``NaN`` values are replaced with\n              interpolated values using the kernel as an interpolation\n              function. Note that if the kernel has a sum equal to\n              zero, NaN interpolation is not possible and will raise an\n              exception.\n            * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n              prior to convolution.\n    preserve_nan : bool, optional\n        After performing convolution, should pixels that were originally NaN\n        again become NaN?\n    mask : None or ndarray, optional\n        A \"mask\" array.  Shape must match ``array``, and anything that is masked\n        (i.e., not 0/`False`) will be set to NaN for the convolution.  If\n        `None`, no masking will be performed unless ``array`` is a masked array.\n        If ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\n        masked if it is masked in either ``mask`` *or* ``array.mask``.\n    normalization_zero_tol : float, optional\n        The absolute tolerance on whether the kernel is different than zero.\n        If the kernel sums to zero to within this precision, it cannot be\n        normalized. Default is \"1e-8\".\n    \n    Returns\n    -------\n    result : `numpy.ndarray`\n        An array with the same dimensions and as the input array,\n        convolved with kernel.  The data type depends on the input\n        array type.  If array is a floating point type, then the\n        return array keeps the same data type, otherwise the type\n        is ``numpy.float``.\n    \n    Notes\n    -----\n    For masked arrays, masked values are treated as NaNs.  The convolution\n    is always done at ``numpy.float`` precision.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "018889ba4fb058b179fbb75f5bac302d7d42416745c46be8b26bce4f3bae63d2",
            "fields": [
                {
                    "id": "a7fosj9a",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array to convolve. This should be a 1, 2, or 3-dimensional array\nor a list or a set of nested lists representing a 1, 2, or\n3-dimensional array.  If an `~astropy.nddata.NDData`, the ``mask`` of\nthe `~astropy.nddata.NDData` will be used as the ``mask`` argument.",
                    "type": "astropy.nddata.NDData or array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57j6wxg9",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The convolution kernel. The number of dimensions should match those for\nthe array, and the dimensions should be odd in all directions.  If a\nmasked array, the masked values will be replaced by ``fill_value``.",
                    "type": "numpy.ndarray or astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wxrkb7tz",
                    "encoding": "",
                    "name": "boundary",
                    "value": "fill",
                    "defaultValue": "fill",
                    "description": "A flag indicating how to handle boundaries:\n    * `None`\n        Set the ``result`` values to zero where the kernel\n        extends beyond the edge of the array.\n    * 'fill'\n        Set values outside the array boundary to ``fill_value`` (default).\n    * 'wrap'\n        Periodic boundary that wrap to the other side of ``array``.\n    * 'extend'\n        Set values outside the array to the nearest ``array``\n        value.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_aov9ite",
                    "encoding": "",
                    "name": "fill_value",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The value to use outside the array when using ``boundary='fill'``.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nn03ke_t",
                    "encoding": "",
                    "name": "nan_treatment",
                    "value": "interpolate",
                    "defaultValue": "interpolate",
                    "description": "The method used to handle NaNs in the input ``array``:\n    * ``'interpolate'``: ``NaN`` values are replaced with\n      interpolated values using the kernel as an interpolation\n      function. Note that if the kernel has a sum equal to\n      zero, NaN interpolation is not possible and will raise an\n      exception.\n    * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n      prior to convolution.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "trx8rxkv",
                    "encoding": "",
                    "name": "normalize_kernel",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to normalize the kernel to have a sum of one.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64mz0aym",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "A \"mask\" array.  Shape must match ``array``, and anything that is masked\n(i.e., not 0/`False`) will be set to NaN for the convolution.  If\n`None`, no masking will be performed unless ``array`` is a masked array.\nIf ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\nmasked if it is masked in either ``mask`` *or* ``array.mask``.",
                    "type": "None or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3vtn2c5",
                    "encoding": "",
                    "name": "preserve_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "After performing convolution, should pixels that were originally NaN\nagain become NaN?",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7vt0u1xo",
                    "encoding": "",
                    "name": "normalization_zero_tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "The absolute tolerance on whether the kernel is different than zero.\nIf the kernel sums to zero to within this precision, it cannot be\nnormalized. Default is \"1e-8\".",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xo5w4bkb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.convolve",
                    "defaultValue": "astropy.convolution.convolve.convolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emv42edw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6lep98b9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k8z4fv4i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yf_7kke",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iv1qwsnl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kje0fe8t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f0b5qw81",
            "name": "convolve.convolve_fft",
            "description": "Convolve an ndarray with an nd-kernel.  Returns a convolved image with\n    ``shape = array.shape``.  Assumes kernel is centered.\n    \n    `convolve_fft` is very similar to `convolve` in that it replaces ``NaN``\n    values in the original image with interpolated values using the kernel as\n    an interpolation function.  However, it also includes many additional\n    options specific to the implementation.\n    \n    `convolve_fft` differs from `scipy.signal.fftconvolve` in a few ways:\n    \n    * It can treat ``NaN`` values as zeros or interpolate over them.\n    * ``inf`` values are treated as ``NaN``\n    * It optionally pads to the nearest faster sizes to improve FFT speed.\n      These sizes are optimized for the numpy and scipy implementations, and\n      ``fftconvolve`` uses them by default as well; when using other external\n      functions (see below), results may vary.\n    * Its only valid ``mode`` is 'same' (i.e., the same shape array is returned)\n    * It lets you use your own fft, e.g.,\n      `pyFFTW <https://pypi.org/project/pyFFTW/>`_ or\n      `pyFFTW3 <https://pypi.org/project/PyFFTW3/0.2.1/>`_ , which can lead to\n      performance improvements, depending on your system configuration.  pyFFTW3\n      is threaded, and therefore may yield significant performance benefits on\n      multi-core machines at the cost of greater memory requirements.  Specify\n      the ``fftn`` and ``ifftn`` keywords to override the default, which is\n      `numpy.fft.fftn` and `numpy.fft.ifftn`.  The `scipy.fft` functions also\n      offer somewhat better performance and a multi-threaded option.\n    \n    Parameters\n    ----------\n    array : `numpy.ndarray`\n        Array to be convolved with ``kernel``.  It can be of any\n        dimensionality, though only 1, 2, and 3d arrays have been tested.\n    kernel : `numpy.ndarray` or `astropy.convolution.Kernel`\n        The convolution kernel. The number of dimensions should match those\n        for the array.  The dimensions *do not* have to be odd in all directions,\n        unlike in the non-fft `convolve` function.  The kernel will be\n        normalized if ``normalize_kernel`` is set.  It is assumed to be centered\n        (i.e., shifts may result if your kernel is asymmetric)\n    boundary : {'fill', 'wrap'}, optional\n        A flag indicating how to handle boundaries:\n    \n            * 'fill': set values outside the array boundary to fill_value\n              (default)\n            * 'wrap': periodic boundary\n    \n        The `None` and 'extend' parameters are not supported for FFT-based\n        convolution.\n    fill_value : float, optional\n        The value to use outside the array when using boundary='fill'.\n    nan_treatment : {'interpolate', 'fill'}, optional\n        The method used to handle NaNs in the input ``array``:\n            * ``'interpolate'``: ``NaN`` values are replaced with\n              interpolated values using the kernel as an interpolation\n              function. Note that if the kernel has a sum equal to\n              zero, NaN interpolation is not possible and will raise an\n              exception.\n            * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n              prior to convolution.\n    normalize_kernel : callable or boolean, optional\n        If specified, this is the function to divide kernel by to normalize it.\n        e.g., ``normalize_kernel=np.sum`` means that kernel will be modified to be:\n        ``kernel = kernel / np.sum(kernel)``.  If True, defaults to\n        ``normalize_kernel = np.sum``.\n    normalization_zero_tol : float, optional\n        The absolute tolerance on whether the kernel is different than zero.\n        If the kernel sums to zero to within this precision, it cannot be\n        normalized. Default is \"1e-8\".\n    preserve_nan : bool, optional\n        After performing convolution, should pixels that were originally NaN\n        again become NaN?\n    mask : None or ndarray, optional\n        A \"mask\" array.  Shape must match ``array``, and anything that is masked\n        (i.e., not 0/`False`) will be set to NaN for the convolution.  If\n        `None`, no masking will be performed unless ``array`` is a masked array.\n        If ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\n        masked if it is masked in either ``mask`` *or* ``array.mask``.\n    crop : bool, optional\n        Default on.  Return an image of the size of the larger of the input\n        image and the kernel.\n        If the image and kernel are asymmetric in opposite directions, will\n        return the largest image in both directions.\n        For example, if an input image has shape [100,3] but a kernel with shape\n        [6,6] is used, the output will be [100,6].\n    return_fft : bool, optional\n        Return the ``fft(image)*fft(kernel)`` instead of the convolution (which is\n        ``ifft(fft(image)*fft(kernel))``).  Useful for making PSDs.\n    fft_pad : bool, optional\n        Default on.  Zero-pad image to the nearest size supporting more efficient\n        execution of the FFT, generally values factorizable into the first 3-5\n        prime numbers.  With ``boundary='wrap'``, this will be disabled.\n    psf_pad : bool, optional\n        Zero-pad image to be at least the sum of the image sizes to avoid\n        edge-wrapping when smoothing.  This is enabled by default with\n        ``boundary='fill'``, but it can be overridden with a boolean option.\n        ``boundary='wrap'`` and ``psf_pad=True`` are not compatible.\n    min_wt : float, optional\n        If ignoring ``NaN`` / zeros, force all grid points with a weight less than\n        this value to ``NaN`` (the weight of a grid point with *no* ignored\n        neighbors is 1.0).\n        If ``min_wt`` is zero, then all zero-weight points will be set to zero\n        instead of ``NaN`` (which they would be otherwise, because 1/0 = nan).\n        See the examples below.\n    allow_huge : bool, optional\n        Allow huge arrays in the FFT?  If False, will raise an exception if the\n        array or kernel size is >1 GB.\n    fftn : callable, optional\n        The fft function.  Can be overridden to use your own ffts,\n        e.g. an fftw3 wrapper or scipy's fftn, ``fft=scipy.fftpack.fftn``.\n    ifftn : callable, optional\n        The inverse fft function. Can be overridden the same way ``fttn``.\n    complex_dtype : complex type, optional\n        Which complex dtype to use.  `numpy` has a range of options, from 64 to\n        256.\n    dealias: bool, optional\n        Default off. Zero-pad image to enable explicit dealiasing\n        of convolution. With ``boundary='wrap'``, this will be disabled.\n        Note that for an input of nd dimensions this will increase\n        the size of the temporary arrays by at least ``1.5**nd``.\n        This may result in significantly more memory usage.\n    \n    Returns\n    -------\n    default : ndarray\n        ``array`` convolved with ``kernel``.  If ``return_fft`` is set, returns\n        ``fft(array) * fft(kernel)``.  If crop is not set, returns the\n        image, but with the fft-padded size instead of the input size.\n    \n    Raises\n    ------\n    `ValueError`\n        If the array is bigger than 1 GB after padding, will raise this\n        exception unless ``allow_huge`` is True.\n    \n    See Also\n    --------\n    convolve:\n        Convolve is a non-fft version of this code.  It is more memory\n        efficient and for small kernels can be faster.\n    \n    Notes\n    -----\n    With ``psf_pad=True`` and a large PSF, the resulting data\n    can become large and consume a lot of memory. See Issue\n    https://github.com/astropy/astropy/pull/4366 and the update in\n    https://github.com/astropy/astropy/pull/11533 for further details.\n    \n    Dealiasing of pseudospectral convolutions is necessary for\n    numerical stability of the underlying algorithms. A common\n    method for handling this is to zero pad the image by at least\n    1/2 to eliminate the wavenumbers which have been aliased\n    by convolution. This is so that the aliased 1/3 of the\n    results of the convolution computation can be thrown out. See\n    https://doi.org/10.1175/1520-0469(1971)028%3C1074:OTEOAI%3E2.0.CO;2\n    https://iopscience.iop.org/article/10.1088/1742-6596/318/7/072037\n    \n    Note that if dealiasing is necessary to your application, but your\n    process is memory constrained, you may want to consider using\n    FFTW++: https://github.com/dealias/fftwpp. It includes python\n    wrappers for a pseudospectral convolution which will implicitly\n    dealias your convolution without the need for additional padding.\n    Note that one cannot use FFTW++'s convlution directly in this\n    method as in handles the entire convolution process internally.\n    Additionally, FFTW++ includes other useful pseudospectral methods to\n    consider.\n    \n    Examples\n    --------\n    >>> convolve_fft([1, 0, 3], [1, 1, 1])\n    array([0.33333333, 1.33333333, 1.        ])\n    \n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1])\n    array([0.5, 2. , 1.5])\n    \n    >>> convolve_fft([1, 0, 3], [0, 1, 0])  # doctest: +FLOAT_CMP\n    array([ 1.00000000e+00, -3.70074342e-17,  3.00000000e+00])\n    \n    >>> convolve_fft([1, 2, 3], [1])\n    array([1., 2., 3.])\n    \n    >>> convolve_fft([1, np.nan, 3], [0, 1, 0], nan_treatment='interpolate')\n    array([1., 0., 3.])\n    \n    >>> convolve_fft([1, np.nan, 3], [0, 1, 0], nan_treatment='interpolate',\n    ...              min_wt=1e-8)\n    array([ 1., nan,  3.])\n    \n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate')\n    array([0.5, 2. , 1.5])\n    \n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate',\n    ...               normalize_kernel=True)\n    array([0.5, 2. , 1.5])\n    \n    >>> import scipy.fft  # optional - requires scipy\n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate',\n    ...               normalize_kernel=True,\n    ...               fftn=scipy.fft.fftn, ifftn=scipy.fft.ifftn)\n    array([0.5, 2. , 1.5])\n    \n    >>> fft_mp = lambda a: scipy.fft.fftn(a, workers=-1)  # use all available cores\n    >>> ifft_mp = lambda a: scipy.fft.ifftn(a, workers=-1)\n    >>> convolve_fft([1, np.nan, 3], [1, 1, 1], nan_treatment='interpolate',\n    ...               normalize_kernel=True, fftn=fft_mp, ifftn=ifft_mp)\n    array([0.5, 2. , 1.5])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a070bcd99d0dba8d3518aeba3ebfaae907b66e7df762545ce7f93a5dc0e58a56",
            "fields": [
                {
                    "id": "2yudftca",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to be convolved with ``kernel``.  It can be of any\ndimensionality, though only 1, 2, and 3d arrays have been tested.",
                    "type": "numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jfki6odz",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The convolution kernel. The number of dimensions should match those\nfor the array.  The dimensions *do not* have to be odd in all directions,\nunlike in the non-fft `convolve` function.  The kernel will be\nnormalized if ``normalize_kernel`` is set.  It is assumed to be centered\n(i.e., shifts may result if your kernel is asymmetric)",
                    "type": "numpy.ndarray or astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zpoxs_6t",
                    "encoding": "",
                    "name": "boundary",
                    "value": "fill",
                    "defaultValue": "fill",
                    "description": "A flag indicating how to handle boundaries:\n\n    * 'fill': set values outside the array boundary to fill_value\n      (default)\n    * 'wrap': periodic boundary\n\nThe `None` and 'extend' parameters are not supported for FFT-based\nconvolution.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3n1ahjp",
                    "encoding": "",
                    "name": "fill_value",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The value to use outside the array when using boundary='fill'.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ct0i25os",
                    "encoding": "",
                    "name": "nan_treatment",
                    "value": "interpolate",
                    "defaultValue": "interpolate",
                    "description": "The method used to handle NaNs in the input ``array``:\n    * ``'interpolate'``: ``NaN`` values are replaced with\n      interpolated values using the kernel as an interpolation\n      function. Note that if the kernel has a sum equal to\n      zero, NaN interpolation is not possible and will raise an\n      exception.\n    * ``'fill'``: ``NaN`` values are replaced by ``fill_value``\n      prior to convolution.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2woyu9j",
                    "encoding": "",
                    "name": "normalize_kernel",
                    "value": true,
                    "defaultValue": true,
                    "description": "If specified, this is the function to divide kernel by to normalize it.\ne.g., ``normalize_kernel=np.sum`` means that kernel will be modified to be:\n``kernel = kernel / np.sum(kernel)``.  If True, defaults to\n``normalize_kernel = np.sum``.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mbumcv0",
                    "encoding": "",
                    "name": "normalization_zero_tol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "The absolute tolerance on whether the kernel is different than zero.\nIf the kernel sums to zero to within this precision, it cannot be\nnormalized. Default is \"1e-8\".",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du84qjr0",
                    "encoding": "",
                    "name": "preserve_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "After performing convolution, should pixels that were originally NaN\nagain become NaN?",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbn_7hjs",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "A \"mask\" array.  Shape must match ``array``, and anything that is masked\n(i.e., not 0/`False`) will be set to NaN for the convolution.  If\n`None`, no masking will be performed unless ``array`` is a masked array.\nIf ``mask`` is not `None` *and* ``array`` is a masked array, a pixel is\nmasked if it is masked in either ``mask`` *or* ``array.mask``.",
                    "type": "None or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12ra_5u6",
                    "encoding": "",
                    "name": "crop",
                    "value": true,
                    "defaultValue": true,
                    "description": "Default on.  Return an image of the size of the larger of the input\nimage and the kernel.\nIf the image and kernel are asymmetric in opposite directions, will\nreturn the largest image in both directions.\nFor example, if an input image has shape [100,3] but a kernel with shape\n[6,6] is used, the output will be [100,6].",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ll8re9z",
                    "encoding": "",
                    "name": "return_fft",
                    "value": false,
                    "defaultValue": false,
                    "description": "Return the ``fft(image)*fft(kernel)`` instead of the convolution (which is\n``ifft(fft(image)*fft(kernel))``).  Useful for making PSDs.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqexjaq2",
                    "encoding": "",
                    "name": "fft_pad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default on.  Zero-pad image to the nearest size supporting more efficient\nexecution of the FFT, generally values factorizable into the first 3-5\nprime numbers.  With ``boundary='wrap'``, this will be disabled.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27fqaobb",
                    "encoding": "",
                    "name": "psf_pad",
                    "value": "",
                    "defaultValue": "",
                    "description": "Zero-pad image to be at least the sum of the image sizes to avoid\nedge-wrapping when smoothing.  This is enabled by default with\n``boundary='fill'``, but it can be overridden with a boolean option.\n``boundary='wrap'`` and ``psf_pad=True`` are not compatible.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a44joa_n",
                    "encoding": "",
                    "name": "min_wt",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "If ignoring ``NaN`` / zeros, force all grid points with a weight less than\nthis value to ``NaN`` (the weight of a grid point with *no* ignored\nneighbors is 1.0).\nIf ``min_wt`` is zero, then all zero-weight points will be set to zero\ninstead of ``NaN`` (which they would be otherwise, because 1/0 = nan).\nSee the examples below.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sel36vt3",
                    "encoding": "",
                    "name": "allow_huge",
                    "value": false,
                    "defaultValue": false,
                    "description": "Allow huge arrays in the FFT?  If False, will raise an exception if the\narray or kernel size is >1 GB.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2v9_93_j",
                    "encoding": "",
                    "name": "fftn",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "The fft function.  Can be overridden to use your own ffts,\ne.g. an fftw3 wrapper or scipy's fftn, ``fft=scipy.fftpack.fftn``.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2bc1dmxm",
                    "encoding": "",
                    "name": "ifftn",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "The inverse fft function. Can be overridden the same way ``fttn``.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29yvj809",
                    "encoding": "",
                    "name": "complex_dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "Which complex dtype to use.  `numpy` has a range of options, from 64 to\n256.",
                    "type": "type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njnszzfg",
                    "encoding": "",
                    "name": "dealias",
                    "value": false,
                    "defaultValue": false,
                    "description": "Default off. Zero-pad image to enable explicit dealiasing\nof convolution. With ``boundary='wrap'``, this will be disabled.\nNote that for an input of nd dimensions this will increase\nthe size of the temporary arrays by at least ``1.5**nd``.\nThis may result in significantly more memory usage.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j90lb0bh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.convolve_fft",
                    "defaultValue": "astropy.convolution.convolve.convolve_fft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2on7zow",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3hf6f0ap",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sgf03e43",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "it8pravd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "23morme7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvrlaldo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c_h6t2nn",
            "name": "convolve.convolve_models",
            "description": "Convolve two models using `~astropy.convolution.convolve_fft`.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.core.Model`\n        Functional model\n    kernel : `~astropy.modeling.core.Model`\n        Convolution kernel\n    mode : str\n        Keyword representing which function to use for convolution.\n            * 'convolve_fft' : use `~astropy.convolution.convolve_fft` function.\n            * 'convolve' : use `~astropy.convolution.convolve`.\n    **kwargs : dict\n        Keyword arguments to me passed either to `~astropy.convolution.convolve`\n        or `~astropy.convolution.convolve_fft` depending on ``mode``.\n    \n    Returns\n    -------\n    default : `~astropy.modeling.core.CompoundModel`\n        Convolved model",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e9d9460c1546b3a600f463db96edcfc7afe7c7d0ce4a14647365539ae5b03116",
            "fields": [
                {
                    "id": "od9fx7_y",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Functional model",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dsy3m6r1",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convolution kernel",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljozlx7q",
                    "encoding": "",
                    "name": "mode",
                    "value": "convolve_fft",
                    "defaultValue": "convolve_fft",
                    "description": "Keyword representing which function to use for convolution.\n    * 'convolve_fft' : use `~astropy.convolution.convolve_fft` function.\n    * 'convolve' : use `~astropy.convolution.convolve`.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_ze18n3",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wjj41ex",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.convolve_models",
                    "defaultValue": "astropy.convolution.convolve.convolve_models",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bv2hi3dd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sm24kg99",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0glf4111",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "37luz38n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "79b2eqjn",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "thc3kg2f",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zagw14jr",
            "name": "convolve.convolve_models_fft",
            "description": "Convolve two models using `~astropy.convolution.convolve_fft`.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.core.Model`\n        Functional model\n    kernel : `~astropy.modeling.core.Model`\n        Convolution kernel\n    bounding_box : tuple\n        The bounding box which encompasses enough of the support of both\n        the ``model`` and ``kernel`` so that an accurate convolution can be\n        computed.\n    resolution : float\n        The resolution that one wishes to approximate the convolution\n        integral at.\n    cache : optional, bool\n        Default value True. Allow for the storage of the convolution\n        computation for later reuse.\n    **kwargs : dict\n        Keyword arguments to be passed either to `~astropy.convolution.convolve`\n        or `~astropy.convolution.convolve_fft` depending on ``mode``.\n    \n    Returns\n    -------\n    default : `~astropy.modeling.core.CompoundModel`\n        Convolved model",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0d884773a0dd9275d84905b0b7f7bd3feea41bffe73447d675d16041c7a916a",
            "fields": [
                {
                    "id": "th1qy16r",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Functional model",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sve0y2mp",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convolution kernel",
                    "type": "astropy.modeling.core.Model",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e5p5vigd",
                    "encoding": "",
                    "name": "bounding_box",
                    "value": "",
                    "defaultValue": "",
                    "description": "The bounding box which encompasses enough of the support of both\nthe ``model`` and ``kernel`` so that an accurate convolution can be\ncomputed.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e13cc0bn",
                    "encoding": "",
                    "name": "resolution",
                    "value": "",
                    "defaultValue": "",
                    "description": "The resolution that one wishes to approximate the convolution\nintegral at.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_io6x4e7",
                    "encoding": "",
                    "name": "cache",
                    "value": true,
                    "defaultValue": true,
                    "description": "Default value True. Allow for the storage of the convolution\ncomputation for later reuse.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbgfgauw",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g29narwz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.convolve_models_fft",
                    "defaultValue": "astropy.convolution.convolve.convolve_models_fft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "usqgjuoq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jrmabp3a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ps_1hvfv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9fc_u077",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hir5o_k6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oksuqot9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yccfmvcb",
            "name": "convolve.has_even_axis",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7054bf38dc673d5cb429c129f871c9324a945780a4eff3efd92b5d65eacf48f6",
            "fields": [
                {
                    "id": "l9gbzkp6",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5pyf3yx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.has_even_axis",
                    "defaultValue": "astropy.convolution.convolve.has_even_axis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zsraw49s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "apc5cvk0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8uvjzsll",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbgk_qi4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2vemp55l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "npleouzs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0h91ufr1",
            "name": "convolve.human_file_size",
            "description": "Returns a human-friendly string representing a file size\n    that is 2-4 characters long.\n    \n    For example, depending on the number of bytes given, can be one\n    of::\n    \n        256b\n        64k\n        1.1G\n    \n    Parameters\n    ----------\n    size : int\n        The size of the file (in bytes)\n    \n    Returns\n    -------\n    size : str\n        A human-friendly representation of the size of the file",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9db687da6a77a14e16ccfcc0207821479a2a2ec3af34241427e38eaa95ed0375",
            "fields": [
                {
                    "id": "tf6e3hgh",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the file (in bytes)",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhtcmnag",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.human_file_size",
                    "defaultValue": "astropy.convolution.convolve.human_file_size",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5asdkmr2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6xhpj88",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r83cm_ow",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sk4rul9l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7unjv2e9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3unstfpq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "uy5ebm5g",
            "name": "convolve.interpolate_replace_nans",
            "description": "Given a data set containing NaNs, replace the NaNs by interpolating from\n    neighboring data points with a given kernel.\n    \n    Parameters\n    ----------\n    array : `numpy.ndarray`\n        Array to be convolved with ``kernel``.  It can be of any\n        dimensionality, though only 1, 2, and 3d arrays have been tested.\n    kernel : `numpy.ndarray` or `astropy.convolution.Kernel`\n        The convolution kernel. The number of dimensions should match those\n        for the array.  The dimensions *do not* have to be odd in all directions,\n        unlike in the non-fft `convolve` function.  The kernel will be\n        normalized if ``normalize_kernel`` is set.  It is assumed to be centered\n        (i.e., shifts may result if your kernel is asymmetric).  The kernel\n        *must be normalizable* (i.e., its sum cannot be zero).\n    convolve : `convolve` or `convolve_fft`\n        One of the two convolution functions defined in this package.\n    \n    Returns\n    -------\n    newarray : `numpy.ndarray`\n        A copy of the original array with NaN pixels replaced with their\n        interpolated counterparts",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1972a7cffd129195a325833fde8d38a0261aa4ab1a79309ec7a164900eccf13e",
            "fields": [
                {
                    "id": "2ojz58i6",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to be convolved with ``kernel``.  It can be of any\ndimensionality, though only 1, 2, and 3d arrays have been tested.",
                    "type": "numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k39_1ds3",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The convolution kernel. The number of dimensions should match those\nfor the array.  The dimensions *do not* have to be odd in all directions,\nunlike in the non-fft `convolve` function.  The kernel will be\nnormalized if ``normalize_kernel`` is set.  It is assumed to be centered\n(i.e., shifts may result if your kernel is asymmetric).  The kernel\n*must be normalizable* (i.e., its sum cannot be zero).",
                    "type": "numpy.ndarray or astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s079bnl6",
                    "encoding": "",
                    "name": "convolve",
                    "value": "builtins.function",
                    "defaultValue": "builtins.function",
                    "description": "One of the two convolution functions defined in this package.",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ecm4gtl",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bacjz57s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.interpolate_replace_nans",
                    "defaultValue": "astropy.convolution.convolve.interpolate_replace_nans",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "loa6slos",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1aowctr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cae5358u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c8jsgu4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8l4y68y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "74ygjf3r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n1ufqe27",
            "name": "convolve.support_nddata",
            "description": "Decorator to wrap functions that could accept an NDData instance with\n    its properties passed as function arguments.\n    \n    Parameters\n    ----------\n    _func : callable, None, optional\n        The function to decorate or ``None`` if used as factory. The first\n        positional argument should be ``data`` and take a numpy array. It is\n        possible to overwrite the name, see ``attribute_argument_mapping``\n        argument.\n        Default is ``None``.\n    \n    accepts : class, optional\n        The class or subclass of ``NDData`` that should be unpacked before\n        calling the function.\n        Default is ``NDData``\n    \n    repack : bool, optional\n        Should be ``True`` if the return should be converted to the input\n        class again after the wrapped function call.\n        Default is ``False``.\n    \n        .. note::\n           Must be ``True`` if either one of ``returns`` or ``keeps``\n           is specified.\n    \n    returns : iterable, None, optional\n        An iterable containing strings which returned value should be set\n        on the class. For example if a function returns data and mask, this\n        should be ``['data', 'mask']``. If ``None`` assume the function only\n        returns one argument: ``'data'``.\n        Default is ``None``.\n    \n        .. note::\n           Must be ``None`` if ``repack=False``.\n    \n    keeps : iterable. None, optional\n        An iterable containing strings that indicate which values should be\n        copied from the original input to the returned class. If ``None``\n        assume that no attributes are copied.\n        Default is ``None``.\n    \n        .. note::\n           Must be ``None`` if ``repack=False``.\n    \n    attribute_argument_mapping :\n        Keyword parameters that optionally indicate which function argument\n        should be interpreted as which attribute on the input. By default\n        it assumes the function takes a ``data`` argument as first argument,\n        but if the first argument is called ``input`` one should pass\n        ``support_nddata(..., data='input')`` to the function.\n    \n    Returns\n    -------\n    decorator_factory or decorated_function : callable\n        If ``_func=None`` this returns a decorator, otherwise it returns the\n        decorated ``_func``.\n    \n    Notes\n    -----\n    If properties of ``NDData`` are set but have no corresponding function\n    argument a Warning is shown.\n    \n    If a property is set of the ``NDData`` are set and an explicit argument is\n    given, the explicitly given argument is used and a Warning is shown.\n    \n    The supported properties are:\n    \n    - ``mask``\n    - ``unit``\n    - ``wcs``\n    - ``meta``\n    - ``uncertainty``\n    - ``flags``\n    \n    Examples\n    --------\n    This function takes a Numpy array for the data, and some WCS information\n    with the ``wcs`` keyword argument::\n    \n        def downsample(data, wcs=None):\n            # downsample data and optionally WCS here\n            pass\n    \n    However, you might have an NDData instance that has the ``wcs`` property\n    set and you would like to be able to call the function with\n    ``downsample(my_nddata)`` and have the WCS information, if present,\n    automatically be passed to the ``wcs`` keyword argument.\n    \n    This decorator can be used to make this possible::\n    \n        @support_nddata\n        def downsample(data, wcs=None):\n            # downsample data and optionally WCS here\n            pass\n    \n    This function can now either be called as before, specifying the data and\n    WCS separately, or an NDData instance can be passed to the ``data``\n    argument.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "457daf766449f5b1ac618170492a107e668448888a04b2d375fe3c0c7c6ccf66",
            "fields": [
                {
                    "id": "21fi9pp8",
                    "encoding": "",
                    "name": "_func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function to decorate or ``None`` if used as factory. The first\npositional argument should be ``data`` and take a numpy array. It is\npossible to overwrite the name, see ``attribute_argument_mapping``\nargument.\nDefault is ``None``.",
                    "type": "callable, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bcb_zz_w",
                    "encoding": "",
                    "name": "accepts",
                    "value": "abc.ABCMeta",
                    "defaultValue": "abc.ABCMeta",
                    "description": "The class or subclass of ``NDData`` that should be unpacked before\ncalling the function.\nDefault is ``NDData``",
                    "type": "ABCMeta",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "de4d4jxn",
                    "encoding": "",
                    "name": "repack",
                    "value": false,
                    "defaultValue": false,
                    "description": "Should be ``True`` if the return should be converted to the input\nclass again after the wrapped function call.\nDefault is ``False``.\n\n.. note::\n   Must be ``True`` if either one of ``returns`` or ``keeps``\n   is specified.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8mck7tsn",
                    "encoding": "",
                    "name": "returns",
                    "value": "",
                    "defaultValue": "",
                    "description": "An iterable containing strings which returned value should be set\non the class. For example if a function returns data and mask, this\nshould be ``['data', 'mask']``. If ``None`` assume the function only\nreturns one argument: ``'data'``.\nDefault is ``None``.\n\n.. note::\n   Must be ``None`` if ``repack=False``.",
                    "type": "iterable, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8mrqdtt5",
                    "encoding": "",
                    "name": "keeps",
                    "value": "",
                    "defaultValue": "",
                    "description": "An iterable containing strings that indicate which values should be\ncopied from the original input to the returned class. If ``None``\nassume that no attributes are copied.\nDefault is ``None``.\n\n.. note::\n   Must be ``None`` if ``repack=False``.",
                    "type": "iterable. None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_oe9jyn9",
                    "encoding": "",
                    "name": "attribute_argument_mapping",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword parameters that optionally indicate which function argument\nshould be interpreted as which attribute on the input. By default\nit assumes the function takes a ``data`` argument as first argument,\nbut if the first argument is called ``input`` one should pass\n``support_nddata(..., data='input')`` to the function.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "449llioe",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.convolve.support_nddata",
                    "defaultValue": "astropy.convolution.convolve.support_nddata",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ptqxqqm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_127rt2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s2jtq_nj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kk22mavq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.convolve",
                    "defaultValue": "astropy.convolution.convolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0s61i08",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2ozewdv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1r8_0oum",
            "name": "core.kernel_arithmetics",
            "description": "Add, subtract or multiply two kernels.\n    \n    Parameters\n    ----------\n    kernel : `astropy.convolution.Kernel`\n        Kernel instance.\n    value : `astropy.convolution.Kernel`, float, or int\n        Value to operate with.\n    operation : {'add', 'sub', 'mul'}\n        One of the following operations:\n            * 'add'\n                Add two kernels\n            * 'sub'\n                Subtract two kernels\n            * 'mul'\n                Multiply kernel with number or convolve two kernels.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "72c4c30222b7cba6a2c57224ab2a592de48beb7706f3fe6a1d4257d26b6841af",
            "fields": [
                {
                    "id": "z508ua58",
                    "encoding": "",
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel instance.",
                    "type": "astropy.convolution.Kernel",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tli456mc",
                    "encoding": "",
                    "name": "value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value to operate with.",
                    "type": "astropy.convolution.Kernel, float, or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rp2q6wjm",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "One of the following operations:\n    * 'add'\n        Add two kernels\n    * 'sub'\n        Subtract two kernels\n    * 'mul'\n        Multiply kernel with number or convolve two kernels.",
                    "type": "{'add', 'sub', 'mul'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhn96p13",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.core.kernel_arithmetics",
                    "defaultValue": "astropy.convolution.core.kernel_arithmetics",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1lz7uf1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pfbjmz2g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u8f0wtzt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5m5279c4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.core",
                    "defaultValue": "astropy.convolution.core",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8gidbuzf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5d30yg2v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p33r_7jw",
            "name": "utils.discretize_model",
            "description": "Evaluate an analytical model function on a pixel grid.\n    \n    Parameters\n    ----------\n    model : `~astropy.modeling.Model` or callable.\n        Analytical model function to be discretized. A callable that is\n        not a `~astropy.modeling.Model` instance is converted to a model\n        using `~astropy.modeling.custom_model`.\n    x_range : 2-tuple\n        Lower and upper bounds of x pixel values at which the model is\n        evaluated. The upper bound is non-inclusive. A ``x_range`` of\n        ``(0, 3)`` means the model will be evaluated at x pixels 0, 1,\n        and 2. The difference between the upper and lower bound must be\n        a whole number so that the output array size is well defined.\n    y_range : 2-tuple or `None`, optional\n        Lower and upper bounds of y pixel values at which the model is\n        evaluated. The upper bound is non-inclusive. A ``y_range`` of\n        ``(0, 3)`` means the model will be evaluated at y pixels of 0,\n        1, and 2. The difference between the upper and lower bound must\n        be a whole number so that the output array size is well defined.\n        ``y_range`` is necessary only for 2D models.\n    mode : {'center', 'linear_interp', 'oversample', 'integrate'}, optional\n        One of the following modes:\n            * ``'center'`` (default)\n                Discretize model by taking the value at the center of\n                the pixel bins.\n            * ``'linear_interp'``\n                Discretize model by linearly interpolating between the\n                values at the edges (1D) or corners (2D) of the pixel\n                bins. For 2D models, the interpolation is bilinear.\n            * ``'oversample'``\n                Discretize model by taking the average of model values\n                in the pixel bins on an oversampled grid. Use the\n                ``factor`` keyword to set the integer oversampling\n                factor.\n            * ``'integrate'``\n                Discretize model by integrating the model over the pixel\n                bins using `scipy.integrate.quad`. This mode conserves\n                the model integral on a subpixel scale, but is very\n                slow.\n    factor : int, optional\n        The integer oversampling factor used when ``mode='oversample'``.\n        Ignored otherwise.\n    \n    Returns\n    -------\n    array : `numpy.ndarray`\n        The discretized model array.\n    \n    Examples\n    --------\n    In this example, we define a\n    `~astropy.modeling.functional_models.Gaussian1D` model that has been\n    normalized so that it sums to 1.0. We then discretize this model\n    using the ``'center'``, ``'linear_interp'``, and ``'oversample'``\n    (with ``factor=10``) modes.\n    \n    .. plot::\n        :show-source-link:\n    \n        import matplotlib.pyplot as plt\n        import numpy as np\n        from astropy.convolution.utils import discretize_model\n        from astropy.modeling.models import Gaussian1D\n    \n        gauss_1D = Gaussian1D(1 / (0.5 * np.sqrt(2 * np.pi)), 0, 0.5)\n        x_range = (-2, 3)\n        x = np.arange(*x_range)\n        y_center = discretize_model(gauss_1D, x_range, mode='center')\n        y_edge = discretize_model(gauss_1D, x_range, mode='linear_interp')\n        y_oversample = discretize_model(gauss_1D, x_range, mode='oversample')\n    \n        fig, ax = plt.subplots(figsize=(8, 6))\n        label = f'center (sum={y_center.sum():.3f})'\n        ax.plot(x, y_center, '.-', label=label)\n        label = f'linear_interp (sum={y_edge.sum():.3f})'\n        ax.plot(x, y_edge, '.-', label=label)\n        label = f'oversample (sum={y_oversample.sum():.3f})'\n        ax.plot(x, y_oversample, '.-', label=label)\n        ax.set_xlabel('x')\n        ax.set_ylabel('Value')\n        plt.legend()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cecbea0a8d9f79eee16ef9ad6f16ded25bf7358152638503ba86903f440e943c",
            "fields": [
                {
                    "id": "127z35je",
                    "encoding": "",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Analytical model function to be discretized. A callable that is\nnot a `~astropy.modeling.Model` instance is converted to a model\nusing `~astropy.modeling.custom_model`.",
                    "type": "astropy.modeling.Model or callable.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "joqwpwpo",
                    "encoding": "",
                    "name": "x_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower and upper bounds of x pixel values at which the model is\nevaluated. The upper bound is non-inclusive. A ``x_range`` of\n``(0, 3)`` means the model will be evaluated at x pixels 0, 1,\nand 2. The difference between the upper and lower bound must be\na whole number so that the output array size is well defined.",
                    "type": "2-tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pfv6iao1",
                    "encoding": "",
                    "name": "y_range",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower and upper bounds of y pixel values at which the model is\nevaluated. The upper bound is non-inclusive. A ``y_range`` of\n``(0, 3)`` means the model will be evaluated at y pixels of 0,\n1, and 2. The difference between the upper and lower bound must\nbe a whole number so that the output array size is well defined.\n``y_range`` is necessary only for 2D models.",
                    "type": "2-tuple or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1opbmhk",
                    "encoding": "",
                    "name": "mode",
                    "value": "center",
                    "defaultValue": "center",
                    "description": "One of the following modes:\n    * ``'center'`` (default)\n        Discretize model by taking the value at the center of\n        the pixel bins.\n    * ``'linear_interp'``\n        Discretize model by linearly interpolating between the\n        values at the edges (1D) or corners (2D) of the pixel\n        bins. For 2D models, the interpolation is bilinear.\n    * ``'oversample'``\n        Discretize model by taking the average of model values\n        in the pixel bins on an oversampled grid. Use the\n        ``factor`` keyword to set the integer oversampling\n        factor.\n    * ``'integrate'``\n        Discretize model by integrating the model over the pixel\n        bins using `scipy.integrate.quad`. This mode conserves\n        the model integral on a subpixel scale, but is very\n        slow.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bq958ga5",
                    "encoding": "",
                    "name": "factor",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "The integer oversampling factor used when ``mode='oversample'``.\nIgnored otherwise.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohryl70o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.convolution.utils.discretize_model",
                    "defaultValue": "astropy.convolution.utils.discretize_model",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1oyfy8j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xtpid5j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n6ujlauk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "go_k9ieh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.convolution.utils",
                    "defaultValue": "astropy.convolution.utils",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wqkl9dfi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "69pwtm3l",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}