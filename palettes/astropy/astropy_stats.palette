{
    "modelData": {
        "filePath": "astropy_stats.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "This subpackage contains statistical tools provided for or used by Astropy.\n\nWhile the `scipy.stats` package contains a wide range of statistical\ntools, it is a general-purpose package, and is missing some that are\nparticularly useful to astronomy or are used in an atypical way in\nastronomy. This package is intended to provide such functionality, but\n*not* to replace `scipy.stats` if its implementation satisfies\nastronomers' needs.",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "astropy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "a198692c4e8ffda157a2433fb29ea713df4b8f84dd504145adbe4a355d363525",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1731918702.799634,
        "numLGNodes": 102
    },
    "nodeDataArray": [
        {
            "category": "PythonMemberFunction",
            "id": "t8b26bn_",
            "name": "BoxLeastSquares.__init__",
            "description": "\nCompute the box least squares periodogram.\n    \n    This class has been deprecated and will be removed in a future version.\n    Use `astropy.timeseries.BoxLeastSquares` instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5f0b2734e1799011465f490ef1d4b4eb50f54db343dc827156e112a4601308d7",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares object",
                    "type": "Object:astropy.stats.bls.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bls.BoxLeastSquares",
                    "defaultValue": "astropy.stats.bls.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bls.BoxLeastSquares.__init__",
                    "defaultValue": "astropy.stats.bls.BoxLeastSquares.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "hs6qyxpc",
            "name": "BoxLeastSquares.autoperiod",
            "description": "Determine a suitable grid of periods.\n    \n    This method uses a set of heuristics to select a conservative period\n    grid that is uniform in frequency. This grid might be too fine for\n    some user's needs depending on the precision requirements or the\n    sampling of the data. The grid can be made coarser by increasing\n    ``frequency_factor``.\n    \n    Parameters\n    ----------\n    duration : float, array-like, or `~astropy.units.Quantity` ['time']\n        The set of durations that will be considered.\n    minimum_period, maximum_period : float or `~astropy.units.Quantity` ['time'], optional\n        The minimum/maximum periods to search. If not provided, these will\n        be computed as described in the notes below.\n    minimum_n_transit : int, optional\n        If ``maximum_period`` is not provided, this is used to compute the\n        maximum period to search by asserting that any systems with at\n        least ``minimum_n_transits`` will be within the range of searched\n        periods. Note that this is not the same as requiring that\n        ``minimum_n_transits`` be required for detection. The default\n        value is ``3``.\n    frequency_factor : float, optional\n        A factor to control the frequency spacing as described in the\n        notes below. The default value is ``1.0``.\n    \n    Returns\n    -------\n    period : array-like or `~astropy.units.Quantity` ['time']\n        The set of periods computed using these heuristics with the same\n        units as ``t``.\n    \n    Notes\n    -----\n    The default minimum period is chosen to be twice the maximum duration\n    because there won't be much sensitivity to periods shorter than that.\n    \n    The default maximum period is computed as\n    \n    .. code-block:: python\n    \n        maximum_period = (max(t) - min(t)) / minimum_n_transits\n    \n    ensuring that any systems with at least ``minimum_n_transits`` are\n    within the range of searched periods.\n    \n    The frequency spacing is given by\n    \n    .. code-block:: python\n    \n        df = frequency_factor * min(duration) / (max(t) - min(t))**2\n    \n    so the grid can be made finer by decreasing ``frequency_factor`` or\n    coarser by increasing ``frequency_factor``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d1f60f054eba36eab40fafb2ab4f8ea170e71f47617271a0ed514a1282a2c910",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares.autoperiod object",
                    "type": "Object:astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "duration",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, array-like, or `~astropy.units.Quantity` ['time']\n    The set of durations that will be considered.\nminimum_period,",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_period",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maximum_period",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time'], optional\n    The minimum/maximum periods to search. If not provided, these will\n    be computed as described in the notes below.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_n_transit",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional\n    If ``maximum_period`` is not provided, this is used to compute the\n    maximum period to search by asserting that any systems with at\n    least ``minimum_n_transits`` will be within the range of searched\n    periods. Note that this is not the same as requiring that\n    ``minimum_n_transits`` be required for detection. The default\n    value is ``3``.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "frequency_factor",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional\n    A factor to control the frequency spacing as described in the\n    notes below. The default value is ``1.0``.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.autoperiod",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.autoperiod",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "iexdgxkq",
            "name": "BoxLeastSquares.autopower",
            "description": "Compute the periodogram at set of heuristically determined periods.\n    \n    This method calls :func:`BoxLeastSquares.autoperiod` to determine\n    the period grid and then :func:`BoxLeastSquares.power` to compute\n    the periodogram. See those methods for documentation of the arguments.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "46df5c69be31cd8ac8c88e592fcfcac4bdf75df3417dd7b5b1f30c61b5cf8573",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares.autopower object",
                    "type": "Object:astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "duration",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "objective",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "oversample",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_n_transit",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_period",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maximum_period",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "frequency_factor",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.autopower",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.autopower",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "zvm3wrxb",
            "name": "BoxLeastSquares.compute_stats",
            "description": "Compute descriptive statistics for a given transit model.\n    \n    These statistics are commonly used for vetting of transit candidates.\n    \n    Parameters\n    ----------\n    period : float or `~astropy.units.Quantity` ['time']\n        The period of the transits.\n    duration : float or `~astropy.units.Quantity` ['time']\n        The duration of the transit.\n    transit_time : float or `~astropy.units.Quantity` or `~astropy.time.Time`\n        The mid-transit time of a reference transit.\n    \n    Returns\n    -------\n    stats : dict\n        A dictionary containing several descriptive statistics:\n    \n        - ``depth``: The depth and uncertainty (as a tuple with two\n            values) on the depth for the fiducial model.\n        - ``depth_odd``: The depth and uncertainty on the depth for a\n            model where the period is twice the fiducial period.\n        - ``depth_even``: The depth and uncertainty on the depth for a\n            model where the period is twice the fiducial period and the\n            phase is offset by one orbital period.\n        - ``depth_half``: The depth and uncertainty for a model with a\n            period of half the fiducial period.\n        - ``depth_phased``: The depth and uncertainty for a model with the\n            fiducial period and the phase offset by half a period.\n        - ``harmonic_amplitude``: The amplitude of the best fit sinusoidal\n            model.\n        - ``harmonic_delta_log_likelihood``: The difference in log\n            likelihood between a sinusoidal model and the transit model.\n            If ``harmonic_delta_log_likelihood`` is greater than zero, the\n            sinusoidal model is preferred.\n        - ``transit_times``: The mid-transit time for each transit in the\n            baseline.\n        - ``per_transit_count``: An array with a count of the number of\n            data points in each unique transit included in the baseline.\n        - ``per_transit_log_likelihood``: An array with the value of the\n            log likelihood for each unique transit included in the\n            baseline.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "070983743da658e5ba6c425ee937ecafc2b57b1f852b2e057f9510b4b8aac1a5",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares.compute_stats object",
                    "type": "Object:astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "period",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time']\n    The period of the transits.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "duration",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time']\n    The duration of the transit.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transit_time",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` or `~    The mid-transit time of a reference transit.",
                    "type": "astropy.time.Time",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.compute_stats",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.compute_stats",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "uemigdx2",
            "name": "BoxLeastSquares.from_timeseries",
            "description": "Initialize a periodogram from a time series object.\n    \n    If a binned time series is passed, the time at the center of the bins is\n    used. Also note that this method automatically gets rid of NaN/undefined\n    values when initializing the periodogram.\n    \n    Parameters\n    ----------\n    signal_column_name : str\n        The name of the column containing the signal values to use.\n    uncertainty : str or float or `~astropy.units.Quantity`, optional\n        The name of the column containing the errors on the signal, or the\n        value to use for the error, if a scalar.\n    **kwargs\n        Additional keyword arguments are passed to the initializer for this\n        periodogram class.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "53c7480c3368d97764783ba1311cd8a3d5951294f04d524b508d9ad681c3075a",
            "fields": [
                {
                    "name": "timeseries",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "signal_column_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "str\n    The name of the column containing the signal values to use.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "uncertainty",
                    "value": null,
                    "defaultValue": null,
                    "description": "str or float or `~ optional\n    The name of the column containing the errors on the signal, or the\n    value to use for the error, if a scalar.\n**kwargs\n    Additional keyword arguments are passed to the initializer for this\n    periodogram class.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.base.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.base.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.base.BoxLeastSquares.from_timeseries",
                    "defaultValue": "astropy.timeseries.periodograms.base.BoxLeastSquares.from_timeseries",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "lz8d6b3z",
            "name": "BoxLeastSquares.model",
            "description": "Compute the transit model at the given period, duration, and phase.\n    \n    Parameters\n    ----------\n    t_model : array-like, `~astropy.units.Quantity`, or `~astropy.time.Time`\n        Times at which to compute the model.\n    period : float or `~astropy.units.Quantity` ['time']\n        The period of the transits.\n    duration : float or `~astropy.units.Quantity` ['time']\n        The duration of the transit.\n    transit_time : float or `~astropy.units.Quantity` or `~astropy.time.Time`\n        The mid-transit time of a reference transit.\n    \n    Returns\n    -------\n    y_model : array-like or `~astropy.units.Quantity`\n        The model evaluated at the times ``t_model`` with units of ``y``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "22b0cd36315cef612bbe5f8098c1ee79f82ea718bc570f5d972067934a47d871",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares.model object",
                    "type": "Object:astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t_model",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, `~ or `~    Times at which to compute the model.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "period",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time']\n    The period of the transits.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "duration",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time']\n    The duration of the transit.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transit_time",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` or `~    The mid-transit time of a reference transit.",
                    "type": "astropy.time.Time",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.model",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.model",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "nxzgnutf",
            "name": "BoxLeastSquares.power",
            "description": "Compute the periodogram for a set of periods.\n    \n    Parameters\n    ----------\n    period : array-like or `~astropy.units.Quantity` ['time']\n        The periods where the power should be computed\n    duration : float, array-like, or `~astropy.units.Quantity` ['time']\n        The set of durations to test\n    objective : {'likelihood', 'snr'}, optional\n        The scalar that should be optimized to find the best fit phase,\n        duration, and depth. This can be either ``'likelihood'`` (default)\n        to optimize the log-likelihood of the model, or ``'snr'`` to\n        optimize the signal-to-noise with which the transit depth is\n        measured.\n    method : {'fast', 'slow'}, optional\n        The computational method used to compute the periodogram. This is\n        mainly included for the purposes of testing and most users will\n        want to use the optimized ``'fast'`` method (default) that is\n        implemented in Cython.  ``'slow'`` is a brute-force method that is\n        used to test the results of the ``'fast'`` method.\n    oversample : int, optional\n        The number of bins per duration that should be used. This sets the\n        time resolution of the phase fit with larger values of\n        ``oversample`` yielding a finer grid and higher computational cost.\n    \n    Returns\n    -------\n    results : BoxLeastSquaresResults\n        The periodogram results as a :class:`BoxLeastSquaresResults`\n        object.\n    \n    Raises\n    ------\n    ValueError\n        If ``oversample`` is not an integer greater than 0 or if\n        ``objective`` or ``method`` are not valid.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "74141645969346e72318a2ca59b1b92190c0eafee9938a1a190378be6bc92e06",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares.power object",
                    "type": "Object:astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "period",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or `~astropy.units.Quantity` ['time']\n    The periods where the power should be computed",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "duration",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, array-like, or `~astropy.units.Quantity` ['time']\n    The set of durations to test",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "objective",
                    "value": null,
                    "defaultValue": null,
                    "description": "{'likelihood', 'snr'}, optional\n    The scalar that should be optimized to find the best fit phase,\n    duration, and depth. This can be either ``'likelihood'`` (default)\n    to optimize the log-likelihood of the model, or ``'snr'`` to\n    optimize the signal-to-noise with which the transit depth is\n    measured.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": null,
                    "defaultValue": null,
                    "description": "{'fast', 'slow'}, optional\n    The computational method used to compute the periodogram. This is\n    mainly included for the purposes of testing and most users will\n    want to use the optimized ``'fast'`` method (default) that is\n    implemented in Cython.  ``'slow'`` is a brute-force method that is\n    used to test the results of the ``'fast'`` method.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "oversample",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, optional\n    The number of bins per duration that should be used. This sets the\n    time resolution of the phase fit with larger values of\n    ``oversample`` yielding a finer grid and higher computational cost.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.power",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.power",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "zokwt7g8",
            "name": "BoxLeastSquares.transit_mask",
            "description": "Compute which data points are in transit for a given parameter set.\n    \n    Parameters\n    ----------\n    t : array-like or `~astropy.units.Quantity` ['time']\n        Times where the mask should be evaluated.\n    period : float or `~astropy.units.Quantity` ['time']\n        The period of the transits.\n    duration : float or `~astropy.units.Quantity` ['time']\n        The duration of the transit.\n    transit_time : float or `~astropy.units.Quantity` or `~astropy.time.Time`\n        The mid-transit time of a reference transit.\n    \n    Returns\n    -------\n    transit_mask : array-like\n        A boolean array where ``True`` indicates and in transit point and\n        ``False`` indicates and out-of-transit point.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "de2a73e1fedfc278621b6dea8be15afdba8bea031a48f29cc9ecda1c46e21421",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquares.transit_mask object",
                    "type": "Object:astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or `~astropy.units.Quantity` ['time']\n    Times where the mask should be evaluated.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "period",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time']\n    The period of the transits.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "duration",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['time']\n    The duration of the transit.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transit_time",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` or `~    The mid-transit time of a reference transit.",
                    "type": "astropy.time.Time",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.transit_mask",
                    "defaultValue": "astropy.timeseries.periodograms.bls.core.BoxLeastSquares.transit_mask",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "ey153oum",
            "name": "BoxLeastSquaresResults.__init__",
            "description": "\nThe results of a BoxLeastSquares search.\n    \n    This class has been deprecated and will be removed in a future version.\n    Use `astropy.timeseries.BoxLeastSquaresResults` instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7db644aca3d746bf39eee0c1c39d77a679a51112dbf296b617124134016cf8e5",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults object",
                    "type": "Object:astropy.stats.bls.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bls.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.bls.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bls.BoxLeastSquaresResults.__init__",
                    "defaultValue": "astropy.stats.bls.BoxLeastSquaresResults.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "wfviyni4",
            "name": "BoxLeastSquaresResults.clear",
            "description": "D.clear() -> None.  Remove all items from D.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2cecea3471b8efe7e6a1e589257dbe9f6167d4d7df8dd192d3e046b709f1590d",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.clear object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.clear",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.clear",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "gb9yj3i5",
            "name": "BoxLeastSquaresResults.copy",
            "description": "D.copy() -> a shallow copy of D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "91956c0a7c54f15157781b184b2a2c98585ea5f080cfa2670e019209acc33b04",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.copy object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.copy",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.copy",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "t1ucu3f_",
            "name": "BoxLeastSquaresResults.fromkeys",
            "description": "Create a new dictionary with keys from iterable and values set to value.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "30accd08b524f4fed7a3076f7b5fedc08ac248d39f910cb3b451ef24b29f8946",
            "fields": [
                {
                    "name": "iterable",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "value",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.fromkeys",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.fromkeys",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "k7gvvdo_",
            "name": "BoxLeastSquaresResults.get",
            "description": "Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "30fae82890a6331db17226ff4cf01b6c8db71419efbf91372fa141ec9c066c0b",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.get object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "key",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "default",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.get",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.get",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "pjsokmeh",
            "name": "BoxLeastSquaresResults.items",
            "description": "D.items() -> a set-like object providing a view on D's items",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5cd74d30c2be06139d0b762dc0c4c64a7f428d254308d0b722e1e68c960df1a5",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.items object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.items",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.items",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "z3x29hmj",
            "name": "BoxLeastSquaresResults.keys",
            "description": "D.keys() -> a set-like object providing a view on D's keys",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb7d28a0d64d8ad9f1cdc076f02e4eb4a1add4ff4b905514ec0dfe6eee463496",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.keys object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.keys",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.keys",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "vwe6jgtm",
            "name": "BoxLeastSquaresResults.pop",
            "description": "If the key is not found, return the default if given; otherwise,\nraise a KeyError.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a826b002d1aa9a68a06eeb739f7ab6bebcc01d8a639b8d500f2a6bb7ff7eb742",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.pop object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "k",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'['",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "d",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "']'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.pop",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.pop",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "aofwc33k",
            "name": "BoxLeastSquaresResults.popitem",
            "description": "Remove and return a (key, value) pair as a 2-tuple.\n    \n    Pairs are returned in LIFO (last-in, first-out) order.\n    Raises KeyError if the dict is empty.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "985ce4553343f8ebc4eecd706f2e8296a43425190f47e0fefe5ba58aa250a4f4",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.popitem object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.popitem",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.popitem",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "xn1sfq0p",
            "name": "BoxLeastSquaresResults.setdefault",
            "description": "Insert key with a value of default if key is not in the dictionary.\n    \n    Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8d670e3329e236d66da85b2f413c7f980316ab5763e6dc9269410cfad3d666ed",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.setdefault object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "key",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "default",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.setdefault",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.setdefault",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "n9a7xw2g",
            "name": "BoxLeastSquaresResults.update",
            "description": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fad0e5154ebab65e471a7a084d29807b70b6e05279a9d29e07b1dcbbdbbbc865",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.update object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "E",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "None.",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'Update'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "D",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'from'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dict",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterable",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'E'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "and",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'has'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "If",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'E'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "is",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'present'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": "",
                    "description": "",
                    "type": "'.keys'",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.update",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.update",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "b6wtkiow",
            "name": "BoxLeastSquaresResults.values",
            "description": "D.values() -> an object providing a view on D's values",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "119d04ad66fb07b3a48bcbeb056ced9577ee2551da469ee4a347308116f6bac7",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to BoxLeastSquaresResults.values object",
                    "type": "Object:astropy.stats.BoxLeastSquaresResults",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.BoxLeastSquaresResults",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.BoxLeastSquaresResults.values",
                    "defaultValue": "astropy.stats.BoxLeastSquaresResults.values",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "uztkghiu",
            "name": "Events.compute_ncp_prior",
            "description": "If ``ncp_prior`` is not explicitly defined, compute it from ``gamma``\n    or ``p0``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb0e3de23d97a9f00dd5ae9caca6abad4d247a4bfeb9634d6fe692e0c8c16e90",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to Events.compute_ncp_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.Events",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.Events",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.Events.compute_ncp_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events.compute_ncp_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "u9slbfms",
            "name": "Events.fit",
            "description": "Fit the Bayesian Blocks model given the specified fitness function.\n    \n    Parameters\n    ----------\n    t : array-like\n        data times (one dimensional, length N)\n    x : array-like, optional\n        data values\n    sigma : array-like or float, optional\n        data errors\n    \n    Returns\n    -------\n    edges : ndarray\n        array containing the (M+1) edges defining the M optimal bins",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bdf8f64fbff830d3c0c3816b4845c8cd17c5c442b1e3da2bd54670c7e11957dd",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to Events.fit object",
                    "type": "Object:astropy.stats.bayesian_blocks.Events",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    data times (one dimensional, length N)",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    data values",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or float, optional\n    data errors",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.Events",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.Events.fit",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events.fit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "j3pob4ik",
            "name": "Events.fitness",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a94bb611f7a7624243cb1f5a761f54a8ad0b1daa386803509159193e132764b7",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object:astropy.stats.bayesian_blocks.Events",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N_k",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "T_k",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.Events",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.Events.fitness",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events.fitness",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "t1r_7998",
            "name": "Events.p0_prior",
            "description": "Empirical prior, parametrized by the false alarm probability ``p0``.\n    \n    See eq. 21 in Scargle (2013).\n    \n    Note that there was an error in this equation in the original Scargle\n    paper (the \"log\" was missing). The following corrected form is taken\n    from https://arxiv.org/abs/1304.2818",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "823a061df77b99fe285ed869a281abc59f5abce27f81eaeb9489aa8d7d305b33",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to Events.p0_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.Events",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.Events",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.Events.p0_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events.p0_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "km55xc8j",
            "name": "Events.validate_input",
            "description": "Validate inputs to the model.\n    \n    Parameters\n    ----------\n    t : array-like\n        times of observations\n    x : array-like, optional\n        values observed at each time\n    sigma : float or array-like, optional\n        errors in values x\n    \n    Returns\n    -------\n    t, x, sigma : array-like, float or None\n        validated and perhaps modified versions of inputs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "063b5372c0d7af4f45a5cbfc53dba34a80f0a1ecdba1519797dec03160e5a732",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to Events.validate_input object",
                    "type": "Object:astropy.stats.bayesian_blocks.Events",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    times of observations",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    values observed at each time",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or array-like, optional\n    errors in values x",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.Events",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.Events.validate_input",
                    "defaultValue": "astropy.stats.bayesian_blocks.Events.validate_input",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "kfqn_kur",
            "name": "FitnessFunc.__init__",
            "description": "\nBase class for bayesian blocks fitness functions.\n    \n    Derived classes should overload the following method:\n    \n    ``fitness(self, **kwargs)``:\n      Compute the fitness given a set of named arguments.\n      Arguments accepted by fitness must be among ``[T_k, N_k, a_k, b_k, c_k]``\n      (See [1]_ for details on the meaning of these parameters).\n    \n    Additionally, other methods may be overloaded as well:\n    \n    ``__init__(self, **kwargs)``:\n      Initialize the fitness function with any parameters beyond the normal\n      ``p0`` and ``gamma``.\n    \n    ``validate_input(self, t, x, sigma)``:\n      Enable specific checks of the input data (``t``, ``x``, ``sigma``)\n      to be performed prior to the fit.\n    \n    ``compute_ncp_prior(self, N)``: If ``ncp_prior`` is not defined explicitly,\n      this function is called in order to define it before fitting. This may be\n      calculated from ``gamma``, ``p0``, or whatever method you choose.\n    \n    ``p0_prior(self, N)``:\n      Specify the form of the prior given the false-alarm probability ``p0``\n      (See [1]_ for details).\n    \n    For examples of implemented fitness functions, see :class:`Events`,\n    :class:`RegularEvents`, and :class:`PointMeasures`.\n    \n    References\n    ----------\n    .. [1] Scargle, J et al. (2013)\n       https://ui.adsabs.harvard.edu/abs/2013ApJ...764..167S",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8045e40456815a5e07bbbbe30e0a8d8ff558d9860d2cd16c6fa8672d58438486",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to FitnessFunc object",
                    "type": "Object:astropy.stats.bayesian_blocks.FitnessFunc",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p0",
                    "value": 0.05,
                    "defaultValue": 0.05,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gamma",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ncp_prior",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc.__init__",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "y36a_zr0",
            "name": "FitnessFunc.compute_ncp_prior",
            "description": "If ``ncp_prior`` is not explicitly defined, compute it from ``gamma``\n    or ``p0``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "27974fd412bad843b04dc539d1ac370e99310840c58d3bdb03450e4beab8954a",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to FitnessFunc.compute_ncp_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.FitnessFunc",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc.compute_ncp_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc.compute_ncp_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "4q97u_ve",
            "name": "FitnessFunc.fit",
            "description": "Fit the Bayesian Blocks model given the specified fitness function.\n    \n    Parameters\n    ----------\n    t : array-like\n        data times (one dimensional, length N)\n    x : array-like, optional\n        data values\n    sigma : array-like or float, optional\n        data errors\n    \n    Returns\n    -------\n    edges : ndarray\n        array containing the (M+1) edges defining the M optimal bins",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a7ccdf4542b1502d5a5b8eda5cd9686ff5f0f61525ece0e90babcc7b8ccd313",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to FitnessFunc.fit object",
                    "type": "Object:astropy.stats.bayesian_blocks.FitnessFunc",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    data times (one dimensional, length N)",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    data values",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or float, optional\n    data errors",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc.fit",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc.fit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "eewqy3pp",
            "name": "FitnessFunc.fitness",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bcc74094f0f5b818305986183ae037f7887e42e31440afcebdc07a9abd908f74",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object:astropy.stats.bayesian_blocks.FitnessFunc",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc.fitness",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc.fitness",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "0mh4iy7r",
            "name": "FitnessFunc.p0_prior",
            "description": "Empirical prior, parametrized by the false alarm probability ``p0``.\n    \n    See eq. 21 in Scargle (2013).\n    \n    Note that there was an error in this equation in the original Scargle\n    paper (the \"log\" was missing). The following corrected form is taken\n    from https://arxiv.org/abs/1304.2818",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2e09f90968b592601a9048fb6c429ce1b88cb4bd6bbd19cbb14b5632d9104102",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to FitnessFunc.p0_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.FitnessFunc",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc.p0_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc.p0_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "pl7mympr",
            "name": "FitnessFunc.validate_input",
            "description": "Validate inputs to the model.\n    \n    Parameters\n    ----------\n    t : array-like\n        times of observations\n    x : array-like, optional\n        values observed at each time\n    sigma : float or array-like, optional\n        errors in values x\n    \n    Returns\n    -------\n    t, x, sigma : array-like, float or None\n        validated and perhaps modified versions of inputs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5f5e3053849154e5dd8ccb70898b21870794e582cd21b18d7fa7803ea7b0562",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to FitnessFunc.validate_input object",
                    "type": "Object:astropy.stats.bayesian_blocks.FitnessFunc",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    times of observations",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    values observed at each time",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or array-like, optional\n    errors in values x",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.FitnessFunc.validate_input",
                    "defaultValue": "astropy.stats.bayesian_blocks.FitnessFunc.validate_input",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "6pw58ckm",
            "name": "LombScargle.__init__",
            "description": "\nCompute the Lomb-Scargle Periodogram.\n    \n    This class has been deprecated and will be removed in a future version.\n    Use `astropy.timeseries.LombScargle` instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "55e5e03445de9168da871ae0c887db214a1084a38d922e044f2a184636a10b3d",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle object",
                    "type": "Object:astropy.stats.lombscargle.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.lombscargle.LombScargle",
                    "defaultValue": "astropy.stats.lombscargle.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.lombscargle.LombScargle.__init__",
                    "defaultValue": "astropy.stats.lombscargle.LombScargle.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "rn1dkpow",
            "name": "LombScargle.autofrequency",
            "description": "Determine a suitable frequency grid for data.\n    \n    Note that this assumes the peak width is driven by the observational\n    baseline, which is generally a good assumption when the baseline is\n    much larger than the oscillation period.\n    If you are searching for periods longer than the baseline of your\n    observations, this may not perform well.\n    \n    Even with a large baseline, be aware that the maximum frequency\n    returned is based on the concept of \"average Nyquist frequency\", which\n    may not be useful for irregularly-sampled data. The maximum frequency\n    can be adjusted via the nyquist_factor argument, or through the\n    maximum_frequency argument.\n    \n    Parameters\n    ----------\n    samples_per_peak : float, optional\n        The approximate number of desired samples across the typical peak\n    nyquist_factor : float, optional\n        The multiple of the average nyquist frequency used to choose the\n        maximum frequency if maximum_frequency is not provided.\n    minimum_frequency : float, optional\n        If specified, then use this minimum frequency rather than one\n        chosen based on the size of the baseline.\n    maximum_frequency : float, optional\n        If specified, then use this maximum frequency rather than one\n        chosen based on the average nyquist frequency.\n    return_freq_limits : bool, optional\n        if True, return only the frequency limits rather than the full\n        frequency grid.\n    \n    Returns\n    -------\n    frequency : ndarray or `~astropy.units.Quantity` ['frequency']\n        The heuristically-determined optimal frequency bin",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bad657c98410a6491230a20aa218fe668e00304c036d4e35d9fca1c12b75e84e",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.autofrequency object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "samples_per_peak",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "float, optional\n    The approximate number of desired samples across the typical peak",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nyquist_factor",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "float, optional\n    The multiple of the average nyquist frequency used to choose the\n    maximum frequency if maximum_frequency is not provided.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional\n    If specified, then use this minimum frequency rather than one\n    chosen based on the size of the baseline.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maximum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional\n    If specified, then use this maximum frequency rather than one\n    chosen based on the average nyquist frequency.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_freq_limits",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    if True, return only the frequency limits rather than the full\n    frequency grid.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.autofrequency",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.autofrequency",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "xp2a3au9",
            "name": "LombScargle.autopower",
            "description": "Compute Lomb-Scargle power at automatically-determined frequencies.\n    \n    Parameters\n    ----------\n    method : str, optional\n        specify the lomb scargle implementation to use. Options are:\n    \n        - 'auto': choose the best method based on the input\n        - 'fast': use the O[N log N] fast method. Note that this requires\n          evenly-spaced frequencies: by default this will be checked unless\n          ``assume_regular_frequency`` is set to True.\n        - 'slow': use the O[N^2] pure-python implementation\n        - 'cython': use the O[N^2] cython implementation. This is slightly\n          faster than method='slow', but much more memory efficient.\n        - 'chi2': use the O[N^2] chi2/linear-fitting implementation\n        - 'fastchi2': use the O[N log N] chi2 implementation. Note that this\n          requires evenly-spaced frequencies: by default this will be checked\n          unless ``assume_regular_frequency`` is set to True.\n        - 'scipy': use ``scipy.signal.lombscargle``, which is an O[N^2]\n          implementation written in C. Note that this does not support\n          heteroskedastic errors.\n    \n    method_kwds : dict, optional\n        additional keywords to pass to the lomb-scargle method\n    normalization : {'standard', 'model', 'log', 'psd'}, optional\n        If specified, override the normalization specified at instantiation.\n    samples_per_peak : float, optional\n        The approximate number of desired samples across the typical peak\n    nyquist_factor : float, optional\n        The multiple of the average nyquist frequency used to choose the\n        maximum frequency if maximum_frequency is not provided.\n    minimum_frequency : float or `~astropy.units.Quantity` ['frequency'], optional\n        If specified, then use this minimum frequency rather than one\n        chosen based on the size of the baseline. Should be `~astropy.units.Quantity`\n        if inputs to LombScargle are `~astropy.units.Quantity`.\n    maximum_frequency : float or `~astropy.units.Quantity` ['frequency'], optional\n        If specified, then use this maximum frequency rather than one\n        chosen based on the average nyquist frequency. Should be `~astropy.units.Quantity`\n        if inputs to LombScargle are `~astropy.units.Quantity`.\n    \n    Returns\n    -------\n    frequency, power : ndarray\n        The frequency and Lomb-Scargle power",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "93ae649c028f82407baeab4073ed555b0f3c3976a24c65499c7bc8f3b35db6e0",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.autopower object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "str, optional\n    specify the lomb scargle implementation to use. Options are:\n\n    - 'auto': choose the best method based on the input\n    - 'fast': use the O[N log N] fast method. Note that this requires\n      evenly-spaced",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method_kwds",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional\n    additional keywords to pass to the lomb-scargle method",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "normalization",
                    "value": null,
                    "defaultValue": null,
                    "description": "{'standard', 'model', 'log', 'psd'}, optional\n    If specified, override the normalization specified at instantiation.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "samples_per_peak",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "float, optional\n    The approximate number of desired samples across the typical peak",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nyquist_factor",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "float, optional\n    The multiple of the average nyquist frequency used to choose the\n    maximum frequency if maximum_frequency is not provided.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['frequency'], optional\n    If specified, then use this minimum frequency rather than one\n    chosen based on the size of the baseline. Should be `~    if inputs to LombScargle are `~astropy.units.Quantity`.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maximum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or `~astropy.units.Quantity` ['frequency'], optional\n    If specified, then use this maximum frequency rather than one\n    chosen based on the average nyquist frequency. Should be `~    if inputs to LombScargle are `~astropy.units.Quantity`.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.autopower",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.autopower",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "dox4kn9q",
            "name": "LombScargle.design_matrix",
            "description": "Compute the design matrix for a given frequency.\n    \n    Parameters\n    ----------\n    frequency : float\n        the frequency for the model\n    t : array-like, `~astropy.units.Quantity`, or `~astropy.time.Time` (optional)\n        Times (length ``n_samples``) at which to compute the model.\n        If not specified, then the times and uncertainties of the input\n        data are used.\n    \n    Returns\n    -------\n    X : array\n        The design matrix for the model at the given frequency.\n        This should have a shape of (``len(t)``, ``n_parameters``).\n    \n    See Also\n    --------\n    model\n    model_parameters\n    offset",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6ec42a2a85267f53b8dc0c22463f399a994021961c6462c4315e720d33fc94f5",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.design_matrix object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    the frequency for the model",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, `~ or `~astropy.time.Time` (optional)\n    Times (length ``n_samples``) at which to compute the model.\n    If not specified, then the times and uncertainties of the input\n    data are used.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.design_matrix",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.design_matrix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "sp052h5g",
            "name": "LombScargle.distribution",
            "description": "Expected periodogram distribution under the null hypothesis.\n    \n    This computes the expected probability distribution or cumulative\n    probability distribution of periodogram power, under the null\n    hypothesis of a non-varying signal with Gaussian noise. Note that\n    this is not the same as the expected distribution of peak values;\n    for that see the ``false_alarm_probability()`` method.\n    \n    Parameters\n    ----------\n    power : array-like\n        The periodogram power at which to compute the distribution.\n    cumulative : bool, optional\n        If True, then return the cumulative distribution.\n    \n    See Also\n    --------\n    false_alarm_probability\n    false_alarm_level\n    \n    Returns\n    -------\n    dist : np.ndarray\n        The probability density or cumulative probability associated with\n        the provided powers.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "722bff3c35267715d241ac7ed64feaf923c681894066943e2690047e6bce53c1",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.distribution object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "power",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    The periodogram power at which to compute the distribution.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cumulative",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    If True, then return the cumulative distribution.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.distribution",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.distribution",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "xozqv426",
            "name": "LombScargle.false_alarm_level",
            "description": "Level of maximum at a given false alarm probability.\n    \n    This gives an estimate of the periodogram level corresponding to a\n    specified false alarm probability for the largest peak, assuming a\n    null hypothesis of non-varying data with Gaussian noise.\n    \n    Parameters\n    ----------\n    false_alarm_probability : array-like\n        The false alarm probability (0 < fap < 1).\n    maximum_frequency : float\n        The maximum frequency of the periodogram.\n    method : {'baluev', 'davies', 'naive', 'bootstrap'}, optional\n        The approximation method to use; default='baluev'.\n    method_kwds : dict, optional\n        Additional method-specific keywords.\n    \n    Returns\n    -------\n    power : np.ndarray\n        The periodogram peak height corresponding to the specified\n        false alarm probability.\n    \n    Notes\n    -----\n    The true probability distribution for the largest peak cannot be\n    determined analytically, so each method here provides an approximation\n    to the value. The available methods are:\n    \n    - \"baluev\" (default): the upper-limit to the alias-free probability,\n      using the approach of Baluev (2008) [1]_.\n    - \"davies\" : the Davies upper bound from Baluev (2008) [1]_.\n    - \"naive\" : the approximate probability based on an estimated\n      effective number of independent frequencies.\n    - \"bootstrap\" : the approximate probability based on bootstrap\n      resamplings of the input data. The number of samples can\n      be set with the method-specific keyword \"n_bootstraps\" (default=1000).\n    \n    Note also that for normalization='psd', the distribution can only be\n    computed for periodograms constructed with errors specified.\n    \n    See Also\n    --------\n    distribution\n    false_alarm_probability\n    \n    References\n    ----------\n    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dc056fd07ff98d4aa7ad182350db56bb5ac6e162ecc546bafa8ea5bcbecf0e0d",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.false_alarm_level object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "false_alarm_probability",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    The false alarm probability (0 < fap < 1).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "baluev",
                    "defaultValue": "baluev",
                    "description": "{'baluev', 'davies', 'naive', 'bootstrap'}, optional\n    The approximation method to use; default='baluev'.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "samples_per_peak",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nyquist_factor",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maximum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    The maximum frequency of the periodogram.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method_kwds",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional\n    Additional method-specific keywords.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.false_alarm_level",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.false_alarm_level",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "ba5xgmkx",
            "name": "LombScargle.false_alarm_probability",
            "description": "False alarm probability of periodogram maxima under the null hypothesis.\n    \n    This gives an estimate of the false alarm probability given the height\n    of the largest peak in the periodogram, based on the null hypothesis\n    of non-varying data with Gaussian noise.\n    \n    Parameters\n    ----------\n    power : array-like\n        The periodogram value.\n    method : {'baluev', 'davies', 'naive', 'bootstrap'}, optional\n        The approximation method to use.\n    maximum_frequency : float\n        The maximum frequency of the periodogram.\n    method_kwds : dict, optional\n        Additional method-specific keywords.\n    \n    Returns\n    -------\n    false_alarm_probability : np.ndarray\n        The false alarm probability\n    \n    Notes\n    -----\n    The true probability distribution for the largest peak cannot be\n    determined analytically, so each method here provides an approximation\n    to the value. The available methods are:\n    \n    - \"baluev\" (default): the upper-limit to the alias-free probability,\n      using the approach of Baluev (2008) [1]_.\n    - \"davies\" : the Davies upper bound from Baluev (2008) [1]_.\n    - \"naive\" : the approximate probability based on an estimated\n      effective number of independent frequencies.\n    - \"bootstrap\" : the approximate probability based on bootstrap\n      resamplings of the input data.\n    \n    Note also that for normalization='psd', the distribution can only be\n    computed for periodograms constructed with errors specified.\n    \n    See Also\n    --------\n    distribution\n    false_alarm_level\n    \n    References\n    ----------\n    .. [1] Baluev, R.V. MNRAS 385, 1279 (2008)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7da4764043a50e6a9ed379cf734010254d8201b5b3251533bd066bd799e8177",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.false_alarm_probability object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "power",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    The periodogram value.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "baluev",
                    "defaultValue": "baluev",
                    "description": "{'baluev', 'davies', 'naive', 'bootstrap'}, optional\n    The approximation method to use.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "samples_per_peak",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nyquist_factor",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "minimum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maximum_frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    The maximum frequency of the periodogram.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method_kwds",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional\n    Additional method-specific keywords.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.false_alarm_probability",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.false_alarm_probability",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "hvjimgzq",
            "name": "LombScargle.from_timeseries",
            "description": "Initialize a periodogram from a time series object.\n    \n    If a binned time series is passed, the time at the center of the bins is\n    used. Also note that this method automatically gets rid of NaN/undefined\n    values when initializing the periodogram.\n    \n    Parameters\n    ----------\n    signal_column_name : str\n        The name of the column containing the signal values to use.\n    uncertainty : str or float or `~astropy.units.Quantity`, optional\n        The name of the column containing the errors on the signal, or the\n        value to use for the error, if a scalar.\n    **kwargs\n        Additional keyword arguments are passed to the initializer for this\n        periodogram class.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e612f3ab80b486cd7be5fade4fa50c2278fc002dae9132c1636e03ba9486d0f",
            "fields": [
                {
                    "name": "timeseries",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "signal_column_name",
                    "value": null,
                    "defaultValue": null,
                    "description": "str\n    The name of the column containing the signal values to use.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "uncertainty",
                    "value": null,
                    "defaultValue": null,
                    "description": "str or float or `~ optional\n    The name of the column containing the errors on the signal, or the\n    value to use for the error, if a scalar.\n**kwargs\n    Additional keyword arguments are passed to the initializer for this\n    periodogram class.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.base.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.base.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.base.LombScargle.from_timeseries",
                    "defaultValue": "astropy.timeseries.periodograms.base.LombScargle.from_timeseries",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "fwyccs_j",
            "name": "LombScargle.model",
            "description": "Compute the Lomb-Scargle model at the given frequency.\n    \n    The model at a particular frequency is a linear model:\n    model = offset + dot(design_matrix, model_parameters)\n    \n    Parameters\n    ----------\n    t : array-like or `~astropy.units.Quantity` ['time']\n        Times (length ``n_samples``) at which to compute the model.\n    frequency : float\n        the frequency for the model\n    \n    Returns\n    -------\n    y : np.ndarray\n        The model fit corresponding to the input times\n        (will have length ``n_samples``).\n    \n    See Also\n    --------\n    design_matrix\n    offset\n    model_parameters",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "83aa63251fe99ab2f86c965ba91e87bf8d4748e13d17e761428388a17e7b8703",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.model object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or `~astropy.units.Quantity` ['time']\n    Times (length ``n_samples``) at which to compute the model.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    the frequency for the model",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.model",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.model",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "yjsj5zdv",
            "name": "LombScargle.model_parameters",
            "description": "Compute the best-fit model parameters at the given frequency.\n    \n    The model described by these parameters is:\n    \n    .. math::\n    \n        y(t; f, \\vec{\\theta}) = \\theta_0 + \\sum_{n=1}^{\\tt nterms} [\\theta_{2n-1}\\sin(2\\pi n f t) + \\theta_{2n}\\cos(2\\pi n f t)]\n    \n    where :math:`\\vec{\\theta}` is the array of parameters returned by this function.\n    \n    Parameters\n    ----------\n    frequency : float\n        the frequency for the model\n    units : bool\n        If True (default), return design matrix with data units.\n    \n    Returns\n    -------\n    theta : np.ndarray (n_parameters,)\n        The best-fit model parameters at the given frequency.\n    \n    See Also\n    --------\n    design_matrix\n    model\n    offset",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6b918ef897d7b83cc7d99fabef111d9ceff25deb0645a7f6c986869e4a52c7f7",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.model_parameters object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    the frequency for the model",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "units",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool\n    If True (default), return design matrix with data units.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.model_parameters",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.model_parameters",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "kt_s91ie",
            "name": "LombScargle.offset",
            "description": "Return the offset of the model.\n    \n    The offset of the model is the (weighted) mean of the y values.\n    Note that if self.center_data is False, the offset is 0 by definition.\n    \n    Returns\n    -------\n    offset : scalar\n    \n    See Also\n    --------\n    design_matrix\n    model\n    model_parameters",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ca2110dea975d74e7212cf5e3628b2465dc28e1add7db88844eaf067d7a60484",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.offset object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.offset",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.offset",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "2bx3cmyh",
            "name": "LombScargle.power",
            "description": "Compute the Lomb-Scargle power at the given frequencies.\n    \n    Parameters\n    ----------\n    frequency : array-like or `~astropy.units.Quantity` ['frequency']\n        frequencies (not angular frequencies) at which to evaluate the\n        periodogram. Note that in order to use method='fast', frequencies\n        must be regularly-spaced.\n    method : str, optional\n        specify the lomb scargle implementation to use. Options are:\n    \n        - 'auto': choose the best method based on the input\n        - 'fast': use the O[N log N] fast method. Note that this requires\n          evenly-spaced frequencies: by default this will be checked unless\n          ``assume_regular_frequency`` is set to True.\n        - 'slow': use the O[N^2] pure-python implementation\n        - 'cython': use the O[N^2] cython implementation. This is slightly\n          faster than method='slow', but much more memory efficient.\n        - 'chi2': use the O[N^2] chi2/linear-fitting implementation\n        - 'fastchi2': use the O[N log N] chi2 implementation. Note that this\n          requires evenly-spaced frequencies: by default this will be checked\n          unless ``assume_regular_frequency`` is set to True.\n        - 'scipy': use ``scipy.signal.lombscargle``, which is an O[N^2]\n          implementation written in C. Note that this does not support\n          heteroskedastic errors.\n    \n    assume_regular_frequency : bool, optional\n        if True, assume that the input frequency is of the form\n        freq = f0 + df * np.arange(N). Only referenced if method is 'auto'\n        or 'fast'.\n    normalization : {'standard', 'model', 'log', 'psd'}, optional\n        If specified, override the normalization specified at instantiation.\n    \n    method_kwds : dict, optional\n        additional keywords to pass to the lomb-scargle method\n    \n    Returns\n    -------\n    power : ndarray\n        The Lomb-Scargle power at the specified frequency",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "248820d92c2e9082c98827f2e45c5fff502f4963a68501870ebfdfac84c9c87e",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to LombScargle.power object",
                    "type": "Object:astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "frequency",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or `~astropy.units.Quantity` ['frequency']\n    frequencies (not angular frequencies) at which to evaluate the\n    periodogram. Note that in order to use method='fast', frequencies\n    must be regularly-spaced.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "normalization",
                    "value": null,
                    "defaultValue": null,
                    "description": "{'standard', 'model', 'log', 'psd'}, optional\n    If specified, override the normalization specified at instantiation.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "str, optional\n    specify the lomb scargle implementation to use. Options are:\n\n    - 'auto': choose the best method based on the input\n    - 'fast': use the O[N log N] fast method. Note that this requires\n      evenly-spaced",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "assume_regular_frequency",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    if True, assume that the input frequency is of the form\n    freq = f0 + df * np.arange(N). Only referenced if method is 'auto'\n    or 'fast'.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method_kwds",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional\n    additional keywords to pass to the lomb-scargle method",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.power",
                    "defaultValue": "astropy.timeseries.periodograms.lombscargle.core.LombScargle.power",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "xx4z8u8q",
            "name": "PointMeasures.__init__",
            "description": "\nBayesian blocks fitness for point measures.\n    \n    Parameters\n    ----------\n    p0 : float, optional\n        False alarm probability, used to compute the prior on :math:`N_{\\rm\n        blocks}` (see eq. 21 of Scargle 2013). If gamma is specified, p0 is\n        ignored.\n    ncp_prior : float, optional\n        If specified, use the value of ``ncp_prior`` to compute the prior as\n        above, using the definition :math:`{\\tt ncp\\_prior} = -\\ln({\\tt\n        gamma})`.  If ``ncp_prior`` is specified, ``gamma`` and ``p0`` are\n        ignored.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bc4be1d2aea349b20c77a96a8010d7b5419e84aa8d7a491fc590435e4bc7330b",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to PointMeasures object",
                    "type": "Object:astropy.stats.bayesian_blocks.PointMeasures",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p0",
                    "value": 0.05,
                    "defaultValue": 0.05,
                    "description": "float, optional\n    False alarm probability, used to compute the prior on :math:`N_{\\rm\n    blocks}` (see eq. 21 of Scargle 2013). If gamma is specified, p0 is\n    ignored.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gamma",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ncp_prior",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional\n    If specified, use the value of ``ncp_prior`` to compute the prior as\n    above, using the definition :math:`{\\tt ncp\\_prior} = -\\ln({\\tt\n    gamma})`.  If ``ncp_prior`` is specified, ``gamma`` and ``p0`` are\n    ignored.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures.__init__",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "dpaumnj8",
            "name": "PointMeasures.compute_ncp_prior",
            "description": "If ``ncp_prior`` is not explicitly defined, compute it from ``gamma``\n    or ``p0``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "45a6a3c2f4161bf7d4c75382f3748ce16f2b34c160ba91377c41fa61dd1b297d",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to PointMeasures.compute_ncp_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.PointMeasures",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures.compute_ncp_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures.compute_ncp_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "rzyr0bum",
            "name": "PointMeasures.fit",
            "description": "Fit the Bayesian Blocks model given the specified fitness function.\n    \n    Parameters\n    ----------\n    t : array-like\n        data times (one dimensional, length N)\n    x : array-like, optional\n        data values\n    sigma : array-like or float, optional\n        data errors\n    \n    Returns\n    -------\n    edges : ndarray\n        array containing the (M+1) edges defining the M optimal bins",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0ca9c3b255628b5ae5572aa195a6635e91dbe44e1e9737783ae6e4919f85db80",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to PointMeasures.fit object",
                    "type": "Object:astropy.stats.bayesian_blocks.PointMeasures",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    data times (one dimensional, length N)",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    data values",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or float, optional\n    data errors",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures.fit",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures.fit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "0_h204z6",
            "name": "PointMeasures.fitness",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b1cabbef17944370f27051d899192dbb3e86355e0b7a234db7c86e104235ce1c",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object:astropy.stats.bayesian_blocks.PointMeasures",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "a_k",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "b_k",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures.fitness",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures.fitness",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "ditk54_k",
            "name": "PointMeasures.p0_prior",
            "description": "Empirical prior, parametrized by the false alarm probability ``p0``.\n    \n    See eq. 21 in Scargle (2013).\n    \n    Note that there was an error in this equation in the original Scargle\n    paper (the \"log\" was missing). The following corrected form is taken\n    from https://arxiv.org/abs/1304.2818",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63f0e6bdc594903a7cdcaa13d9fba5db0f6f5a2999a8e1b19a16bf7dd6623114",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to PointMeasures.p0_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.PointMeasures",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures.p0_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures.p0_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "45brvp21",
            "name": "PointMeasures.validate_input",
            "description": "Validate inputs to the model.\n    \n    Parameters\n    ----------\n    t : array-like\n        times of observations\n    x : array-like, optional\n        values observed at each time\n    sigma : float or array-like, optional\n        errors in values x\n    \n    Returns\n    -------\n    t, x, sigma : array-like, float or None\n        validated and perhaps modified versions of inputs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ddd3e36607d5dab311d6a0a4989fa558511b99f161990d649b71fc1f87225ed1",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to PointMeasures.validate_input object",
                    "type": "Object:astropy.stats.bayesian_blocks.PointMeasures",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    times of observations",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    values observed at each time",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or array-like, optional\n    errors in values x",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.PointMeasures.validate_input",
                    "defaultValue": "astropy.stats.bayesian_blocks.PointMeasures.validate_input",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "9onggnli",
            "name": "RegularEvents.__init__",
            "description": "\nBayesian blocks fitness for regular events.\n    \n    This is for data which has a fundamental \"tick\" length, so that all\n    measured values are multiples of this tick length.  In each tick, there\n    are either zero or one counts.\n    \n    Parameters\n    ----------\n    dt : float\n        tick rate for data\n    p0 : float, optional\n        False alarm probability, used to compute the prior on :math:`N_{\\rm\n        blocks}` (see eq. 21 of Scargle 2013). If gamma is specified, p0 is\n        ignored.\n    ncp_prior : float, optional\n        If specified, use the value of ``ncp_prior`` to compute the prior as\n        above, using the definition :math:`{\\tt ncp\\_prior} = -\\ln({\\tt\n        gamma})`.  If ``ncp_prior`` is specified, ``gamma`` and ``p0`` are\n        ignored.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7dd8ea90ff2edb7eb20b9c403cbb8a154a4d7fef4d8d3a8f92d44e02e2195794",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RegularEvents object",
                    "type": "Object:astropy.stats.bayesian_blocks.RegularEvents",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dt",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    tick rate for data",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p0",
                    "value": 0.05,
                    "defaultValue": 0.05,
                    "description": "float, optional\n    False alarm probability, used to compute the prior on :math:`N_{\\rm\n    blocks}` (see eq. 21 of Scargle 2013). If gamma is specified, p0 is\n    ignored.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gamma",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ncp_prior",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional\n    If specified, use the value of ``ncp_prior`` to compute the prior as\n    above, using the definition :math:`{\\tt ncp\\_prior} = -\\ln({\\tt\n    gamma})`.  If ``ncp_prior`` is specified, ``gamma`` and ``p0`` are\n    ignored.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents.__init__",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "rvxaw7zf",
            "name": "RegularEvents.compute_ncp_prior",
            "description": "If ``ncp_prior`` is not explicitly defined, compute it from ``gamma``\n    or ``p0``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cadacb9cf3b85517b0a019c08ac57263ab87b3cd95c4e5208b35294246735511",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RegularEvents.compute_ncp_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.RegularEvents",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents.compute_ncp_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents.compute_ncp_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "pu7lrh0j",
            "name": "RegularEvents.fit",
            "description": "Fit the Bayesian Blocks model given the specified fitness function.\n    \n    Parameters\n    ----------\n    t : array-like\n        data times (one dimensional, length N)\n    x : array-like, optional\n        data values\n    sigma : array-like or float, optional\n        data errors\n    \n    Returns\n    -------\n    edges : ndarray\n        array containing the (M+1) edges defining the M optimal bins",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7b4e8442c46ec92369c823bc29230566eaf22e557de757835ab9a93b0b183ade",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RegularEvents.fit object",
                    "type": "Object:astropy.stats.bayesian_blocks.RegularEvents",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    data times (one dimensional, length N)",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    data values",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or float, optional\n    data errors",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents.fit",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents.fit",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "6ux7jpp2",
            "name": "RegularEvents.fitness",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6b433c5d9782504439de836c74d69f6b5fd103a24fe96e06984a24005083a13e",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "Object:astropy.stats.bayesian_blocks.RegularEvents",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "T_k",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N_k",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents.fitness",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents.fitness",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "q_7906l9",
            "name": "RegularEvents.p0_prior",
            "description": "Empirical prior, parametrized by the false alarm probability ``p0``.\n    \n    See eq. 21 in Scargle (2013).\n    \n    Note that there was an error in this equation in the original Scargle\n    paper (the \"log\" was missing). The following corrected form is taken\n    from https://arxiv.org/abs/1304.2818",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "46e9682cd130b87bfae16cd07ddbed6cefd1742c2e827144ae93959b53c2247a",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RegularEvents.p0_prior object",
                    "type": "Object:astropy.stats.bayesian_blocks.RegularEvents",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents.p0_prior",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents.p0_prior",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "bvv01b_n",
            "name": "RegularEvents.validate_input",
            "description": "Validate inputs to the model.\n    \n    Parameters\n    ----------\n    t : array-like\n        times of observations\n    x : array-like, optional\n        values observed at each time\n    sigma : float or array-like, optional\n        errors in values x\n    \n    Returns\n    -------\n    t, x, sigma : array-like, float or None\n        validated and perhaps modified versions of inputs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "48dcf511093dd41e828a37113f1f3e9238daf477594fa0989f1bf7a613634ec5",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RegularEvents.validate_input object",
                    "type": "Object:astropy.stats.bayesian_blocks.RegularEvents",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    times of observations",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    values observed at each time",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or array-like, optional\n    errors in values x",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.RegularEvents.validate_input",
                    "defaultValue": "astropy.stats.bayesian_blocks.RegularEvents.validate_input",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "5zv_sm5k",
            "name": "RipleysKEstimator.Hfunction",
            "description": "Evaluates the H function at ``radii``. For parameter description\n    see ``evaluate`` method.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "31e3d6186f47fb3c32b41bee8266c4aaffa655305fc0ff3f227c58feacd04a07",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RipleysKEstimator.Hfunction object",
                    "type": "Object:astropy.stats.spatial.RipleysKEstimator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "radii",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator.Hfunction",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator.Hfunction",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "lohy1i3o",
            "name": "RipleysKEstimator.Lfunction",
            "description": "Evaluates the L function at ``radii``. For parameter description\n    see ``evaluate`` method.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0bf7bc997ec07fed5981a34a469d9d29a6eaacf723e2f5ba6dd05b9a06442fa",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RipleysKEstimator.Lfunction object",
                    "type": "Object:astropy.stats.spatial.RipleysKEstimator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "radii",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator.Lfunction",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator.Lfunction",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "lwpuz31r",
            "name": "RipleysKEstimator.__init__",
            "description": "\nEstimators for Ripley's K function for two-dimensional spatial data.\n    See [1]_, [2]_, [3]_, [4]_, [5]_ for detailed mathematical and\n    practical aspects of those estimators.\n    \n    Parameters\n    ----------\n    area : float\n        Area of study from which the points where observed.\n    x_max, y_max : float, float, optional\n        Maximum rectangular coordinates of the area of study.\n        Required if ``mode == 'translation'`` or ``mode == ohser``.\n    x_min, y_min : float, float, optional\n        Minimum rectangular coordinates of the area of study.\n        Required if ``mode == 'variable-width'`` or ``mode == ohser``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from matplotlib import pyplot as plt # doctest: +SKIP\n    >>> from astropy.stats import RipleysKEstimator\n    >>> z = np.random.uniform(low=5, high=10, size=(100, 2))\n    >>> Kest = RipleysKEstimator(area=25, x_max=10, y_max=10,\n    ... x_min=5, y_min=5)\n    >>> r = np.linspace(0, 2.5, 100)\n    >>> plt.plot(r, Kest.poisson(r)) # doctest: +SKIP\n    >>> plt.plot(r, Kest(data=z, radii=r, mode='none')) # doctest: +SKIP\n    >>> plt.plot(r, Kest(data=z, radii=r, mode='translation')) # doctest: +SKIP\n    >>> plt.plot(r, Kest(data=z, radii=r, mode='ohser')) # doctest: +SKIP\n    >>> plt.plot(r, Kest(data=z, radii=r, mode='var-width')) # doctest: +SKIP\n    >>> plt.plot(r, Kest(data=z, radii=r, mode='ripley')) # doctest: +SKIP\n    \n    References\n    ----------\n    .. [1] Peebles, P.J.E. *The large scale structure of the universe*.\n       <https://ui.adsabs.harvard.edu/abs/1980lssu.book.....P>\n    .. [2] Spatial descriptive statistics.\n       <https://en.wikipedia.org/wiki/Spatial_descriptive_statistics>\n    .. [3] Package spatstat.\n       <https://cran.r-project.org/web/packages/spatstat/spatstat.pdf>\n    .. [4] Cressie, N.A.C. (1991). Statistics for Spatial Data,\n       Wiley, New York.\n    .. [5] Stoyan, D., Stoyan, H. (1992). Fractals, Random Shapes and\n       Point Fields, Akademie Verlag GmbH, Chichester.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "781972b555bc5e0c132dc47e1dbf0526330e9ec1e55b68850ead76a7fd928d3c",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RipleysKEstimator object",
                    "type": "Object:astropy.stats.spatial.RipleysKEstimator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "area",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Area of study from which the points where observed.\nx_max,",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_max",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y_max",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, float, optional\n    Maximum rectangular coordinates of the area of study.\n    Required if ``mode == 'translation'`` or ``mode == ohser``.\nx_min,",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x_min",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y_min",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, float, optional\n    Minimum rectangular coordinates of the area of study.\n    Required if ``mode == 'variable-width'`` or ``mode == ohser``.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator.__init__",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "hqaycfmm",
            "name": "RipleysKEstimator.evaluate",
            "description": "Evaluates the Ripley K estimator for a given set of values ``radii``.\n    \n    Parameters\n    ----------\n    data : 2D array\n        Set of observed points in as a n by 2 array which will be used to\n        estimate Ripley's K function.\n    radii : 1D array\n        Set of distances in which Ripley's K estimator will be evaluated.\n        Usually, it's common to consider max(radii) < (area/2)**0.5.\n    mode : str\n        Keyword which indicates the method for edge effects correction.\n        Available methods are 'none', 'translation', 'ohser', 'var-width',\n        and 'ripley'.\n    \n        * 'none'\n            this method does not take into account any edge effects\n            whatsoever.\n        * 'translation'\n            computes the intersection of rectangular areas centered at\n            the given points provided the upper bounds of the\n            dimensions of the rectangular area of study. It assumes that\n            all the points lie in a bounded rectangular region satisfying\n            x_min < x_i < x_max; y_min < y_i < y_max. A detailed\n            description of this method can be found on ref [4].\n        * 'ohser'\n            this method uses the isotropized set covariance function of\n            the window of study as a weight to correct for\n            edge-effects. A detailed description of this method can be\n            found on ref [4].\n        * 'var-width'\n            this method considers the distance of each observed point to\n            the nearest boundary of the study window as a factor to\n            account for edge-effects. See [3] for a brief description of\n            this method.\n        * 'ripley'\n            this method is known as Ripley's edge-corrected estimator.\n            The weight for edge-correction is a function of the\n            proportions of circumferences centered at each data point\n            which crosses another data point of interest. See [3] for\n            a detailed description of this method.\n    \n    Returns\n    -------\n    ripley : 1D array\n        Ripley's K function estimator evaluated at ``radii``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb98ca372a5b0510ef96272b1362e9b5363e539fecaf1e216569196842a48701",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RipleysKEstimator.evaluate object",
                    "type": "Object:astropy.stats.spatial.RipleysKEstimator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "2D array\n    Set of observed points in as a n by 2 array which will be used to\n    estimate Ripley's K function.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "radii",
                    "value": null,
                    "defaultValue": null,
                    "description": "1D array\n    Set of distances in which Ripley's K estimator will be evaluated.\n    Usually, it's common to consider max(radii) < (area/2)**0.5.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "str\n    Keyword which indicates the method for edge effects correction.\n    Available methods are 'none', 'translation', 'ohser', 'var-width',\n    and 'ripley'.\n\n    * 'none'\n        this method does not take into account any edge effects\n        whatsoever.\n    * 'translation'\n        computes the intersection of rectangular areas centered at\n        the given points provided the upper bounds of the\n        dimensions of the rectangular area of study. It assumes that\n        all the points lie in a bounded rectangular region satisfying\n        x_min < x_i < x_max; y_min < y_i < y_max. A detailed\n        description of this method can be found on ref [4].\n    * 'ohser'\n        this method uses the isotropized set covariance function of\n        the window of study as a weight to correct for\n        edge-effects. A detailed description of this method can be\n        found on ref [4].\n    * 'var-width'\n        this method considers the distance of each observed point to\n        the nearest boundary of the study window as a factor to\n        account for edge-effects. See [3] for a brief description of\n        this method.\n    * 'ripley'\n        this method is known as Ripley's edge-corrected estimator.\n        The weight for edge-correction is a function of the\n        proportions of circumferences centered at each data point\n        which crosses another data point of interest. See [3] for\n        a detailed description of this method.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator.evaluate",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator.evaluate",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "f6wzbrhr",
            "name": "RipleysKEstimator.poisson",
            "description": "Evaluates the Ripley K function for the homogeneous Poisson process,\n    also known as Complete State of Randomness (CSR).\n    \n    Parameters\n    ----------\n    radii : 1D array\n        Set of distances in which Ripley's K function will be evaluated.\n    \n    Returns\n    -------\n    output : 1D array\n        Ripley's K function evaluated at ``radii``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a041cf8f52a3d1dffe63f59b7ebeff07eeb0481e8447ab2e45869b1545c81109",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to RipleysKEstimator.poisson object",
                    "type": "Object:astropy.stats.spatial.RipleysKEstimator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "radii",
                    "value": null,
                    "defaultValue": null,
                    "description": "1D array\n    Set of distances in which Ripley's K function will be evaluated.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.spatial.RipleysKEstimator.poisson",
                    "defaultValue": "astropy.stats.spatial.RipleysKEstimator.poisson",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonMemberFunction",
            "id": "m9up_5kr",
            "name": "SigmaClip.__init__",
            "description": "\nClass to perform sigma clipping.\n    \n    The data will be iterated over, each time rejecting values that are\n    less or more than a specified number of standard deviations from a\n    center value.\n    \n    Clipped (rejected) pixels are those where::\n    \n        data < center - (sigma_lower * std)\n        data > center + (sigma_upper * std)\n    \n    where::\n    \n        center = cenfunc(data [, axis=])\n        std = stdfunc(data [, axis=])\n    \n    Invalid data values (i.e., NaN or inf) are automatically clipped.\n    \n    For a functional interface to sigma clipping, see\n    :func:`sigma_clip`.\n    \n    .. note::\n        `scipy.stats.sigmaclip` provides a subset of the functionality\n        in this class. Also, its input data cannot be a masked array\n        and it does not handle data that contains invalid values (i.e.,\n        NaN or inf). Also note that it uses the mean as the centering\n        function. The equivalent settings to `scipy.stats.sigmaclip`\n        are::\n    \n            sigclip = SigmaClip(sigma=4., cenfunc='mean', maxiters=None)\n            sigclip(data, axis=None, masked=False, return_bounds=True)\n    \n    Parameters\n    ----------\n    sigma : float, optional\n        The number of standard deviations to use for both the lower\n        and upper clipping limit. These limits are overridden by\n        ``sigma_lower`` and ``sigma_upper``, if input. The default is 3.\n    \n    sigma_lower : float or None, optional\n        The number of standard deviations to use as the lower bound for\n        the clipping limit. If `None` then the value of ``sigma`` is\n        used. The default is `None`.\n    \n    sigma_upper : float or None, optional\n        The number of standard deviations to use as the upper bound for\n        the clipping limit. If `None` then the value of ``sigma`` is\n        used. The default is `None`.\n    \n    maxiters : int or None, optional\n        The maximum number of sigma-clipping iterations to perform or\n        `None` to clip until convergence is achieved (i.e., iterate\n        until the last iteration clips nothing). If convergence is\n        achieved prior to ``maxiters`` iterations, the clipping\n        iterations will stop. The default is 5.\n    \n    cenfunc : {'median', 'mean'} or callable, optional\n        The statistic or callable function/object used to compute\n        the center value for the clipping. If using a callable\n        function/object and the ``axis`` keyword is used, then it must\n        be able to ignore NaNs (e.g., `numpy.nanmean`) and it must have\n        an ``axis`` keyword to return an array with axis dimension(s)\n        removed. The default is ``'median'``.\n    \n    stdfunc : {'std', 'mad_std'} or callable, optional\n        The statistic or callable function/object used to compute the\n        standard deviation about the center value. If using a callable\n        function/object and the ``axis`` keyword is used, then it must\n        be able to ignore NaNs (e.g., `numpy.nanstd`) and it must have\n        an ``axis`` keyword to return an array with axis dimension(s)\n        removed. The default is ``'std'``.\n    \n    grow : float or `False`, optional\n        Radius within which to mask the neighbouring pixels of those\n        that fall outwith the clipping limits (only applied along\n        ``axis``, if specified). As an example, for a 2D image a value\n        of 1 will mask the nearest pixels in a cross pattern around each\n        deviant pixel, while 1.5 will also reject the nearest diagonal\n        neighbours and so on.\n    \n    See Also\n    --------\n    sigma_clip, sigma_clipped_stats\n    \n    Notes\n    -----\n    The best performance will typically be obtained by setting\n    ``cenfunc`` and ``stdfunc`` to one of the built-in functions\n    specified as as string. If one of the options is set to a string\n    while the other has a custom callable, you may in some cases see\n    better performance if you have the `bottleneck`_ package installed.\n    \n    .. _bottleneck:  https://github.com/pydata/bottleneck\n    \n    Examples\n    --------\n    This example uses a data array of random variates from a Gaussian\n    distribution. We clip all points that are more than 2 sample\n    standard deviations from the median. The result is a masked array,\n    where the mask is `True` for clipped data::\n    \n        >>> from astropy.stats import SigmaClip\n        >>> from numpy.random import randn\n        >>> randvar = randn(10000)\n        >>> sigclip = SigmaClip(sigma=2, maxiters=5)\n        >>> filtered_data = sigclip(randvar)\n    \n    This example clips all points that are more than 3 sigma relative\n    to the sample *mean*, clips until convergence, returns an unmasked\n    `~numpy.ndarray`, and modifies the data in-place::\n    \n        >>> from astropy.stats import SigmaClip\n        >>> from numpy.random import randn\n        >>> from numpy import mean\n        >>> randvar = randn(10000)\n        >>> sigclip = SigmaClip(sigma=3, maxiters=None, cenfunc='mean')\n        >>> filtered_data = sigclip(randvar, masked=False, copy=False)\n    \n    This example sigma clips along one axis::\n    \n        >>> from astropy.stats import SigmaClip\n        >>> from numpy.random import normal\n        >>> from numpy import arange, diag, ones\n        >>> data = arange(5) + normal(0., 0.05, (5, 5)) + diag(ones(5))\n        >>> sigclip = SigmaClip(sigma=2.3)\n        >>> filtered_data = sigclip(data, axis=0)\n    \n    Note that along the other axis, no points would be clipped, as the\n    standard deviation is higher.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f69a5721160b5cad0437ca3517ec53f822aa8241f4ed96d931b75f474143c6d4",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to SigmaClip object",
                    "type": "Object:astropy.stats.sigma_clipping.SigmaClip",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": 3.0,
                    "defaultValue": 3.0,
                    "description": " if input. The default is 3.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma_lower",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or None, optional\n    The number of standard deviations to use as the lower bound for\n    the clipping limit. If `None` then the value of ``sigma`` is\n    used. The default is `None`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma_upper",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or None, optional\n    The number of standard deviations to use as the upper bound for\n    the clipping limit. If `None` then the value of ``sigma`` is\n    used. The default is `None`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiters",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "int or None, optional\n    The maximum number of sigma-clipping iterations to perform or\n    `None` to clip until convergence is achieved (i.e., iterate\n    until the last iteration clips nothing). If convergence is\n    achieved prior to ``maxiters`` iterations, the clipping\n    iterations will stop. The default is 5.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cenfunc",
                    "value": "median",
                    "defaultValue": "median",
                    "description": "{'median', 'mean'} or callable, optional\n    The statistic or callable function/object used to compute\n    the center value for the clipping. If using a callable\n    function/object and the ``axis`` keyword is used, then it must\n    be able to ignore NaNs (e.g., `numpy.nanmean`) and it must have\n    an ``axis`` keyword to return an array with axis dimension(s)\n    removed. The default is ``'median'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stdfunc",
                    "value": "std",
                    "defaultValue": "std",
                    "description": "{'std', 'mad_std'} or callable, optional\n    The statistic or callable function/object used to compute the\n    standard deviation about the center value. If using a callable\n    function/object and the ``axis`` keyword is used, then it must\n    be able to ignore NaNs (e.g., `numpy.nanstd`) and it must have\n    an ``axis`` keyword to return an array with axis dimension(s)\n    removed. The default is ``'std'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "grow",
                    "value": false,
                    "defaultValue": false,
                    "description": " if specified). As an example, for a 2D image a value\n    of 1 will mask the nearest pixels in a cross pattern around each\n    deviant pixel, while 1.5 will also reject the nearest diagonal\n    neighbours and so on.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.sigma_clipping.SigmaClip",
                    "defaultValue": "astropy.stats.sigma_clipping.SigmaClip",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.sigma_clipping.SigmaClip.__init__",
                    "defaultValue": "astropy.stats.sigma_clipping.SigmaClip.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "w5h7jazs",
            "name": "akaike_info_criterion",
            "description": "Computes the Akaike Information Criterion (AIC).\n    \n    Like the Bayesian Information Criterion, the AIC is a measure of\n    relative fitting quality which is used for fitting evaluation and model\n    selection. The decision is in favor of the model with the lowest AIC.\n    \n    AIC is given as\n    \n    .. math::\n    \n        \\mathrm{AIC} = 2(k - L)\n    \n    in which :math:`n` is the sample size, :math:`k` is the number of free\n    parameters, and :math:`L` is the log likelihood function of the model\n    evaluated at the maximum likelihood estimate (i. e., the parameters for\n    which L is maximized).\n    \n    In case that the sample size is not \"large enough\" a correction is\n    applied, i.e.\n    \n    .. math::\n    \n        \\mathrm{AIC} = 2(k - L) + \\dfrac{2k(k+1)}{n - k - 1}\n    \n    Rule of thumb [1]_:\n    \n    :math:`\\Delta\\mathrm{AIC}_i = \\mathrm{AIC}_i - \\mathrm{AIC}_{min}`\n    \n    :math:`\\Delta\\mathrm{AIC}_i < 2`: substantial support for model i\n    \n    :math:`3 < \\Delta\\mathrm{AIC}_i < 7`: considerably less support for model i\n    \n    :math:`\\Delta\\mathrm{AIC}_i > 10`: essentially none support for model i\n    \n    in which :math:`\\mathrm{AIC}_{min}` stands for the lower AIC among the\n    models which are being compared.\n    \n    For detailed explanations see [1]_-[6]_.\n    \n    Parameters\n    ----------\n    log_likelihood : float\n        Logarithm of the likelihood function of the model evaluated at the\n        point of maxima (with respect to the parameter space).\n    n_params : int\n        Number of free parameters of the model, i.e., dimension of the\n        parameter space.\n    n_samples : int\n        Number of observations.\n    \n    Returns\n    -------\n    aic : float\n        Akaike Information Criterion.\n    \n    Examples\n    --------\n    The following example was originally presented in [2]_. Basically, two\n    models are being compared. One with six parameters (model 1) and another\n    with five parameters (model 2). Despite of the fact that model 2 has a\n    lower AIC, we could decide in favor of model 1 since the difference (in\n    AIC)  between them is only about 1.0.\n    \n    >>> n_samples = 121\n    >>> lnL1 = -3.54\n    >>> n1_params = 6\n    >>> lnL2 = -4.17\n    >>> n2_params = 5\n    >>> aic1 = akaike_info_criterion(lnL1, n1_params, n_samples)\n    >>> aic2 = akaike_info_criterion(lnL2, n2_params, n_samples)\n    >>> aic1 - aic2 # doctest: +FLOAT_CMP\n    0.9551029748283746\n    \n    Therefore, we can strongly support the model 1 with the advantage that\n    it has more free parameters.\n    \n    References\n    ----------\n    .. [1] Cavanaugh, J. E.  Model Selection Lecture II: The Akaike\n       Information Criterion.\n       <http://machinelearning102.pbworks.com/w/file/fetch/47699383/ms_lec_2_ho.pdf>\n    .. [2] Mazerolle, M. J. Making sense out of Akaike's Information\n       Criterion (AIC): its use and interpretation in model selection and\n       inference from ecological data.\n    .. [3] Wikipedia. Akaike Information Criterion.\n       <https://en.wikipedia.org/wiki/Akaike_information_criterion>\n    .. [4] Origin Lab. Comparing Two Fitting Functions.\n       <https://www.originlab.com/doc/Origin-Help/PostFit-CompareFitFunc>\n    .. [5] Liddle, A. R. Information Criteria for Astrophysical Model\n       Selection. 2008. <https://arxiv.org/pdf/astro-ph/0701113v2.pdf>\n    .. [6] Liddle, A. R. How many cosmological parameters? 2008.\n       <https://arxiv.org/pdf/astro-ph/0401198v3.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce7e1dfa31adf4f253b46767a96897e943608e427fa2814dd495414ed154faea",
            "fields": [
                {
                    "name": "log_likelihood",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Logarithm of the likelihood function of the model evaluated at the\n    point of maxima (with respect to the parameter space).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_params",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of free parameters of the model, i.e., dimension of the\n    parameter space.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_samples",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of observations.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.info_theory",
                    "defaultValue": "astropy.stats.info_theory",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.info_theory.akaike_info_criterion",
                    "defaultValue": "astropy.stats.info_theory.akaike_info_criterion",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "xxvb10a5",
            "name": "akaike_info_criterion_lsq",
            "description": "Computes the Akaike Information Criterion assuming that the observations\n    are Gaussian distributed.\n    \n    In this case, AIC is given as\n    \n    .. math::\n    \n        \\mathrm{AIC} = n\\ln\\left(\\dfrac{\\mathrm{SSR}}{n}\\right) + 2k\n    \n    In case that the sample size is not \"large enough\", a correction is\n    applied, i.e.\n    \n    .. math::\n    \n        \\mathrm{AIC} = n\\ln\\left(\\dfrac{\\mathrm{SSR}}{n}\\right) + 2k +\n                       \\dfrac{2k(k+1)}{n-k-1}\n    \n    \n    in which :math:`n` is the sample size, :math:`k` is the number of free\n    parameters and :math:`\\mathrm{SSR}` stands for the sum of squared residuals\n    between model and data.\n    \n    This is applicable, for instance, when the parameters of a model are\n    estimated using the least squares statistic.\n    \n    Parameters\n    ----------\n    ssr : float\n        Sum of squared residuals (SSR) between model and data.\n    n_params : int\n        Number of free parameters of the model, i.e.,  the dimension of the\n        parameter space.\n    n_samples : int\n        Number of observations.\n    \n    Returns\n    -------\n    aic : float\n        Akaike Information Criterion.\n    \n    Examples\n    --------\n    This example is based on Astropy Modeling webpage, Compound models\n    section.\n    \n    >>> import numpy as np\n    >>> from astropy.modeling import models, fitting\n    >>> from astropy.stats.info_theory import akaike_info_criterion_lsq\n    >>> np.random.seed(42)\n    >>> # Generate fake data\n    >>> g1 = models.Gaussian1D(.1, 0, 0.2) # changed this to noise level\n    >>> g2 = models.Gaussian1D(.1, 0.3, 0.2) # and added another Gaussian\n    >>> g3 = models.Gaussian1D(2.5, 0.5, 0.1)\n    >>> x = np.linspace(-1, 1, 200)\n    >>> y = g1(x) + g2(x) + g3(x) + np.random.normal(0., 0.2, x.shape)\n    >>> # Fit with three Gaussians\n    >>> g3_init = (models.Gaussian1D(.1, 0, 0.1)\n    ...            + models.Gaussian1D(.1, 0.2, 0.15)\n    ...            + models.Gaussian1D(2.4, .4, 0.1))\n    >>> fitter = fitting.LevMarLSQFitter()\n    >>> g3_fit = fitter(g3_init, x, y)\n    >>> # Fit with two Gaussians\n    >>> g2_init = (models.Gaussian1D(.1, 0, 0.1) +\n    ...            models.Gaussian1D(2, 0.5, 0.1))\n    >>> g2_fit = fitter(g2_init, x, y)\n    >>> # Fit with only one Gaussian\n    >>> g1_init = models.Gaussian1D(amplitude=2., mean=0.3, stddev=.5)\n    >>> g1_fit = fitter(g1_init, x, y)\n    >>> # Compute the mean squared errors\n    >>> ssr_g3 = np.sum((g3_fit(x) - y)**2.0)\n    >>> ssr_g2 = np.sum((g2_fit(x) - y)**2.0)\n    >>> ssr_g1 = np.sum((g1_fit(x) - y)**2.0)\n    >>> akaike_info_criterion_lsq(ssr_g3, 9, x.shape[0]) # doctest: +FLOAT_CMP\n    -634.5257517810961\n    >>> akaike_info_criterion_lsq(ssr_g2, 6, x.shape[0]) # doctest: +FLOAT_CMP\n    -662.83834510232043\n    >>> akaike_info_criterion_lsq(ssr_g1, 3, x.shape[0]) # doctest: +FLOAT_CMP\n    -647.47312032659499\n    \n    Hence, from the AIC values, we would prefer to choose the model g2_fit.\n    However, we can considerably support the model g3_fit, since the\n    difference in AIC is about 2.4. We should reject the model g1_fit.\n    \n    References\n    ----------\n    .. [1] Akaike Information Criterion.\n       <https://en.wikipedia.org/wiki/Akaike_information_criterion>\n    .. [2] Origin Lab. Comparing Two Fitting Functions.\n       <https://www.originlab.com/doc/Origin-Help/PostFit-CompareFitFunc>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c52cff1063b7d021e5f1b3509cab24eea9a47bad893c0fcab4e8ff7184204fa0",
            "fields": [
                {
                    "name": "ssr",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Sum of squared residuals (SSR) between model and data.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_params",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of free parameters of the model, i.e.,  the dimension of the\n    parameter space.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_samples",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of observations.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.info_theory",
                    "defaultValue": "astropy.stats.info_theory",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.info_theory.akaike_info_criterion_lsq",
                    "defaultValue": "astropy.stats.info_theory.akaike_info_criterion_lsq",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "_lypj59_",
            "name": "bayesian_blocks",
            "description": "Compute optimal segmentation of data with Scargle's Bayesian Blocks.\n    \n    This is a flexible implementation of the Bayesian Blocks algorithm\n    described in Scargle 2013 [1]_.\n    \n    Parameters\n    ----------\n    t : array-like\n        data times (one dimensional, length N)\n    x : array-like, optional\n        data values\n    sigma : array-like or float, optional\n        data errors\n    fitness : str or object\n        the fitness function to use for the model.\n        If a string, the following options are supported:\n    \n        - 'events' : binned or unbinned event data.  Arguments are ``gamma``,\n          which gives the slope of the prior on the number of bins, or\n          ``ncp_prior``, which is :math:`-\\ln({\\tt gamma})`.\n        - 'regular_events' : non-overlapping events measured at multiples of a\n          fundamental tick rate, ``dt``, which must be specified as an\n          additional argument.  Extra arguments are ``p0``, which gives the\n          false alarm probability to compute the prior, or ``gamma``, which\n          gives the slope of the prior on the number of bins, or ``ncp_prior``,\n          which is :math:`-\\ln({\\tt gamma})`.\n        - 'measures' : fitness for a measured sequence with Gaussian errors.\n          Extra arguments are ``p0``, which gives the false alarm probability\n          to compute the prior, or ``gamma``, which gives the slope of the\n          prior on the number of bins, or ``ncp_prior``, which is\n          :math:`-\\ln({\\tt gamma})`.\n    \n        In all three cases, if more than one of ``p0``, ``gamma``, and\n        ``ncp_prior`` is chosen, ``ncp_prior`` takes precedence over ``gamma``\n        which takes precedence over ``p0``.\n    \n        Alternatively, the fitness parameter can be an instance of\n        :class:`FitnessFunc` or a subclass thereof.\n    \n    **kwargs :\n        any additional keyword arguments will be passed to the specified\n        :class:`FitnessFunc` derived class.\n    \n    Returns\n    -------\n    edges : ndarray\n        array containing the (N+1) edges defining the N bins\n    \n    Examples\n    --------\n    .. testsetup::\n    \n        >>> np.random.seed(12345)\n    \n    Event data:\n    \n    >>> t = np.random.normal(size=100)\n    >>> edges = bayesian_blocks(t, fitness='events', p0=0.01)\n    \n    Event data with repeats:\n    \n    >>> t = np.random.normal(size=100)\n    >>> t[80:] = t[:20]\n    >>> edges = bayesian_blocks(t, fitness='events', p0=0.01)\n    \n    Regular event data:\n    \n    >>> dt = 0.05\n    >>> t = dt * np.arange(1000)\n    >>> x = np.zeros(len(t))\n    >>> x[np.random.randint(0, len(t), len(t) // 10)] = 1\n    >>> edges = bayesian_blocks(t, x, fitness='regular_events', dt=dt)\n    \n    Measured point data with errors:\n    \n    >>> t = 100 * np.random.random(100)\n    >>> x = np.exp(-0.5 * (t - 50) ** 2)\n    >>> sigma = 0.1\n    >>> x_obs = np.random.normal(x, sigma)\n    >>> edges = bayesian_blocks(t, x_obs, sigma, fitness='measures')\n    \n    References\n    ----------\n    .. [1] Scargle, J et al. (2013)\n       https://ui.adsabs.harvard.edu/abs/2013ApJ...764..167S\n    \n    .. [2] Bellman, R.E., Dreyfus, S.E., 1962. Applied Dynamic\n       Programming. Princeton University Press, Princeton.\n       https://press.princeton.edu/books/hardcover/9780691651873/applied-dynamic-programming\n    \n    .. [3] Bellman, R., Roth, R., 1969. Curve fitting by segmented\n       straight lines. J. Amer. Statist. Assoc. 64, 1079\u20131084.\n       https://www.tandfonline.com/doi/abs/10.1080/01621459.1969.10501038\n    \n    See Also\n    --------\n    astropy.stats.histogram : compute a histogram using bayesian blocks",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f9302f284a06716d021690f7803560c470f0923b66dea7b82c4445e418552644",
            "fields": [
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    data times (one dimensional, length N)",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    data values",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or float, optional\n    data errors",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fitness",
                    "value": "events",
                    "defaultValue": "events",
                    "description": " which is :math:`-\\ln({\\tt gamma}\n      which is :math:`-\\ln({\\tt gamma} which is\n      :math:`-\\ln({\\tt gamma}    which takes precedence over ``p0``.\n\n    Alternatively, the fitness parameter can be an instance of\n    :class:`FitnessFunc` or a subclass thereof.\n\n**kwargs :\n    any additional keyword arguments will be passed to the specified\n    :class:`FitnessFunc` derived class.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.bayesian_blocks",
                    "defaultValue": "astropy.stats.bayesian_blocks",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.bayesian_blocks.bayesian_blocks",
                    "defaultValue": "astropy.stats.bayesian_blocks.bayesian_blocks",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "g07kxj4a",
            "name": "bayesian_info_criterion",
            "description": "Computes the Bayesian Information Criterion (BIC) given the log of the\n    likelihood function evaluated at the estimated (or analytically derived)\n    parameters, the number of parameters, and the number of samples.\n    \n    The BIC is usually applied to decide whether increasing the number of free\n    parameters (hence, increasing the model complexity) yields significantly\n    better fittings. The decision is in favor of the model with the lowest\n    BIC.\n    \n    BIC is given as\n    \n    .. math::\n    \n        \\mathrm{BIC} = k \\ln(n) - 2L,\n    \n    in which :math:`n` is the sample size, :math:`k` is the number of free\n    parameters, and :math:`L` is the log likelihood function of the model\n    evaluated at the maximum likelihood estimate (i. e., the parameters for\n    which L is maximized).\n    \n    When comparing two models define\n    :math:`\\Delta \\mathrm{BIC} = \\mathrm{BIC}_h - \\mathrm{BIC}_l`, in which\n    :math:`\\mathrm{BIC}_h` is the higher BIC, and :math:`\\mathrm{BIC}_l` is\n    the lower BIC. The higher is :math:`\\Delta \\mathrm{BIC}` the stronger is\n    the evidence against the model with higher BIC.\n    \n    The general rule of thumb is:\n    \n    :math:`0 < \\Delta\\mathrm{BIC} \\leq 2`: weak evidence that model low is\n    better\n    \n    :math:`2 < \\Delta\\mathrm{BIC} \\leq 6`: moderate evidence that model low is\n    better\n    \n    :math:`6 < \\Delta\\mathrm{BIC} \\leq 10`: strong evidence that model low is\n    better\n    \n    :math:`\\Delta\\mathrm{BIC} > 10`: very strong evidence that model low is\n    better\n    \n    For a detailed explanation, see [1]_ - [5]_.\n    \n    Parameters\n    ----------\n    log_likelihood : float\n        Logarithm of the likelihood function of the model evaluated at the\n        point of maxima (with respect to the parameter space).\n    n_params : int\n        Number of free parameters of the model, i.e., dimension of the\n        parameter space.\n    n_samples : int\n        Number of observations.\n    \n    Returns\n    -------\n    bic : float\n        Bayesian Information Criterion.\n    \n    Examples\n    --------\n    The following example was originally presented in [1]_. Consider a\n    Gaussian model (mu, sigma) and a t-Student model (mu, sigma, delta).\n    In addition, assume that the t model has presented a higher likelihood.\n    The question that the BIC is proposed to answer is: \"Is the increase in\n    likelihood due to larger number of parameters?\"\n    \n    >>> from astropy.stats.info_theory import bayesian_info_criterion\n    >>> lnL_g = -176.4\n    >>> lnL_t = -173.0\n    >>> n_params_g = 2\n    >>> n_params_t = 3\n    >>> n_samples = 100\n    >>> bic_g = bayesian_info_criterion(lnL_g, n_params_g, n_samples)\n    >>> bic_t = bayesian_info_criterion(lnL_t, n_params_t, n_samples)\n    >>> bic_g - bic_t # doctest: +FLOAT_CMP\n    2.1948298140119391\n    \n    Therefore, there exist a moderate evidence that the increasing in\n    likelihood for t-Student model is due to the larger number of parameters.\n    \n    References\n    ----------\n    .. [1] Richards, D. Maximum Likelihood Estimation and the Bayesian\n       Information Criterion.\n       <https://hea-www.harvard.edu/astrostat/Stat310_0910/dr_20100323_mle.pdf>\n    .. [2] Wikipedia. Bayesian Information Criterion.\n       <https://en.wikipedia.org/wiki/Bayesian_information_criterion>\n    .. [3] Origin Lab. Comparing Two Fitting Functions.\n       <https://www.originlab.com/doc/Origin-Help/PostFit-CompareFitFunc>\n    .. [4] Liddle, A. R. Information Criteria for Astrophysical Model\n       Selection. 2008. <https://arxiv.org/pdf/astro-ph/0701113v2.pdf>\n    .. [5] Liddle, A. R. How many cosmological parameters? 2008.\n       <https://arxiv.org/pdf/astro-ph/0401198v3.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3ec50ae6bcf54cea53abbdfa80f277d85ac9c249ca3f7490cc0fdced6227351b",
            "fields": [
                {
                    "name": "log_likelihood",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Logarithm of the likelihood function of the model evaluated at the\n    point of maxima (with respect to the parameter space).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_params",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of free parameters of the model, i.e., dimension of the\n    parameter space.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_samples",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of observations.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.info_theory",
                    "defaultValue": "astropy.stats.info_theory",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.info_theory.bayesian_info_criterion",
                    "defaultValue": "astropy.stats.info_theory.bayesian_info_criterion",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "euezpusl",
            "name": "bayesian_info_criterion_lsq",
            "description": "Computes the Bayesian Information Criterion (BIC) assuming that the\n    observations come from a Gaussian distribution.\n    \n    In this case, BIC is given as\n    \n    .. math::\n    \n        \\mathrm{BIC} = n\\ln\\left(\\dfrac{\\mathrm{SSR}}{n}\\right) + k\\ln(n)\n    \n    in which :math:`n` is the sample size, :math:`k` is the number of free\n    parameters and :math:`\\mathrm{SSR}` stands for the sum of squared residuals\n    between model and data.\n    \n    This is applicable, for instance, when the parameters of a model are\n    estimated using the least squares statistic. See [1]_ and [2]_.\n    \n    Parameters\n    ----------\n    ssr : float\n        Sum of squared residuals (SSR) between model and data.\n    n_params : int\n        Number of free parameters of the model, i.e., dimension of the\n        parameter space.\n    n_samples : int\n        Number of observations.\n    \n    Returns\n    -------\n    bic : float\n    \n    Examples\n    --------\n    Consider the simple 1-D fitting example presented in the Astropy\n    modeling webpage [3]_. There, two models (Box and Gaussian) were fitted to\n    a source flux using the least squares statistic. However, the fittings\n    themselves do not tell much about which model better represents this\n    hypothetical source. Therefore, we are going to apply to BIC in order to\n    decide in favor of a model.\n    \n    >>> import numpy as np\n    >>> from astropy.modeling import models, fitting\n    >>> from astropy.stats.info_theory import bayesian_info_criterion_lsq\n    >>> # Generate fake data\n    >>> np.random.seed(0)\n    >>> x = np.linspace(-5., 5., 200)\n    >>> y = 3 * np.exp(-0.5 * (x - 1.3)**2 / 0.8**2)\n    >>> y += np.random.normal(0., 0.2, x.shape)\n    >>> # Fit the data using a Box model.\n    >>> # Bounds are not really needed but included here to demonstrate usage.\n    >>> t_init = models.Trapezoid1D(amplitude=1., x_0=0., width=1., slope=0.5,\n    ...                             bounds={\"x_0\": (-5., 5.)})\n    >>> fit_t = fitting.LevMarLSQFitter()\n    >>> t = fit_t(t_init, x, y)\n    >>> # Fit the data using a Gaussian\n    >>> g_init = models.Gaussian1D(amplitude=1., mean=0, stddev=1.)\n    >>> fit_g = fitting.LevMarLSQFitter()\n    >>> g = fit_g(g_init, x, y)\n    >>> # Compute the mean squared errors\n    >>> ssr_t = np.sum((t(x) - y)*(t(x) - y))\n    >>> ssr_g = np.sum((g(x) - y)*(g(x) - y))\n    >>> # Compute the bics\n    >>> bic_t = bayesian_info_criterion_lsq(ssr_t, 4, x.shape[0])\n    >>> bic_g = bayesian_info_criterion_lsq(ssr_g, 3, x.shape[0])\n    >>> bic_t - bic_g  # doctest: +SKIP\n    30.644474706065466\n    \n    Hence, there is a very strong evidence that the Gaussian model has a\n    significantly better representation of the data than the Box model. This\n    is, obviously, expected since the true model is Gaussian.\n    \n    References\n    ----------\n    .. [1] Wikipedia. Bayesian Information Criterion.\n       <https://en.wikipedia.org/wiki/Bayesian_information_criterion>\n    .. [2] Origin Lab. Comparing Two Fitting Functions.\n       <https://www.originlab.com/doc/Origin-Help/PostFit-CompareFitFunc>\n    .. [3] Astropy Models and Fitting\n        <https://docs.astropy.org/en/stable/modeling>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f416e0a7a5149c7cfbbfc770f5ef61484944ba8511079f5b3e202e02376ba6b0",
            "fields": [
                {
                    "name": "ssr",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Sum of squared residuals (SSR) between model and data.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_params",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of free parameters of the model, i.e., dimension of the\n    parameter space.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n_samples",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    Number of observations.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.info_theory",
                    "defaultValue": "astropy.stats.info_theory",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.info_theory.bayesian_info_criterion_lsq",
                    "defaultValue": "astropy.stats.info_theory.bayesian_info_criterion_lsq",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "r16bz5np",
            "name": "binned_binom_proportion",
            "description": "Binomial proportion and confidence interval in bins of a continuous\n    variable ``x``.\n    \n    Given a set of datapoint pairs where the ``x`` values are\n    continuously distributed and the ``success`` values are binomial\n    (\"success / failure\" or \"true / false\"), place the pairs into\n    bins according to ``x`` value and calculate the binomial proportion\n    (fraction of successes) and confidence interval in each bin.\n    \n    Parameters\n    ----------\n    x : sequence\n        Values.\n    success : sequence of bool\n        Success (`True`) or failure (`False`) corresponding to each value\n        in ``x``.  Must be same length as ``x``.\n    bins : int or sequence of scalar, optional\n        If bins is an int, it defines the number of equal-width bins\n        in the given range (10, by default). If bins is a sequence, it\n        defines the bin edges, including the rightmost edge, allowing\n        for non-uniform bin widths (in this case, 'range' is ignored).\n    range : (float, float), optional\n        The lower and upper range of the bins. If `None` (default),\n        the range is set to ``(x.min(), x.max())``. Values outside the\n        range are ignored.\n    confidence_level : float, optional\n        Must be in range [0, 1].\n        Desired probability content in the confidence\n        interval ``(p - perr[0], p + perr[1])`` in each bin. Default is\n        0.68269.\n    interval : {'wilson', 'jeffreys', 'flat', 'wald'}, optional\n        Formula used to calculate confidence interval on the\n        binomial proportion in each bin. See `binom_conf_interval` for\n        definition of the intervals.  The 'wilson', 'jeffreys',\n        and 'flat' intervals generally give similar results.  'wilson'\n        should be somewhat faster, while 'jeffreys' and 'flat' are\n        marginally superior, but differ in the assumed prior.\n        The 'wald' interval is generally not recommended.\n        It is provided for comparison purposes. Default is 'wilson'.\n    \n    Returns\n    -------\n    bin_ctr : ndarray\n        Central value of bins. Bins without any entries are not returned.\n    bin_halfwidth : ndarray\n        Half-width of each bin such that ``bin_ctr - bin_halfwidth`` and\n        ``bin_ctr + bins_halfwidth`` give the left and right side of each bin,\n        respectively.\n    p : ndarray\n        Efficiency in each bin.\n    perr : ndarray\n        2-d array of shape (2, len(p)) representing the upper and lower\n        uncertainty on p in each bin.\n    \n    Notes\n    -----\n    This function requires ``scipy`` for all interval types.\n    \n    See Also\n    --------\n    binom_conf_interval : Function used to estimate confidence interval in\n                          each bin.\n    \n    Examples\n    --------\n    Suppose we wish to estimate the efficiency of a survey in\n    detecting astronomical sources as a function of magnitude (i.e.,\n    the probability of detecting a source given its magnitude). In a\n    realistic case, we might prepare a large number of sources with\n    randomly selected magnitudes, inject them into simulated images,\n    and then record which were detected at the end of the reduction\n    pipeline. As a toy example, we generate 100 data points with\n    randomly selected magnitudes between 20 and 30 and \"observe\" them\n    with a known detection function (here, the error function, with\n    50% detection probability at magnitude 25):\n    \n    >>> from scipy.special import erf\n    >>> from scipy.stats.distributions import binom\n    >>> def true_efficiency(x):\n    ...     return 0.5 - 0.5 * erf((x - 25.) / 2.)\n    >>> mag = 20. + 10. * np.random.rand(100)\n    >>> detected = binom.rvs(1, true_efficiency(mag))\n    >>> bins, binshw, p, perr = binned_binom_proportion(mag, detected, bins=20)\n    >>> plt.errorbar(bins, p, xerr=binshw, yerr=perr, ls='none', marker='o',\n    ...              label='estimate')\n    \n    .. plot::\n    \n       import numpy as np\n       from scipy.special import erf\n       from scipy.stats.distributions import binom\n       import matplotlib.pyplot as plt\n       from astropy.stats import binned_binom_proportion\n       def true_efficiency(x):\n           return 0.5 - 0.5 * erf((x - 25.) / 2.)\n       np.random.seed(400)\n       mag = 20. + 10. * np.random.rand(100)\n       np.random.seed(600)\n       detected = binom.rvs(1, true_efficiency(mag))\n       bins, binshw, p, perr = binned_binom_proportion(mag, detected, bins=20)\n       plt.errorbar(bins, p, xerr=binshw, yerr=perr, ls='none', marker='o',\n                    label='estimate')\n       X = np.linspace(20., 30., 1000)\n       plt.plot(X, true_efficiency(X), label='true efficiency')\n       plt.ylim(0., 1.)\n       plt.title('Detection efficiency vs magnitude')\n       plt.xlabel('Magnitude')\n       plt.ylabel('Detection efficiency')\n       plt.legend()\n       plt.show()\n    \n    The above example uses the Wilson confidence interval to calculate\n    the uncertainty ``perr`` in each bin (see the definition of various\n    confidence intervals in `binom_conf_interval`). A commonly used\n    alternative is the Wald interval. However, the Wald interval can\n    give nonsensical uncertainties when the efficiency is near 0 or 1,\n    and is therefore **not** recommended. As an illustration, the\n    following example shows the same data as above but uses the Wald\n    interval rather than the Wilson interval to calculate ``perr``:\n    \n    >>> bins, binshw, p, perr = binned_binom_proportion(mag, detected, bins=20,\n    ...                                                 interval='wald')\n    >>> plt.errorbar(bins, p, xerr=binshw, yerr=perr, ls='none', marker='o',\n    ...              label='estimate')\n    \n    .. plot::\n    \n       import numpy as np\n       from scipy.special import erf\n       from scipy.stats.distributions import binom\n       import matplotlib.pyplot as plt\n       from astropy.stats import binned_binom_proportion\n       def true_efficiency(x):\n           return 0.5 - 0.5 * erf((x - 25.) / 2.)\n       np.random.seed(400)\n       mag = 20. + 10. * np.random.rand(100)\n       np.random.seed(600)\n       detected = binom.rvs(1, true_efficiency(mag))\n       bins, binshw, p, perr = binned_binom_proportion(mag, detected, bins=20,\n                                                       interval='wald')\n       plt.errorbar(bins, p, xerr=binshw, yerr=perr, ls='none', marker='o',\n                    label='estimate')\n       X = np.linspace(20., 30., 1000)\n       plt.plot(X, true_efficiency(X), label='true efficiency')\n       plt.ylim(0., 1.)\n       plt.title('The Wald interval can give nonsensical uncertainties')\n       plt.xlabel('Magnitude')\n       plt.ylabel('Detection efficiency')\n       plt.legend()\n       plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3abacfbccfa2eb0b036e3ea74588208d142e7b644e5519719c1df8721c48f6e3",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence\n    Values.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "success",
                    "value": null,
                    "defaultValue": null,
                    "description": "sequence of bool\n    Success (`True`) or failure (`False`) corresponding to each value\n    in ``x``.  Must be same length as ``x``.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bins",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int or sequence of scalar, optional\n    If bins is an int, it defines the number of equal-width bins\n    in the given range (10, by default). If bins is a sequence, it\n    defines the bin edges, including the rightmost edge, allowing\n    for non-uniform bin widths (in this case, 'range' is ignored).",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "range",
                    "value": null,
                    "defaultValue": null,
                    "description": "(float, float), optional\n    The lower and upper range of the bins. If `None` (default),\n    the range is set to ``(x.min(), x.max())``. Values outside the\n    range are ignored.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "confidence_level",
                    "value": 0.68269,
                    "defaultValue": 0.68269,
                    "description": "float, optional\n    Must be in range [0, 1].\n    Desired probability content in the confidence\n    interval ``(p - perr[0], p + perr[1])`` in each bin. Default is\n    0.68269.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "wilson",
                    "defaultValue": "wilson",
                    "description": "{'wilson', 'jeffreys', 'flat', 'wald'}, optional\n    Formula used to calculate confidence interval on the\n    binomial proportion in each bin. See `binom_conf_interval` for\n    definition of the intervals.  The 'wilson', 'jeffreys',\n    and 'flat' intervals generally give similar results.  'wilson'\n    should be somewhat faster, while 'jeffreys' and 'flat' are\n    marginally superior, but differ in the assumed prior.\n    The 'wald' interval is generally not recommended.\n    It is provided for comparison purposes. Default is 'wilson'.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.binned_binom_proportion",
                    "defaultValue": "astropy.stats.funcs.binned_binom_proportion",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "j2k4y_ly",
            "name": "binom_conf_interval",
            "description": "Binomial proportion confidence interval given k successes,\n    n trials.\n    \n    Parameters\n    ----------\n    k : int or numpy.ndarray\n        Number of successes (0 <= ``k`` <= ``n``).\n    n : int or numpy.ndarray\n        Number of trials (``n`` > 0).  If both ``k`` and ``n`` are arrays,\n        they must have the same shape.\n    confidence_level : float, optional\n        Desired probability content of interval. Default is 0.68269,\n        corresponding to 1 sigma in a 1-dimensional Gaussian distribution.\n        Confidence level must be in range [0, 1].\n    interval : {'wilson', 'jeffreys', 'flat', 'wald'}, optional\n        Formula used for confidence interval. See notes for details.  The\n        ``'wilson'`` and ``'jeffreys'`` intervals generally give similar\n        results, while 'flat' is somewhat different, especially for small\n        values of ``n``.  ``'wilson'`` should be somewhat faster than\n        ``'flat'`` or ``'jeffreys'``.  The 'wald' interval is generally not\n        recommended.  It is provided for comparison purposes.  Default is\n        ``'wilson'``.\n    \n    Returns\n    -------\n    conf_interval : ndarray\n        ``conf_interval[0]`` and ``conf_interval[1]`` correspond to the lower\n        and upper limits, respectively, for each element in ``k``, ``n``.\n    \n    Notes\n    -----\n    In situations where a probability of success is not known, it can\n    be estimated from a number of trials (n) and number of\n    observed successes (k). For example, this is done in Monte\n    Carlo experiments designed to estimate a detection efficiency. It\n    is simple to take the sample proportion of successes (k/n)\n    as a reasonable best estimate of the true probability\n    :math:`\\epsilon`. However, deriving an accurate confidence\n    interval on :math:`\\epsilon` is non-trivial. There are several\n    formulas for this interval (see [1]_). Four intervals are implemented\n    here:\n    \n    **1. The Wilson Interval.** This interval, attributed to Wilson [2]_,\n    is given by\n    \n    .. math::\n    \n        CI_{\\rm Wilson} = \\frac{k + \\kappa^2/2}{n + \\kappa^2}\n        \\pm \\frac{\\kappa n^{1/2}}{n + \\kappa^2}\n        ((\\hat{\\epsilon}(1 - \\hat{\\epsilon}) + \\kappa^2/(4n))^{1/2}\n    \n    where :math:`\\hat{\\epsilon} = k / n` and :math:`\\kappa` is the\n    number of standard deviations corresponding to the desired\n    confidence interval for a *normal* distribution (for example,\n    1.0 for a confidence interval of 68.269%). For a\n    confidence interval of 100(1 - :math:`\\alpha`)%,\n    \n    .. math::\n    \n        \\kappa = \\Phi^{-1}(1-\\alpha/2) = \\sqrt{2}{\\rm erf}^{-1}(1-\\alpha).\n    \n    **2. The Jeffreys Interval.** This interval is derived by applying\n    Bayes' theorem to the binomial distribution with the\n    noninformative Jeffreys prior [3]_, [4]_. The noninformative Jeffreys\n    prior is the Beta distribution, Beta(1/2, 1/2), which has the density\n    function\n    \n    .. math::\n    \n        f(\\epsilon) = \\pi^{-1} \\epsilon^{-1/2}(1-\\epsilon)^{-1/2}.\n    \n    The justification for this prior is that it is invariant under\n    reparameterizations of the binomial proportion.\n    The posterior density function is also a Beta distribution: Beta(k\n    + 1/2, n - k + 1/2). The interval is then chosen so that it is\n    *equal-tailed*: Each tail (outside the interval) contains\n    :math:`\\alpha`/2 of the posterior probability, and the interval\n    itself contains 1 - :math:`\\alpha`. This interval must be\n    calculated numerically. Additionally, when k = 0 the lower limit\n    is set to 0 and when k = n the upper limit is set to 1, so that in\n    these cases, there is only one tail containing :math:`\\alpha`/2\n    and the interval itself contains 1 - :math:`\\alpha`/2 rather than\n    the nominal 1 - :math:`\\alpha`.\n    \n    **3. A Flat prior.** This is similar to the Jeffreys interval,\n    but uses a flat (uniform) prior on the binomial proportion\n    over the range 0 to 1 rather than the reparametrization-invariant\n    Jeffreys prior.  The posterior density function is a Beta distribution:\n    Beta(k + 1, n - k + 1).  The same comments about the nature of the\n    interval (equal-tailed, etc.) also apply to this option.\n    \n    **4. The Wald Interval.** This interval is given by\n    \n    .. math::\n    \n       CI_{\\rm Wald} = \\hat{\\epsilon} \\pm\n       \\kappa \\sqrt{\\frac{\\hat{\\epsilon}(1-\\hat{\\epsilon})}{n}}\n    \n    The Wald interval gives acceptable results in some limiting\n    cases. Particularly, when n is very large, and the true proportion\n    :math:`\\epsilon` is not \"too close\" to 0 or 1. However, as the\n    later is not verifiable when trying to estimate :math:`\\epsilon`,\n    this is not very helpful. Its use is not recommended, but it is\n    provided here for comparison purposes due to its prevalence in\n    everyday practical statistics.\n    \n    This function requires ``scipy`` for all interval types.\n    \n    References\n    ----------\n    .. [1] Brown, Lawrence D.; Cai, T. Tony; DasGupta, Anirban (2001).\n       \"Interval Estimation for a Binomial Proportion\". Statistical\n       Science 16 (2): 101-133. doi:10.1214/ss/1009213286\n    \n    .. [2] Wilson, E. B. (1927). \"Probable inference, the law of\n       succession, and statistical inference\". Journal of the American\n       Statistical Association 22: 209-212.\n    \n    .. [3] Jeffreys, Harold (1946). \"An Invariant Form for the Prior\n       Probability in Estimation Problems\". Proc. R. Soc. Lond.. A 24 186\n       (1007): 453-461. doi:10.1098/rspa.1946.0056\n    \n    .. [4] Jeffreys, Harold (1998). Theory of Probability. Oxford\n       University Press, 3rd edition. ISBN 978-0198503682\n    \n    Examples\n    --------\n    Integer inputs return an array with shape (2,):\n    \n    >>> binom_conf_interval(4, 5, interval='wilson')  # doctest: +FLOAT_CMP\n    array([0.57921724, 0.92078259])\n    \n    Arrays of arbitrary dimension are supported. The Wilson and Jeffreys\n    intervals give similar results, even for small k, n:\n    \n    >>> binom_conf_interval([1, 2], 5, interval='wilson')  # doctest: +FLOAT_CMP\n    array([[0.07921741, 0.21597328],\n           [0.42078276, 0.61736012]])\n    \n    >>> binom_conf_interval([1, 2,], 5, interval='jeffreys')  # doctest: +FLOAT_CMP\n    array([[0.0842525 , 0.21789949],\n           [0.42218001, 0.61753691]])\n    \n    >>> binom_conf_interval([1, 2], 5, interval='flat')  # doctest: +FLOAT_CMP\n    array([[0.12139799, 0.24309021],\n           [0.45401727, 0.61535699]])\n    \n    In contrast, the Wald interval gives poor results for small k, n.\n    For k = 0 or k = n, the interval always has zero length.\n    \n    >>> binom_conf_interval([1, 2], 5, interval='wald')  # doctest: +FLOAT_CMP\n    array([[0.02111437, 0.18091075],\n           [0.37888563, 0.61908925]])\n    \n    For confidence intervals approaching 1, the Wald interval for\n    0 < k < n can give intervals that extend outside [0, 1]:\n    \n    >>> binom_conf_interval([1, 2], 5, interval='wald', confidence_level=0.99)  # doctest: +FLOAT_CMP\n    array([[-0.26077835, -0.16433593],\n           [ 0.66077835,  0.96433593]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ba7d8ede23bfc81ecca4bbf41e66f8d8ccbd9d4be16436ebf5616096f767fb09",
            "fields": [
                {
                    "name": "k",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or numpy.ndarray\n    Number of successes (0 <= ``k`` <= ``n``).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or numpy.ndarray\n    Number of trials (``n`` > 0).  If both ``k`` and ``n`` are arrays,\n    they must have the same shape.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "confidence_level",
                    "value": 0.68269,
                    "defaultValue": 0.68269,
                    "description": "float, optional\n    Desired probability content of interval. Default is 0.68269,\n    corresponding to 1 sigma in a 1-dimensional Gaussian distribution.\n    Confidence level must be in range [0, 1].",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "wilson",
                    "defaultValue": "wilson",
                    "description": "{'wilson', 'jeffreys', 'flat', 'wald'}, optional\n    Formula used for confidence interval. See notes for details.  The\n    ``'wilson'`` and ``'jeffreys'`` intervals generally give similar\n    results, while 'flat' is somewhat different, especially for small\n    values of ``n``.  ``'wilson'`` should be somewhat faster than\n    ``'flat'`` or ``'jeffreys'``.  The 'wald' interval is generally not\n    recommended.  It is provided for comparison purposes.  Default is\n    ``'wilson'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.binom_conf_interval",
                    "defaultValue": "astropy.stats.funcs.binom_conf_interval",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "9xb3vslq",
            "name": "biweight_location",
            "description": "Compute the biweight location.\n    \n    The biweight location is a robust statistic for determining the\n    central location of a distribution.  It is given by:\n    \n    .. math::\n    \n        \\zeta_{biloc}= M + \\frac{\\sum_{|u_i|<1} \\ (x_i - M) (1 - u_i^2)^2}\n            {\\sum_{|u_i|<1} \\ (1 - u_i^2)^2}\n    \n    where :math:`x` is the input data, :math:`M` is the sample median\n    (or the input initial location guess) and :math:`u_i` is given by:\n    \n    .. math::\n    \n        u_{i} = \\frac{(x_i - M)}{c * MAD}\n    \n    where :math:`c` is the tuning constant and :math:`MAD` is the\n    `median absolute deviation\n    <https://en.wikipedia.org/wiki/Median_absolute_deviation>`_.  The\n    biweight location tuning constant ``c`` is typically 6.0 (the\n    default).\n    \n    If :math:`MAD` is zero, then the median will be returned.\n    \n    Parameters\n    ----------\n    data : array-like\n        Input array or object that can be converted to an array.\n        ``data`` can be a `~numpy.ma.MaskedArray`.\n    c : float, optional\n        Tuning constant for the biweight estimator (default = 6.0).\n    M : float or array-like, optional\n        Initial guess for the location.  If ``M`` is a scalar value,\n        then its value will be used for the entire array (or along each\n        ``axis``, if specified).  If ``M`` is an array, then its must be\n        an array containing the initial location estimate along each\n        ``axis`` of the input array.  If `None` (default), then the\n        median of the input array will be used (or along each ``axis``,\n        if specified).\n    axis : None, int, or tuple of int, optional\n        The axis or axes along which the biweight locations are\n        computed.  If `None` (default), then the biweight location of\n        the flattened input array will be computed.\n    ignore_nan : bool, optional\n        Whether to ignore NaN values in the input ``data``.\n    \n    Returns\n    -------\n    biweight_location : float or `~numpy.ndarray`\n        The biweight location of the input data.  If ``axis`` is `None`\n        then a scalar will be returned, otherwise a `~numpy.ndarray`\n        will be returned.\n    \n    See Also\n    --------\n    biweight_scale, biweight_midvariance, biweight_midcovariance\n    \n    References\n    ----------\n    .. [1] Beers, Flynn, and Gebhardt (1990; AJ 100, 32) (https://ui.adsabs.harvard.edu/abs/1990AJ....100...32B)\n    \n    .. [2] https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/biwloc.htm\n    \n    Examples\n    --------\n    Generate random variates from a Gaussian distribution and return the\n    biweight location of the distribution:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import biweight_location\n    >>> rand = np.random.default_rng(12345)\n    >>> biloc = biweight_location(rand.standard_normal(1000))\n    >>> print(biloc)    # doctest: +FLOAT_CMP\n    0.01535330525461019",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "91cbfbbe8dd05cf407a3b83ab9a016d4c5d1818e5666fe135168adf162396e70",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    Input array or object that can be converted to an array.\n    ``data`` can be a `~numpy.ma.MaskedArray`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c",
                    "value": 6.0,
                    "defaultValue": 6.0,
                    "description": "float, optional\n    Tuning constant for the biweight estimator (default = 6.0).",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "M",
                    "value": null,
                    "defaultValue": null,
                    "description": "\n    if specified).",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "None, int, or tuple of int, optional\n    The axis or axes along which the biweight locations are\n    computed.  If `None` (default), then the biweight location of\n    the flattened input array will be computed.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ignore_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    Whether to ignore NaN values in the input ``data``.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.biweight",
                    "defaultValue": "astropy.stats.biweight",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.biweight.biweight_location",
                    "defaultValue": "astropy.stats.biweight.biweight_location",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "9arefoe7",
            "name": "biweight_midcorrelation",
            "description": "Compute the biweight midcorrelation between two variables.\n    \n    The `biweight midcorrelation\n    <https://en.wikipedia.org/wiki/Biweight_midcorrelation>`_ is a\n    measure of similarity between samples.  It is given by:\n    \n    .. math::\n    \n        r_{bicorr} = \\frac{\\zeta_{xy}}{\\sqrt{\\zeta_{xx} \\ \\zeta_{yy}}}\n    \n    where :math:`\\zeta_{xx}` is the biweight midvariance of :math:`x`,\n    :math:`\\zeta_{yy}` is the biweight midvariance of :math:`y`, and\n    :math:`\\zeta_{xy}` is the biweight midcovariance of :math:`x` and\n    :math:`y`.\n    \n    Parameters\n    ----------\n    x, y : 1D array-like\n        Input arrays for the two variables.  ``x`` and ``y`` must be 1D\n        arrays and have the same number of elements.\n    c : float, optional\n        Tuning constant for the biweight estimator (default = 9.0).  See\n        `biweight_midcovariance` for more details.\n    M : float or array-like, optional\n        The location estimate.  If ``M`` is a scalar value, then its\n        value will be used for the entire array (or along each ``axis``,\n        if specified).  If ``M`` is an array, then its must be an array\n        containing the location estimate along each ``axis`` of the\n        input array.  If `None` (default), then the median of the input\n        array will be used (or along each ``axis``, if specified).  See\n        `biweight_midcovariance` for more details.\n    modify_sample_size : bool, optional\n        If `False` (default), then the sample size used is the total\n        number of elements in the array (or along the input ``axis``, if\n        specified), which follows the standard definition of biweight\n        midcovariance.  If `True`, then the sample size is reduced to\n        correct for any rejected values (i.e. the sample size used\n        includes only the non-rejected values), which results in a value\n        closer to the true midcovariance for small sample sizes or for a\n        large number of rejected values.  See `biweight_midcovariance`\n        for more details.\n    \n    Returns\n    -------\n    biweight_midcorrelation : float\n        The biweight midcorrelation between ``x`` and ``y``.\n    \n    See Also\n    --------\n    biweight_scale, biweight_midvariance, biweight_midcovariance, biweight_location\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Biweight_midcorrelation\n    \n    Examples\n    --------\n    Calculate the biweight midcorrelation between two variables:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import biweight_midcorrelation\n    >>> rng = np.random.default_rng(12345)\n    >>> x = rng.normal(0, 1, 200)\n    >>> y = rng.normal(0, 3, 200)\n    >>> # Introduce an obvious outlier\n    >>> x[0] = 30.0\n    >>> bicorr = biweight_midcorrelation(x, y)\n    >>> print(bicorr)  # doctest: +FLOAT_CMP\n    -0.09203238319481295",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ca8fb0d860f98d78b91cd597b8e478f3f06bd831454b0019ae04b5817183446a",
            "fields": [
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y",
                    "value": null,
                    "defaultValue": null,
                    "description": "1D array-like\n    Input arrays for the two variables.  ``x`` and ``y`` must be 1D\n    arrays and have the same number of elements.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c",
                    "value": 9.0,
                    "defaultValue": 9.0,
                    "description": "float, optional\n    Tuning constant for the biweight estimator (default = 9.0).  See\n    `biweight_midcovariance` for more details.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "M",
                    "value": null,
                    "defaultValue": null,
                    "description": " if specified).  See\n    `biweight_midcovariance` for more details.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "modify_sample_size",
                    "value": false,
                    "defaultValue": false,
                    "description": "    for more details.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.biweight",
                    "defaultValue": "astropy.stats.biweight",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.biweight.biweight_midcorrelation",
                    "defaultValue": "astropy.stats.biweight.biweight_midcorrelation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "80nizakx",
            "name": "biweight_midcovariance",
            "description": "Compute the biweight midcovariance between pairs of multiple\n    variables.\n    \n    The biweight midcovariance is a robust and resistant estimator of\n    the covariance between two variables.\n    \n    This function computes the biweight midcovariance between all pairs\n    of the input variables (rows) in the input data.  The output array\n    will have a shape of (N_variables, N_variables).  The diagonal\n    elements will be the biweight midvariances of each input variable\n    (see :func:`biweight_midvariance`).  The off-diagonal elements will\n    be the biweight midcovariances between each pair of input variables.\n    \n    For example, if the input array ``data`` contains three variables\n    (rows) ``x``, ``y``, and ``z``, the output `~numpy.ndarray`\n    midcovariance matrix will be:\n    \n    .. math::\n    \n         \\begin{pmatrix}\n         \\zeta_{xx}  & \\zeta_{xy}  & \\zeta_{xz} \\\\\n         \\zeta_{yx}  & \\zeta_{yy}  & \\zeta_{yz} \\\\\n         \\zeta_{zx}  & \\zeta_{zy}  & \\zeta_{zz}\n         \\end{pmatrix}\n    \n    where :math:`\\zeta_{xx}`, :math:`\\zeta_{yy}`, and :math:`\\zeta_{zz}`\n    are the biweight midvariances of each variable.  The biweight\n    midcovariance between :math:`x` and :math:`y` is :math:`\\zeta_{xy}`\n    (:math:`= \\zeta_{yx}`).  The biweight midcovariance between\n    :math:`x` and :math:`z` is :math:`\\zeta_{xz}` (:math:`=\n    \\zeta_{zx}`).  The biweight midcovariance between :math:`y` and\n    :math:`z` is :math:`\\zeta_{yz}` (:math:`= \\zeta_{zy}`).\n    \n    The biweight midcovariance between two variables :math:`x` and\n    :math:`y` is given by:\n    \n    .. math::\n    \n        \\zeta_{xy} = n_{xy} \\ \\frac{\\sum_{|u_i| < 1, \\ |v_i| < 1} \\\n            (x_i - M_x) (1 - u_i^2)^2 (y_i - M_y) (1 - v_i^2)^2}\n            {(\\sum_{|u_i| < 1} \\ (1 - u_i^2) (1 - 5u_i^2))\n            (\\sum_{|v_i| < 1} \\ (1 - v_i^2) (1 - 5v_i^2))}\n    \n    where :math:`M_x` and :math:`M_y` are the medians (or the input\n    locations) of the two variables and :math:`u_i` and :math:`v_i` are\n    given by:\n    \n    .. math::\n    \n        u_{i} = \\frac{(x_i - M_x)}{c * MAD_x}\n    \n        v_{i} = \\frac{(y_i - M_y)}{c * MAD_y}\n    \n    where :math:`c` is the biweight tuning constant and :math:`MAD_x`\n    and :math:`MAD_y` are the `median absolute deviation\n    <https://en.wikipedia.org/wiki/Median_absolute_deviation>`_ of the\n    :math:`x` and :math:`y` variables.  The biweight midvariance tuning\n    constant ``c`` is typically 9.0 (the default).\n    \n    If :math:`MAD_x` or :math:`MAD_y` are zero, then zero will be\n    returned for that element.\n    \n    For the standard definition of biweight midcovariance,\n    :math:`n_{xy}` is the total number of observations of each variable.\n    That definition is used if ``modify_sample_size`` is `False`, which\n    is the default.\n    \n    However, if ``modify_sample_size = True``, then :math:`n_{xy}` is the\n    number of observations for which :math:`|u_i| < 1` and/or :math:`|v_i|\n    < 1`, i.e.\n    \n    .. math::\n    \n        n_{xx} = \\sum_{|u_i| < 1} \\ 1\n    \n    .. math::\n    \n        n_{xy} = n_{yx} = \\sum_{|u_i| < 1, \\ |v_i| < 1} \\ 1\n    \n    .. math::\n    \n        n_{yy} = \\sum_{|v_i| < 1} \\ 1\n    \n    which results in a value closer to the true variance for small\n    sample sizes or for a large number of rejected values.\n    \n    Parameters\n    ----------\n    data : 2D or 1D array-like\n        Input data either as a 2D or 1D array.  For a 2D array, it\n        should have a shape (N_variables, N_observations).  A 1D array\n        may be input for observations of a single variable, in which\n        case the biweight midvariance will be calculated (no\n        covariance).  Each row of ``data`` represents a variable, and\n        each column a single observation of all those variables (same as\n        the `numpy.cov` convention).\n    \n    c : float, optional\n        Tuning constant for the biweight estimator (default = 9.0).\n    \n    M : float or 1D array-like, optional\n        The location estimate of each variable, either as a scalar or\n        array.  If ``M`` is an array, then its must be a 1D array\n        containing the location estimate of each row (i.e. ``a.ndim``\n        elements).  If ``M`` is a scalar value, then its value will be\n        used for each variable (row).  If `None` (default), then the\n        median of each variable (row) will be used.\n    \n    modify_sample_size : bool, optional\n        If `False` (default), then the sample size used is the total\n        number of observations of each variable, which follows the\n        standard definition of biweight midcovariance.  If `True`, then\n        the sample size is reduced to correct for any rejected values\n        (see formula above), which results in a value closer to the true\n        covariance for small sample sizes or for a large number of\n        rejected values.\n    \n    Returns\n    -------\n    biweight_midcovariance : ndarray\n        A 2D array representing the biweight midcovariances between each\n        pair of the variables (rows) in the input array.  The output\n        array will have a shape of (N_variables, N_variables).  The\n        diagonal elements will be the biweight midvariances of each\n        input variable.  The off-diagonal elements will be the biweight\n        midcovariances between each pair of input variables.\n    \n    See Also\n    --------\n    biweight_midvariance, biweight_midcorrelation, biweight_scale, biweight_location\n    \n    References\n    ----------\n    .. [1] https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/biwmidc.htm\n    \n    Examples\n    --------\n    Compute the biweight midcovariance between two random variables:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import biweight_midcovariance\n    >>> # Generate two random variables x and y\n    >>> rng = np.random.default_rng(1)\n    >>> x = rng.normal(0, 1, 200)\n    >>> y = rng.normal(0, 3, 200)\n    >>> # Introduce an obvious outlier\n    >>> x[0] = 30.0\n    >>> # Calculate the biweight midcovariances between x and y\n    >>> bicov = biweight_midcovariance([x, y])\n    >>> print(bicov)  # doctest: +FLOAT_CMP\n    [[0.83435568 0.02379316]\n     [0.02379316 7.15665769]]\n    >>> # Print standard deviation estimates\n    >>> print(np.sqrt(bicov.diagonal()))  # doctest: +FLOAT_CMP\n    [0.91343072 2.67519302]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "60d8198157828d86a31a48bde3d6efd5c79dac4ffdda934998049ba796f0600c",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "2D or 1D array-like\n    Input data either as a 2D or 1D array.  For a 2D array, it\n    should have a shape (N_variables, N_observations).  A 1D array\n    may be input for observations of a single variable, in which\n    case the biweight midvariance will be calculated (no\n    covariance).  Each row of ``data`` represents a variable, and\n    each column a single observation of all those variables (same as\n    the `numpy.cov` convention).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c",
                    "value": 9.0,
                    "defaultValue": 9.0,
                    "description": "float, optional\n    Tuning constant for the biweight estimator (default = 9.0).",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "M",
                    "value": null,
                    "defaultValue": null,
                    "description": "    elements).  If ``M`` is a scalar value, then its value will be\n    used for each variable (row).  If `None` (default), then the\n    median of each variable (row) will be used.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "modify_sample_size",
                    "value": false,
                    "defaultValue": false,
                    "description": " then\n    the sample size is reduced to correct for any rejected values\n    (see formula above), which results in a value closer to the true\n    covariance for small sample sizes or for a large number of\n    rejected values.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.biweight",
                    "defaultValue": "astropy.stats.biweight",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.biweight.biweight_midcovariance",
                    "defaultValue": "astropy.stats.biweight.biweight_midcovariance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "g4ew4ciz",
            "name": "biweight_midvariance",
            "description": "Compute the biweight midvariance.\n    \n    The biweight midvariance is a robust statistic for determining the\n    variance of a distribution.  Its square root is a robust estimator\n    of scale (i.e. standard deviation).  It is given by:\n    \n    .. math::\n    \n        \\zeta_{bivar} = n \\ \\frac{\\sum_{|u_i| < 1} \\\n            (x_i - M)^2 (1 - u_i^2)^4} {(\\sum_{|u_i| < 1} \\\n            (1 - u_i^2) (1 - 5u_i^2))^2}\n    \n    where :math:`x` is the input data, :math:`M` is the sample median\n    (or the input location) and :math:`u_i` is given by:\n    \n    .. math::\n    \n        u_{i} = \\frac{(x_i - M)}{c * MAD}\n    \n    where :math:`c` is the tuning constant and :math:`MAD` is the\n    `median absolute deviation\n    <https://en.wikipedia.org/wiki/Median_absolute_deviation>`_.  The\n    biweight midvariance tuning constant ``c`` is typically 9.0 (the\n    default).\n    \n    If :math:`MAD` is zero, then zero will be returned.\n    \n    For the standard definition of `biweight midvariance\n    <https://en.wikipedia.org/wiki/Robust_measures_of_scale#The_biweight_midvariance>`_,\n    :math:`n` is the total number of points in the array (or along the\n    input ``axis``, if specified).  That definition is used if\n    ``modify_sample_size`` is `False`, which is the default.\n    \n    However, if ``modify_sample_size = True``, then :math:`n` is the\n    number of points for which :math:`|u_i| < 1` (i.e. the total number\n    of non-rejected values), i.e.\n    \n    .. math::\n    \n        n = \\sum_{|u_i| < 1} \\ 1\n    \n    which results in a value closer to the true variance for small\n    sample sizes or for a large number of rejected values.\n    \n    Parameters\n    ----------\n    data : array-like\n        Input array or object that can be converted to an array.\n        ``data`` can be a `~numpy.ma.MaskedArray`.\n    c : float, optional\n        Tuning constant for the biweight estimator (default = 9.0).\n    M : float or array-like, optional\n        The location estimate.  If ``M`` is a scalar value, then its\n        value will be used for the entire array (or along each ``axis``,\n        if specified).  If ``M`` is an array, then its must be an array\n        containing the location estimate along each ``axis`` of the\n        input array.  If `None` (default), then the median of the input\n        array will be used (or along each ``axis``, if specified).\n    axis : None, int, or tuple of int, optional\n        The axis or axes along which the biweight midvariances are\n        computed.  If `None` (default), then the biweight midvariance of\n        the flattened input array will be computed.\n    modify_sample_size : bool, optional\n        If `False` (default), then the sample size used is the total\n        number of elements in the array (or along the input ``axis``, if\n        specified), which follows the standard definition of biweight\n        midvariance.  If `True`, then the sample size is reduced to\n        correct for any rejected values (i.e. the sample size used\n        includes only the non-rejected values), which results in a value\n        closer to the true variance for small sample sizes or for a\n        large number of rejected values.\n    ignore_nan : bool, optional\n        Whether to ignore NaN values in the input ``data``.\n    \n    Returns\n    -------\n    biweight_midvariance : float or `~numpy.ndarray`\n        The biweight midvariance of the input data.  If ``axis`` is\n        `None` then a scalar will be returned, otherwise a\n        `~numpy.ndarray` will be returned.\n    \n    See Also\n    --------\n    biweight_midcovariance, biweight_midcorrelation, astropy.stats.mad_std, astropy.stats.median_absolute_deviation\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Robust_measures_of_scale#The_biweight_midvariance\n    \n    .. [2] Beers, Flynn, and Gebhardt (1990; AJ 100, 32) (https://ui.adsabs.harvard.edu/abs/1990AJ....100...32B)\n    \n    Examples\n    --------\n    Generate random variates from a Gaussian distribution and return the\n    biweight midvariance of the distribution:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import biweight_midvariance\n    >>> rand = np.random.default_rng(12345)\n    >>> bivar = biweight_midvariance(rand.standard_normal(1000))\n    >>> print(bivar)    # doctest: +FLOAT_CMP\n    1.0484350639638342",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1ca2d31a4999c77440cf929452f2db920d07bee02f625033eccc6d76a397e7ce",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    Input array or object that can be converted to an array.\n    ``data`` can be a `~numpy.ma.MaskedArray`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c",
                    "value": 9.0,
                    "defaultValue": 9.0,
                    "description": "float, optional\n    Tuning constant for the biweight estimator (default = 9.0).",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "M",
                    "value": null,
                    "defaultValue": null,
                    "description": " if specified).",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "None, int, or tuple of int, optional\n    The axis or axes along which the biweight midvariances are\n    computed.  If `None` (default), then the biweight midvariance of\n    the flattened input array will be computed.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "modify_sample_size",
                    "value": false,
                    "defaultValue": false,
                    "description": " then the sample size is reduced to\n    correct for any rejected values (i.e. the sample size used\n    includes only the non-rejected values), which results in a value\n    closer to the true variance for small sample sizes or for a\n    large number of rejected values.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ignore_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    Whether to ignore NaN values in the input ``data``.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.biweight",
                    "defaultValue": "astropy.stats.biweight",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.biweight.biweight_midvariance",
                    "defaultValue": "astropy.stats.biweight.biweight_midvariance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "ieej3_1u",
            "name": "biweight_scale",
            "description": "Compute the biweight scale.\n    \n    The biweight scale is a robust statistic for determining the\n    standard deviation of a distribution.  It is the square root of the\n    `biweight midvariance\n    <https://en.wikipedia.org/wiki/Robust_measures_of_scale#The_biweight_midvariance>`_.\n    It is given by:\n    \n    .. math::\n    \n        \\zeta_{biscl} = \\sqrt{n} \\ \\frac{\\sqrt{\\sum_{|u_i| < 1} \\\n            (x_i - M)^2 (1 - u_i^2)^4}} {|(\\sum_{|u_i| < 1} \\\n            (1 - u_i^2) (1 - 5u_i^2))|}\n    \n    where :math:`x` is the input data, :math:`M` is the sample median\n    (or the input location) and :math:`u_i` is given by:\n    \n    .. math::\n    \n        u_{i} = \\frac{(x_i - M)}{c * MAD}\n    \n    where :math:`c` is the tuning constant and :math:`MAD` is the\n    `median absolute deviation\n    <https://en.wikipedia.org/wiki/Median_absolute_deviation>`_.  The\n    biweight midvariance tuning constant ``c`` is typically 9.0 (the\n    default).\n    \n    If :math:`MAD` is zero, then zero will be returned.\n    \n    For the standard definition of biweight scale, :math:`n` is the\n    total number of points in the array (or along the input ``axis``, if\n    specified).  That definition is used if ``modify_sample_size`` is\n    `False`, which is the default.\n    \n    However, if ``modify_sample_size = True``, then :math:`n` is the\n    number of points for which :math:`|u_i| < 1` (i.e. the total number\n    of non-rejected values), i.e.\n    \n    .. math::\n    \n        n = \\sum_{|u_i| < 1} \\ 1\n    \n    which results in a value closer to the true standard deviation for\n    small sample sizes or for a large number of rejected values.\n    \n    Parameters\n    ----------\n    data : array-like\n        Input array or object that can be converted to an array.\n        ``data`` can be a `~numpy.ma.MaskedArray`.\n    c : float, optional\n        Tuning constant for the biweight estimator (default = 9.0).\n    M : float or array-like, optional\n        The location estimate.  If ``M`` is a scalar value, then its\n        value will be used for the entire array (or along each ``axis``,\n        if specified).  If ``M`` is an array, then its must be an array\n        containing the location estimate along each ``axis`` of the\n        input array.  If `None` (default), then the median of the input\n        array will be used (or along each ``axis``, if specified).\n    axis : None, int, or tuple of int, optional\n        The axis or axes along which the biweight scales are computed.\n        If `None` (default), then the biweight scale of the flattened\n        input array will be computed.\n    modify_sample_size : bool, optional\n        If `False` (default), then the sample size used is the total\n        number of elements in the array (or along the input ``axis``, if\n        specified), which follows the standard definition of biweight\n        scale.  If `True`, then the sample size is reduced to correct\n        for any rejected values (i.e. the sample size used includes only\n        the non-rejected values), which results in a value closer to the\n        true standard deviation for small sample sizes or for a large\n        number of rejected values.\n    ignore_nan : bool, optional\n        Whether to ignore NaN values in the input ``data``.\n    \n    Returns\n    -------\n    biweight_scale : float or `~numpy.ndarray`\n        The biweight scale of the input data.  If ``axis`` is `None`\n        then a scalar will be returned, otherwise a `~numpy.ndarray`\n        will be returned.\n    \n    See Also\n    --------\n    biweight_midvariance, biweight_midcovariance, biweight_location, astropy.stats.mad_std, astropy.stats.median_absolute_deviation\n    \n    References\n    ----------\n    .. [1] Beers, Flynn, and Gebhardt (1990; AJ 100, 32) (https://ui.adsabs.harvard.edu/abs/1990AJ....100...32B)\n    \n    .. [2] https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/biwscale.htm\n    \n    Examples\n    --------\n    Generate random variates from a Gaussian distribution and return the\n    biweight scale of the distribution:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import biweight_scale\n    >>> rand = np.random.default_rng(12345)\n    >>> biscl = biweight_scale(rand.standard_normal(1000))\n    >>> print(biscl)    # doctest: +FLOAT_CMP\n    1.0239311812635818",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3e3855f18abf83cfa6610242b6e32aa34828be1c124445000f6beaf4e569d538",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    Input array or object that can be converted to an array.\n    ``data`` can be a `~numpy.ma.MaskedArray`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "c",
                    "value": 9.0,
                    "defaultValue": 9.0,
                    "description": "float, optional\n    Tuning constant for the biweight estimator (default = 9.0).",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "M",
                    "value": null,
                    "defaultValue": null,
                    "description": " if specified).",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "None, int, or tuple of int, optional\n    The axis or axes along which the biweight scales are computed.\n    If `None` (default), then the biweight scale of the flattened\n    input array will be computed.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "modify_sample_size",
                    "value": false,
                    "defaultValue": false,
                    "description": " then the sample size is reduced to correct\n    for any rejected values (i.e. the sample size used includes only\n    the non-rejected values), which results in a value closer to the\n    true standard deviation for small sample sizes or for a large\n    number of rejected values.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ignore_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    Whether to ignore NaN values in the input ``data``.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.biweight",
                    "defaultValue": "astropy.stats.biweight",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.biweight.biweight_scale",
                    "defaultValue": "astropy.stats.biweight.biweight_scale",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "nnfycvf9",
            "name": "bootstrap",
            "description": "Performs bootstrap resampling on numpy arrays.\n    \n    Bootstrap resampling is used to understand confidence intervals of sample\n    estimates. This function returns versions of the dataset resampled with\n    replacement (\"case bootstrapping\"). These can all be run through a function\n    or statistic to produce a distribution of values which can then be used to\n    find the confidence intervals.\n    \n    Parameters\n    ----------\n    data : ndarray\n        N-D array. The bootstrap resampling will be performed on the first\n        index, so the first index should access the relevant information\n        to be bootstrapped.\n    bootnum : int, optional\n        Number of bootstrap resamples\n    samples : int, optional\n        Number of samples in each resample. The default `None` sets samples to\n        the number of datapoints\n    bootfunc : function, optional\n        Function to reduce the resampled data. Each bootstrap resample will\n        be put through this function and the results returned. If `None`, the\n        bootstrapped data will be returned\n    \n    Returns\n    -------\n    boot : ndarray\n    \n        If bootfunc is None, then each row is a bootstrap resample of the data.\n        If bootfunc is specified, then the columns will correspond to the\n        outputs of bootfunc.\n    \n    Examples\n    --------\n    Obtain a twice resampled array:\n    \n    >>> from astropy.stats import bootstrap\n    >>> import numpy as np\n    >>> from astropy.utils import NumpyRNGContext\n    >>> bootarr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n    >>> with NumpyRNGContext(1):\n    ...     bootresult = bootstrap(bootarr, 2)\n    ...\n    >>> bootresult  # doctest: +FLOAT_CMP\n    array([[6., 9., 0., 6., 1., 1., 2., 8., 7., 0.],\n           [3., 5., 6., 3., 5., 3., 5., 8., 8., 0.]])\n    >>> bootresult.shape\n    (2, 10)\n    \n    Obtain a statistic on the array\n    \n    >>> with NumpyRNGContext(1):\n    ...     bootresult = bootstrap(bootarr, 2, bootfunc=np.mean)\n    ...\n    >>> bootresult  # doctest: +FLOAT_CMP\n    array([4. , 4.6])\n    \n    Obtain a statistic with two outputs on the array\n    \n    >>> test_statistic = lambda x: (np.sum(x), np.mean(x))\n    >>> with NumpyRNGContext(1):\n    ...     bootresult = bootstrap(bootarr, 3, bootfunc=test_statistic)\n    >>> bootresult  # doctest: +FLOAT_CMP\n    array([[40. ,  4. ],\n           [46. ,  4.6],\n           [35. ,  3.5]])\n    >>> bootresult.shape\n    (3, 2)\n    \n    Obtain a statistic with two outputs on the array, keeping only the first\n    output\n    \n    >>> bootfunc = lambda x:test_statistic(x)[0]\n    >>> with NumpyRNGContext(1):\n    ...     bootresult = bootstrap(bootarr, 3, bootfunc=bootfunc)\n    ...\n    >>> bootresult  # doctest: +FLOAT_CMP\n    array([40., 46., 35.])\n    >>> bootresult.shape\n    (3,)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1744333ad6a2a17f36a2abe0df91ea38e8c3042b371ac3c476f8999891df103e",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray\n    N-D array. The bootstrap resampling will be performed on the first\n    index, so the first index should access the relevant information\n    to be bootstrapped.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bootnum",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "int, optional\n    Number of bootstrap resamples",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "samples",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Number of samples in each resample. The default `None` sets samples to\n    the number of datapoints",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bootfunc",
                    "value": null,
                    "defaultValue": null,
                    "description": " the\n    bootstrapped data will be returned",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.bootstrap",
                    "defaultValue": "astropy.stats.funcs.bootstrap",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "f1fvz7ro",
            "name": "calculate_bin_edges",
            "description": "Calculate histogram bin edges like ``numpy.histogram_bin_edges``.\n    \n    Parameters\n    ----------\n    a : array-like\n        Input data. The bin edges are calculated over the flattened array.\n    \n    bins : int, list, or str, optional\n        If ``bins`` is an int, it is the number of bins. If it is a list\n        it is taken to be the bin edges. If it is a string, it must be one\n        of  'blocks', 'knuth', 'scott' or 'freedman'. See\n        `~astropy.stats.histogram` for a description of each method.\n    \n    range : tuple or None, optional\n        The minimum and maximum range for the histogram.  If not specified,\n        it will be (a.min(), a.max()). However, if bins is a list it is\n        returned unmodified regardless of the range argument.\n    \n    weights : array-like, optional\n        An array the same shape as ``a``. If given, the histogram accumulates\n        the value of the weight corresponding to ``a`` instead of returning the\n        count of values. This argument does not affect determination of bin\n        edges, though they may be used in the future as new methods are added.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2ce6f32b89be73fb0ffa2b90a471b0ea6d3fbfb3c380430312854e71d2c576a9",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    Input data. The bin edges are calculated over the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bins",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, list, or str, optional\n    If ``bins`` is an int, it is the number of bins. If it is a list\n    it is taken to be the bin edges. If it is a string, it must be one\n    of  'blocks', 'knuth', 'scott' or 'freedman'. See\n    `~astropy.stats.histogram` for a description of each method.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "range",
                    "value": null,
                    "defaultValue": null,
                    "description": "tuple or None, optional\n    The minimum and maximum range for the histogram.  If not specified,\n    it will be (a.min(), a.max()). However, if bins is a list it is\n    returned unmodified regardless of the range argument.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    An array the same shape as ``a``. If given, the histogram accumulates\n    the value of the weight corresponding to ``a`` instead of returning the\n    count of values. This argument does not affect determination of bin\n    edges, though they may be used in the future as new methods are added.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.histogram",
                    "defaultValue": "astropy.stats.histogram",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.histogram.calculate_bin_edges",
                    "defaultValue": "astropy.stats.histogram.calculate_bin_edges",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "l5b2iwx9",
            "name": "cdf_from_intervals",
            "description": "Construct a callable piecewise-linear CDF from a pair of arrays.\n    \n    Take a pair of arrays in the format returned by fold_intervals and\n    make a callable cumulative distribution function on the interval\n    (0,1).\n    \n    Parameters\n    ----------\n    breaks : (N,) array of float\n        The boundaries of successive intervals.\n    totals : (N-1,) array of float\n        The weight for each interval.\n    \n    Returns\n    -------\n    f : callable\n        A cumulative distribution function corresponding to the\n        piecewise-constant probability distribution given by breaks, weights",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8732f271cadcdebcb8cc32120d40b6427ddc1981d5724649c86475cce59e984a",
            "fields": [
                {
                    "name": "breaks",
                    "value": null,
                    "defaultValue": null,
                    "description": "(N,) array of float\n    The boundaries of successive intervals.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "totals",
                    "value": null,
                    "defaultValue": null,
                    "description": "(N-1,) array of float\n    The weight for each interval.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.cdf_from_intervals",
                    "defaultValue": "astropy.stats.funcs.cdf_from_intervals",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "oxk3ltcf",
            "name": "circcorrcoef",
            "description": "Computes the circular correlation coefficient between two array of\n    circular data.\n    \n    Parameters\n    ----------\n    alpha : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    beta : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    axis : int, optional\n        Axis along which circular correlation coefficients are computed.\n        The default is the compute the circular correlation coefficient of the\n        flattened array.\n    weights_alpha : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights_alpha``\n        represents a weighting factor for each group such that\n        ``sum(weights_alpha, axis)`` equals the number of observations.\n        See [1]_, remark 1.4, page 22, for detailed explanation.\n    weights_beta : numpy.ndarray, optional\n        See description of ``weights_alpha``.\n    \n    Returns\n    -------\n    rho : ndarray or `~astropy.units.Quantity` ['dimensionless']\n        Circular correlation coefficient.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import circcorrcoef\n    >>> from astropy import units as u\n    >>> alpha = np.array([356, 97, 211, 232, 343, 292, 157, 302, 335, 302,\n    ...                   324, 85, 324, 340, 157, 238, 254, 146, 232, 122,\n    ...                   329])*u.deg\n    >>> beta = np.array([119, 162, 221, 259, 270, 29, 97, 292, 40, 313, 94,\n    ...                  45, 47, 108, 221, 270, 119, 248, 270, 45, 23])*u.deg\n    >>> circcorrcoef(alpha, beta) # doctest: +FLOAT_CMP\n    <Quantity 0.2704648826748831>\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "646c25634344ab0139dbc3fa61257cf8c7c53e91f63a5f62944b74c94715f88c",
            "fields": [
                {
                    "name": "alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "beta",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which circular correlation coefficients are computed.\n    The default is the compute the circular correlation coefficient of the\n    flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights_alpha",
                    "value": null,
                    "defaultValue": null,
                    "description": "    represents a weighting factor for each group such that\n    ``sum(weights_alpha, axis)`` equals the number of observations.\n    See [1]_, remark 1.4, page 22, for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights_beta",
                    "value": null,
                    "defaultValue": null,
                    "description": "numpy.ndarray, optional\n    See description of ``weights_alpha``.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.circcorrcoef",
                    "defaultValue": "astropy.stats.circstats.circcorrcoef",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "4yjissov",
            "name": "circmean",
            "description": "Computes the circular mean angle of an array of circular data.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    axis : int, optional\n        Axis along which circular means are computed. The default is to compute\n        the mean of the flattened array.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``sum(weights, axis)``\n        equals the number of observations. See [1]_, remark 1.4, page 22, for\n        detailed explanation.\n    \n    Returns\n    -------\n    circmean : ndarray or `~astropy.units.Quantity`\n        Circular mean.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import circmean\n    >>> from astropy import units as u\n    >>> data = np.array([51, 67, 40, 109, 31, 358])*u.deg\n    >>> circmean(data) # doctest: +FLOAT_CMP\n    <Quantity 48.62718088722989 deg>\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf7b3d6fe464ab4d1f512b499be27ca8fffacce64a1beedff406b849e15326ac",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which circular means are computed. The default is to compute\n    the mean of the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations. See [1]_, remark 1.4, page 22, for\n    detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.circmean",
                    "defaultValue": "astropy.stats.circstats.circmean",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "isayip7j",
            "name": "circmoment",
            "description": "Computes the ``p``-th trigonometric circular moment for an array\n    of circular data.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    p : float, optional\n        Order of the circular moment.\n    centered : bool, optional\n        If ``True``, central circular moments are computed. Default value is\n        ``False``.\n    axis : int, optional\n        Axis along which circular moments are computed. The default is to\n        compute the circular moment of the flattened array.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``sum(weights, axis)``\n        equals the number of observations. See [1]_, remark 1.4, page 22,\n        for detailed explanation.\n    \n    Returns\n    -------\n    circmoment : ndarray or `~astropy.units.Quantity`\n        The first and second elements correspond to the direction and length of\n        the ``p``-th circular moment, respectively.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import circmoment\n    >>> from astropy import units as u\n    >>> data = np.array([51, 67, 40, 109, 31, 358])*u.deg\n    >>> circmoment(data, p=2) # doctest: +FLOAT_CMP\n    (<Quantity 90.99263082432564 deg>, <Quantity 0.48004283892950717>)\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d090313b5a12ae98d2b7682039675302d2f73779e42dce32aebe224491b20eef",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "p",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional\n    Order of the circular moment.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "centered",
                    "value": false,
                    "defaultValue": false,
                    "description": " central circular moments are computed. Default value is\n    ``False``.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which circular moments are computed. The default is to\n    compute the circular moment of the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations. See [1]_, remark 1.4, page 22,\n    for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.circmoment",
                    "defaultValue": "astropy.stats.circstats.circmoment",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "ujc4no9v",
            "name": "circstd",
            "description": "Computes the circular standard deviation of an array of circular data.\n    \n    The standard deviation implemented here is based on the definitions given\n    by [1]_, which is also the same used by the R package 'CirStat' [2]_.\n    \n    Two methods are implemented: 'angular' and 'circular'. The former is\n    defined as sqrt(2 * (1 - R)) and it is bounded in [0, 2*Pi]. The\n    latter is defined as sqrt(-2 * ln(R)) and it is bounded in [0, inf].\n    \n    Following 'CircStat' the default method used to obtain the standard\n    deviation is 'angular'.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n        If quantity, must be dimensionless.\n    axis : int, optional\n        Axis along which circular variances are computed. The default is to\n        compute the variance of the flattened array.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``sum(weights, axis)``\n        equals the number of observations. See [3]_, remark 1.4, page 22,\n        for detailed explanation.\n    method : str, optional\n        The method used to estimate the standard deviation:\n    \n        - 'angular' : obtains the angular deviation\n    \n        - 'circular' : obtains the circular deviation\n    \n    \n    Returns\n    -------\n    circstd : ndarray or `~astropy.units.Quantity` ['dimensionless']\n        Angular or circular standard deviation.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import circstd\n    >>> from astropy import units as u\n    >>> data = np.array([51, 67, 40, 109, 31, 358])*u.deg\n    >>> circstd(data) # doctest: +FLOAT_CMP\n    <Quantity 0.57195022>\n    \n    Alternatively, using the 'circular' method:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import circstd\n    >>> from astropy import units as u\n    >>> data = np.array([51, 67, 40, 109, 31, 358])*u.deg\n    >>> circstd(data, method='circular') # doctest: +FLOAT_CMP\n    <Quantity 0.59766999>\n    \n    References\n    ----------\n    .. [1] P. Berens. \"CircStat: A MATLAB Toolbox for Circular Statistics\".\n       Journal of Statistical Software, vol 31, issue 10, 2009.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>\n    .. [3] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8eb385f82efab78e7602a0bc6edee7fd9fae85dae6c0d52f886efc2697310933",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.\n    If quantity, must be dimensionless.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which circular variances are computed. The default is to\n    compute the variance of the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations. See [3]_, remark 1.4, page 22,\n    for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "method",
                    "value": "angular",
                    "defaultValue": "angular",
                    "description": "str, optional\n    The method used to estimate the standard deviation:\n\n    - 'angular' : obtains the angular deviation\n\n    - 'circular' : obtains the circular deviation",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.circstd",
                    "defaultValue": "astropy.stats.circstats.circstd",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "czii9mxz",
            "name": "circvar",
            "description": "Computes the circular variance of an array of circular data.\n    \n    There are some concepts for defining measures of dispersion for circular\n    data. The variance implemented here is based on the definition given by\n    [1]_, which is also the same used by the R package 'CircStats' [2]_.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n        Dimensionless, if Quantity.\n    axis : int, optional\n        Axis along which circular variances are computed. The default is to\n        compute the variance of the flattened array.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``sum(weights, axis)``\n        equals the number of observations. See [1]_, remark 1.4, page 22,\n        for detailed explanation.\n    \n    Returns\n    -------\n    circvar : ndarray or `~astropy.units.Quantity` ['dimensionless']\n        Circular variance.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import circvar\n    >>> from astropy import units as u\n    >>> data = np.array([51, 67, 40, 109, 31, 358])*u.deg\n    >>> circvar(data) # doctest: +FLOAT_CMP\n    <Quantity 0.16356352748437508>\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>\n    \n    Notes\n    -----\n    For Scipy < 1.9.0, ``scipy.stats.circvar`` uses a different\n    definition based on an approximation using the limit of small\n    angles that approaches the linear variance. For Scipy >= 1.9.0,\n    ``scipy.stats.cirvar`` uses a definition consistent with this\n    implementation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e5b4a89075039dcc057b57507c66fcc3e0012428ef2ca2b06b006dfd1f5fbf1f",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.\n    Dimensionless, if Quantity.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which circular variances are computed. The default is to\n    compute the variance of the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations. See [1]_, remark 1.4, page 22,\n    for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.circvar",
                    "defaultValue": "astropy.stats.circstats.circvar",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "w4ib3rk_",
            "name": "fold_intervals",
            "description": "Fold the weighted intervals to the interval (0,1).\n    \n    Convert a list of intervals (ai, bi, wi) to a list of non-overlapping\n    intervals covering (0,1). Each output interval has a weight equal\n    to the sum of the wis of all the intervals that include it. All intervals\n    are interpreted modulo 1, and weights are accumulated counting\n    multiplicity. This is appropriate, for example, if you have one or more\n    blocks of observation and you want to determine how much observation\n    time was spent on different parts of a system's orbit (the blocks\n    should be converted to units of the orbital period first).\n    \n    Parameters\n    ----------\n    intervals : list of (3,) tuple\n        For each tuple (ai,bi,wi); ai and bi are the limits of the interval,\n        and wi is the weight to apply to the interval.\n    \n    Returns\n    -------\n    breaks : (N,) array of float\n        The endpoints of a set of intervals covering [0,1]; breaks[0]=0 and\n        breaks[-1] = 1\n    weights : (N-1,) array of float\n        The ith element is the sum of number of times the interval\n        breaks[i],breaks[i+1] is included in each interval times the weight\n        associated with that interval.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "560101abc003a36ab788beb292dc4031d43aea8e779cf4849572ae030754b918",
            "fields": [
                {
                    "name": "intervals",
                    "value": null,
                    "defaultValue": null,
                    "description": "list of (3,) tuple\n    For each tuple (ai,bi,wi); ai and bi are the limits of the interval,\n    and wi is the weight to apply to the interval.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.fold_intervals",
                    "defaultValue": "astropy.stats.funcs.fold_intervals",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "m7amfu2x",
            "name": "freedman_bin_width",
            "description": "Return the optimal histogram bin width using the Freedman-Diaconis rule.\n    \n    The Freedman-Diaconis rule is a normal reference rule like Scott's\n    rule, but uses rank-based statistics for results which are more robust\n    to deviations from a normal distribution.\n    \n    Parameters\n    ----------\n    data : array-like, ndim=1\n        observed (one-dimensional) data\n    return_bins : bool, optional\n        if True, then return the bin edges\n    \n    Returns\n    -------\n    width : float\n        optimal bin width using the Freedman-Diaconis rule\n    bins : ndarray\n        bin edges: returned if ``return_bins`` is True\n    \n    Notes\n    -----\n    The optimal bin width is\n    \n    .. math::\n        \\Delta_b = \\frac{2(q_{75} - q_{25})}{n^{1/3}}\n    \n    where :math:`q_{N}` is the :math:`N` percent quartile of the data, and\n    :math:`n` is the number of data points [1]_.\n    \n    References\n    ----------\n    .. [1] D. Freedman & P. Diaconis (1981)\n       \"On the histogram as a density estimator: L2 theory\".\n       Probability Theory and Related Fields 57 (4): 453-476\n    \n    See Also\n    --------\n    knuth_bin_width\n    scott_bin_width\n    bayesian_blocks\n    histogram",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e2d332b670ed18d388efd3105b383ae562d04cad7e681700fd63646265316ec2",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, ndim=1\n    observed (one-dimensional) data",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_bins",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    if True, then return the bin edges",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.histogram",
                    "defaultValue": "astropy.stats.histogram",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.histogram.freedman_bin_width",
                    "defaultValue": "astropy.stats.histogram.freedman_bin_width",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "gadb2zk1",
            "name": "histogram",
            "description": "Enhanced histogram function, providing adaptive binnings.\n    \n    This is a histogram function that enables the use of more sophisticated\n    algorithms for determining bins.  Aside from the ``bins`` argument allowing\n    a string specified how bins are computed, the parameters are the same\n    as ``numpy.histogram()``.\n    \n    Parameters\n    ----------\n    a : array-like\n        array of data to be histogrammed\n    \n    bins : int, list, or str, optional\n        If bins is a string, then it must be one of:\n    \n        - 'blocks' : use bayesian blocks for dynamic bin widths\n    \n        - 'knuth' : use Knuth's rule to determine bins\n    \n        - 'scott' : use Scott's rule to determine bins\n    \n        - 'freedman' : use the Freedman-Diaconis rule to determine bins\n    \n    range : tuple or None, optional\n        the minimum and maximum range for the histogram.  If not specified,\n        it will be (x.min(), x.max())\n    \n    weights : array-like, optional\n        An array the same shape as ``a``. If given, the histogram accumulates\n        the value of the weight corresponding to ``a`` instead of returning the\n        count of values. This argument does not affect determination of bin\n        edges.\n    \n    other keyword arguments are described in numpy.histogram().\n    \n    Returns\n    -------\n    hist : array\n        The values of the histogram. See ``density`` and ``weights`` for a\n        description of the possible semantics.\n    bin_edges : array of dtype float\n        Return the bin edges ``(length(hist)+1)``.\n    \n    See Also\n    --------\n    numpy.histogram",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "102922dfcb70fd4870b652a53fa0d8246d1a5cdf0e0d2bde4b439ab95e5ce02c",
            "fields": [
                {
                    "name": "a",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    array of data to be histogrammed",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bins",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "int, list, or str, optional\n    If bins is a string, then it must be one of:\n\n    - 'blocks' : use bayesian blocks for dynamic bin widths\n\n    - 'knuth' : use Knuth's rule to determine bins\n\n    - 'scott' : use Scott's rule to determine bins\n\n    - 'freedman' : use the Freedman-Diaconis rule to determine bins",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "range",
                    "value": null,
                    "defaultValue": null,
                    "description": "tuple or None, optional\n    the minimum and maximum range for the histogram.  If not specified,\n    it will be (x.min(), x.max())",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, optional\n    An array the same shape as ``a``. If given, the histogram accumulates\n    the value of the weight corresponding to ``a`` instead of returning the\n    count of values. This argument does not affect determination of bin\n    edges.\n\nother keyword arguments are described in numpy.histogram().",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.histogram",
                    "defaultValue": "astropy.stats.histogram",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.histogram.histogram",
                    "defaultValue": "astropy.stats.histogram.histogram",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "k17vpa64",
            "name": "histogram_intervals",
            "description": "Histogram of a piecewise-constant weight function.\n    \n    This function takes a piecewise-constant weight function and\n    computes the average weight in each histogram bin.\n    \n    Parameters\n    ----------\n    n : int\n        The number of bins\n    breaks : (N,) array of float\n        Endpoints of the intervals in the PDF\n    totals : (N-1,) array of float\n        Probability densities in each bin\n    \n    Returns\n    -------\n    h : array of float\n        The average weight for each bin",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "64c0313aec8cfc4fd30ad23ff311d8b93098f9046d0267cecb6ec483834da1d3",
            "fields": [
                {
                    "name": "n",
                    "value": null,
                    "defaultValue": null,
                    "description": "int\n    The number of bins",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "breaks",
                    "value": null,
                    "defaultValue": null,
                    "description": "(N,) array of float\n    Endpoints of the intervals in the PDF",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "totals",
                    "value": null,
                    "defaultValue": null,
                    "description": "(N-1,) array of float\n    Probability densities in each bin",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.histogram_intervals",
                    "defaultValue": "astropy.stats.funcs.histogram_intervals",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "qnr5_p8r",
            "name": "interval_overlap_length",
            "description": "Compute the length of overlap of two intervals.\n    \n    Parameters\n    ----------\n    i1, i2 : (float, float)\n        The two intervals, (interval 1, interval 2).\n    \n    Returns\n    -------\n    l : float\n        The length of the overlap between the two intervals.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41947caa130f304aa75a997f78980c2d5b5d3ed2b70e725a3a18959fcc47995e",
            "fields": [
                {
                    "name": "i1",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "i2",
                    "value": null,
                    "defaultValue": null,
                    "description": "(float, float)\n    The two intervals, (interval 1, interval 2).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.interval_overlap_length",
                    "defaultValue": "astropy.stats.funcs.interval_overlap_length",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "trmeb_c5",
            "name": "jackknife_resampling",
            "description": "Performs jackknife resampling on numpy arrays.\n    \n    Jackknife resampling is a technique to generate 'n' deterministic samples\n    of size 'n-1' from a measured sample of size 'n'. Basically, the i-th\n    sample, (1<=i<=n), is generated by means of removing the i-th measurement\n    of the original sample. Like the bootstrap resampling, this statistical\n    technique finds applications in estimating variance, bias, and confidence\n    intervals.\n    \n    Parameters\n    ----------\n    data : ndarray\n        Original sample (1-D array) from which the jackknife resamples will be\n        generated.\n    \n    Returns\n    -------\n    resamples : ndarray\n        The i-th row is the i-th jackknife sample, i.e., the original sample\n        with the i-th measurement deleted.\n    \n    References\n    ----------\n    .. [1] McIntosh, Avery. \"The Jackknife Estimation Method\".\n        <https://arxiv.org/abs/1606.00497>\n    \n    .. [2] Efron, Bradley. \"The Jackknife, the Bootstrap, and other\n        Resampling Plans\". Technical Report No. 63, Division of Biostatistics,\n        Stanford University, December, 1980.\n    \n    .. [3] Jackknife resampling <https://en.wikipedia.org/wiki/Jackknife_resampling>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f9945127bccffddde0c4a65fa15dde8042df240b64018cf5c48d4970b4343524",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray\n    Original sample (1-D array) from which the jackknife resamples will be\n    generated.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.jackknife",
                    "defaultValue": "astropy.stats.jackknife",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.jackknife.jackknife_resampling",
                    "defaultValue": "astropy.stats.jackknife.jackknife_resampling",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "ui8j4f4a",
            "name": "jackknife_stats",
            "description": "Performs jackknife estimation on the basis of jackknife resamples.\n    \n    This function requires `SciPy <https://www.scipy.org/>`_ to be installed.\n    \n    Parameters\n    ----------\n    data : ndarray\n        Original sample (1-D array).\n    statistic : function\n        Any function (or vector of functions) on the basis of the measured\n        data, e.g, sample mean, sample variance, etc. The jackknife estimate of\n        this statistic will be returned.\n    confidence_level : float, optional\n        Confidence level for the confidence interval of the Jackknife estimate.\n        Must be a real-valued number in (0,1). Default value is 0.95.\n    \n    Returns\n    -------\n    estimate : float or `~numpy.ndarray`\n        The i-th element is the bias-corrected \"jackknifed\" estimate.\n    \n    bias : float or `~numpy.ndarray`\n        The i-th element is the jackknife bias.\n    \n    std_err : float or `~numpy.ndarray`\n        The i-th element is the jackknife standard error.\n    \n    conf_interval : ndarray\n        If ``statistic`` is single-valued, the first and second elements are\n        the lower and upper bounds, respectively. If ``statistic`` is\n        vector-valued, each column corresponds to the confidence interval for\n        each component of ``statistic``. The first and second rows contain the\n        lower and upper bounds, respectively.\n    \n    Examples\n    --------\n    1. Obtain Jackknife resamples:\n    \n    >>> import numpy as np\n    >>> from astropy.stats import jackknife_resampling\n    >>> from astropy.stats import jackknife_stats\n    >>> data = np.array([1,2,3,4,5,6,7,8,9,0])\n    >>> resamples = jackknife_resampling(data)\n    >>> resamples\n    array([[2., 3., 4., 5., 6., 7., 8., 9., 0.],\n           [1., 3., 4., 5., 6., 7., 8., 9., 0.],\n           [1., 2., 4., 5., 6., 7., 8., 9., 0.],\n           [1., 2., 3., 5., 6., 7., 8., 9., 0.],\n           [1., 2., 3., 4., 6., 7., 8., 9., 0.],\n           [1., 2., 3., 4., 5., 7., 8., 9., 0.],\n           [1., 2., 3., 4., 5., 6., 8., 9., 0.],\n           [1., 2., 3., 4., 5., 6., 7., 9., 0.],\n           [1., 2., 3., 4., 5., 6., 7., 8., 0.],\n           [1., 2., 3., 4., 5., 6., 7., 8., 9.]])\n    >>> resamples.shape\n    (10, 9)\n    \n    2. Obtain Jackknife estimate for the mean, its bias, its standard error,\n    and its 95% confidence interval:\n    \n    >>> test_statistic = np.mean\n    >>> estimate, bias, stderr, conf_interval = jackknife_stats(\n    ...     data, test_statistic, 0.95)\n    >>> estimate\n    4.5\n    >>> bias\n    0.0\n    >>> stderr  # doctest: +FLOAT_CMP\n    0.95742710775633832\n    >>> conf_interval\n    array([2.62347735,  6.37652265])\n    \n    3. Example for two estimates\n    \n    >>> test_statistic = lambda x: (np.mean(x), np.var(x))\n    >>> estimate, bias, stderr, conf_interval = jackknife_stats(\n    ...     data, test_statistic, 0.95)\n    >>> estimate\n    array([4.5       ,  9.16666667])\n    >>> bias\n    array([ 0.        , -0.91666667])\n    >>> stderr\n    array([0.95742711,  2.69124476])\n    >>> conf_interval\n    array([[ 2.62347735,   3.89192387],\n           [ 6.37652265,  14.44140947]])\n    \n    IMPORTANT: Note that confidence intervals are given as columns",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e694b8892ecf2da923620938d25cf7d5dbbddfa71b7f77c0dcd5e7f528355bd5",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray\n    Original sample (1-D array).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "statistic",
                    "value": null,
                    "defaultValue": null,
                    "description": "function\n    Any function (or vector of functions) on the basis of the measured\n    data, e.g, sample mean, sample variance, etc. The jackknife estimate of\n    this statistic will be returned.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "confidence_level",
                    "value": 0.95,
                    "defaultValue": 0.95,
                    "description": "float, optional\n    Confidence level for the confidence interval of the Jackknife estimate.\n    Must be a real-valued number in (0,1). Default value is 0.95.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.jackknife",
                    "defaultValue": "astropy.stats.jackknife",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.jackknife.jackknife_stats",
                    "defaultValue": "astropy.stats.jackknife.jackknife_stats",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "s7v_pd4_",
            "name": "knuth_bin_width",
            "description": "Return the optimal histogram bin width using Knuth's rule.\n    \n    Knuth's rule is a fixed-width, Bayesian approach to determining\n    the optimal bin width of a histogram.\n    \n    Parameters\n    ----------\n    data : array-like, ndim=1\n        observed (one-dimensional) data\n    return_bins : bool, optional\n        if True, then return the bin edges\n    quiet : bool, optional\n        if True (default) then suppress stdout output from scipy.optimize\n    \n    Returns\n    -------\n    dx : float\n        optimal bin width. Bins are measured starting at the first data point.\n    bins : ndarray\n        bin edges: returned if ``return_bins`` is True\n    \n    Notes\n    -----\n    The optimal number of bins is the value M which maximizes the function\n    \n    .. math::\n        F(M|x,I) = n\\log(M) + \\log\\Gamma(\\frac{M}{2})\n        - M\\log\\Gamma(\\frac{1}{2})\n        - \\log\\Gamma(\\frac{2n+M}{2})\n        + \\sum_{k=1}^M \\log\\Gamma(n_k + \\frac{1}{2})\n    \n    where :math:`\\Gamma` is the Gamma function, :math:`n` is the number of\n    data points, :math:`n_k` is the number of measurements in bin :math:`k`\n    [1]_.\n    \n    References\n    ----------\n    .. [1] Knuth, K.H. \"Optimal Data-Based Binning for Histograms\".\n       arXiv:0605197, 2006\n    \n    See Also\n    --------\n    freedman_bin_width\n    scott_bin_width\n    bayesian_blocks\n    histogram",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56314fb894d2ee0538349009422fcd64869a46612b142db542007a03d01616d8",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, ndim=1\n    observed (one-dimensional) data",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_bins",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    if True, then return the bin edges",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "quiet",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional\n    if True (default) then suppress stdout output from scipy.optimize",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.histogram",
                    "defaultValue": "astropy.stats.histogram",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.histogram.knuth_bin_width",
                    "defaultValue": "astropy.stats.histogram.knuth_bin_width",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "niibox50",
            "name": "kuiper",
            "description": "Compute the Kuiper statistic.\n    \n    Use the Kuiper statistic version of the Kolmogorov-Smirnov test to\n    find the probability that a sample like ``data`` was drawn from the\n    distribution whose CDF is given as ``cdf``.\n    \n    .. warning::\n        This will not work correctly for distributions that are actually\n        discrete (Poisson, for example).\n    \n    Parameters\n    ----------\n    data : array-like\n        The data values.\n    cdf : callable\n        A callable to evaluate the CDF of the distribution being tested\n        against. Will be called with a vector of all values at once.\n        The default is a uniform distribution.\n    args : list-like, optional\n        Additional arguments to be supplied to cdf.\n    \n    Returns\n    -------\n    D : float\n        The raw statistic.\n    fpp : float\n        The probability of a D this large arising with a sample drawn from\n        the distribution whose CDF is cdf.\n    \n    Notes\n    -----\n    The Kuiper statistic resembles the Kolmogorov-Smirnov test in that\n    it is nonparametric and invariant under reparameterizations of the data.\n    The Kuiper statistic, in addition, is equally sensitive throughout\n    the domain, and it is also invariant under cyclic permutations (making\n    it particularly appropriate for analyzing circular data).\n    \n    Returns (D, fpp), where D is the Kuiper D number and fpp is the\n    probability that a value as large as D would occur if data was\n    drawn from cdf.\n    \n    .. warning::\n        The fpp is calculated only approximately, and it can be\n        as much as 1.5 times the true value.\n    \n    Stephens 1970 claims this is more effective than the KS at detecting\n    changes in the variance of a distribution; the KS is (he claims) more\n    sensitive at detecting changes in the mean.\n    \n    If cdf was obtained from data by fitting, then fpp is not correct and\n    it will be necessary to do Monte Carlo simulations to interpret D.\n    D should normally be independent of the shape of CDF.\n    \n    References\n    ----------\n    .. [1] Stephens, M. A., \"Use of the Kolmogorov-Smirnov, Cramer-Von Mises\n           and Related Statistics Without Extensive Tables\", Journal of the\n           Royal Statistical Society. Series B (Methodological), Vol. 32,\n           No. 1. (1970), pp. 115-122.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a22c21c182278dcd413d7424969af50595d6bd2bb6f335812e0ea6381de5ad02",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    The data values.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cdf",
                    "value": null,
                    "defaultValue": "builtins.function",
                    "description": "callable\n    A callable to evaluate the CDF of the distribution being tested\n    against. Will be called with a vector of all values at once.\n    The default is a uniform distribution.",
                    "type": "builtins.function",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "args",
                    "value": [],
                    "defaultValue": [],
                    "description": "list-like, optional\n    Additional arguments to be supplied to cdf.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.kuiper",
                    "defaultValue": "astropy.stats.funcs.kuiper",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "txo3alrp",
            "name": "kuiper_false_positive_probability",
            "description": "Compute the false positive probability for the Kuiper statistic.\n    \n    Uses the set of four formulas described in Paltani 2004; they report\n    the resulting function never underestimates the false positive\n    probability but can be a bit high in the N=40..50 range.\n    (They quote a factor 1.5 at the 1e-7 level.)\n    \n    Parameters\n    ----------\n    D : float\n        The Kuiper test score.\n    N : float\n        The effective sample size.\n    \n    Returns\n    -------\n    fpp : float\n        The probability of a score this large arising from the null hypothesis.\n    \n    Notes\n    -----\n    Eq 7 of Paltani 2004 appears to incorrectly quote the original formula\n    (Stephens 1965). This function implements the original formula, as it\n    produces a result closer to Monte Carlo simulations.\n    \n    References\n    ----------\n    .. [1] Paltani, S., \"Searching for periods in X-ray observations using\n           Kuiper's test. Application to the ROSAT PSPC archive\",\n           Astronomy and Astrophysics, v.240, p.789-790, 2004.\n    \n    .. [2] Stephens, M. A., \"The goodness-of-fit statistic VN: distribution\n           and significance points\", Biometrika, v.52, p.309, 1965.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce1efc7f5b2a2ecd69a721406b8b4233531543a88f20eb752cdaffd7fbbb40ba",
            "fields": [
                {
                    "name": "D",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    The Kuiper test score.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "N",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    The effective sample size.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.kuiper_false_positive_probability",
                    "defaultValue": "astropy.stats.funcs.kuiper_false_positive_probability",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "2zaye44j",
            "name": "kuiper_two",
            "description": "Compute the Kuiper statistic to compare two samples.\n    \n    Parameters\n    ----------\n    data1 : array-like\n        The first set of data values.\n    data2 : array-like\n        The second set of data values.\n    \n    Returns\n    -------\n    D : float\n        The raw test statistic.\n    fpp : float\n        The probability of obtaining two samples this different from\n        the same distribution.\n    \n    .. warning::\n        The fpp is quite approximate, especially for small samples.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c2ec0c9bcca2ab740fddc4013a21e9a9df20e9ee311874fc6f4389baee12f519",
            "fields": [
                {
                    "name": "data1",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    The first set of data values.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "data2",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    The second set of data values.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.kuiper_two",
                    "defaultValue": "astropy.stats.funcs.kuiper_two",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "zfb_g4l_",
            "name": "mad_std",
            "description": "Calculate a robust standard deviation using the `median absolute\n    deviation (MAD)\n    <https://en.wikipedia.org/wiki/Median_absolute_deviation>`_.\n    \n    The standard deviation estimator is given by:\n    \n    .. math::\n    \n        \\sigma \\approx \\frac{\\textrm{MAD}}{\\Phi^{-1}(3/4)}\n            \\approx 1.4826 \\ \\textrm{MAD}\n    \n    where :math:`\\Phi^{-1}(P)` is the normal inverse cumulative\n    distribution function evaluated at probability :math:`P = 3/4`.\n    \n    Parameters\n    ----------\n    data : array-like\n        Data array or object that can be converted to an array.\n    axis : None, int, or tuple of int, optional\n        The axis or axes along which the robust standard deviations are\n        computed.  The default (`None`) is to compute the robust\n        standard deviation of the flattened array.\n    func : callable, optional\n        The function used to compute the median. Defaults to `numpy.ma.median`\n        for masked arrays, otherwise to `numpy.median`.\n    ignore_nan : bool\n        Ignore NaN values (treat them as if they are not in the array) when\n        computing the median.  This will use `numpy.ma.median` if ``axis`` is\n        specified, or `numpy.nanmedian` if ``axis=None`` and numpy's version is\n        >1.10 because nanmedian is slightly faster in this case.\n    \n    Returns\n    -------\n    mad_std : float or `~numpy.ndarray`\n        The robust standard deviation of the input data.  If ``axis`` is\n        `None` then a scalar will be returned, otherwise a\n        `~numpy.ndarray` will be returned.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import mad_std\n    >>> rand = np.random.default_rng(12345)\n    >>> madstd = mad_std(rand.normal(5, 2, (100, 100)))\n    >>> print(madstd)    # doctest: +FLOAT_CMP\n    1.984147963351707\n    \n    See Also\n    --------\n    biweight_midvariance, biweight_midcovariance, median_absolute_deviation",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "77d6c4a8407212861cc0ab61face480e0376dbacaa7d0b487e389e0be68a648d",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    Data array or object that can be converted to an array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "None, int, or tuple of int, optional\n    The axis or axes along which the robust standard deviations are\n    computed.  The default (`None`) is to compute the robust\n    standard deviation of the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "    for masked arrays, otherwise to `numpy.median`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ignore_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool\n    Ignore NaN values (treat them as if they are not in the array) when\n    computing the median.  This will use `numpy.ma.median` if ``axis`` is\n    specified, or `numpy.nanmedian` if ``axis=None`` and numpy's version is\n    >1.10 because nanmedian is slightly faster in this case.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.mad_std",
                    "defaultValue": "astropy.stats.funcs.mad_std",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "zptp24bp",
            "name": "median_absolute_deviation",
            "description": "Calculate the median absolute deviation (MAD).\n    \n    The MAD is defined as ``median(abs(a - median(a)))``.\n    \n    Parameters\n    ----------\n    data : array-like\n        Input array or object that can be converted to an array.\n    axis : None, int, or tuple of int, optional\n        The axis or axes along which the MADs are computed.  The default\n        (`None`) is to compute the MAD of the flattened array.\n    func : callable, optional\n        The function used to compute the median. Defaults to `numpy.ma.median`\n        for masked arrays, otherwise to `numpy.median`.\n    ignore_nan : bool\n        Ignore NaN values (treat them as if they are not in the array) when\n        computing the median.  This will use `numpy.ma.median` if ``axis`` is\n        specified, or `numpy.nanmedian` if ``axis==None`` and numpy's version\n        is >1.10 because nanmedian is slightly faster in this case.\n    \n    Returns\n    -------\n    mad : float or `~numpy.ndarray`\n        The median absolute deviation of the input array.  If ``axis``\n        is `None` then a scalar will be returned, otherwise a\n        `~numpy.ndarray` will be returned.\n    \n    Examples\n    --------\n    Generate random variates from a Gaussian distribution and return the\n    median absolute deviation for that distribution::\n    \n        >>> import numpy as np\n        >>> from astropy.stats import median_absolute_deviation\n        >>> rand = np.random.default_rng(12345)\n        >>> from numpy.random import randn\n        >>> mad = median_absolute_deviation(rand.standard_normal(1000))\n        >>> print(mad)    # doctest: +FLOAT_CMP\n        0.6829504282771885\n    \n    See Also\n    --------\n    mad_std",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "61718dcbcfc607639e30d5dc8582d126fc647f4951be83097aae4b4be32af6e2",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like\n    Input array or object that can be converted to an array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "None, int, or tuple of int, optional\n    The axis or axes along which the MADs are computed.  The default\n    (`None`) is to compute the MAD of the flattened array.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "    for masked arrays, otherwise to `numpy.median`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ignore_nan",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool\n    Ignore NaN values (treat them as if they are not in the array) when\n    computing the median.  This will use `numpy.ma.median` if ``axis`` is\n    specified, or `numpy.nanmedian` if ``axis==None`` and numpy's version\n    is >1.10 because nanmedian is slightly faster in this case.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.median_absolute_deviation",
                    "defaultValue": "astropy.stats.funcs.median_absolute_deviation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "1jy75m8j",
            "name": "poisson_conf_interval",
            "description": "Poisson parameter confidence interval given observed counts.\n    \n    Parameters\n    ----------\n    n : int or numpy.ndarray\n        Number of counts (0 <= ``n``).\n    interval : {'root-n','root-n-0','pearson','sherpagehrels','frequentist-confidence', 'kraft-burrows-nousek'}, optional\n        Formula used for confidence interval. See notes for details.\n        Default is ``'root-n'``.\n    sigma : float, optional\n        Number of sigma for confidence interval; only supported for\n        the 'frequentist-confidence' mode.\n    background : float, optional\n        Number of counts expected from the background; only supported for\n        the 'kraft-burrows-nousek' mode. This number is assumed to be determined\n        from a large region so that the uncertainty on its value is negligible.\n    confidence_level : float, optional\n        Confidence level between 0 and 1; only supported for the\n        'kraft-burrows-nousek' mode.\n    \n    Returns\n    -------\n    conf_interval : ndarray\n        ``conf_interval[0]`` and ``conf_interval[1]`` correspond to the lower\n        and upper limits, respectively, for each element in ``n``.\n    \n    Notes\n    -----\n    The \"right\" confidence interval to use for Poisson data is a\n    matter of debate. The CDF working group `recommends\n    <https://web.archive.org/web/20210222093249/https://www-cdf.fnal.gov/physics/statistics/notes/pois_eb.txt>`_\n    using root-n throughout, largely in the interest of\n    comprehensibility, but discusses other possibilities. The ATLAS\n    group also discusses several\n    possibilities but concludes that no single representation is\n    suitable for all cases.  The suggestion has also been `floated\n    <https://ui.adsabs.harvard.edu/abs/2012EPJP..127...24A>`_ that error\n    bars should be attached to theoretical predictions instead of\n    observed data, which this function will not help with (but it's\n    easy; then you really should use the square root of the theoretical\n    prediction).\n    \n    The intervals implemented here are:\n    \n    **1. 'root-n'** This is a very widely used standard rule derived\n    from the maximum-likelihood estimator for the mean of the Poisson\n    process. While it produces questionable results for small n and\n    outright wrong results for n=0, it is standard enough that people are\n    (supposedly) used to interpreting these wonky values. The interval is\n    \n    .. math::\n    \n        CI = (n-\\sqrt{n}, n+\\sqrt{n})\n    \n    **2. 'root-n-0'** This is identical to the above except that where\n    n is zero the interval returned is (0,1).\n    \n    **3. 'pearson'** This is an only-slightly-more-complicated rule\n    based on Pearson's chi-squared rule (as `explained\n    <https://web.archive.org/web/20210222093249/https://www-cdf.fnal.gov/physics/statistics/notes/pois_eb.txt>`_ by\n    the CDF working group). It also has the nice feature that if your\n    theory curve touches an endpoint of the interval, then your data\n    point is indeed one sigma away. The interval is\n    \n    .. math::\n    \n        CI = (n+0.5-\\sqrt{n+0.25}, n+0.5+\\sqrt{n+0.25})\n    \n    **4. 'sherpagehrels'** This rule is used by default in the fitting\n    package 'sherpa'. The `documentation\n    <https://cxc.cfa.harvard.edu/sherpa/statistics/#chigehrels>`_ claims\n    it is based on a numerical approximation published in `Gehrels\n    (1986) <https://ui.adsabs.harvard.edu/abs/1986ApJ...303..336G>`_ but it\n    does not actually appear there.  It is symmetrical, and while the\n    upper limits are within about 1% of those given by\n    'frequentist-confidence', the lower limits can be badly wrong. The\n    interval is\n    \n    .. math::\n    \n        CI = (n-1-\\sqrt{n+0.75}, n+1+\\sqrt{n+0.75})\n    \n    **5. 'frequentist-confidence'** These are frequentist central\n    confidence intervals:\n    \n    .. math::\n    \n        CI = (0.5 F_{\\chi^2}^{-1}(\\alpha;2n),\n              0.5 F_{\\chi^2}^{-1}(1-\\alpha;2(n+1)))\n    \n    where :math:`F_{\\chi^2}^{-1}` is the quantile of the chi-square\n    distribution with the indicated number of degrees of freedom and\n    :math:`\\alpha` is the one-tailed probability of the normal\n    distribution (at the point given by the parameter 'sigma'). See\n    `Maxwell (2011)\n    <https://ui.adsabs.harvard.edu/abs/2011arXiv1102.0822M>`_ for further\n    details.\n    \n    **6. 'kraft-burrows-nousek'** This is a Bayesian approach which allows\n    for the presence of a known background :math:`B` in the source signal\n    :math:`N`.\n    For a given confidence level :math:`CL` the confidence interval\n    :math:`[S_\\mathrm{min}, S_\\mathrm{max}]` is given by:\n    \n    .. math::\n    \n       CL = \\int^{S_\\mathrm{max}}_{S_\\mathrm{min}} f_{N,B}(S)dS\n    \n    where the function :math:`f_{N,B}` is:\n    \n    .. math::\n    \n       f_{N,B}(S) = C \\frac{e^{-(S+B)}(S+B)^N}{N!}\n    \n    and the normalization constant :math:`C`:\n    \n    .. math::\n    \n       C = \\left[ \\int_0^\\infty \\frac{e^{-(S+B)}(S+B)^N}{N!} dS \\right] ^{-1}\n       = \\left( \\sum^N_{n=0} \\frac{e^{-B}B^n}{n!}  \\right)^{-1}\n    \n    See `Kraft, Burrows, and Nousek (1991)\n    <https://ui.adsabs.harvard.edu/abs/1991ApJ...374..344K>`_ for further\n    details.\n    \n    These formulas implement a positive, uniform prior.\n    `Kraft, Burrows, and Nousek (1991)\n    <https://ui.adsabs.harvard.edu/abs/1991ApJ...374..344K>`_ discuss this\n    choice in more detail and show that the problem is relatively\n    insensitive to the choice of prior.\n    \n    This function has an optional dependency: Either `Scipy\n    <https://www.scipy.org/>`_ or `mpmath <https://mpmath.org/>`_  need\n    to be available (Scipy works only for N < 100).\n    This code is very intense numerically, which makes it much slower than\n    the other methods, in particular for large count numbers (above 1000\n    even with ``mpmath``). Fortunately, some of the other methods or a\n    Gaussian approximation usually work well in this regime.\n    \n    Examples\n    --------\n    >>> poisson_conf_interval(np.arange(10), interval='root-n').T\n    array([[  0.        ,   0.        ],\n           [  0.        ,   2.        ],\n           [  0.58578644,   3.41421356],\n           [  1.26794919,   4.73205081],\n           [  2.        ,   6.        ],\n           [  2.76393202,   7.23606798],\n           [  3.55051026,   8.44948974],\n           [  4.35424869,   9.64575131],\n           [  5.17157288,  10.82842712],\n           [  6.        ,  12.        ]])\n    \n    >>> poisson_conf_interval(np.arange(10), interval='root-n-0').T\n    array([[  0.        ,   1.        ],\n           [  0.        ,   2.        ],\n           [  0.58578644,   3.41421356],\n           [  1.26794919,   4.73205081],\n           [  2.        ,   6.        ],\n           [  2.76393202,   7.23606798],\n           [  3.55051026,   8.44948974],\n           [  4.35424869,   9.64575131],\n           [  5.17157288,  10.82842712],\n           [  6.        ,  12.        ]])\n    \n    >>> poisson_conf_interval(np.arange(10), interval='pearson').T\n    array([[  0.        ,   1.        ],\n           [  0.38196601,   2.61803399],\n           [  1.        ,   4.        ],\n           [  1.69722436,   5.30277564],\n           [  2.43844719,   6.56155281],\n           [  3.20871215,   7.79128785],\n           [  4.        ,   9.        ],\n           [  4.8074176 ,  10.1925824 ],\n           [  5.62771868,  11.37228132],\n           [  6.45861873,  12.54138127]])\n    \n    >>> poisson_conf_interval(\n    ...     np.arange(10), interval='frequentist-confidence').T\n    array([[  0.        ,   1.84102165],\n           [  0.17275378,   3.29952656],\n           [  0.70818544,   4.63785962],\n           [  1.36729531,   5.91818583],\n           [  2.08566081,   7.16275317],\n           [  2.84030886,   8.38247265],\n           [  3.62006862,   9.58364155],\n           [  4.41852954,  10.77028072],\n           [  5.23161394,  11.94514152],\n           [  6.05653896,  13.11020414]])\n    \n    >>> poisson_conf_interval(\n    ...     7, interval='frequentist-confidence').T\n    array([  4.41852954,  10.77028072])\n    \n    >>> poisson_conf_interval(\n    ...     10, background=1.5, confidence_level=0.95,\n    ...     interval='kraft-burrows-nousek').T  # doctest: +FLOAT_CMP\n    array([[ 3.47894005, 16.113329533]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "07855d87e7a89993f51405075a12df46961b32df97ad68bf85510e6e44aeb2a0",
            "fields": [
                {
                    "name": "n",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or numpy.ndarray\n    Number of counts (0 <= ``n``).",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "interval",
                    "value": "root-n",
                    "defaultValue": "root-n",
                    "description": "{'root-n','root-n-0','pearson','sherpagehrels','frequentist-confidence', 'kraft-burrows-nousek'}, optional\n    Formula used for confidence interval. See notes for details.\n    Default is ``'root-n'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "float, optional\n    Number of sigma for confidence interval; only supported for\n    the 'frequentist-confidence' mode.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "background",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "float, optional\n    Number of counts expected from the background; only supported for\n    the 'kraft-burrows-nousek' mode. This number is assumed to be determined\n    from a large region so that the uncertainty on its value is negligible.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "confidence_level",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional\n    Confidence level between 0 and 1; only supported for the\n    'kraft-burrows-nousek' mode.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.poisson_conf_interval",
                    "defaultValue": "astropy.stats.funcs.poisson_conf_interval",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "0jdmaxrp",
            "name": "rayleightest",
            "description": "Performs the Rayleigh test of uniformity.\n    \n    This test is  used to identify a non-uniform distribution, i.e. it is\n    designed for detecting an unimodal deviation from uniformity. More\n    precisely, it assumes the following hypotheses:\n    - H0 (null hypothesis): The population is distributed uniformly around the\n    circle.\n    - H1 (alternative hypothesis): The population is not distributed uniformly\n    around the circle.\n    Small p-values suggest to reject the null hypothesis.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    axis : int, optional\n        Axis along which the Rayleigh test will be performed.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``np.sum(weights, axis)``\n        equals the number of observations.\n        See [1]_, remark 1.4, page 22, for detailed explanation.\n    \n    Returns\n    -------\n    p-value : float or `~astropy.units.Quantity` ['dimensionless']\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import rayleightest\n    >>> from astropy import units as u\n    >>> data = np.array([130, 90, 0, 145])*u.deg\n    >>> rayleightest(data) # doctest: +FLOAT_CMP\n    <Quantity 0.2563487733797317>\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>\n    .. [3] M. Chirstman., C. Miller. \"Testing a Sample of Directions for\n       Uniformity.\" Lecture Notes, STA 6934/5805. University of Florida, 2007.\n    .. [4] D. Wilkie. \"Rayleigh Test for Randomness of Circular Data\". Applied\n       Statistics. 1983.\n       <http://wexler.free.fr/library/files/wilkie%20(1983)%20rayleigh%20test%20for%20randomness%20of%20circular%20data.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d42024a728e54998984a3df90b7f0cdd15e6660a552a7f2d6f193ec4840e60cf",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which the Rayleigh test will be performed.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations.\n    See [1]_, remark 1.4, page 22, for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.rayleightest",
                    "defaultValue": "astropy.stats.circstats.rayleightest",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "a85g2h4w",
            "name": "scott_bin_width",
            "description": "Return the optimal histogram bin width using Scott's rule.\n    \n    Scott's rule is a normal reference rule: it minimizes the integrated\n    mean squared error in the bin approximation under the assumption that the\n    data is approximately Gaussian.\n    \n    Parameters\n    ----------\n    data : array-like, ndim=1\n        observed (one-dimensional) data\n    return_bins : bool, optional\n        if True, then return the bin edges\n    \n    Returns\n    -------\n    width : float\n        optimal bin width using Scott's rule\n    bins : ndarray\n        bin edges: returned if ``return_bins`` is True\n    \n    Notes\n    -----\n    The optimal bin width is\n    \n    .. math::\n        \\Delta_b = \\frac{3.5\\sigma}{n^{1/3}}\n    \n    where :math:`\\sigma` is the standard deviation of the data, and\n    :math:`n` is the number of data points [1]_.\n    \n    References\n    ----------\n    .. [1] Scott, David W. (1979). \"On optimal and data-based histograms\".\n       Biometricka 66 (3): 605-610\n    \n    See Also\n    --------\n    knuth_bin_width\n    freedman_bin_width\n    bayesian_blocks\n    histogram",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "502786e5851e3469eed4b5fbb38b0688aa32888ed781aaa769f5a7b7eb5a14c7",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like, ndim=1\n    observed (one-dimensional) data",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_bins",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional\n    if True, then return the bin edges",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.histogram",
                    "defaultValue": "astropy.stats.histogram",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.histogram.scott_bin_width",
                    "defaultValue": "astropy.stats.histogram.scott_bin_width",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "qnrj04i3",
            "name": "sigma_clip",
            "description": "Perform sigma-clipping on the provided data.\n    \n    The data will be iterated over, each time rejecting values that are\n    less or more than a specified number of standard deviations from a\n    center value.\n    \n    Clipped (rejected) pixels are those where::\n    \n        data < center - (sigma_lower * std)\n        data > center + (sigma_upper * std)\n    \n    where::\n    \n        center = cenfunc(data [, axis=])\n        std = stdfunc(data [, axis=])\n    \n    Invalid data values (i.e., NaN or inf) are automatically clipped.\n    \n    For an object-oriented interface to sigma clipping, see\n    :class:`SigmaClip`.\n    \n    .. note::\n        `scipy.stats.sigmaclip` provides a subset of the functionality\n        in this class. Also, its input data cannot be a masked array\n        and it does not handle data that contains invalid values (i.e.,\n        NaN or inf). Also note that it uses the mean as the centering\n        function. The equivalent settings to `scipy.stats.sigmaclip`\n        are::\n    \n            sigma_clip(sigma=4., cenfunc='mean', maxiters=None, axis=None,\n            ...        masked=False, return_bounds=True)\n    \n    Parameters\n    ----------\n    data : array-like or `~numpy.ma.MaskedArray`\n        The data to be sigma clipped.\n    \n    sigma : float, optional\n        The number of standard deviations to use for both the lower\n        and upper clipping limit. These limits are overridden by\n        ``sigma_lower`` and ``sigma_upper``, if input. The default is 3.\n    \n    sigma_lower : float or None, optional\n        The number of standard deviations to use as the lower bound for\n        the clipping limit. If `None` then the value of ``sigma`` is\n        used. The default is `None`.\n    \n    sigma_upper : float or None, optional\n        The number of standard deviations to use as the upper bound for\n        the clipping limit. If `None` then the value of ``sigma`` is\n        used. The default is `None`.\n    \n    maxiters : int or None, optional\n        The maximum number of sigma-clipping iterations to perform or\n        `None` to clip until convergence is achieved (i.e., iterate\n        until the last iteration clips nothing). If convergence is\n        achieved prior to ``maxiters`` iterations, the clipping\n        iterations will stop. The default is 5.\n    \n    cenfunc : {'median', 'mean'} or callable, optional\n        The statistic or callable function/object used to compute\n        the center value for the clipping. If using a callable\n        function/object and the ``axis`` keyword is used, then it must\n        be able to ignore NaNs (e.g., `numpy.nanmean`) and it must have\n        an ``axis`` keyword to return an array with axis dimension(s)\n        removed. The default is ``'median'``.\n    \n    stdfunc : {'std', 'mad_std'} or callable, optional\n        The statistic or callable function/object used to compute the\n        standard deviation about the center value. If using a callable\n        function/object and the ``axis`` keyword is used, then it must\n        be able to ignore NaNs (e.g., `numpy.nanstd`) and it must have\n        an ``axis`` keyword to return an array with axis dimension(s)\n        removed. The default is ``'std'``.\n    \n    axis : None or int or tuple of int, optional\n        The axis or axes along which to sigma clip the data. If `None`,\n        then the flattened data will be used. ``axis`` is passed to the\n        ``cenfunc`` and ``stdfunc``. The default is `None`.\n    \n    masked : bool, optional\n        If `True`, then a `~numpy.ma.MaskedArray` is returned, where\n        the mask is `True` for clipped values. If `False`, then a\n        `~numpy.ndarray` is returned. The default is `True`.\n    \n    return_bounds : bool, optional\n        If `True`, then the minimum and maximum clipping bounds are also\n        returned.\n    \n    copy : bool, optional\n        If `True`, then the ``data`` array will be copied. If `False`\n        and ``masked=True``, then the returned masked array data will\n        contain the same array as the input ``data`` (if ``data`` is a\n        `~numpy.ndarray` or `~numpy.ma.MaskedArray`). If `False` and\n        ``masked=False``, the input data is modified in-place. The\n        default is `True`.\n    \n    grow : float or `False`, optional\n        Radius within which to mask the neighbouring pixels of those\n        that fall outwith the clipping limits (only applied along\n        ``axis``, if specified). As an example, for a 2D image a value\n        of 1 will mask the nearest pixels in a cross pattern around each\n        deviant pixel, while 1.5 will also reject the nearest diagonal\n        neighbours and so on.\n    \n    Returns\n    -------\n    result : array-like\n        If ``masked=True``, then a `~numpy.ma.MaskedArray` is returned,\n        where the mask is `True` for clipped values and where the input\n        mask was `True`.\n    \n        If ``masked=False``, then a `~numpy.ndarray` is returned.\n    \n        If ``return_bounds=True``, then in addition to the masked array\n        or array above, the minimum and maximum clipping bounds are\n        returned.\n    \n        If ``masked=False`` and ``axis=None``, then the output array\n        is a flattened 1D `~numpy.ndarray` where the clipped values\n        have been removed. If ``return_bounds=True`` then the returned\n        minimum and maximum thresholds are scalars.\n    \n        If ``masked=False`` and ``axis`` is specified, then the output\n        `~numpy.ndarray` will have the same shape as the input ``data``\n        and contain ``np.nan`` where values were clipped. If the input\n        ``data`` was a masked array, then the output `~numpy.ndarray`\n        will also contain ``np.nan`` where the input mask was `True`.\n        If ``return_bounds=True`` then the returned minimum and maximum\n        clipping thresholds will be be `~numpy.ndarray`\\s.\n    \n    See Also\n    --------\n    SigmaClip, sigma_clipped_stats\n    \n    Notes\n    -----\n    The best performance will typically be obtained by setting\n    ``cenfunc`` and ``stdfunc`` to one of the built-in functions\n    specified as as string. If one of the options is set to a string\n    while the other has a custom callable, you may in some cases see\n    better performance if you have the `bottleneck`_ package installed.\n    \n    .. _bottleneck:  https://github.com/pydata/bottleneck\n    \n    Examples\n    --------\n    This example uses a data array of random variates from a Gaussian\n    distribution. We clip all points that are more than 2 sample\n    standard deviations from the median. The result is a masked array,\n    where the mask is `True` for clipped data::\n    \n        >>> from astropy.stats import sigma_clip\n        >>> from numpy.random import randn\n        >>> randvar = randn(10000)\n        >>> filtered_data = sigma_clip(randvar, sigma=2, maxiters=5)\n    \n    This example clips all points that are more than 3 sigma relative\n    to the sample *mean*, clips until convergence, returns an unmasked\n    `~numpy.ndarray`, and does not copy the data::\n    \n        >>> from astropy.stats import sigma_clip\n        >>> from numpy.random import randn\n        >>> from numpy import mean\n        >>> randvar = randn(10000)\n        >>> filtered_data = sigma_clip(randvar, sigma=3, maxiters=None,\n        ...                            cenfunc=mean, masked=False, copy=False)\n    \n    This example sigma clips along one axis::\n    \n        >>> from astropy.stats import sigma_clip\n        >>> from numpy.random import normal\n        >>> from numpy import arange, diag, ones\n        >>> data = arange(5) + normal(0., 0.05, (5, 5)) + diag(ones(5))\n        >>> filtered_data = sigma_clip(data, sigma=2.3, axis=0)\n    \n    Note that along the other axis, no points would be clipped, as the\n    standard deviation is higher.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "47aad94d217baceab0d50d7ee8dcc70a8e9efc8cd56c2b1b8af96941d413edc5",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or `~    The data to be sigma clipped.",
                    "type": "numpy.ma.MaskedArray",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": 3,
                    "defaultValue": 3,
                    "description": " if input. The default is 3.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma_lower",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or None, optional\n    The number of standard deviations to use as the lower bound for\n    the clipping limit. If `None` then the value of ``sigma`` is\n    used. The default is `None`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma_upper",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or None, optional\n    The number of standard deviations to use as the upper bound for\n    the clipping limit. If `None` then the value of ``sigma`` is\n    used. The default is `None`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiters",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "int or None, optional\n    The maximum number of sigma-clipping iterations to perform or\n    `None` to clip until convergence is achieved (i.e., iterate\n    until the last iteration clips nothing). If convergence is\n    achieved prior to ``maxiters`` iterations, the clipping\n    iterations will stop. The default is 5.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cenfunc",
                    "value": "median",
                    "defaultValue": "median",
                    "description": "{'median', 'mean'} or callable, optional\n    The statistic or callable function/object used to compute\n    the center value for the clipping. If using a callable\n    function/object and the ``axis`` keyword is used, then it must\n    be able to ignore NaNs (e.g., `numpy.nanmean`) and it must have\n    an ``axis`` keyword to return an array with axis dimension(s)\n    removed. The default is ``'median'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stdfunc",
                    "value": "std",
                    "defaultValue": "std",
                    "description": "{'std', 'mad_std'} or callable, optional\n    The statistic or callable function/object used to compute the\n    standard deviation about the center value. If using a callable\n    function/object and the ``axis`` keyword is used, then it must\n    be able to ignore NaNs (e.g., `numpy.nanstd`) and it must have\n    an ``axis`` keyword to return an array with axis dimension(s)\n    removed. The default is ``'std'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "\n    then the flattened data will be used. ``axis`` is passed to the\n    ``cenfunc`` and ``stdfunc``. The default is `None`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "masked",
                    "value": true,
                    "defaultValue": true,
                    "description": " then a `~ then a\n    `~numpy.ndarray` is returned. The default is `True`.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_bounds",
                    "value": false,
                    "defaultValue": false,
                    "description": " then the minimum and maximum clipping bounds are also\n    returned.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "copy",
                    "value": true,
                    "defaultValue": true,
                    "description": " then the returned masked array data will\n    contain the same array as the input ``data`` (if ``data`` is a\n    `~numpy.ndarray` or `~ the input data is modified in-place. The\n    default is `True`.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "grow",
                    "value": false,
                    "defaultValue": false,
                    "description": " if specified). As an example, for a 2D image a value\n    of 1 will mask the nearest pixels in a cross pattern around each\n    deviant pixel, while 1.5 will also reject the nearest diagonal\n    neighbours and so on.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.sigma_clipping",
                    "defaultValue": "astropy.stats.sigma_clipping",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.sigma_clipping.sigma_clip",
                    "defaultValue": "astropy.stats.sigma_clipping.sigma_clip",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "yc_khlo7",
            "name": "sigma_clipped_stats",
            "description": "Calculate sigma-clipped statistics on the provided data.\n    \n    Parameters\n    ----------\n    data : array-like or `~numpy.ma.MaskedArray`\n        Data array or object that can be converted to an array.\n    \n    mask : `numpy.ndarray` (bool), optional\n        A boolean mask with the same shape as ``data``, where a `True`\n        value indicates the corresponding element of ``data`` is masked.\n        Masked pixels are excluded when computing the statistics.\n    \n    mask_value : float, optional\n        A data value (e.g., ``0.0``) that is ignored when computing the\n        statistics. ``mask_value`` will be masked in addition to any\n        input ``mask``.\n    \n    sigma : float, optional\n        The number of standard deviations to use for both the lower\n        and upper clipping limit. These limits are overridden by\n        ``sigma_lower`` and ``sigma_upper``, if input. The default is 3.\n    \n    sigma_lower : float or None, optional\n        The number of standard deviations to use as the lower bound for\n        the clipping limit. If `None` then the value of ``sigma`` is\n        used. The default is `None`.\n    \n    sigma_upper : float or None, optional\n        The number of standard deviations to use as the upper bound for\n        the clipping limit. If `None` then the value of ``sigma`` is\n        used. The default is `None`.\n    \n    maxiters : int or None, optional\n        The maximum number of sigma-clipping iterations to perform or\n        `None` to clip until convergence is achieved (i.e., iterate\n        until the last iteration clips nothing). If convergence is\n        achieved prior to ``maxiters`` iterations, the clipping\n        iterations will stop. The default is 5.\n    \n    cenfunc : {'median', 'mean'} or callable, optional\n        The statistic or callable function/object used to compute\n        the center value for the clipping. If using a callable\n        function/object and the ``axis`` keyword is used, then it must\n        be able to ignore NaNs (e.g., `numpy.nanmean`) and it must have\n        an ``axis`` keyword to return an array with axis dimension(s)\n        removed. The default is ``'median'``.\n    \n    stdfunc : {'std', 'mad_std'} or callable, optional\n        The statistic or callable function/object used to compute the\n        standard deviation about the center value. If using a callable\n        function/object and the ``axis`` keyword is used, then it must\n        be able to ignore NaNs (e.g., `numpy.nanstd`) and it must have\n        an ``axis`` keyword to return an array with axis dimension(s)\n        removed. The default is ``'std'``.\n    \n    std_ddof : int, optional\n        The delta degrees of freedom for the standard deviation\n        calculation. The divisor used in the calculation is ``N -\n        std_ddof``, where ``N`` represents the number of elements. The\n        default is 0.\n    \n    axis : None or int or tuple of int, optional\n        The axis or axes along which to sigma clip the data. If `None`,\n        then the flattened data will be used. ``axis`` is passed to the\n        ``cenfunc`` and ``stdfunc``. The default is `None`.\n    \n    grow : float or `False`, optional\n        Radius within which to mask the neighbouring pixels of those\n        that fall outwith the clipping limits (only applied along\n        ``axis``, if specified). As an example, for a 2D image a value\n        of 1 will mask the nearest pixels in a cross pattern around each\n        deviant pixel, while 1.5 will also reject the nearest diagonal\n        neighbours and so on.\n    \n    Notes\n    -----\n    The best performance will typically be obtained by setting\n    ``cenfunc`` and ``stdfunc`` to one of the built-in functions\n    specified as as string. If one of the options is set to a string\n    while the other has a custom callable, you may in some cases see\n    better performance if you have the `bottleneck`_ package installed.\n    \n    .. _bottleneck:  https://github.com/pydata/bottleneck\n    \n    Returns\n    -------\n    mean, median, stddev : float\n        The mean, median, and standard deviation of the sigma-clipped\n        data.\n    \n    See Also\n    --------\n    SigmaClip, sigma_clip",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "20c13a3c2f1fdc0d05e987dbe0e4a3ffe7f00e30415b492ea9b5b37c77f1e6b2",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "array-like or `~    Data array or object that can be converted to an array.",
                    "type": "numpy.ma.MaskedArray",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "    value indicates the corresponding element of ``data`` is masked.\n    Masked pixels are excluded when computing the statistics.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask_value",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, optional\n    A data value (e.g., ``0.0``) that is ignored when computing the\n    statistics. ``mask_value`` will be masked in addition to any\n    input ``mask``.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": 3.0,
                    "defaultValue": 3.0,
                    "description": " if input. The default is 3.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma_lower",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or None, optional\n    The number of standard deviations to use as the lower bound for\n    the clipping limit. If `None` then the value of ``sigma`` is\n    used. The default is `None`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma_upper",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or None, optional\n    The number of standard deviations to use as the upper bound for\n    the clipping limit. If `None` then the value of ``sigma`` is\n    used. The default is `None`.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxiters",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "int or None, optional\n    The maximum number of sigma-clipping iterations to perform or\n    `None` to clip until convergence is achieved (i.e., iterate\n    until the last iteration clips nothing). If convergence is\n    achieved prior to ``maxiters`` iterations, the clipping\n    iterations will stop. The default is 5.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cenfunc",
                    "value": "median",
                    "defaultValue": "median",
                    "description": "{'median', 'mean'} or callable, optional\n    The statistic or callable function/object used to compute\n    the center value for the clipping. If using a callable\n    function/object and the ``axis`` keyword is used, then it must\n    be able to ignore NaNs (e.g., `numpy.nanmean`) and it must have\n    an ``axis`` keyword to return an array with axis dimension(s)\n    removed. The default is ``'median'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "stdfunc",
                    "value": "std",
                    "defaultValue": "std",
                    "description": "{'std', 'mad_std'} or callable, optional\n    The statistic or callable function/object used to compute the\n    standard deviation about the center value. If using a callable\n    function/object and the ``axis`` keyword is used, then it must\n    be able to ignore NaNs (e.g., `numpy.nanstd`) and it must have\n    an ``axis`` keyword to return an array with axis dimension(s)\n    removed. The default is ``'std'``.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "std_ddof",
                    "value": 0,
                    "defaultValue": 0,
                    "description": " where ``N`` represents the number of elements. The\n    default is 0.",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "\n    then the flattened data will be used. ``axis`` is passed to the\n    ``cenfunc`` and ``stdfunc``. The default is `None`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "grow",
                    "value": false,
                    "defaultValue": false,
                    "description": " if specified). As an example, for a 2D image a value\n    of 1 will mask the nearest pixels in a cross pattern around each\n    deviant pixel, while 1.5 will also reject the nearest diagonal\n    neighbours and so on.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.sigma_clipping",
                    "defaultValue": "astropy.stats.sigma_clipping",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.sigma_clipping.sigma_clipped_stats",
                    "defaultValue": "astropy.stats.sigma_clipping.sigma_clipped_stats",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "mz2wi7b6",
            "name": "signal_to_noise_oir_ccd",
            "description": "Computes the signal to noise ratio for source being observed in the\n    optical/IR using a CCD.\n    \n    Parameters\n    ----------\n    t : float or numpy.ndarray\n        CCD integration time in seconds\n    source_eps : float\n        Number of electrons (photons) or DN per second in the aperture from the\n        source. Note that this should already have been scaled by the filter\n        transmission and the quantum efficiency of the CCD. If the input is in\n        DN, then be sure to set the gain to the proper value for the CCD.\n        If the input is in electrons per second, then keep the gain as its\n        default of 1.0.\n    sky_eps : float\n        Number of electrons (photons) or DN per second per pixel from the sky\n        background. Should already be scaled by filter transmission and QE.\n        This must be in the same units as source_eps for the calculation to\n        make sense.\n    dark_eps : float\n        Number of thermal electrons per second per pixel. If this is given in\n        DN or ADU, then multiply by the gain to get the value in electrons.\n    rd : float\n        Read noise of the CCD in electrons. If this is given in\n        DN or ADU, then multiply by the gain to get the value in electrons.\n    npix : float\n        Size of the aperture in pixels\n    gain : float, optional\n        Gain of the CCD. In units of electrons per DN.\n    \n    Returns\n    -------\n    SNR : float or numpy.ndarray\n        Signal to noise ratio calculated from the inputs",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8439718c86c593b28b497ecad98ea793d083abddcb0f6ed74d0af692b7123fc6",
            "fields": [
                {
                    "name": "t",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or numpy.ndarray\n    CCD integration time in seconds",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "source_eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Number of electrons (photons) or DN per second in the aperture from the\n    source. Note that this should already have been scaled by the filter\n    transmission and the quantum efficiency of the CCD. If the input is in\n    DN, then be sure to set the gain to the proper value for the CCD.\n    If the input is in electrons per second, then keep the gain as its\n    default of 1.0.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sky_eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Number of electrons (photons) or DN per second per pixel from the sky\n    background. Should already be scaled by filter transmission and QE.\n    This must be in the same units as source_eps for the calculation to\n    make sense.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dark_eps",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Number of thermal electrons per second per pixel. If this is given in\n    DN or ADU, then multiply by the gain to get the value in electrons.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rd",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Read noise of the CCD in electrons. If this is given in\n    DN or ADU, then multiply by the gain to get the value in electrons.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "npix",
                    "value": null,
                    "defaultValue": null,
                    "description": "float\n    Size of the aperture in pixels",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "gain",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "float, optional\n    Gain of the CCD. In units of electrons per DN.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.funcs",
                    "defaultValue": "astropy.stats.funcs",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.funcs.signal_to_noise_oir_ccd",
                    "defaultValue": "astropy.stats.funcs.signal_to_noise_oir_ccd",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "iiof3ft1",
            "name": "vonmisesmle",
            "description": "Computes the Maximum Likelihood Estimator (MLE) for the parameters of\n    the von Mises distribution.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    axis : int, optional\n        Axis along which the mle will be computed.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``sum(weights, axis)``\n        equals the number of observations. See [1]_, remark 1.4, page 22,\n        for detailed explanation.\n    \n    Returns\n    -------\n    mu : float or `~astropy.units.Quantity`\n        The mean (aka location parameter).\n    kappa : float or `~astropy.units.Quantity` ['dimensionless']\n        The concentration parameter.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import vonmisesmle\n    >>> from astropy import units as u\n    >>> data = np.array([130, 90, 0, 145])*u.deg\n    >>> vonmisesmle(data) # doctest: +FLOAT_CMP\n    (<Quantity 101.16894320013179 deg>, <Quantity 1.49358958737054>)\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d7e32d6340a044c67d301c00161e7a31093e4302cec57fb744661f5ae0e5a4b4",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which the mle will be computed.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations. See [1]_, remark 1.4, page 22,\n    for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.vonmisesmle",
                    "defaultValue": "astropy.stats.circstats.vonmisesmle",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "l6cntvq3",
            "name": "vtest",
            "description": "Performs the Rayleigh test of uniformity where the alternative\n    hypothesis H1 is assumed to have a known mean angle ``mu``.\n    \n    Parameters\n    ----------\n    data : ndarray or `~astropy.units.Quantity`\n        Array of circular (directional) data, which is assumed to be in\n        radians whenever ``data`` is ``numpy.ndarray``.\n    mu : float or `~astropy.units.Quantity` ['angle'], optional\n        Mean angle. Assumed to be known.\n    axis : int, optional\n        Axis along which the V test will be performed.\n    weights : numpy.ndarray, optional\n        In case of grouped data, the i-th element of ``weights`` represents a\n        weighting factor for each group such that ``sum(weights, axis)``\n        equals the number of observations. See [1]_, remark 1.4, page 22,\n        for detailed explanation.\n    \n    Returns\n    -------\n    p-value : float or `~astropy.units.Quantity` ['dimensionless']\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.stats import vtest\n    >>> from astropy import units as u\n    >>> data = np.array([130, 90, 0, 145])*u.deg\n    >>> vtest(data) # doctest: +FLOAT_CMP\n    <Quantity 0.6223678199713766>\n    \n    References\n    ----------\n    .. [1] S. R. Jammalamadaka, A. SenGupta. \"Topics in Circular Statistics\".\n       Series on Multivariate Analysis, Vol. 5, 2001.\n    .. [2] C. Agostinelli, U. Lund. \"Circular Statistics from 'Topics in\n       Circular Statistics (2001)'\". 2015.\n       <https://cran.r-project.org/web/packages/CircStats/CircStats.pdf>\n    .. [3] M. Chirstman., C. Miller. \"Testing a Sample of Directions for\n       Uniformity.\" Lecture Notes, STA 6934/5805. University of Florida, 2007.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "135eab17abfdce086054503a81c0b33c9eec7eaec37bfdeec6ef8a90c409690c",
            "fields": [
                {
                    "name": "data",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or `~    Array of circular (directional) data, which is assumed to be in\n    radians whenever ``data`` is ``numpy.ndarray``.",
                    "type": "astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mu",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "float or `~astropy.units.Quantity` ['angle'], optional\n    Mean angle. Assumed to be known.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, optional\n    Axis along which the V test will be performed.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "    equals the number of observations. See [1]_, remark 1.4, page 22,\n    for detailed explanation.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astropy.stats.circstats",
                    "defaultValue": "astropy.stats.circstats",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astropy.stats.circstats.vtest",
                    "defaultValue": "astropy.stats.circstats.vtest",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}