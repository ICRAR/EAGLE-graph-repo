{
    "modelData": {
        "filePath": "astropy_nddata.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "The `astropy.nddata` subpackage provides the `~astropy.nddata.NDData`\nclass and related tools to manage n-dimensional array-based data (e.g.\nCCD images, IFU Data, grid-based simulation data, ...). This is more than\njust `numpy.ndarray` objects, because it provides metadata that cannot\nbe easily provided by a single array.",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.2",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "astropy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "53bd8d98ac746963e9bd390da52f839c1cc7553289f26ac95de43dc731303b6d",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755098558.184809,
        "numLGNodes": 99
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0nbcz3qx",
            "name": "BitFlagNameMap.__init__",
            "description": "\nA base class for bit flag name maps used to describe data quality (DQ)\n    flags of images by provinding a mapping from a mnemonic flag name to a flag\n    value.\n    \n    Mapping for a specific instrument should subclass this class.\n    Subclasses should define flags as class attributes with integer values\n    that are powers of 2. Each bit flag may also contain a string\n    comment following the flag value.\n    \n    Examples\n    --------\n        >>> from astropy.nddata.bitmask import BitFlagNameMap\n        >>> class ST_DQ(BitFlagNameMap):\n        ...     __version__ = '1.0.0'  # optional\n        ...     CR = 1, 'Cosmic Ray'\n        ...     CLOUDY = 4  # no docstring comment\n        ...     RAINY = 8, 'Dome closed'\n        ...\n        >>> class ST_CAM1_DQ(ST_DQ):\n        ...     HOT = 16\n        ...     DEAD = 32",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "36ca070f43c7b2aa966f0262592a31bdc2710baf27a52e3ee505c8ebf2edc618",
            "fields": [
                {
                    "id": "96bq88gz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BitFlagNameMap object",
                    "type": "Object:astropy.nddata.bitmask.BitFlagNameMap",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "92dxfcjq",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sc8d9wws",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uta1mw17",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.bitmask.BitFlagNameMap.__init__",
                    "defaultValue": "astropy.nddata.bitmask.BitFlagNameMap.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yoqfqj3q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0kp62sp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aihyf7nl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vg066g2d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.bitmask.BitFlagNameMap",
                    "defaultValue": "astropy.nddata.bitmask.BitFlagNameMap",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2avjedn5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lvnatvqk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7c5x_8wt",
            "name": "CCDData.__init__",
            "description": "\nA class describing basic CCD data.\n    \n    The CCDData class is based on the NDData object and includes a data array,\n    uncertainty frame, mask frame, flag frame, meta data, units, and WCS\n    information for a single CCD image.\n    \n    Parameters\n    ----------\n    data : `~astropy.nddata.CCDData`-like or array-like\n        The actual data contained in this `~astropy.nddata.CCDData` object.\n        Note that the data will always be saved by *reference*, so you should\n        make a copy of the ``data`` before passing it in if that's the desired\n        behavior.\n    \n    uncertainty : `~astropy.nddata.StdDevUncertainty`,             `~astropy.nddata.VarianceUncertainty`,             `~astropy.nddata.InverseVariance`, `numpy.ndarray` or             None, optional\n        Uncertainties on the data. If the uncertainty is a `numpy.ndarray`, it\n        it assumed to be, and stored as, a `~astropy.nddata.StdDevUncertainty`.\n        Default is ``None``.\n    \n    mask : `numpy.ndarray` or None, optional\n        Mask for the data, given as a boolean Numpy array with a shape\n        matching that of the data. The values must be `False` where\n        the data is *valid* and `True` when it is not (like Numpy\n        masked arrays). If ``data`` is a numpy masked array, providing\n        ``mask`` here will causes the mask from the masked array to be\n        ignored.\n        Default is ``None``.\n    \n    flags : `numpy.ndarray` or `~astropy.nddata.FlagCollection` or None,             optional\n        Flags giving information about each pixel. These can be specified\n        either as a Numpy array of any type with a shape matching that of the\n        data, or as a `~astropy.nddata.FlagCollection` instance which has a\n        shape matching that of the data.\n        Default is ``None``.\n    \n    wcs : `~astropy.wcs.WCS` or None, optional\n        WCS-object containing the world coordinate system for the data.\n        Default is ``None``.\n    \n    meta : dict-like object or None, optional\n        Metadata for this object. \"Metadata\" here means all information that\n        is included with this object but not part of any other attribute\n        of this particular object, e.g. creation date, unique identifier,\n        simulation parameters, exposure time, telescope name, etc.\n    \n    unit : `~astropy.units.Unit` or str, optional\n        The units of the data.\n        Default is ``None``.\n    \n        .. warning::\n    \n            If the unit is ``None`` or not otherwise specified it will raise a\n            ``ValueError``\n    \n    psf : `numpy.ndarray` or None, optional\n        Image representation of the PSF at the center of this image. In order\n        for convolution to be flux-preserving, this should generally be\n        normalized to sum to unity.\n    \n    Raises\n    ------\n    ValueError\n        If the ``uncertainty`` or ``mask`` inputs cannot be broadcast (e.g.,\n        match shape) onto ``data``.\n    \n    Methods\n    -------\n    read(\\*args, \\**kwargs)\n        ``Classmethod`` to create an CCDData instance based on a ``FITS`` file.\n        This method uses :func:`fits_ccddata_reader` with the provided\n        parameters.\n    write(\\*args, \\**kwargs)\n        Writes the contents of the CCDData instance into a new ``FITS`` file.\n        This method uses :func:`fits_ccddata_writer` with the provided\n        parameters.\n    \n    Attributes\n    ----------\n    known_invalid_fits_unit_strings\n        A dictionary that maps commonly-used fits unit name strings that are\n        technically invalid to the correct valid unit type (or unit string).\n        This is primarily for variant names like \"ELECTRONS/S\" which are not\n        formally valid, but are unambiguous and frequently enough encountered\n        that it is convenient to map them to the correct unit.\n    \n    Notes\n    -----\n    `~astropy.nddata.CCDData` objects can be easily converted to a regular\n     Numpy array using `numpy.asarray`.\n    \n    For example::\n    \n        >>> from astropy.nddata import CCDData\n        >>> import numpy as np\n        >>> x = CCDData([1,2,3], unit='adu')\n        >>> np.asarray(x)\n        array([1, 2, 3])\n    \n    This is useful, for example, when plotting a 2D image using\n    matplotlib.\n    \n        >>> from astropy.nddata import CCDData\n        >>> from matplotlib import pyplot as plt   # doctest: +SKIP\n        >>> x = CCDData([[1,2,3], [4,5,6]], unit='adu')\n        >>> plt.imshow(x)   # doctest: +SKIP",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a08e790454523069ac58fde9d406c73776ce30541cca062011b1cd5a5a925eb2",
            "fields": [
                {
                    "id": "dmburgkd",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to CCDData object",
                    "type": "Object:astropy.nddata.ccddata.CCDData",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "84cdi_m_",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emojk2li",
                    "encoding": "",
                    "name": "kwd",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmc96bl6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.__init__",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzzvt9xb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1g12y5t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zruxx_gj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_bvf_8d2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ye8adl7k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v2e7yf9e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "chkgz9tr",
            "name": "CCDData.inner",
            "description": "See `astropy.nddata.NDArithmeticMixin.subtract`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f233b895a418f2d9c5e9f9d05794a2ebdb1381c7edaaa5fa600b56581f4cf610",
            "fields": [
                {
                    "id": "l48ilv7n",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n597hciz",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "arbpgtr4",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ge_32twf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.inner",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.inner",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0tkd1me6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdwtu_ug",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ucgprfmx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9z47do8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fh8vr3xy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqgp5kax",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nefkhk1d",
            "name": "CCDData.convert_unit_to",
            "description": "Returns a new `NDData` object whose values have been converted\n    to a new unit.\n    \n    Parameters\n    ----------\n    unit : `astropy.units.UnitBase` instance or str\n        The unit to convert to.\n    \n    equivalencies : list of tuple\n       A list of equivalence pairs to try if the units are not\n       directly convertible.  See :ref:`astropy:unit_equivalencies`.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`\n        The resulting dataset\n    \n    Raises\n    ------\n    `~astropy.units.UnitsError`\n        If units are inconsistent.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "240a96233c6783a04899c89b9a5812ca7b3b141d30714f648448a39ed239cdf7",
            "fields": [
                {
                    "id": "u4u4s44m",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.ccddata.CCDData.convert_unit_to object",
                    "type": "Object:astropy.nddata.ccddata.CCDData",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q43jj999",
                    "encoding": "",
                    "name": "unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "The unit to convert to.",
                    "type": "astropy.units.UnitBase instance or str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "shh4qag8",
                    "encoding": "",
                    "name": "equivalencies",
                    "value": [],
                    "defaultValue": [],
                    "description": "A list of equivalence pairs to try if the units are not\ndirectly convertible.  See :ref:`astropy:unit_equivalencies`.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m9z_gzww",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.convert_unit_to",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.convert_unit_to",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymixtg1q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gwstf3oj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s2ndbaj6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iepn84lb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2kyj1yta",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qk06m5mb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jo3xk31y",
            "name": "CCDData.copy",
            "description": "Return a copy of the CCDData object.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "85d75b6bcbd9f722053ccd56868e104537a292707bd81c1d9c60584f614c3a38",
            "fields": [
                {
                    "id": "sz94jyat",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.ccddata.CCDData.copy object",
                    "type": "Object:astropy.nddata.ccddata.CCDData",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5hjcmf1f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.copy",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.copy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2ql3o6f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy_4sgji",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7cdch63k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_228t4wa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ze6e65_1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9t9o8ck_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "t8y2guie",
            "name": "CCDData.max",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d68d5ef2f580c3a2578a7488c0b6656398aba1c92399070ef032f438476749b",
            "fields": [
                {
                    "id": "hjbc5thp",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_d36ulu3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.max",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.max",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ewb3nyp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_6knl57",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i3hvjte8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5wqk8d9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "290f2ghs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9axhe9l",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "56plrsz_",
            "name": "CCDData.mean",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a0b0febfa504e4e3d6fd762e7d5e7480c30d55e12fa4564a42bedb54f3fd0643",
            "fields": [
                {
                    "id": "hdmujf6c",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0pjqwgr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.mean",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "obucs2s4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvgh00er",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4vxq8j30",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8ahkr76",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "famglp41",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "guzxwgwk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "v0keklj9",
            "name": "CCDData.min",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "98e7d77c03e0081afe930107b0b02d060f0b61512736a53eeefd94f410c494e2",
            "fields": [
                {
                    "id": "vz_w4fh_",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7iimm_93",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.min",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.min",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tkaxaotc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u00zowdb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vucrhal5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nnk6qf9u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zi2omnh0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "132cdirx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bd6p6o9w",
            "name": "CCDData.sum",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9d73edf6354fc8ca06285f64d2e3aedecdcbb48c651bf2de00bf150d93fc7d64",
            "fields": [
                {
                    "id": "0i2sfb8j",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wit3zaev",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.sum",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.sum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dixw6u2w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep1xth8y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p8cwxxrn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y675qe2y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zvm36oad",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f7upmij6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "i7gp1aec",
            "name": "CCDData.to_hdu",
            "description": "Creates an HDUList object from a CCDData object.\n    \n    Parameters\n    ----------\n    hdu_mask, hdu_uncertainty, hdu_flags, hdu_psf : str or None, optional\n        If it is a string append this attribute to the HDUList as\n        `~astropy.io.fits.ImageHDU` with the string as extension name.\n        Flags are not supported at this time. If ``None`` this attribute\n        is not appended.\n        Default is ``'MASK'`` for mask, ``'UNCERT'`` for uncertainty,\n        ``'PSFIMAGE'`` for psf, and `None` for flags.\n    \n    wcs_relax : bool\n        Value of the ``relax`` parameter to use in converting the WCS to a\n        FITS header using `~astropy.wcs.WCS.to_header`. The common\n        ``CTYPE`` ``RA---TAN-SIP`` and ``DEC--TAN-SIP`` requires\n        ``relax=True`` for the ``-SIP`` part of the ``CTYPE`` to be\n        preserved.\n    \n    key_uncertainty_type : str, optional\n        The header key name for the class name of the uncertainty (if any)\n        that is used to store the uncertainty type in the uncertainty hdu.\n        Default is ``UTYPE``.\n    \n        .. versionadded:: 3.1\n    \n    as_image_hdu : bool\n        If this option is `True`, the first item of the returned\n        `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead\n        of the default `~astropy.io.fits.PrimaryHDU`.\n    \n    Raises\n    ------\n    ValueError\n        - If ``self.mask`` is set but not a `numpy.ndarray`.\n        - If ``self.uncertainty`` is set but not a astropy uncertainty type.\n        - If ``self.uncertainty`` is set but has another unit then\n          ``self.data``.\n    \n    NotImplementedError\n        Saving flags is not supported.\n    \n    Returns\n    -------\n    hdulist : `~astropy.io.fits.HDUList`",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63121f5533c17be8c97775fb3ad2d473c5efb2af847fe309a2c3b5d984e80c00",
            "fields": [
                {
                    "id": "pjq8p8c5",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.ccddata.CCDData.to_hdu object",
                    "type": "Object:astropy.nddata.ccddata.CCDData",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bb5dqno4",
                    "encoding": "",
                    "name": "hdu_mask",
                    "value": "MASK",
                    "defaultValue": "MASK",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfsx4wc2",
                    "encoding": "",
                    "name": "hdu_uncertainty",
                    "value": "UNCERT",
                    "defaultValue": "UNCERT",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3obxgajc",
                    "encoding": "",
                    "name": "hdu_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b6j39mkk",
                    "encoding": "",
                    "name": "wcs_relax",
                    "value": true,
                    "defaultValue": true,
                    "description": "Value of the ``relax`` parameter to use in converting the WCS to a\nFITS header using `~astropy.wcs.WCS.to_header`. The common\n``CTYPE`` ``RA---TAN-SIP`` and ``DEC--TAN-SIP`` requires\n``relax=True`` for the ``-SIP`` part of the ``CTYPE`` to be\npreserved.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lcj44no2",
                    "encoding": "",
                    "name": "key_uncertainty_type",
                    "value": "UTYPE",
                    "defaultValue": "UTYPE",
                    "description": "The header key name for the class name of the uncertainty (if any)\nthat is used to store the uncertainty type in the uncertainty hdu.\nDefault is ``UTYPE``.\n\n.. versionadded:: 3.1",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_72ofhd",
                    "encoding": "",
                    "name": "as_image_hdu",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this option is `True`, the first item of the returned\n`~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead\nof the default `~astropy.io.fits.PrimaryHDU`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fb2kclq4",
                    "encoding": "",
                    "name": "hdu_psf",
                    "value": "PSFIMAGE",
                    "defaultValue": "PSFIMAGE",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wd5q730z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.CCDData.to_hdu",
                    "defaultValue": "astropy.nddata.ccddata.CCDData.to_hdu",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nj8ls1p0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4w9vrf3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k33dojma",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bk4oab0d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata.CCDData",
                    "defaultValue": "astropy.nddata.ccddata.CCDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jimt7g3n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d13bv0_w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xozgtzo1",
            "name": "Cutout2D.__init__",
            "description": "\nCreate a cutout object from a 2D array.\n    \n    The returned object will contain a 2D cutout array.  If\n    ``copy=False`` (default), the cutout array is a view into the\n    original ``data`` array, otherwise the cutout array will contain a\n    copy of the original data.\n    \n    If a `~astropy.wcs.WCS` object is input, then the returned object\n    will also contain a copy of the original WCS, but updated for the\n    cutout array.\n    \n    For example usage, see :ref:`astropy:cutout_images`.\n    \n    .. warning::\n    \n        The cutout WCS object does not currently handle cases where the\n        input WCS object contains distortion lookup tables described in\n        the `FITS WCS distortion paper\n        <https://www.atnf.csiro.au/people/mcalabre/WCS/dcs_20040422.pdf>`__.\n    \n    Parameters\n    ----------\n    data : ndarray\n        The 2D data array from which to extract the cutout array.\n    \n    position : tuple or `~astropy.coordinates.SkyCoord`\n        The position of the cutout array's center with respect to\n        the ``data`` array.  The position can be specified either as\n        a ``(x, y)`` tuple of pixel coordinates or a\n        `~astropy.coordinates.SkyCoord`, in which case ``wcs`` is a\n        required input.\n    \n    size : int, array-like, or `~astropy.units.Quantity`\n        The size of the cutout array along each axis.  If ``size``\n        is a scalar number or a scalar `~astropy.units.Quantity`,\n        then a square cutout of ``size`` will be created.  If\n        ``size`` has two elements, they should be in ``(ny, nx)``\n        order.  Scalar numbers in ``size`` are assumed to be in\n        units of pixels.  ``size`` can also be a\n        `~astropy.units.Quantity` object or contain\n        `~astropy.units.Quantity` objects.  Such\n        `~astropy.units.Quantity` objects must be in pixel or\n        angular units.  For all cases, ``size`` will be converted to\n        an integer number of pixels, rounding the nearest\n        integer.  See the ``mode`` keyword for additional details on\n        the final cutout size.\n    \n        .. note::\n            If ``size`` is in angular units, the cutout size is\n            converted to pixels using the pixel scales along each\n            axis of the image at the ``CRPIX`` location.  Projection\n            and other non-linear distortions are not taken into\n            account.\n    \n    wcs : `~astropy.wcs.WCS`, optional\n        A WCS object associated with the input ``data`` array.  If\n        ``wcs`` is not `None`, then the returned cutout object will\n        contain a copy of the updated WCS for the cutout data array.\n    \n    mode : {'trim', 'partial', 'strict'}, optional\n        The mode used for creating the cutout data array.  For the\n        ``'partial'`` and ``'trim'`` modes, a partial overlap of the\n        cutout array and the input ``data`` array is sufficient.\n        For the ``'strict'`` mode, the cutout array has to be fully\n        contained within the ``data`` array, otherwise an\n        `~astropy.nddata.utils.PartialOverlapError` is raised.   In\n        all modes, non-overlapping arrays will raise a\n        `~astropy.nddata.utils.NoOverlapError`.  In ``'partial'``\n        mode, positions in the cutout array that do not overlap with\n        the ``data`` array will be filled with ``fill_value``.  In\n        ``'trim'`` mode only the overlapping elements are returned,\n        thus the resulting cutout array may be smaller than the\n        requested ``shape``.\n    \n    fill_value : float or int, optional\n        If ``mode='partial'``, the value to fill pixels in the\n        cutout array that do not overlap with the input ``data``.\n        ``fill_value`` must have the same ``dtype`` as the input\n        ``data`` array.\n    \n    copy : bool, optional\n        If `False` (default), then the cutout data will be a view\n        into the original ``data`` array.  If `True`, then the\n        cutout data will hold a copy of the original ``data`` array.\n    \n    Attributes\n    ----------\n    data : 2D `~numpy.ndarray`\n        The 2D cutout array.\n    \n    shape : (2,) tuple\n        The ``(ny, nx)`` shape of the cutout array.\n    \n    shape_input : (2,) tuple\n        The ``(ny, nx)`` shape of the input (original) array.\n    \n    input_position_cutout : (2,) tuple\n        The (unrounded) ``(x, y)`` position with respect to the cutout\n        array.\n    \n    input_position_original : (2,) tuple\n        The original (unrounded) ``(x, y)`` input position (with respect\n        to the original array).\n    \n    slices_original : (2,) tuple of slice object\n        A tuple of slice objects for the minimal bounding box of the\n        cutout with respect to the original array.  For\n        ``mode='partial'``, the slices are for the valid (non-filled)\n        cutout values.\n    \n    slices_cutout : (2,) tuple of slice object\n        A tuple of slice objects for the minimal bounding box of the\n        cutout with respect to the cutout array.  For\n        ``mode='partial'``, the slices are for the valid (non-filled)\n        cutout values.\n    \n    xmin_original, ymin_original, xmax_original, ymax_original : float\n        The minimum and maximum ``x`` and ``y`` indices of the minimal\n        rectangular region of the cutout array with respect to the\n        original array.  For ``mode='partial'``, the bounding box\n        indices are for the valid (non-filled) cutout values.  These\n        values are the same as those in `bbox_original`.\n    \n    xmin_cutout, ymin_cutout, xmax_cutout, ymax_cutout : float\n        The minimum and maximum ``x`` and ``y`` indices of the minimal\n        rectangular region of the cutout array with respect to the\n        cutout array.  For ``mode='partial'``, the bounding box indices\n        are for the valid (non-filled) cutout values.  These values are\n        the same as those in `bbox_cutout`.\n    \n    wcs : `~astropy.wcs.WCS` or None\n        A WCS object associated with the cutout array if a ``wcs``\n        was input.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata.utils import Cutout2D\n    >>> from astropy import units as u\n    >>> data = np.arange(20.).reshape(5, 4)\n    >>> cutout1 = Cutout2D(data, (2, 2), (3, 3))\n    >>> print(cutout1.data)  # doctest: +FLOAT_CMP\n    [[ 5.  6.  7.]\n     [ 9. 10. 11.]\n     [13. 14. 15.]]\n    \n    >>> print(cutout1.center_original)\n    (2.0, 2.0)\n    >>> print(cutout1.center_cutout)\n    (1.0, 1.0)\n    >>> print(cutout1.origin_original)\n    (1, 1)\n    \n    >>> cutout2 = Cutout2D(data, (2, 2), 3)\n    >>> print(cutout2.data)  # doctest: +FLOAT_CMP\n    [[ 5.  6.  7.]\n     [ 9. 10. 11.]\n     [13. 14. 15.]]\n    \n    >>> size = u.Quantity([3, 3], u.pixel)\n    >>> cutout3 = Cutout2D(data, (0, 0), size)\n    >>> print(cutout3.data)  # doctest: +FLOAT_CMP\n    [[0. 1.]\n     [4. 5.]]\n    \n    >>> cutout4 = Cutout2D(data, (0, 0), (3 * u.pixel, 3))\n    >>> print(cutout4.data)  # doctest: +FLOAT_CMP\n    [[0. 1.]\n     [4. 5.]]\n    \n    >>> cutout5 = Cutout2D(data, (0, 0), (3, 3), mode='partial')\n    >>> print(cutout5.data)  # doctest: +FLOAT_CMP\n    [[nan nan nan]\n     [nan  0.  1.]\n     [nan  4.  5.]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "14bb02517018d5012bc60358233ef8d71edd99c80a50d6d4e720ad20b51b9151",
            "fields": [
                {
                    "id": "gu1lr37d",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Cutout2D object",
                    "type": "Object:astropy.nddata.utils.Cutout2D",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imo8f5h8",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The 2D cutout array.",
                    "type": "2D numpy.ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d8ncrp_t",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position of the cutout array's center with respect to\nthe ``data`` array.  The position can be specified either as\na ``(x, y)`` tuple of pixel coordinates or a\n`~astropy.coordinates.SkyCoord`, in which case ``wcs`` is a\nrequired input.",
                    "type": "tuple or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tg54neeb",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the cutout array along each axis.  If ``size``\nis a scalar number or a scalar `~astropy.units.Quantity`,\nthen a square cutout of ``size`` will be created.  If\n``size`` has two elements, they should be in ``(ny, nx)``\norder.  Scalar numbers in ``size`` are assumed to be in\nunits of pixels.  ``size`` can also be a\n`~astropy.units.Quantity` object or contain\n`~astropy.units.Quantity` objects.  Such\n`~astropy.units.Quantity` objects must be in pixel or\nangular units.  For all cases, ``size`` will be converted to\nan integer number of pixels, rounding the nearest\ninteger.  See the ``mode`` keyword for additional details on\nthe final cutout size.\n\n.. note::\n    If ``size`` is in angular units, the cutout size is\n    converted to pixels using the pixel scales along each\n    axis of the image at the ``CRPIX`` location.  Projection\n    and other non-linear distortions are not taken into\n    account.",
                    "type": "int, array-like, or astropy.units.Quantity",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c8zb3r7j",
                    "encoding": "",
                    "name": "wcs",
                    "value": "",
                    "defaultValue": "",
                    "description": "A WCS object associated with the cutout array if a ``wcs``\nwas input.",
                    "type": "astropy.wcs.WCS or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tko2_zsp",
                    "encoding": "",
                    "name": "mode",
                    "value": "trim",
                    "defaultValue": "trim",
                    "description": "The mode used for creating the cutout data array.  For the\n``'partial'`` and ``'trim'`` modes, a partial overlap of the\ncutout array and the input ``data`` array is sufficient.\nFor the ``'strict'`` mode, the cutout array has to be fully\ncontained within the ``data`` array, otherwise an\n`~astropy.nddata.utils.PartialOverlapError` is raised.   In\nall modes, non-overlapping arrays will raise a\n`~astropy.nddata.utils.NoOverlapError`.  In ``'partial'``\nmode, positions in the cutout array that do not overlap with\nthe ``data`` array will be filled with ``fill_value``.  In\n``'trim'`` mode only the overlapping elements are returned,\nthus the resulting cutout array may be smaller than the\nrequested ``shape``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r3f226j9",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If ``mode='partial'``, the value to fill pixels in the\ncutout array that do not overlap with the input ``data``.\n``fill_value`` must have the same ``dtype`` as the input\n``data`` array.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qh1y1h1u",
                    "encoding": "",
                    "name": "copy",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `False` (default), then the cutout data will be a view\ninto the original ``data`` array.  If `True`, then the\ncutout data will hold a copy of the original ``data`` array.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "amqn8pnx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.Cutout2D.__init__",
                    "defaultValue": "astropy.nddata.utils.Cutout2D.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xacd2xxj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kksg2s6w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y3yc3wgd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mr__vx_f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils.Cutout2D",
                    "defaultValue": "astropy.nddata.utils.Cutout2D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5gy7o00_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmnbfnql",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "mkfh2lhi",
            "name": "Cutout2D.plot_on_original",
            "description": "Plot the cutout region on a matplotlib Axes instance.\n    \n    Parameters\n    ----------\n    ax : `matplotlib.axes.Axes` instance, optional\n        If `None`, then the current `matplotlib.axes.Axes` instance\n        is used.\n    \n    fill : bool, optional\n        Set whether to fill the cutout patch.  The default is\n        `False`.\n    \n    kwargs : optional\n        Any keyword arguments accepted by `matplotlib.patches.Patch`.\n    \n    Returns\n    -------\n    ax : `matplotlib.axes.Axes` instance\n        The matplotlib Axes instance constructed in the method if\n        ``ax=None``.  Otherwise the output ``ax`` is the same as the\n        input ``ax``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a0cb4a54d04d8a67e8261050e5b04714e9ddccfbb234c7e716d22d067e27754d",
            "fields": [
                {
                    "id": "exbtdz7t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.utils.Cutout2D.plot_on_original object",
                    "type": "Object:astropy.nddata.utils.Cutout2D",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbty4xny",
                    "encoding": "",
                    "name": "ax",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `None`, then the current `matplotlib.axes.Axes` instance\nis used.",
                    "type": "matplotlib.axes.Axes instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og9tgc91",
                    "encoding": "",
                    "name": "fill",
                    "value": false,
                    "defaultValue": false,
                    "description": "Set whether to fill the cutout patch.  The default is\n`False`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ah8uvci0",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any keyword arguments accepted by `matplotlib.patches.Patch`.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aztuphd6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.Cutout2D.plot_on_original",
                    "defaultValue": "astropy.nddata.utils.Cutout2D.plot_on_original",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lakgh63f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jgfo00ye",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j8efwdc9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "efrxf9a2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils.Cutout2D",
                    "defaultValue": "astropy.nddata.utils.Cutout2D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aziuu4zf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "um5in5x7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zudvebed",
            "name": "Cutout2D.to_cutout_position",
            "description": "Convert an ``(x, y)`` position in the original large array to\n    the ``(x, y)`` position in the cutout array.\n    \n    Parameters\n    ----------\n    original_position : tuple\n        The ``(x, y)`` pixel position in the original large array.\n    \n    Returns\n    -------\n    cutout_position : tuple\n        The corresponding ``(x, y)`` pixel position in the cutout\n        array.\n    \n    See Also\n    --------\n    to_original_position",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0b87667e3e87bf3e78a3e537e416785a66f8fc820460106310bd60148260854c",
            "fields": [
                {
                    "id": "mybv4i0f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.utils.Cutout2D.to_cutout_position object",
                    "type": "Object:astropy.nddata.utils.Cutout2D",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cj2wi86y",
                    "encoding": "",
                    "name": "original_position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The ``(x, y)`` pixel position in the original large array.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fft4qex4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.Cutout2D.to_cutout_position",
                    "defaultValue": "astropy.nddata.utils.Cutout2D.to_cutout_position",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9d0wz7n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ys4hcf5j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fvoc57et",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhaze802",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils.Cutout2D",
                    "defaultValue": "astropy.nddata.utils.Cutout2D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1vv8o_2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xs3egkut",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "sggz05xi",
            "name": "Cutout2D.to_original_position",
            "description": "Convert an ``(x, y)`` position in the cutout array to the original\n    ``(x, y)`` position in the original large array.\n    \n    Parameters\n    ----------\n    cutout_position : tuple\n        The ``(x, y)`` pixel position in the cutout array.\n    \n    Returns\n    -------\n    original_position : tuple\n        The corresponding ``(x, y)`` pixel position in the original\n        large array.\n    \n    See Also\n    --------\n    to_cutout_position",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "46d524c6a14ba1e286b8d82ce1e49448c9f67986c4179866d63f18182eaed850",
            "fields": [
                {
                    "id": "3jjx1k34",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.utils.Cutout2D.to_original_position object",
                    "type": "Object:astropy.nddata.utils.Cutout2D",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cf3j_d5t",
                    "encoding": "",
                    "name": "cutout_position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The ``(x, y)`` pixel position in the cutout array.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8_4n2ac",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.Cutout2D.to_original_position",
                    "defaultValue": "astropy.nddata.utils.Cutout2D.to_original_position",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ylh6n5p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1d5up0g7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "780tsw02",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhqkp03d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils.Cutout2D",
                    "defaultValue": "astropy.nddata.utils.Cutout2D",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9uu6uve",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7glheiw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ml1q_8fb",
            "name": "FlagCollection.__init__",
            "description": "\nThe purpose of this class is to provide a dictionary for\n    containing arrays of flags for the `NDData` class. Flags should be\n    stored in Numpy arrays that have the same dimensions as the parent\n    data, so the `FlagCollection` class adds shape checking to a\n    dictionary.\n    \n    The `FlagCollection` should be initialized like a\n    dict, but with the addition of a ``shape=``\n    keyword argument used to pass the NDData shape.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e8ff8c06c272e559b00a30d1cc76026bf5f03121de80ed2d203eff6db53f6166",
            "fields": [
                {
                    "id": "ag5ns7hx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to FlagCollection object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5gc_f42a",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3btu1yaq",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8wwvpdi_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.__init__",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kyd9732",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zvwsxmp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "icr3ec63",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "un8kgnri",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jrb5a_kp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7s7f8ziu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "08jfasut",
            "name": "FlagCollection.clear",
            "description": "D.clear() -> None.  Remove all items from D.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "23786bd3effae8cae6b33e8d81bb32cb0e343f025f2b4ec583aff2a6f36cdecd",
            "fields": [
                {
                    "id": "poypa4qu",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.clear object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gtt3lipm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.clear",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.clear",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndubg2vl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q90h0mmj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6svuq710",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7ppxki2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e2cp2_aa",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yt2_r8x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "tuz_jtn8",
            "name": "FlagCollection.copy",
            "description": "D.copy() -> a shallow copy of D",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e20a2a833c579b450b00c6bcc1ba4a503814ca1c1169bb8392efe1849567a93b",
            "fields": [
                {
                    "id": "090af2ka",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.copy object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lb136892",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.copy",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.copy",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "42ng79k4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfubg67u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s54t4gmx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3iovez_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "800lia4h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6lsk65a1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_fdd12k0",
            "name": "FlagCollection.fromkeys",
            "description": "Create a new dictionary with keys from iterable and values set to value.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f2666b8dbab933e2d3e7bac4ad43b43c29133228f43b1c67d8140c99a9d128bd",
            "fields": [
                {
                    "id": "jz8suwj9",
                    "encoding": "",
                    "name": "iterable",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "st2daouh",
                    "encoding": "",
                    "name": "value",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "4k0tj_bp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.fromkeys",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.fromkeys",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yovx_coi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y43qi0bt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tktyskfc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pj5muk1d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2yjpmkm8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgu283c2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hpkke39i",
            "name": "FlagCollection.get",
            "description": "Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2bdf9066d411304428bc60e1216a6e09fb1c5c928dca599e14981657a9613e30",
            "fields": [
                {
                    "id": "j46z08n8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.get object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "byfjbizl",
                    "encoding": "",
                    "name": "key",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "da21079f",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "t7vsjjqp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.get",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.get",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "036c9qxe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7y9lfjzl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dias06an",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mbit4m1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yiwcousb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "onbxxtnz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xvzxowyx",
            "name": "FlagCollection.items",
            "description": "D.items() -> a set-like object providing a view on D's items",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "13c677aace6ed3a83e7a795d293c24ef7d3dcd1759534eba290c0af8c005b498",
            "fields": [
                {
                    "id": "baz_06ik",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.items object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhbpc98q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.items",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.items",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1umo2bp8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l48erzns",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qz1hxjk1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1d92h3jl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s1syfx4m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_pj_rde1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7yihlb0a",
            "name": "FlagCollection.keys",
            "description": "D.keys() -> a set-like object providing a view on D's keys",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "975026e6ab40d3be14e1b6e98c7b8c616c42cca9f20be15718c3dc9066c552d0",
            "fields": [
                {
                    "id": "z7lj76bg",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.keys object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njo9d4pw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.keys",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.keys",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bpdwnk_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qpi7pdix",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t31dg3g8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vrbs50j_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "91dzta3k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ol6x9sd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pq3l3_4a",
            "name": "FlagCollection.pop",
            "description": "If the key is not found, return the default if given; otherwise,\nraise a KeyError.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3dcfd9f77c1294276242c5d2500732b43205188f9e2dbb672daaa846f6d4f49f",
            "fields": [
                {
                    "id": "0gtaar59",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.pop object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js91cs8e",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "[",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nitbutw_",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2ksn7le",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.pop",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.pop",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_pt82ola",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r73gawpf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_rzkhfb8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nt7aheyx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpd1_tz5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5aelamp0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qahmfu78",
            "name": "FlagCollection.popitem",
            "description": "Remove and return a (key, value) pair as a 2-tuple.\n    \n    Pairs are returned in LIFO (last-in, first-out) order.\n    Raises KeyError if the dict is empty.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "79fc5c738820889f27f0fc87c9ffd47dd36baecc97c660f2f1c5f239b23482f2",
            "fields": [
                {
                    "id": "fzee4ms4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.popitem object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "w63bf7_s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.popitem",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.popitem",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt581w1e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2nvjo9us",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "05is4uqv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "anfw2if2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8qfo0ews",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4gwgn48c",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "966uu43z",
            "name": "FlagCollection.setdefault",
            "description": "Insert key with a value of default if key is not in the dictionary.\n    \n    Return the value for key if key is in the dictionary, else default.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "50f9b113eeea8c4b9f08bf0f8b574bc6b1c81a2c980c0c4570c6206f1ca912cf",
            "fields": [
                {
                    "id": "flh4kc2q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.setdefault object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "wv73w_58",
                    "encoding": "",
                    "name": "key",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "43dbf1tx",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "ei15g8dy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.setdefault",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.setdefault",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4jmc_s9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4peetip9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d9cu06d9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pnngqiv1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upj2nr22",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x8i0x3t4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cwn7fza8",
            "name": "FlagCollection.update",
            "description": "D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F:  D[k] = F[k]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "801080164e5ef58c2c5875fb7052dc42dfa2de8b34dd892a6dea89ea6a843886",
            "fields": [
                {
                    "id": "qwq5d0ur",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.update object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i129cy0e",
                    "encoding": "",
                    "name": "E",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ddxjjh9r",
                    "encoding": "",
                    "name": "F",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yag7znfz",
                    "encoding": "",
                    "name": "None.",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Update",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89ml6f9s",
                    "encoding": "",
                    "name": "D",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "from",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2uqmkm7z",
                    "encoding": "",
                    "name": "dict",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qqbtqcl3",
                    "encoding": "",
                    "name": "iterable",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "E",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhvznjsv",
                    "encoding": "",
                    "name": "and",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "has",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xc6d75y1",
                    "encoding": "",
                    "name": "If",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "E",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1l1of5oo",
                    "encoding": "",
                    "name": "is",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "present",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xxpqis8",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": ".keys",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m_x3w2w4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.update",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.update",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2tyythna",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kcwscv05",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "x_nu0bvx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ae4no9p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "79gx86cu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7s0vqvpo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "39qhplf0",
            "name": "FlagCollection.values",
            "description": "D.values() -> an object providing a view on D's values",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "95431f92357ec9cc72ac5ca4ddd6ec07e435f99b9c60b0d5ff01d7e06cbead95",
            "fields": [
                {
                    "id": "e09fv8vi",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.flag_collection.FlagCollection.values object",
                    "type": "Object:astropy.nddata.flag_collection.FlagCollection",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5l5dzlc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection.values",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection.values",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h48yqnug",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jr6h_aqb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a_tewnlh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ua_9n8rl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.flag_collection.FlagCollection",
                    "defaultValue": "astropy.nddata.flag_collection.FlagCollection",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1uqr1tm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9hyc0wq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "l4qwgdnt",
            "name": "IncompatibleUncertaintiesException.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b80f645040a61499bcc7c1f953d6eac35720428b354ffc99a478731e8ead25da",
            "fields": [
                {
                    "id": "2t84mzhk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.IncompatibleUncertaintiesException.with_traceback object",
                    "type": "Object:astropy.nddata.nduncertainty.IncompatibleUncertaintiesException",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kmgv83sa",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5hd3s9u4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.IncompatibleUncertaintiesException.with_traceback",
                    "defaultValue": "astropy.nddata.nduncertainty.IncompatibleUncertaintiesException.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iu5qr2fq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y7f2r0qb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yten80m1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bpr34lz7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.IncompatibleUncertaintiesException",
                    "defaultValue": "astropy.nddata.nduncertainty.IncompatibleUncertaintiesException",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2q4ql26c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1cpw8kea",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "mjeadgps",
            "name": "InvalidBitFlag.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c33e8402ed9aa59f684d58eea9bae15c8252ea9d368e398d565441657e3cdd48",
            "fields": [
                {
                    "id": "tbn6gi7w",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.bitmask.InvalidBitFlag.with_traceback object",
                    "type": "Object:astropy.nddata.bitmask.InvalidBitFlag",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aj8y2sdm",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06yj_5x4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.bitmask.InvalidBitFlag.with_traceback",
                    "defaultValue": "astropy.nddata.bitmask.InvalidBitFlag.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vldkclx6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_r1sa4m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rvqi5934",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e181i3c4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.bitmask.InvalidBitFlag",
                    "defaultValue": "astropy.nddata.bitmask.InvalidBitFlag",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohozdk0z",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nftgpl2m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d6ug5xkf",
            "name": "InverseVariance.propagate",
            "description": "Calculate the resulting uncertainty given an operation on the data.\n    \n    .. versionadded:: 1.2\n    \n    Parameters\n    ----------\n    operation : callable\n        The operation that is performed on the `NDData`. Supported are\n        `numpy.add`, `numpy.subtract`, `numpy.multiply` and\n        `numpy.true_divide` (or `numpy.divide`).\n    \n    other_nddata : `NDData` instance\n        The second operand in the arithmetic operation.\n    \n    result_data : `~astropy.units.Quantity` or ndarray\n        The result of the arithmetic operations on the data.\n    \n    correlation : `numpy.ndarray` or number\n        The correlation (rho) is defined between the uncertainties in\n        sigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\n        uncorrelated operands.\n    \n    axis : int or tuple of ints, optional\n        Axis over which to perform a collapsing operation.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        Another instance of the same `NDUncertainty` subclass containing\n        the uncertainty of the result.\n    \n    Raises\n    ------\n    ValueError\n        If the ``operation`` is not supported or if correlation is not zero\n        but the subclass does not support correlated uncertainties.\n    \n    Notes\n    -----\n    First this method checks if a correlation is given and the subclass\n    implements propagation with correlated uncertainties.\n    Then the second uncertainty is converted (or an Exception is raised)\n    to the same class in order to do the propagation.\n    Then the appropriate propagation method is invoked and the result is\n    returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "744393496d20608ff7eef200c0092ce9e4153fd11e21ccc33e2f0ad5474e487e",
            "fields": [
                {
                    "id": "p1pva0o_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.InverseVariance.propagate object",
                    "type": "Object:astropy.nddata.nduncertainty.InverseVariance",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggp6n93c",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The operation that is performed on the `NDData`. Supported are\n`numpy.add`, `numpy.subtract`, `numpy.multiply` and\n`numpy.true_divide` (or `numpy.divide`).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wq7f5vr",
                    "encoding": "",
                    "name": "other_nddata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second operand in the arithmetic operation.",
                    "type": "NDData instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aa4cdy2d",
                    "encoding": "",
                    "name": "result_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The result of the arithmetic operations on the data.",
                    "type": "astropy.units.Quantity or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mobz_44e",
                    "encoding": "",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The correlation (rho) is defined between the uncertainties in\nsigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\nuncorrelated operands.",
                    "type": "numpy.ndarray or number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_e381kw",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis over which to perform a collapsing operation.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_h0hpfh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.InverseVariance.propagate",
                    "defaultValue": "astropy.nddata.nduncertainty.InverseVariance.propagate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ix014piy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cubz2aed",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bh8v0k16",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pkovb2al",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.InverseVariance",
                    "defaultValue": "astropy.nddata.nduncertainty.InverseVariance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "orui3st5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4vasc2u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "27b7h42x",
            "name": "InverseVariance.represent_as",
            "description": "Convert this uncertainty to a different uncertainty type.\n    \n    Parameters\n    ----------\n    other_uncert : `NDUncertainty` subclass\n        The `NDUncertainty` subclass to convert to.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        An instance of ``other_uncert`` subclass containing the uncertainty\n        converted to the new uncertainty type.\n    \n    Raises\n    ------\n    TypeError\n        If either the initial or final subclasses do not support\n        conversion, a `TypeError` is raised.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "75954ae1da683943aad3ed6b11630dabc5612f7a397ee8c1f0196fa749bc34af",
            "fields": [
                {
                    "id": "1l5r8m55",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.InverseVariance.represent_as object",
                    "type": "Object:astropy.nddata.nduncertainty.InverseVariance",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrmebnd8",
                    "encoding": "",
                    "name": "other_uncert",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `NDUncertainty` subclass to convert to.",
                    "type": "NDUncertainty subclass",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zljt9gp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.InverseVariance.represent_as",
                    "defaultValue": "astropy.nddata.nduncertainty.InverseVariance.represent_as",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_420jpb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "of8w0jol",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bfe2837m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x37f75ks",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.InverseVariance",
                    "defaultValue": "astropy.nddata.nduncertainty.InverseVariance",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ifa29pdm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6lov98z8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yvhjwvck",
            "name": "MissingDataAssociationException.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "07c496a6228060589c2c1923a781f801b79e2b4fd54e9e1bac4b58a3fea0da86",
            "fields": [
                {
                    "id": "7afhi21a",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.MissingDataAssociationException.with_traceback object",
                    "type": "Object:astropy.nddata.nduncertainty.MissingDataAssociationException",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_22ora8",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aq7ieuib",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.MissingDataAssociationException.with_traceback",
                    "defaultValue": "astropy.nddata.nduncertainty.MissingDataAssociationException.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h83qd7jq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hypjxafw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m184x5r5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqidujpj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.MissingDataAssociationException",
                    "defaultValue": "astropy.nddata.nduncertainty.MissingDataAssociationException",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uuup0vvj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u18i91yr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "e77bka9j",
            "name": "NDArithmeticMixin.__init__",
            "description": "\nMixin class to add arithmetic to an NDData object.\n    \n    When subclassing, be sure to list the superclasses in the correct order\n    so that the subclass sees NDData as the main superclass. See\n    `~astropy.nddata.NDDataArray` for an example.\n    \n    Notes\n    -----\n    This class only aims at covering the most common cases so there are certain\n    restrictions on the saved attributes::\n    \n        - ``uncertainty`` : has to be something that has a `NDUncertainty`-like\n          interface for uncertainty propagation\n        - ``mask`` : has to be something that can be used by a bitwise ``or``\n          operation.\n        - ``wcs`` : has to implement a way of comparing with ``=`` to allow\n          the operation.\n    \n    But there is a workaround that allows to disable handling a specific\n    attribute and to simply set the results attribute to ``None`` or to\n    copy the existing attribute (and neglecting the other).\n    For example for uncertainties not representing an `NDUncertainty`-like\n    interface you can alter the ``propagate_uncertainties`` parameter in\n    :meth:`NDArithmeticMixin.add`. ``None`` means that the result will have no\n    uncertainty, ``False`` means it takes the uncertainty of the first operand\n    (if this does not exist from the second operand) as the result's\n    uncertainty. This behavior is also explained in the docstring for the\n    different arithmetic operations.\n    \n    Decomposing the units is not attempted, mainly due to the internal mechanics\n    of `~astropy.units.Quantity`, so the resulting data might have units like\n    ``km/m`` if you divided for example 100km by 5m. So this Mixin has adopted\n    this behavior.\n    \n    Examples\n    --------\n    Using this Mixin with `~astropy.nddata.NDData`:\n    \n        >>> from astropy.nddata import NDData, NDArithmeticMixin\n        >>> class NDDataWithMath(NDArithmeticMixin, NDData):\n        ...     pass\n    \n    Using it with one operand on an instance::\n    \n        >>> ndd = NDDataWithMath(100)\n        >>> ndd.add(20)\n        NDDataWithMath(120)\n    \n    Using it with two operand on an instance::\n    \n        >>> ndd = NDDataWithMath(-4)\n        >>> ndd.divide(1, ndd)\n        NDDataWithMath(-0.25)\n    \n    Using it as classmethod requires two operands::\n    \n        >>> NDDataWithMath.subtract(5, 4)\n        NDDataWithMath(1)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1f113328c0bce194b7342def840150d525c67627e59ffa23cbdd7680e7af9fad",
            "fields": [
                {
                    "id": "cw5tkjtm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDArithmeticMixin object",
                    "type": "Object:astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "pi0lh5gc",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vti684j_",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ck09xv2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.__init__",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fsq5oyf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0aw7los",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wnthk46e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e3k18uyk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a7wr14qc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjqfcmqe",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4jj5pk07",
            "name": "NDArithmeticMixin.add",
            "description": "Performs addition by evaluating ``self`` + ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` + ``operand``.\n        If ``operand2`` is given it will perform ``operand`` + ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "377bcda671f80efb41eb66742926e7643376d341999838e70dd7a46f47c83080",
            "fields": [
                {
                    "id": "vsepsmcq",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fxolj92c",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "21e0_rwm",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdla_vgx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.add",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.add",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9f353na",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8cxoucmr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2jfmfzwc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qcerjr7w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pd4rm7x1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmpygde9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ljprbrcs",
            "name": "NDArithmeticMixin.divide",
            "description": "Performs division by evaluating ``self`` / ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` / ``operand``.\n        If ``operand2`` is given it will perform ``operand`` / ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "89b81439b97639ccaa6c6e909a842859380979188ea6c1882c622aaf698d3133",
            "fields": [
                {
                    "id": "5f2480jw",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1iad71f1",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33ov5b43",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j716olru",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.divide",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.divide",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hpucle0j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pc1orllz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3v8aa5hs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29ivr0hw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0pll2kcq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20ib6i50",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zcbtpm8q",
            "name": "NDArithmeticMixin.max",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d219ce089281a5d4f4d4674e63c627e255eded88aff2a6d8d15a76075f2ca41d",
            "fields": [
                {
                    "id": "c3i0_kqo",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p5xsd6uy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.max",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.max",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c853a7pe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3bqp5rm3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yrg35kfo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cq1lx_ge",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3vge7u16",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_gokl71",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ne69tkg6",
            "name": "NDArithmeticMixin.mean",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb3813c494a67eaf8e31ccea55ac640c041ea0813be50701a1db45ec583dcd82",
            "fields": [
                {
                    "id": "yfrl9v0d",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4x5xi225",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.mean",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3yqnca3b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reg_nswq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5vw92abe",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_szv1lq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgx3__nx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sydfa57s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "oz_5ysq8",
            "name": "NDArithmeticMixin.min",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a4e0280ec95af36a3363fad7af661d2b0e7b96ee368486478e96a3d39cb44dc1",
            "fields": [
                {
                    "id": "sbkp4hzi",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "up81qrgh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.min",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.min",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8jo73nx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vafci9j5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b5lgo7hy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jm15oq1v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkqzn6m1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cysoo40_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "naweadmi",
            "name": "NDArithmeticMixin.multiply",
            "description": "Performs multiplication by evaluating ``self`` * ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` * ``operand``.\n        If ``operand2`` is given it will perform ``operand`` * ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dbb14290d1917c53e0e70e875121b3dd33ee9c0ed625e4a8376a7560a3de2fcf",
            "fields": [
                {
                    "id": "m0e468mk",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fi3y7vod",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3r56jzi1",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_9avghz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.multiply",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.multiply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bie005yf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sxlsbnr5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rxgx1krl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgj6kglv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agp4qvp2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dw9bw8h_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ck_udkfz",
            "name": "NDArithmeticMixin.subtract",
            "description": "Performs subtraction by evaluating ``self`` - ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` - ``operand``.\n        If ``operand2`` is given it will perform ``operand`` - ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6daace84c58ca95cf9ef45259208a4d1d110e21afed3539d024f3e3c0bb9a5cb",
            "fields": [
                {
                    "id": "eayetvv5",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9nn5q8w",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i82momml",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ap5h162",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.subtract",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.subtract",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vuu12214",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2i0dtkx1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k2q7t6hz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qk4vtusp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ur2su0y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48n9yfa0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "appurt5_",
            "name": "NDArithmeticMixin.sum",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e8f8afb7bc423b192f83cbd2d34cfcbb34a426256df69cafabfe1dd9b5752d95",
            "fields": [
                {
                    "id": "9zift8ac",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3d__zc5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.sum",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin.sum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "slyihq4x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q7eiu0u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "325_uoep",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgps9nvh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "defaultValue": "astropy.nddata.mixins.ndarithmetic.NDArithmeticMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5z9c1x7h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozrmwy96",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "47rblrvz",
            "name": "NDData.__init__",
            "description": "\nA container for `numpy.ndarray`-based datasets, using the\n    `~astropy.nddata.NDDataBase` interface.\n    \n    The key distinction from raw `numpy.ndarray` is the presence of\n    additional metadata such as uncertainty, mask, unit, a coordinate system\n    and/or a dictionary containing further meta information. This class *only*\n    provides a container for *storing* such datasets. For further functionality\n    take a look at the ``See also`` section.\n    \n    See also: https://docs.astropy.org/en/stable/nddata/\n    \n    Parameters\n    ----------\n    data : `numpy.ndarray`-like or `NDData`-like\n        The dataset.\n    \n    uncertainty : any type, optional\n        Uncertainty in the dataset.\n        Should have an attribute ``uncertainty_type`` that defines what kind of\n        uncertainty is stored, for example ``\"std\"`` for standard deviation or\n        ``\"var\"`` for variance. A metaclass defining such an interface is\n        `NDUncertainty` - but isn't mandatory. If the uncertainty has no such\n        attribute the uncertainty is stored as `UnknownUncertainty`.\n        Defaults to ``None``.\n    \n    mask : any type, optional\n        Mask for the dataset. Masks should follow the ``numpy`` convention that\n        **valid** data points are marked by ``False`` and **invalid** ones with\n        ``True``.\n        Defaults to ``None``.\n    \n    wcs : any type, optional\n        World coordinate system (WCS) for the dataset.\n        Default is ``None``.\n    \n    meta : `dict`-like object, optional\n        Additional meta information about the dataset. If no meta is provided\n        an empty dict is created.\n        Default is ``None``.\n    \n    unit : unit-like, optional\n        Unit for the dataset. Strings that can be converted to a\n        `~astropy.units.Unit` are allowed.\n        Default is ``None``.\n    \n    copy : `bool`, optional\n        Indicates whether to save the arguments as copy. ``True`` copies\n        every attribute before saving it while ``False`` tries to save every\n        parameter as reference.\n        Note however that it is not always possible to save the input as\n        reference.\n        Default is ``False``.\n    \n        .. versionadded:: 1.2\n    \n    psf : `numpy.ndarray` or None, optional\n        Image representation of the PSF. In order for convolution to be flux-\n        preserving, this should generally be normalized to sum to unity.\n    \n    Raises\n    ------\n    TypeError\n        In case ``data`` or ``meta`` don't meet the restrictions.\n    \n    Notes\n    -----\n    Each attribute can be accessed through the homonymous instance attribute:\n    ``data`` in a `NDData` object can be accessed through the `data`\n    attribute::\n    \n        >>> from astropy.nddata import NDData\n        >>> nd = NDData([1,2,3])\n        >>> nd.data\n        array([1, 2, 3])\n    \n    Given a conflicting implicit and an explicit parameter during\n    initialization, for example the ``data`` is a `~astropy.units.Quantity` and\n    the unit parameter is not ``None``, then the implicit parameter is replaced\n    (without conversion) by the explicit one and a warning is issued::\n    \n        >>> import numpy as np\n        >>> import astropy.units as u\n        >>> q = np.array([1,2,3,4]) * u.m\n        >>> nd2 = NDData(q, unit=u.cm)\n        INFO: overwriting Quantity's current unit with specified unit. [astropy.nddata.nddata]\n        >>> nd2.data  # doctest: +FLOAT_CMP\n        array([100., 200., 300., 400.])\n        >>> nd2.unit\n        Unit(\"cm\")\n    \n    See Also\n    --------\n    NDDataRef\n    NDDataArray",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c34be345af897a718652b25ba4d01e246391c00b153e0f6ada107402da46104c",
            "fields": [
                {
                    "id": "2hi8sfpq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDData object",
                    "type": "Object:astropy.nddata.nddata.NDData",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yi8qgnb1",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The dataset.",
                    "type": "numpy.ndarray-like or NDData-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e226jgw9",
                    "encoding": "",
                    "name": "uncertainty",
                    "value": "",
                    "defaultValue": "",
                    "description": "Uncertainty in the dataset.\nShould have an attribute ``uncertainty_type`` that defines what kind of\nuncertainty is stored, for example ``\"std\"`` for standard deviation or\n``\"var\"`` for variance. A metaclass defining such an interface is\n`NDUncertainty` - but isn't mandatory. If the uncertainty has no such\nattribute the uncertainty is stored as `UnknownUncertainty`.\nDefaults to ``None``.",
                    "type": "any type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtteq0gh",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask for the dataset. Masks should follow the ``numpy`` convention that\n**valid** data points are marked by ``False`` and **invalid** ones with\n``True``.\nDefaults to ``None``.",
                    "type": "any type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "672w39y1",
                    "encoding": "",
                    "name": "wcs",
                    "value": "",
                    "defaultValue": "",
                    "description": "World coordinate system (WCS) for the dataset.\nDefault is ``None``.",
                    "type": "any type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3xyoeka",
                    "encoding": "",
                    "name": "meta",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional meta information about the dataset. If no meta is provided\nan empty dict is created.\nDefault is ``None``.",
                    "type": "dict-like object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wa2hgp9j",
                    "encoding": "",
                    "name": "unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Unit for the dataset. Strings that can be converted to a\n`~astropy.units.Unit` are allowed.\nDefault is ``None``.",
                    "type": "unit-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4an9fevm",
                    "encoding": "",
                    "name": "copy",
                    "value": false,
                    "defaultValue": false,
                    "description": "Indicates whether to save the arguments as copy. ``True`` copies\nevery attribute before saving it while ``False`` tries to save every\nparameter as reference.\nNote however that it is not always possible to save the input as\nreference.\nDefault is ``False``.\n\n.. versionadded:: 1.2",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4qa4hzb",
                    "encoding": "",
                    "name": "psf",
                    "value": "",
                    "defaultValue": "",
                    "description": "Image representation of the PSF. In order for convolution to be flux-\npreserving, this should generally be normalized to sum to unity.",
                    "type": "numpy.ndarray or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0dw2wd0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata.NDData.__init__",
                    "defaultValue": "astropy.nddata.nddata.NDData.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20rmzqbh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mt3s1yy3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ex6ntjja",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "su3hsnmp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata.NDData",
                    "defaultValue": "astropy.nddata.nddata.NDData",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yg7ifzw1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fxrxlzhh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cc05yve7",
            "name": "NDDataArray.__init__",
            "description": "\nAn ``NDData`` object with arithmetic. This class is functionally equivalent\n    to ``NDData`` in astropy  versions prior to 1.0.\n    \n    The key distinction from raw numpy arrays is the presence of\n    additional metadata such as uncertainties, a mask, units, flags,\n    and/or a coordinate system.\n    \n    See also: https://docs.astropy.org/en/stable/nddata/\n    \n    Parameters\n    ----------\n    data : ndarray or `NDData`\n        The actual data contained in this `NDData` object. Not that this\n        will always be copies by *reference* , so you should make copy\n        the ``data`` before passing it in if that's the  desired behavior.\n    \n    uncertainty : `~astropy.nddata.NDUncertainty`, optional\n        Uncertainties on the data.\n    \n    mask : array-like, optional\n        Mask for the data, given as a boolean Numpy array or any object that\n        can be converted to a boolean Numpy array with a shape\n        matching that of the data. The values must be ``False`` where\n        the data is *valid* and ``True`` when it is not (like Numpy\n        masked arrays). If ``data`` is a numpy masked array, providing\n        ``mask`` here will causes the mask from the masked array to be\n        ignored.\n    \n    flags : array-like or `~astropy.nddata.FlagCollection`, optional\n        Flags giving information about each pixel. These can be specified\n        either as a Numpy array of any type (or an object which can be converted\n        to a Numpy array) with a shape matching that of the\n        data, or as a `~astropy.nddata.FlagCollection` instance which has a\n        shape matching that of the data.\n    \n    wcs : None, optional\n        WCS-object containing the world coordinate system for the data.\n    \n        .. warning::\n            This is not yet defined because the discussion of how best to\n            represent this class's WCS system generically is still under\n            consideration. For now just leave it as None\n    \n    meta : `dict`-like object, optional\n        Metadata for this object.  \"Metadata\" here means all information that\n        is included with this object but not part of any other attribute\n        of this particular object.  e.g., creation date, unique identifier,\n        simulation parameters, exposure time, telescope name, etc.\n    \n    unit : `~astropy.units.UnitBase` instance or str, optional\n        The units of the data.\n    \n    \n    Raises\n    ------\n    ValueError :\n        If the `uncertainty` or `mask` inputs cannot be broadcast (e.g., match\n        shape) onto ``data``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "23abc391225d687ce453268f66c30dcd22fb796985ba02c3a1a6d05161c806a6",
            "fields": [
                {
                    "id": "e_85u0bp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDDataArray object",
                    "type": "Object:astropy.nddata.compat.NDDataArray",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q372y15b",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The actual data contained in this `NDData` object. Not that this\nwill always be copies by *reference* , so you should make copy\nthe ``data`` before passing it in if that's the  desired behavior.",
                    "type": "ndarray or NDData",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lp_fy3n4",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l24651kx",
                    "encoding": "",
                    "name": "flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "Flags giving information about each pixel. These can be specified\neither as a Numpy array of any type (or an object which can be converted\nto a Numpy array) with a shape matching that of the\ndata, or as a `~astropy.nddata.FlagCollection` instance which has a\nshape matching that of the data.",
                    "type": "array-like or astropy.nddata.FlagCollection",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rcw59tlc",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7sdvxpk3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.__init__",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rupcon2t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57snt8p6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bxvgru7c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7545v7a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2p4ggjsr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxy1_xlv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "behyk7eg",
            "name": "NDDataArray.add",
            "description": "Performs addition by evaluating ``self`` + ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` + ``operand``.\n        If ``operand2`` is given it will perform ``operand`` + ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a9a39a512cafdb2c7735ea65854beebb0ee3fa0334ded4a9a10bf27ca31e7622",
            "fields": [
                {
                    "id": "3am4_vyu",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sqsout52",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nlx66_1i",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8ff2l_b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.add",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.add",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z63c92vb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lfsdzwgl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "12nw98gx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6hzil8dy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80ksswr9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49ci67qb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3zutmuoh",
            "name": "NDDataArray.convert_unit_to",
            "description": "Returns a new `NDData` object whose values have been converted\n    to a new unit.\n    \n    Parameters\n    ----------\n    unit : `astropy.units.UnitBase` instance or str\n        The unit to convert to.\n    \n    equivalencies : list of tuple\n       A list of equivalence pairs to try if the units are not\n       directly convertible.  See :ref:`astropy:unit_equivalencies`.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`\n        The resulting dataset\n    \n    Raises\n    ------\n    `~astropy.units.UnitsError`\n        If units are inconsistent.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12bf8d79dd8f1197ac925ed3d24ca52fc176e2a1d9c8335232cbf6737c831658",
            "fields": [
                {
                    "id": "gne_enl9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.compat.NDDataArray.convert_unit_to object",
                    "type": "Object:astropy.nddata.compat.NDDataArray",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwzov3e8",
                    "encoding": "",
                    "name": "unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "The unit to convert to.",
                    "type": "astropy.units.UnitBase instance or str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kv5xo37x",
                    "encoding": "",
                    "name": "equivalencies",
                    "value": [],
                    "defaultValue": [],
                    "description": "A list of equivalence pairs to try if the units are not\ndirectly convertible.  See :ref:`astropy:unit_equivalencies`.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ad_x6c7v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.convert_unit_to",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.convert_unit_to",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8b94tupk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ojxnk55y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "to34sys6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8k178115",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6f2xhndh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "58j94x4g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lysh6xcd",
            "name": "NDDataArray.divide",
            "description": "Performs division by evaluating ``self`` / ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` / ``operand``.\n        If ``operand2`` is given it will perform ``operand`` / ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0a6bec03395b89eda261bc1d05479712784a5bf24940d6ce0913b58fa086789f",
            "fields": [
                {
                    "id": "oj3e63qy",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghcyssam",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dskp0tr0",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hczp3l4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.divide",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.divide",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "braosoby",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8j0bj1mt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7zwq6a7u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6eqmlc9_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tmlo6fno",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9c5kvkvb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7dx4v4af",
            "name": "NDDataArray.max",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "24e75733682441d7fe4a9c2fc5c317520f7406aae11a7c07afca0d9acf8297d7",
            "fields": [
                {
                    "id": "vs2hqeyn",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hcmj_z1s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.max",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.max",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y6obj6s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxo04ytn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pj__8j4k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "npjjtol9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kp08n6q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2en9zqh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ipgmm9rc",
            "name": "NDDataArray.mean",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e21449bb57bb2f36112f3ba9cae70c4eb7f913f0a578157ce93394fe74d11f8d",
            "fields": [
                {
                    "id": "nbk0io6m",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n2p33uvl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.mean",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yowowaqn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4x2dlid",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ekj0km84",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_q7_usc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1lposwl8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6txab9sk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0u12q9mf",
            "name": "NDDataArray.min",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a69e08970d162fb6d80cdb106b214044b6c1d5ce19f9c42de17fa93c0a582a50",
            "fields": [
                {
                    "id": "tjqvunnu",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "26gv5g9m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.min",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.min",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gmm3qcjc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u3l683h7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fbbfabgx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xq56nwpb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve26kl83",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_6e9hej",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3_z7clhm",
            "name": "NDDataArray.multiply",
            "description": "Performs multiplication by evaluating ``self`` * ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` * ``operand``.\n        If ``operand2`` is given it will perform ``operand`` * ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d6b80ccc32d7d91970567c23b8c571f215f3bf79a04115ab00c720ea93a66b11",
            "fields": [
                {
                    "id": "5urtfcok",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2enuzvcs",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vp851t87",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dkk9309t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.multiply",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.multiply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7a9pwki",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kaqpqrkg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3m9cs85u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4yz9wat",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zj3806yj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4tvy0ebp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zn9kz12h",
            "name": "NDDataArray.subtract",
            "description": "Performs subtraction by evaluating ``self`` - ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` - ``operand``.\n        If ``operand2`` is given it will perform ``operand`` - ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4eb5528058891d9e10b0100df2b789349c0f9c7eb4ef64a4a56f24791543830a",
            "fields": [
                {
                    "id": "a6a7guix",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ts3eov6h",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_hmrups0",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ynjdlep",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.subtract",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.subtract",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pzmld4mq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ns3yet3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k4s6cuez",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z34ni91_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0f9m22zk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g57t2do6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "o_lo3wcp",
            "name": "NDDataArray.sum",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f9db500851ff6c04219253888ce4b795a225b3f3eb05fccc8ce26f8d0901b7bd",
            "fields": [
                {
                    "id": "azo6mntm",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gg3s0k9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.compat.NDDataArray.sum",
                    "defaultValue": "astropy.nddata.compat.NDDataArray.sum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2hrhqbqf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mf377cet",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vsyxhz4t",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ewmgh3t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.compat.NDDataArray",
                    "defaultValue": "astropy.nddata.compat.NDDataArray",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vwgihw_0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0fnnz0tk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9vp72x1k",
            "name": "NDDataBase.__init__",
            "description": "\nBase metaclass that defines the interface for N-dimensional datasets\n    with associated meta information used in ``astropy``.\n    \n    All properties and ``__init__`` have to be overridden in subclasses. See\n    `NDData` for a subclass that defines this interface on `numpy.ndarray`-like\n    ``data``.\n    \n    See also: https://docs.astropy.org/en/stable/nddata/",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e01141587c35bc66a2eaf696f2b17481527b396fc943ca28d448c75bf36ff701",
            "fields": [
                {
                    "id": "u9v2pe8b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDDataBase object",
                    "type": "Object:astropy.nddata.nddata_base.NDDataBase",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ypa1m7lt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_base.NDDataBase.__init__",
                    "defaultValue": "astropy.nddata.nddata_base.NDDataBase.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vsz6kn4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_jjhao78",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p6cx8mez",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dv5z4lr5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_base.NDDataBase",
                    "defaultValue": "astropy.nddata.nddata_base.NDDataBase",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pzw8sa1p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j721t8rl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ewsl09l8",
            "name": "NDDataRef.add",
            "description": "Performs addition by evaluating ``self`` + ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` + ``operand``.\n        If ``operand2`` is given it will perform ``operand`` + ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b6a186b62960b5055415d7f0ec045b9b75e9a634dec6ed9eda790bc92c8998a5",
            "fields": [
                {
                    "id": "9flzzhuq",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_pwfsly4",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9m7ct5w",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ug4tlnd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.add",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.add",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wbozznx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymz65zyy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "k49o5nyi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mb5ppuc7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_o6fn97",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p_pt3jkn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "op59p3qt",
            "name": "NDDataRef.divide",
            "description": "Performs division by evaluating ``self`` / ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` / ``operand``.\n        If ``operand2`` is given it will perform ``operand`` / ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0540fa2d2f6c05529b74ce785d3f05bedd362631f40ed4de372cd0c615f44502",
            "fields": [
                {
                    "id": "d82ck0wz",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zktmjcmt",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98lp8mni",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_ro2ba1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.divide",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.divide",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "330vfy_n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8n43npdr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3klv2xd3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpqjdh9c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6oeyttz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lsk9gp8u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1pjyfc_k",
            "name": "NDDataRef.max",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a53fd461ed4f9cedc4664a5a5e4ee3d7afbd1b1372f74b0c432af505774b9839",
            "fields": [
                {
                    "id": "8t763et7",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jhssl2z9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.max",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.max",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ob1fo6g1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pas_8tan",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zw74_9xq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngzo_tba",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sbafuz62",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49asfa5a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jtp4r2kf",
            "name": "NDDataRef.mean",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "11930048ce5ee3012c62f3bf352d8f219950a6440f322fc52561125e26f69465",
            "fields": [
                {
                    "id": "emtzng5g",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ldiz1hk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.mean",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qcgwso2c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eluch8gu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5uosbgcl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lrqt89yl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlmzpdl9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0j9oic67",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hzg4vwiy",
            "name": "NDDataRef.min",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b218acd6c62e91df033ceb58e02dad6197930f06969ab11b2f9f3d6d3a625c6f",
            "fields": [
                {
                    "id": "660fflpr",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9_n9kr9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.min",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.min",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yoj4t1n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3546lyis",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "968ifmdw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mlqzmqm0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s69fc7z_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ptbfcsp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gc8qee52",
            "name": "NDDataRef.multiply",
            "description": "Performs multiplication by evaluating ``self`` * ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` * ``operand``.\n        If ``operand2`` is given it will perform ``operand`` * ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dbb756ee3e8cf95748bdd6acc578fdddfb41cc38dca40e7e029e5bd083f37cbc",
            "fields": [
                {
                    "id": "nn6zkp8g",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpi660z8",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rakkfdku",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qw9asdk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.multiply",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.multiply",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "znpn7x2f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6r3sgey",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4b638vgj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep9egzor",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pzfsoxlf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "stnx4f1z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hv7vnjca",
            "name": "NDDataRef.subtract",
            "description": "Performs subtraction by evaluating ``self`` - ``operand``.\n    \n    Parameters\n    ----------\n    operand, operand2 : `NDData`-like instance\n        If ``operand2`` is ``None`` or not given it will perform the operation\n        ``self`` - ``operand``.\n        If ``operand2`` is given it will perform ``operand`` - ``operand2``.\n        If the method was called on a class rather than on the instance\n        ``operand2`` must be given.\n    \n    propagate_uncertainties : `bool` or ``None``, optional\n        If ``None`` the result will have no uncertainty. If ``False`` the\n        result will have a copied version of the first operand that has an\n        uncertainty. If ``True`` the result will have a correctly propagated\n        uncertainty from the uncertainties of the operands but this assumes\n        that the uncertainties are `NDUncertainty`-like. Default is ``True``.\n    \n        .. versionchanged:: 1.2\n            This parameter must be given as keyword-parameter. Using it as\n            positional parameter is deprecated.\n            ``None`` was added as valid parameter value.\n    \n    handle_mask : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no mask. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        mask). If it is a callable then the specified callable must\n        create the results ``mask`` and if necessary provide a copy.\n        Default is `numpy.logical_or`.\n    \n        .. versionadded:: 1.2\n    \n    handle_meta : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no meta. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        (not empty) meta. If it is a callable then the specified callable must\n        create the results ``meta`` and if necessary provide a copy.\n        Default is ``None``.\n    \n        .. versionadded:: 1.2\n    \n    compare_wcs : callable, ``'first_found'`` or ``None``, optional\n        If ``None`` the result will have no wcs and no comparison between\n        the wcs of the operands is made. If ``'first_found'`` the\n        result will have a copied version of the first operand that has a\n        wcs. If it is a callable then the specified callable must\n        compare the ``wcs``. The resulting ``wcs`` will be like if ``False``\n        was given otherwise it raises a ``ValueError`` if the comparison was\n        not successful. Default is ``'first_found'``.\n    \n        .. versionadded:: 1.2\n    \n    uncertainty_correlation : number or `~numpy.ndarray`, optional\n        The correlation between the two operands is used for correct error\n        propagation for correlated data as given in:\n        https://en.wikipedia.org/wiki/Propagation_of_uncertainty#Example_formulas\n        Default is 0.\n    \n        .. versionadded:: 1.2\n    \n    \n    kwargs :\n        Any other parameter that should be passed to the callables used.\n    \n    Returns\n    -------\n    result : `~astropy.nddata.NDData`-like\n        The resulting dataset\n    \n    Notes\n    -----\n    If a ``callable`` is used for ``mask``, ``wcs`` or ``meta`` the\n    callable must accept the corresponding attributes as first two\n    parameters. If the callable also needs additional parameters these can be\n    defined as ``kwargs`` and must start with ``\"wcs_\"`` (for wcs callable) or\n    ``\"meta_\"`` (for meta callable). This startstring is removed before the\n    callable is called.\n    \n    ``\"first_found\"`` can also be abbreviated with ``\"ff\"``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "499ec3ed22663f31705cf34e330974d52d7cf1aad0d7dc6bab16ff1d080c1fc4",
            "fields": [
                {
                    "id": "gt2v517f",
                    "encoding": "",
                    "name": "operand",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ksxh6w9q",
                    "encoding": "",
                    "name": "operand2",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6vu_kvi9",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any other parameter that should be passed to the callables used.",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ze1rhbn9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.subtract",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.subtract",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dj9qownc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iud3x1ij",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j4y3ku2x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ws6b5q33",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z83j7xwo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7orgt2w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ojiv2i9c",
            "name": "NDDataRef.sum",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0329c1a48cc9af1e0541a8cabd2de7674c9541cda16b62d04f55825ac356836",
            "fields": [
                {
                    "id": "94pmjopk",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpr6xev0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef.sum",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef.sum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djzhuon3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqguqraw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8qpznkp0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uulk4jwy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "defaultValue": "astropy.nddata.nddata_withmixins.NDDataRef",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wb9bax8s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljj4_ye6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m3p1ocz3",
            "name": "NDIOMixin.__init__",
            "description": "\nMixin class to connect NDData to the astropy input/output registry.\n    \n    This mixin adds two methods to its subclasses, ``read`` and ``write``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "90850ec5eeaef1760b6cd56e0c2306c53b147211e5624af9414c55d0040efbad",
            "fields": [
                {
                    "id": "rmj3tshk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDIOMixin object",
                    "type": "Object:astropy.nddata.mixins.ndio.NDIOMixin",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "1wy6db7j",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mh552w8h",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_m1o1of_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndio.NDIOMixin.__init__",
                    "defaultValue": "astropy.nddata.mixins.ndio.NDIOMixin.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5b9udpcm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tad81_3u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2c15z729",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s7qaow2y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndio.NDIOMixin",
                    "defaultValue": "astropy.nddata.mixins.ndio.NDIOMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0e5vq6w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9rrcaap",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6a2r22bo",
            "name": "NDSlicingMixin.__init__",
            "description": "\nMixin to provide slicing on objects using the `NDData`\n    interface.\n    \n    The ``data``, ``mask``, ``uncertainty`` and ``wcs`` will be sliced, if\n    set and sliceable. The ``unit`` and ``meta`` will be untouched. The return\n    will be a reference and not a copy, if possible.\n    \n    Examples\n    --------\n    Using this Mixin with `~astropy.nddata.NDData`:\n    \n        >>> from astropy.nddata import NDData, NDSlicingMixin\n        >>> class NDDataSliceable(NDSlicingMixin, NDData):\n        ...     pass\n    \n    Slicing an instance containing data::\n    \n        >>> nd = NDDataSliceable([1,2,3,4,5])\n        >>> nd[1:3]\n        NDDataSliceable([2, 3])\n    \n    Also the other attributes are sliced for example the ``mask``::\n    \n        >>> import numpy as np\n        >>> mask = np.array([True, False, True, True, False])\n        >>> nd2 = NDDataSliceable(nd, mask=mask)\n        >>> nd2slc = nd2[1:3]\n        >>> nd2slc[nd2slc.mask]\n        NDDataSliceable([\u2014])\n    \n    Be aware that changing values of the sliced instance will change the values\n    of the original::\n    \n        >>> nd3 = nd2[1:3]\n        >>> nd3.data[0] = 100\n        >>> nd2\n        NDDataSliceable([\u2014\u2014\u2014, 100, \u2014\u2014\u2014, \u2014\u2014\u2014,   5])\n    \n    See Also\n    --------\n    NDDataRef\n    NDDataArray",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cf87a45dc6e8572034c12ecdbda169bbf162ca0dc22018c1fa587b9329f752d0",
            "fields": [
                {
                    "id": "ck43qiug",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDSlicingMixin object",
                    "type": "Object:astropy.nddata.mixins.ndslicing.NDSlicingMixin",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "s2er1i3v",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ie6w6o9_",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jaqh996y",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.mixins.ndslicing.NDSlicingMixin.__init__",
                    "defaultValue": "astropy.nddata.mixins.ndslicing.NDSlicingMixin.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vas7gi7q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5x6efese",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "izxw9gog",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c6f92db7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.mixins.ndslicing.NDSlicingMixin",
                    "defaultValue": "astropy.nddata.mixins.ndslicing.NDSlicingMixin",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibdj5gao",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "03udnc6v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_gwaeayb",
            "name": "NDUncertainty.__init__",
            "description": "\nThis is the metaclass for uncertainty classes used with `NDData`.\n    \n    Parameters\n    ----------\n    array : any type, optional\n        The array or value (the parameter name is due to historical reasons) of\n        the uncertainty. `numpy.ndarray`, `~astropy.units.Quantity` or\n        `NDUncertainty` subclasses are recommended.\n        If the `array` is `list`-like or `numpy.ndarray`-like it will be cast\n        to a plain `numpy.ndarray`.\n        Default is ``None``.\n    \n    unit : unit-like, optional\n        Unit for the uncertainty ``array``. Strings that can be converted to a\n        `~astropy.units.Unit` are allowed.\n        Default is ``None``.\n    \n    copy : `bool`, optional\n        Indicates whether to save the `array` as a copy. ``True`` copies it\n        before saving, while ``False`` tries to save every parameter as\n        reference. Note however that it is not always possible to save the\n        input as reference.\n        Default is ``True``.\n    \n    Raises\n    ------\n    IncompatibleUncertaintiesException\n        If given another `NDUncertainty`-like class as ``array`` if their\n        ``uncertainty_type`` is different.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2f9f6e9156c03692d5e68e886e392e792d2952a3b3bfdfa0069bde95c4b2c8f7",
            "fields": [
                {
                    "id": "nkmrmjr0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NDUncertainty object",
                    "type": "Object:astropy.nddata.nduncertainty.NDUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xhhbva1f",
                    "encoding": "",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array or value (the parameter name is due to historical reasons) of\nthe uncertainty. `numpy.ndarray`, `~astropy.units.Quantity` or\n`NDUncertainty` subclasses are recommended.\nIf the `array` is `list`-like or `numpy.ndarray`-like it will be cast\nto a plain `numpy.ndarray`.\nDefault is ``None``.",
                    "type": "any type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xz5suakk",
                    "encoding": "",
                    "name": "copy",
                    "value": true,
                    "defaultValue": true,
                    "description": "Indicates whether to save the `array` as a copy. ``True`` copies it\nbefore saving, while ``False`` tries to save every parameter as\nreference. Note however that it is not always possible to save the\ninput as reference.\nDefault is ``True``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xlq60il",
                    "encoding": "",
                    "name": "unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Unit for the uncertainty ``array``. Strings that can be converted to a\n`~astropy.units.Unit` are allowed.\nDefault is ``None``.",
                    "type": "unit-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9hlzn5x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.NDUncertainty.__init__",
                    "defaultValue": "astropy.nddata.nduncertainty.NDUncertainty.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ocwa3by",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "756e7k4b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gtxb6d54",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt2zlf0s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.NDUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.NDUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "phsezrj9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1qu8eu9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "w259kmz7",
            "name": "NDUncertainty.propagate",
            "description": "Calculate the resulting uncertainty given an operation on the data.\n    \n    .. versionadded:: 1.2\n    \n    Parameters\n    ----------\n    operation : callable\n        The operation that is performed on the `NDData`. Supported are\n        `numpy.add`, `numpy.subtract`, `numpy.multiply` and\n        `numpy.true_divide` (or `numpy.divide`).\n    \n    other_nddata : `NDData` instance\n        The second operand in the arithmetic operation.\n    \n    result_data : `~astropy.units.Quantity` or ndarray\n        The result of the arithmetic operations on the data.\n    \n    correlation : `numpy.ndarray` or number\n        The correlation (rho) is defined between the uncertainties in\n        sigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\n        uncorrelated operands.\n    \n    axis : int or tuple of ints, optional\n        Axis over which to perform a collapsing operation.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        Another instance of the same `NDUncertainty` subclass containing\n        the uncertainty of the result.\n    \n    Raises\n    ------\n    ValueError\n        If the ``operation`` is not supported or if correlation is not zero\n        but the subclass does not support correlated uncertainties.\n    \n    Notes\n    -----\n    First this method checks if a correlation is given and the subclass\n    implements propagation with correlated uncertainties.\n    Then the second uncertainty is converted (or an Exception is raised)\n    to the same class in order to do the propagation.\n    Then the appropriate propagation method is invoked and the result is\n    returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ea36b571423eb181335b6c9dc918d2c9f8f97a2b5638504a601e1e5bd0ab944c",
            "fields": [
                {
                    "id": "s6v9tuok",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.NDUncertainty.propagate object",
                    "type": "Object:astropy.nddata.nduncertainty.NDUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_kczl3i3",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The operation that is performed on the `NDData`. Supported are\n`numpy.add`, `numpy.subtract`, `numpy.multiply` and\n`numpy.true_divide` (or `numpy.divide`).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n65ijbbm",
                    "encoding": "",
                    "name": "other_nddata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second operand in the arithmetic operation.",
                    "type": "NDData instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4s2ugoju",
                    "encoding": "",
                    "name": "result_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The result of the arithmetic operations on the data.",
                    "type": "astropy.units.Quantity or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1inwwtn",
                    "encoding": "",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The correlation (rho) is defined between the uncertainties in\nsigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\nuncorrelated operands.",
                    "type": "numpy.ndarray or number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "beiev5yo",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis over which to perform a collapsing operation.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jwhxsa0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.NDUncertainty.propagate",
                    "defaultValue": "astropy.nddata.nduncertainty.NDUncertainty.propagate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5uvee6m1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2zag3im",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "a0aspfok",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_39rqzs_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.NDUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.NDUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "voay3baf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hndgowwg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "smzjzyds",
            "name": "NDUncertainty.represent_as",
            "description": "Convert this uncertainty to a different uncertainty type.\n    \n    Parameters\n    ----------\n    other_uncert : `NDUncertainty` subclass\n        The `NDUncertainty` subclass to convert to.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        An instance of ``other_uncert`` subclass containing the uncertainty\n        converted to the new uncertainty type.\n    \n    Raises\n    ------\n    TypeError\n        If either the initial or final subclasses do not support\n        conversion, a `TypeError` is raised.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b554b52c62a2509cefa593c41b898a6482c605211f628628c528845133db6c32",
            "fields": [
                {
                    "id": "j5ssnne1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.NDUncertainty.represent_as object",
                    "type": "Object:astropy.nddata.nduncertainty.NDUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l17kgcdn",
                    "encoding": "",
                    "name": "other_uncert",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `NDUncertainty` subclass to convert to.",
                    "type": "NDUncertainty subclass",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z936bc4c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.NDUncertainty.represent_as",
                    "defaultValue": "astropy.nddata.nduncertainty.NDUncertainty.represent_as",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aadigu_a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rehfgso9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dkb5zvgt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gxhvottf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.NDUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.NDUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ce9hhp9c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2txzwo95",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "u_syfhl2",
            "name": "NoOverlapError.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d6ef11b76e7a769a105cad93ee29ff95c9d8c95bbd00f89247b0301cfe3a1553",
            "fields": [
                {
                    "id": "pcf92n8o",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.utils.NoOverlapError.with_traceback object",
                    "type": "Object:astropy.nddata.utils.NoOverlapError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qr21l6a8",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f9lc10mr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.NoOverlapError.with_traceback",
                    "defaultValue": "astropy.nddata.utils.NoOverlapError.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tpq60jb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "klj3k8ap",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dpk4oglw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q822gaym",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils.NoOverlapError",
                    "defaultValue": "astropy.nddata.utils.NoOverlapError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aa_ngf93",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlqwmlfm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qqcsu_fg",
            "name": "PartialOverlapError.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a31d16ba80660ffbd76dec9c0d070e003e639c58935ab47449586ad4a1528f69",
            "fields": [
                {
                    "id": "hd6n5loo",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.utils.PartialOverlapError.with_traceback object",
                    "type": "Object:astropy.nddata.utils.PartialOverlapError",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1ftc58p",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zfdehxwf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.PartialOverlapError.with_traceback",
                    "defaultValue": "astropy.nddata.utils.PartialOverlapError.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_269sdh4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bccbv74k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s9c__4ta",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdgohaev",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils.PartialOverlapError",
                    "defaultValue": "astropy.nddata.utils.PartialOverlapError",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2zy1noyv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4paj9dks",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4b81_qtc",
            "name": "StdDevUncertainty.propagate",
            "description": "Calculate the resulting uncertainty given an operation on the data.\n    \n    .. versionadded:: 1.2\n    \n    Parameters\n    ----------\n    operation : callable\n        The operation that is performed on the `NDData`. Supported are\n        `numpy.add`, `numpy.subtract`, `numpy.multiply` and\n        `numpy.true_divide` (or `numpy.divide`).\n    \n    other_nddata : `NDData` instance\n        The second operand in the arithmetic operation.\n    \n    result_data : `~astropy.units.Quantity` or ndarray\n        The result of the arithmetic operations on the data.\n    \n    correlation : `numpy.ndarray` or number\n        The correlation (rho) is defined between the uncertainties in\n        sigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\n        uncorrelated operands.\n    \n    axis : int or tuple of ints, optional\n        Axis over which to perform a collapsing operation.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        Another instance of the same `NDUncertainty` subclass containing\n        the uncertainty of the result.\n    \n    Raises\n    ------\n    ValueError\n        If the ``operation`` is not supported or if correlation is not zero\n        but the subclass does not support correlated uncertainties.\n    \n    Notes\n    -----\n    First this method checks if a correlation is given and the subclass\n    implements propagation with correlated uncertainties.\n    Then the second uncertainty is converted (or an Exception is raised)\n    to the same class in order to do the propagation.\n    Then the appropriate propagation method is invoked and the result is\n    returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c0f4995be1b534c852110abbd312f22dc52ac7a7aea32f5be7a7020cdd2d3317",
            "fields": [
                {
                    "id": "iej4qx3a",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.StdDevUncertainty.propagate object",
                    "type": "Object:astropy.nddata.nduncertainty.StdDevUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4_eyzl2",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The operation that is performed on the `NDData`. Supported are\n`numpy.add`, `numpy.subtract`, `numpy.multiply` and\n`numpy.true_divide` (or `numpy.divide`).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujfte2ad",
                    "encoding": "",
                    "name": "other_nddata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second operand in the arithmetic operation.",
                    "type": "NDData instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xt9dmfx_",
                    "encoding": "",
                    "name": "result_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The result of the arithmetic operations on the data.",
                    "type": "astropy.units.Quantity or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n1n2zrfl",
                    "encoding": "",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The correlation (rho) is defined between the uncertainties in\nsigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\nuncorrelated operands.",
                    "type": "numpy.ndarray or number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0fm83n2",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis over which to perform a collapsing operation.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dz0hulmi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.StdDevUncertainty.propagate",
                    "defaultValue": "astropy.nddata.nduncertainty.StdDevUncertainty.propagate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jst9tl82",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynqbknid",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fgp4pmtd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l335zfhe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.StdDevUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.StdDevUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "00fwn820",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3q1q2q3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d2dh9elw",
            "name": "StdDevUncertainty.represent_as",
            "description": "Convert this uncertainty to a different uncertainty type.\n    \n    Parameters\n    ----------\n    other_uncert : `NDUncertainty` subclass\n        The `NDUncertainty` subclass to convert to.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        An instance of ``other_uncert`` subclass containing the uncertainty\n        converted to the new uncertainty type.\n    \n    Raises\n    ------\n    TypeError\n        If either the initial or final subclasses do not support\n        conversion, a `TypeError` is raised.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b865fbe7f67c20c11092bfae6261f167f388f2b45edc24c94180d14ea5a4997a",
            "fields": [
                {
                    "id": "x39z_ipd",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.StdDevUncertainty.represent_as object",
                    "type": "Object:astropy.nddata.nduncertainty.StdDevUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_xi82wp",
                    "encoding": "",
                    "name": "other_uncert",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `NDUncertainty` subclass to convert to.",
                    "type": "NDUncertainty subclass",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vb5g5xu9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.StdDevUncertainty.represent_as",
                    "defaultValue": "astropy.nddata.nduncertainty.StdDevUncertainty.represent_as",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9pfspax4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3um5jpe_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w6d5p9_j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nd295i0s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.StdDevUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.StdDevUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "23dy2ypr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhezp8k8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pj0xll9u",
            "name": "UnknownUncertainty.propagate",
            "description": "Calculate the resulting uncertainty given an operation on the data.\n    \n    .. versionadded:: 1.2\n    \n    Parameters\n    ----------\n    operation : callable\n        The operation that is performed on the `NDData`. Supported are\n        `numpy.add`, `numpy.subtract`, `numpy.multiply` and\n        `numpy.true_divide` (or `numpy.divide`).\n    \n    other_nddata : `NDData` instance\n        The second operand in the arithmetic operation.\n    \n    result_data : `~astropy.units.Quantity` or ndarray\n        The result of the arithmetic operations on the data.\n    \n    correlation : `numpy.ndarray` or number\n        The correlation (rho) is defined between the uncertainties in\n        sigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\n        uncorrelated operands.\n    \n    axis : int or tuple of ints, optional\n        Axis over which to perform a collapsing operation.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        Another instance of the same `NDUncertainty` subclass containing\n        the uncertainty of the result.\n    \n    Raises\n    ------\n    ValueError\n        If the ``operation`` is not supported or if correlation is not zero\n        but the subclass does not support correlated uncertainties.\n    \n    Notes\n    -----\n    First this method checks if a correlation is given and the subclass\n    implements propagation with correlated uncertainties.\n    Then the second uncertainty is converted (or an Exception is raised)\n    to the same class in order to do the propagation.\n    Then the appropriate propagation method is invoked and the result is\n    returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "64ed8aecf0cb02ac36426aaee7972015f6c57b5c1ae7a880bf42c488744f49e3",
            "fields": [
                {
                    "id": "k_mcdlqt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.UnknownUncertainty.propagate object",
                    "type": "Object:astropy.nddata.nduncertainty.UnknownUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "llx4vncd",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The operation that is performed on the `NDData`. Supported are\n`numpy.add`, `numpy.subtract`, `numpy.multiply` and\n`numpy.true_divide` (or `numpy.divide`).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2zuj6isa",
                    "encoding": "",
                    "name": "other_nddata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second operand in the arithmetic operation.",
                    "type": "NDData instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rn1gj2oz",
                    "encoding": "",
                    "name": "result_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The result of the arithmetic operations on the data.",
                    "type": "astropy.units.Quantity or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlv8ymx4",
                    "encoding": "",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The correlation (rho) is defined between the uncertainties in\nsigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\nuncorrelated operands.",
                    "type": "numpy.ndarray or number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hjny0a_k",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis over which to perform a collapsing operation.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4o06bx1l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.UnknownUncertainty.propagate",
                    "defaultValue": "astropy.nddata.nduncertainty.UnknownUncertainty.propagate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7reez14a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wnjpxnxv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "arqf1vjh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jk3c0zpq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.UnknownUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.UnknownUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17vitxoo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7l6xfq8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "aeznfcm1",
            "name": "UnknownUncertainty.represent_as",
            "description": "Convert this uncertainty to a different uncertainty type.\n    \n    Parameters\n    ----------\n    other_uncert : `NDUncertainty` subclass\n        The `NDUncertainty` subclass to convert to.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        An instance of ``other_uncert`` subclass containing the uncertainty\n        converted to the new uncertainty type.\n    \n    Raises\n    ------\n    TypeError\n        If either the initial or final subclasses do not support\n        conversion, a `TypeError` is raised.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "36ac9324bd140fc51dcbc350af710e3d9e3996c8b28b2e73dcc994d9b988c57b",
            "fields": [
                {
                    "id": "detd__nn",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.UnknownUncertainty.represent_as object",
                    "type": "Object:astropy.nddata.nduncertainty.UnknownUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k8bb5ks4",
                    "encoding": "",
                    "name": "other_uncert",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `NDUncertainty` subclass to convert to.",
                    "type": "NDUncertainty subclass",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qrpzdgcc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.UnknownUncertainty.represent_as",
                    "defaultValue": "astropy.nddata.nduncertainty.UnknownUncertainty.represent_as",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ipfte6g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5hlfx0wk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "24d4z93c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wkmmkqwx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.UnknownUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.UnknownUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "el3uc8ys",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wkxzbzc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3bcmorsk",
            "name": "VarianceUncertainty.propagate",
            "description": "Calculate the resulting uncertainty given an operation on the data.\n    \n    .. versionadded:: 1.2\n    \n    Parameters\n    ----------\n    operation : callable\n        The operation that is performed on the `NDData`. Supported are\n        `numpy.add`, `numpy.subtract`, `numpy.multiply` and\n        `numpy.true_divide` (or `numpy.divide`).\n    \n    other_nddata : `NDData` instance\n        The second operand in the arithmetic operation.\n    \n    result_data : `~astropy.units.Quantity` or ndarray\n        The result of the arithmetic operations on the data.\n    \n    correlation : `numpy.ndarray` or number\n        The correlation (rho) is defined between the uncertainties in\n        sigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\n        uncorrelated operands.\n    \n    axis : int or tuple of ints, optional\n        Axis over which to perform a collapsing operation.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        Another instance of the same `NDUncertainty` subclass containing\n        the uncertainty of the result.\n    \n    Raises\n    ------\n    ValueError\n        If the ``operation`` is not supported or if correlation is not zero\n        but the subclass does not support correlated uncertainties.\n    \n    Notes\n    -----\n    First this method checks if a correlation is given and the subclass\n    implements propagation with correlated uncertainties.\n    Then the second uncertainty is converted (or an Exception is raised)\n    to the same class in order to do the propagation.\n    Then the appropriate propagation method is invoked and the result is\n    returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1c15ea436eb74da62ed49221b0817ab60b0c334cc761d85d07f06300d457793d",
            "fields": [
                {
                    "id": "li5wiygq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.VarianceUncertainty.propagate object",
                    "type": "Object:astropy.nddata.nduncertainty.VarianceUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjzxnzia",
                    "encoding": "",
                    "name": "operation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The operation that is performed on the `NDData`. Supported are\n`numpy.add`, `numpy.subtract`, `numpy.multiply` and\n`numpy.true_divide` (or `numpy.divide`).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "boy8x029",
                    "encoding": "",
                    "name": "other_nddata",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second operand in the arithmetic operation.",
                    "type": "NDData instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7b75v3n",
                    "encoding": "",
                    "name": "result_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The result of the arithmetic operations on the data.",
                    "type": "astropy.units.Quantity or ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6u9jj1a4",
                    "encoding": "",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "The correlation (rho) is defined between the uncertainties in\nsigma_AB = sigma_A * sigma_B * rho. A value of ``0`` means\nuncorrelated operands.",
                    "type": "numpy.ndarray or number",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "guxg951n",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis over which to perform a collapsing operation.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnza9eux",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.VarianceUncertainty.propagate",
                    "defaultValue": "astropy.nddata.nduncertainty.VarianceUncertainty.propagate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61hdmqb5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3gbf3ypd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5pfs9e52",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pipmlpw_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.VarianceUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.VarianceUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8polsade",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0evp5vw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d5rls2np",
            "name": "VarianceUncertainty.represent_as",
            "description": "Convert this uncertainty to a different uncertainty type.\n    \n    Parameters\n    ----------\n    other_uncert : `NDUncertainty` subclass\n        The `NDUncertainty` subclass to convert to.\n    \n    Returns\n    -------\n    resulting_uncertainty : `NDUncertainty` instance\n        An instance of ``other_uncert`` subclass containing the uncertainty\n        converted to the new uncertainty type.\n    \n    Raises\n    ------\n    TypeError\n        If either the initial or final subclasses do not support\n        conversion, a `TypeError` is raised.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7cc726dc6032fe30e364b9b5414fb8392c6b181b1478ac4854efe670f708f2ca",
            "fields": [
                {
                    "id": "k8g6tetn",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to astropy.nddata.nduncertainty.VarianceUncertainty.represent_as object",
                    "type": "Object:astropy.nddata.nduncertainty.VarianceUncertainty",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1p6570ng",
                    "encoding": "",
                    "name": "other_uncert",
                    "value": "",
                    "defaultValue": "",
                    "description": "The `NDUncertainty` subclass to convert to.",
                    "type": "NDUncertainty subclass",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jv9u9g8l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.nduncertainty.VarianceUncertainty.represent_as",
                    "defaultValue": "astropy.nddata.nduncertainty.VarianceUncertainty.represent_as",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_t1_gf2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2gz3brf7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h3xavimg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2zyv4318",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.nduncertainty.VarianceUncertainty",
                    "defaultValue": "astropy.nddata.nduncertainty.VarianceUncertainty",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kteox8yk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22rnr8xm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hqpj7mys",
            "name": "nddata.add_array",
            "description": "Add a smaller array at a given position in a larger array.\n    \n    Parameters\n    ----------\n    array_large : ndarray\n        Large array.\n    array_small : ndarray\n        Small array to add. Can be equal to ``array_large`` in size in a given\n        dimension, but not larger.\n    position : tuple\n        Position of the small array's center, with respect to the large array.\n        Coordinates should be in the same order as the array shape.\n    \n    Returns\n    -------\n    new_array : ndarray\n        The new array formed from the sum of ``array_large`` and\n        ``array_small``.\n    \n    Notes\n    -----\n    The addition is done in-place.\n    \n    Examples\n    --------\n    We consider a large array of zeros with the shape 5x5 and a small\n    array of ones with a shape of 3x3:\n    \n    >>> import numpy as np\n    >>> from astropy.nddata.utils import add_array\n    >>> large_array = np.zeros((5, 5))\n    >>> small_array = np.ones((3, 3))\n    >>> add_array(large_array, small_array, (1, 2))  # doctest: +FLOAT_CMP\n    array([[0., 1., 1., 1., 0.],\n           [0., 1., 1., 1., 0.],\n           [0., 1., 1., 1., 0.],\n           [0., 0., 0., 0., 0.],\n           [0., 0., 0., 0., 0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4e2f521522abd19a4c9c15995fa4e3e68d0eb9c36e40820e9c5297f2e33f8c91",
            "fields": [
                {
                    "id": "4sgn1vdb",
                    "encoding": "",
                    "name": "array_large",
                    "value": "",
                    "defaultValue": "",
                    "description": "Large array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7sbskuux",
                    "encoding": "",
                    "name": "array_small",
                    "value": "",
                    "defaultValue": "",
                    "description": "Small array to add. Can be equal to ``array_large`` in size in a given\ndimension, but not larger.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6wootxe",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "Position of the small array's center, with respect to the large array.\nCoordinates should be in the same order as the array shape.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js6jiql_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.add_array",
                    "defaultValue": "astropy.nddata.add_array",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_cug6nd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j872ijky",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c9n70ec7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5nxlpq5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bvmlo95",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oftsgmlu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0wjo90hz",
            "name": "nddata.bitfield_to_boolean_mask",
            "description": "bitfield_to_boolean_mask(bitfield, ignore_flags=None, flip_bits=None, good_mask_value=False, dtype=numpy.bool_)\n    Converts an array of bit fields to a boolean (or integer) mask array\n    according to a bit mask constructed from the supplied bit flags (see\n    ``ignore_flags`` parameter).\n    \n    This function is particularly useful to convert data quality arrays to\n    boolean masks with selective filtering of DQ flags.\n    \n    Parameters\n    ----------\n    bitfield : ndarray\n        An array of bit flags. By default, values different from zero are\n        interpreted as \"bad\" values and values equal to zero are considered\n        as \"good\" values. However, see ``ignore_flags`` parameter on how to\n        selectively ignore some bits in the ``bitfield`` array data.\n    \n    ignore_flags : int, str, list, None (default = 0)\n        An integer bit mask, `None`, a Python list of bit flags, a comma-,\n        or ``'|'``-separated, ``'+'``-separated string list of integer\n        bit flags or mnemonic flag names that indicate what bits in the input\n        ``bitfield`` should be *ignored* (i.e., zeroed), or `None`.\n    \n        .. note::\n            When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n            parameter must be provided.\n    \n        | Setting ``ignore_flags`` to `None` effectively will make\n          `bitfield_to_boolean_mask` interpret all ``bitfield`` elements\n          as \"good\" regardless of their value.\n    \n        | When ``ignore_flags`` argument is an integer bit mask, it will be\n          combined using bitwise-NOT and bitwise-AND with each element of the\n          input ``bitfield`` array (``~ignore_flags & bitfield``). If the\n          resultant bitfield element is non-zero, that element will be\n          interpreted as a \"bad\" in the output boolean mask and it will be\n          interpreted as \"good\" otherwise. ``flip_bits`` parameter may be used\n          to flip the bits (``bitwise-NOT``) of the bit mask thus effectively\n          changing the meaning of the ``ignore_flags`` parameter from \"ignore\"\n          to \"use only\" these flags.\n    \n        .. note::\n    \n            Setting ``ignore_flags`` to 0 effectively will assume that all\n            non-zero elements in the input ``bitfield`` array are to be\n            interpreted as \"bad\".\n    \n        | When ``ignore_flags`` argument is a Python list of integer bit\n          flags, these flags are added together to create an integer bit mask.\n          Each item in the list must be a flag, i.e., an integer that is an\n          integer power of 2. In order to flip the bits of the resultant\n          bit mask, use ``flip_bits`` parameter.\n    \n        | Alternatively, ``ignore_flags`` may be a string of comma- or\n          ``'+'``(or ``'|'``)-separated list of integer bit flags that should\n          be added (bitwise OR) together to create an integer bit mask.\n          For example, both ``'4,8'``, ``'4|8'``, and ``'4+8'`` are equivalent\n          and indicate that bit flags 4 and 8 in the input ``bitfield``\n          array should be ignored when generating boolean mask.\n    \n        .. note::\n    \n            ``'None'``, ``'INDEF'``, and empty (or all white space) strings\n            are special values of string ``ignore_flags`` that are\n            interpreted as `None`.\n    \n        .. note::\n    \n            Each item in the list must be a flag, i.e., an integer that is an\n            integer power of 2. In addition, for convenience, an arbitrary\n            **single** integer is allowed and it will be interpreted as an\n            integer bit mask. For example, instead of ``'4,8'`` one could\n            simply provide string ``'12'``.\n    \n        .. note::\n            Only one flag separator is supported at a time. ``ignore_flags``\n            string should not mix ``','``, ``'+'``, and ``'|'`` separators.\n    \n        .. note::\n    \n            When ``ignore_flags`` is a `str` and when it is prepended with\n            '~', then the meaning of ``ignore_flags`` parameters will be\n            reversed: now it will be interpreted as a list of bit flags to be\n            *used* (or *not ignored*) when deciding which elements of the\n            input ``bitfield`` array are \"bad\". Following this convention,\n            an ``ignore_flags`` string value of ``'~0'`` would be equivalent\n            to setting ``ignore_flags=None``.\n    \n        .. warning::\n    \n            Because prepending '~' to a string ``ignore_flags`` is equivalent\n            to setting ``flip_bits`` to `True`, ``flip_bits`` cannot be used\n            with string ``ignore_flags`` and it must be set to `None`.\n    \n    flip_bits : bool, None (default = None)\n        Specifies whether or not to invert the bits of the bit mask either\n        supplied directly through ``ignore_flags`` parameter or built from the\n        bit flags passed through ``ignore_flags`` (only when bit flags are\n        passed as Python lists of integer bit flags). Occasionally, it may be\n        useful to *consider only specific bit flags* in the ``bitfield``\n        array when creating a boolean mask as opposed to *ignoring* specific\n        bit flags as ``ignore_flags`` behaves by default. This can be achieved\n        by inverting/flipping the bits of the bit mask created from\n        ``ignore_flags`` flags which effectively changes the meaning of the\n        ``ignore_flags`` parameter from \"ignore\" to \"use only\" these flags.\n        Setting ``flip_bits`` to `None` means that no bit flipping will be\n        performed. Bit flipping for string lists of bit flags must be\n        specified by prepending '~' to string bit flag lists\n        (see documentation for ``ignore_flags`` for more details).\n    \n        .. warning::\n            This parameter can be set to either `True` or `False` **ONLY** when\n            ``ignore_flags`` is either an integer bit mask or a Python\n            list of integer bit flags. When ``ignore_flags`` is either\n            `None` or a string list of flags, ``flip_bits`` **MUST** be set\n            to `None`.\n    \n    good_mask_value : int, bool (default = False)\n        This parameter is used to derive the values that will be assigned to\n        the elements in the output boolean mask array that correspond to the\n        \"good\" bit fields (that are 0 after zeroing bits specified by\n        ``ignore_flags``) in the input ``bitfield`` array. When\n        ``good_mask_value`` is non-zero or ``numpy.True_`` then values in the\n        output boolean mask array corresponding to \"good\" bit fields in\n        ``bitfield`` will be ``numpy.True_`` (if ``dtype`` is ``numpy.bool_``)\n        or 1 (if ``dtype`` is of numerical type) and values of corresponding\n        to \"bad\" flags will be ``numpy.False_`` (or 0). When\n        ``good_mask_value`` is zero or ``numpy.False_`` then the values\n        in the output boolean mask array corresponding to \"good\" bit fields\n        in ``bitfield`` will be ``numpy.False_`` (if ``dtype`` is\n        ``numpy.bool_``) or 0 (if ``dtype`` is of numerical type) and values\n        of corresponding to \"bad\" flags will be ``numpy.True_`` (or 1).\n    \n    dtype : data-type (default = ``numpy.bool_``)\n        The desired data-type for the output binary mask array.\n    \n    flag_name_map : BitFlagNameMap\n         A `BitFlagNameMap` object that provides mapping from mnemonic\n         bit flag names to integer bit values in order to translate mnemonic\n         flags to numeric values when ``bit_flags`` that are comma- or\n         '+'-separated list of menmonic bit flag names.\n    \n    Returns\n    -------\n    mask : ndarray\n        Returns an array of the same dimensionality as the input ``bitfield``\n        array whose elements can have two possible values,\n        e.g., ``numpy.True_`` or ``numpy.False_`` (or 1 or 0 for integer\n        ``dtype``) according to values of to the input ``bitfield`` elements,\n        ``ignore_flags`` parameter, and the ``good_mask_value`` parameter.\n    \n    Examples\n    --------\n        >>> from astropy.nddata import bitmask\n        >>> import numpy as np\n        >>> dqarr = np.asarray([[0, 0, 1, 2, 0, 8, 12, 0],\n        ...                     [10, 4, 0, 0, 0, 16, 6, 0]])\n        >>> flag_map = bitmask.extend_bit_flag_map(\n        ...     'ST_DQ', CR=2, CLOUDY=4, RAINY=8, HOT=16, DEAD=32\n        ... )\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=0,\n        ...                                  dtype=int)\n        array([[0, 0, 1, 1, 0, 1, 1, 0],\n               [1, 1, 0, 0, 0, 1, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=0,\n        ...                                  dtype=bool)\n        array([[False, False,  True,  True, False,  True,  True, False],\n               [ True,  True, False, False, False,  True,  True, False]]...)\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=6,\n        ...                                  good_mask_value=0, dtype=int)\n        array([[0, 0, 1, 0, 0, 1, 1, 0],\n               [1, 0, 0, 0, 0, 1, 0, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=~6,\n        ...                                  good_mask_value=0, dtype=int)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=6, dtype=int,\n        ...                                  flip_bits=True, good_mask_value=0)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(2+4)',\n        ...                                  good_mask_value=0, dtype=int)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=[2, 4],\n        ...                                  flip_bits=True, good_mask_value=0,\n        ...                                  dtype=int)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(CR,CLOUDY)',\n        ...                                  good_mask_value=0, dtype=int,\n        ...                                  flag_name_map=flag_map)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(CR+CLOUDY)',\n        ...                                  good_mask_value=0, dtype=int,\n        ...                                  flag_name_map=flag_map)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "202df22bafe993329f9fec5f482e6e695b7735aa991a7985aad8c2843cee411c",
            "fields": [
                {
                    "id": "whs78wwb",
                    "encoding": "",
                    "name": "bitfield",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of bit flags. By default, values different from zero are\ninterpreted as \"bad\" values and values equal to zero are considered\nas \"good\" values. However, see ``ignore_flags`` parameter on how to\nselectively ignore some bits in the ``bitfield`` array data.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5axycix3",
                    "encoding": "",
                    "name": "ignore_flags",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "An integer bit mask, `None`, a Python list of bit flags, a comma-,\nor ``'|'``-separated, ``'+'``-separated string list of integer\nbit flags or mnemonic flag names that indicate what bits in the input\n``bitfield`` should be *ignored* (i.e., zeroed), or `None`.\n\n.. note::\n    When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n    parameter must be provided.\n\n| Setting ``ignore_flags`` to `None` effectively will make\n  `bitfield_to_boolean_mask` interpret all ``bitfield`` elements\n  as \"good\" regardless of their value.\n\n| When ``ignore_flags`` argument is an integer bit mask, it will be\n  combined using bitwise-NOT and bitwise-AND with each element of the\n  input ``bitfield`` array (``~ignore_flags & bitfield``). If the\n  resultant bitfield element is non-zero, that element will be\n  interpreted as a \"bad\" in the output boolean mask and it will be\n  interpreted as \"good\" otherwise. ``flip_bits`` parameter may be used\n  to flip the bits (``bitwise-NOT``) of the bit mask thus effectively\n  changing the meaning of the ``ignore_flags`` parameter from \"ignore\"\n  to \"use only\" these flags.\n\n.. note::\n\n    Setting ``ignore_flags`` to 0 effectively will assume that all\n    non-zero elements in the input ``bitfield`` array are to be\n    interpreted as \"bad\".\n\n| When ``ignore_flags`` argument is a Python list of integer bit\n  flags, these flags are added together to create an integer bit mask.\n  Each item in the list must be a flag, i.e., an integer that is an\n  integer power of 2. In order to flip the bits of the resultant\n  bit mask, use ``flip_bits`` parameter.\n\n| Alternatively, ``ignore_flags`` may be a string of comma- or\n  ``'+'``(or ``'|'``)-separated list of integer bit flags that should\n  be added (bitwise OR) together to create an integer bit mask.\n  For example, both ``'4,8'``, ``'4|8'``, and ``'4+8'`` are equivalent\n  and indicate that bit flags 4 and 8 in the input ``bitfield``\n  array should be ignored when generating boolean mask.\n\n.. note::\n\n    ``'None'``, ``'INDEF'``, and empty (or all white space) strings\n    are special values of string ``ignore_flags`` that are\n    interpreted as `None`.\n\n.. note::\n\n    Each item in the list must be a flag, i.e., an integer that is an\n    integer power of 2. In addition, for convenience, an arbitrary\n    **single** integer is allowed and it will be interpreted as an\n    integer bit mask. For example, instead of ``'4,8'`` one could\n    simply provide string ``'12'``.\n\n.. note::\n    Only one flag separator is supported at a time. ``ignore_flags``\n    string should not mix ``','``, ``'+'``, and ``'|'`` separators.\n\n.. note::\n\n    When ``ignore_flags`` is a `str` and when it is prepended with\n    '~', then the meaning of ``ignore_flags`` parameters will be\n    reversed: now it will be interpreted as a list of bit flags to be\n    *used* (or *not ignored*) when deciding which elements of the\n    input ``bitfield`` array are \"bad\". Following this convention,\n    an ``ignore_flags`` string value of ``'~0'`` would be equivalent\n    to setting ``ignore_flags=None``.\n\n.. warning::\n\n    Because prepending '~' to a string ``ignore_flags`` is equivalent\n    to setting ``flip_bits`` to `True`, ``flip_bits`` cannot be used\n    with string ``ignore_flags`` and it must be set to `None`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wxk66txw",
                    "encoding": "",
                    "name": "flip_bits",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies whether or not to invert the bits of the bit mask either\nsupplied directly through ``ignore_flags`` parameter or built from the\nbit flags passed through ``ignore_flags`` (only when bit flags are\npassed as Python lists of integer bit flags). Occasionally, it may be\nuseful to *consider only specific bit flags* in the ``bitfield``\narray when creating a boolean mask as opposed to *ignoring* specific\nbit flags as ``ignore_flags`` behaves by default. This can be achieved\nby inverting/flipping the bits of the bit mask created from\n``ignore_flags`` flags which effectively changes the meaning of the\n``ignore_flags`` parameter from \"ignore\" to \"use only\" these flags.\nSetting ``flip_bits`` to `None` means that no bit flipping will be\nperformed. Bit flipping for string lists of bit flags must be\nspecified by prepending '~' to string bit flag lists\n(see documentation for ``ignore_flags`` for more details).\n\n.. warning::\n    This parameter can be set to either `True` or `False` **ONLY** when\n    ``ignore_flags`` is either an integer bit mask or a Python\n    list of integer bit flags. When ``ignore_flags`` is either\n    `None` or a string list of flags, ``flip_bits`` **MUST** be set\n    to `None`.",
                    "type": "bool, None (default = None)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s2e1x860",
                    "encoding": "",
                    "name": "good_mask_value",
                    "value": false,
                    "defaultValue": false,
                    "description": "This parameter is used to derive the values that will be assigned to\nthe elements in the output boolean mask array that correspond to the\n\"good\" bit fields (that are 0 after zeroing bits specified by\n``ignore_flags``) in the input ``bitfield`` array. When\n``good_mask_value`` is non-zero or ``numpy.True_`` then values in the\noutput boolean mask array corresponding to \"good\" bit fields in\n``bitfield`` will be ``numpy.True_`` (if ``dtype`` is ``numpy.bool_``)\nor 1 (if ``dtype`` is of numerical type) and values of corresponding\nto \"bad\" flags will be ``numpy.False_`` (or 0). When\n``good_mask_value`` is zero or ``numpy.False_`` then the values\nin the output boolean mask array corresponding to \"good\" bit fields\nin ``bitfield`` will be ``numpy.False_`` (if ``dtype`` is\n``numpy.bool_``) or 0 (if ``dtype`` is of numerical type) and values\nof corresponding to \"bad\" flags will be ``numpy.True_`` (or 1).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7wf6fol7",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The desired data-type for the output binary mask array.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bq7nkgya",
                    "encoding": "",
                    "name": "flag_name_map",
                    "value": "",
                    "defaultValue": "",
                    "description": "A `BitFlagNameMap` object that provides mapping from mnemonic\nbit flag names to integer bit values in order to translate mnemonic\nflags to numeric values when ``bit_flags`` that are comma- or\n'+'-separated list of menmonic bit flag names.",
                    "type": "BitFlagNameMap",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iiqhu9de",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.bitfield_to_boolean_mask",
                    "defaultValue": "astropy.nddata.bitfield_to_boolean_mask",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ayrxu6m3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lpocrjd1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ka91_4kl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_uyinoy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fx_dca_n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "001_txm8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pi5x5i2w",
            "name": "nddata.block_reduce",
            "description": "Downsample a data array by applying a function to local blocks.\n    \n    If ``data`` is not perfectly divisible by ``block_size`` along a\n    given axis then the data will be trimmed (from the end) along that\n    axis.\n    \n    Parameters\n    ----------\n    data : array-like\n        The data to be resampled.\n    \n    block_size : int or array-like (int)\n        The integer block size along each axis.  If ``block_size`` is a\n        scalar and ``data`` has more than one dimension, then\n        ``block_size`` will be used for for every axis.\n    \n    func : callable, optional\n        The method to use to downsample the data. Must be a callable\n        that takes in a 4D `~numpy.ndarray` (the 2D `~numpy.ndarray`\n        input into `block_reduce` gets reshaped as 4D) and has an\n        ``axis`` keyword that accepts tuples. This function will be\n        called with ``axis=(2, 3)`` and it should return a 2D array. The\n        default is `~numpy.sum`, which provides block summation (and\n        conserves the data sum).\n    \n    Returns\n    -------\n    output : array-like\n        The resampled data. Note the depending on the input ``func``,\n        the dtype of the output array may not match the input array.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata import block_reduce\n    >>> data = np.arange(16).reshape(4, 4)\n    >>> block_reduce(data, 2)  # doctest: +FLOAT_CMP\n    array([[10, 18],\n           [42, 50]])\n    \n    >>> block_reduce(data, 2, func=np.mean)  # doctest: +FLOAT_CMP\n    array([[  2.5,   4.5],\n           [ 10.5,  12.5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "13d572cbf1b1e46aa77309035142dbec73d9e0ccecf30d194da030a2813cd5c3",
            "fields": [
                {
                    "id": "njfscvdk",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The data to be resampled.",
                    "type": "array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gaobb5h2",
                    "encoding": "",
                    "name": "block_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer block size along each axis.  If ``block_size`` is a\nscalar and ``data`` has more than one dimension, then\n``block_size`` will be used for for every axis.",
                    "type": "int or array-like (int)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w11fblic",
                    "encoding": "",
                    "name": "func",
                    "value": "numpy._ArrayFunctionDispatcher",
                    "defaultValue": "numpy._ArrayFunctionDispatcher",
                    "description": "The method to use to downsample the data. Must be a callable\nthat takes in a 4D `~numpy.ndarray` (the 2D `~numpy.ndarray`\ninput into `block_reduce` gets reshaped as 4D) and has an\n``axis`` keyword that accepts tuples. This function will be\ncalled with ``axis=(2, 3)`` and it should return a 2D array. The\ndefault is `~numpy.sum`, which provides block summation (and\nconserves the data sum).",
                    "type": "numpy._ArrayFunctionDispatcher",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1f41jwv0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.block_reduce",
                    "defaultValue": "astropy.nddata.block_reduce",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "otjkb13d",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhtdv03p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "epgx2i__",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9eh3jw1n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lsbw2f4u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9nnj6ao",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pkqdcs93",
            "name": "nddata.block_replicate",
            "description": "Upsample a data array by block replication.\n    \n    Parameters\n    ----------\n    data : array-like\n        The data to be block replicated.\n    \n    block_size : int or array-like (int)\n        The integer block size along each axis.  If ``block_size`` is a\n        scalar and ``data`` has more than one dimension, then\n        ``block_size`` will be used for for every axis.\n    \n    conserve_sum : bool, optional\n        If `True` (the default) then the sum of the output\n        block-replicated data will equal the sum of the input ``data``.\n    \n    Returns\n    -------\n    output : array-like\n        The block-replicated data. Note that when ``conserve_sum`` is\n        `True`, the dtype of the output array will be float.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata import block_replicate\n    >>> data = np.array([[0., 1.], [2., 3.]])\n    >>> block_replicate(data, 2)  # doctest: +FLOAT_CMP\n    array([[0.  , 0.  , 0.25, 0.25],\n           [0.  , 0.  , 0.25, 0.25],\n           [0.5 , 0.5 , 0.75, 0.75],\n           [0.5 , 0.5 , 0.75, 0.75]])\n    \n    >>> block_replicate(data, 2, conserve_sum=False)  # doctest: +FLOAT_CMP\n    array([[0., 0., 1., 1.],\n           [0., 0., 1., 1.],\n           [2., 2., 3., 3.],\n           [2., 2., 3., 3.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f00ae99ae62a4c2f457026e45ff95a8bff0af35b49f9fb993067706e09effb90",
            "fields": [
                {
                    "id": "k7hvdjsb",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The data to be block replicated.",
                    "type": "array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dilft_mu",
                    "encoding": "",
                    "name": "block_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer block size along each axis.  If ``block_size`` is a\nscalar and ``data`` has more than one dimension, then\n``block_size`` will be used for for every axis.",
                    "type": "int or array-like (int)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqd3izlz",
                    "encoding": "",
                    "name": "conserve_sum",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `True` (the default) then the sum of the output\nblock-replicated data will equal the sum of the input ``data``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "94g5io0f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.block_replicate",
                    "defaultValue": "astropy.nddata.block_replicate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsnx3xjk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sipv0etj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i4b047_q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csuojxya",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gn7j0pls",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5g1jhxhr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fr2rrtjf",
            "name": "nddata.extend_bit_flag_map",
            "description": "A convenience function for creating bit flags maps by subclassing an\n    existing map and adding additional flags supplied as keyword arguments.\n    \n    Parameters\n    ----------\n    cls_name : str\n        Class name of the bit flag map to be created.\n    \n    base_cls : BitFlagNameMap, optional\n        Base class for the new bit flag map.\n    \n    **kwargs : int\n        Each supplied keyword argument will be used to define bit flag\n        names in the new map. In addition to bit flag names, ``__version__`` is\n        allowed to indicate the version of the newly created map.\n    \n    Examples\n    --------\n        >>> from astropy.nddata.bitmask import extend_bit_flag_map\n        >>> ST_DQ = extend_bit_flag_map('ST_DQ', __version__='1.0.0', CR=1, CLOUDY=4, RAINY=8)\n        >>> ST_CAM1_DQ = extend_bit_flag_map('ST_CAM1_DQ', ST_DQ, HOT=16, DEAD=32)\n        >>> ST_CAM1_DQ['HOT']  # <-- Access flags as dictionary keys\n        16\n        >>> ST_CAM1_DQ.HOT  # <-- Access flags as class attributes\n        16",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c7d8cf024d00ef7cb9af355849a83d4754f3d087e6358e14425407b7a8c4a537",
            "fields": [
                {
                    "id": "lp45wyjf",
                    "encoding": "",
                    "name": "cls_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "Class name of the bit flag map to be created.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__pwps0o",
                    "encoding": "",
                    "name": "base_cls",
                    "value": "astropy.nddata.bitmask.BitFlagNameMeta",
                    "defaultValue": "astropy.nddata.bitmask.BitFlagNameMeta",
                    "description": "Base class for the new bit flag map.",
                    "type": "astropy.nddata.bitmask.BitFlagNameMeta",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gnflw0yu",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek7rxvlt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.extend_bit_flag_map",
                    "defaultValue": "astropy.nddata.extend_bit_flag_map",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ld5klphk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89g9c31d",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "auuku7s8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_yj0n6p6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cx0nokf5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kb7rd6p9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e55e634t",
            "name": "nddata.extract_array",
            "description": "Extract a smaller array of the given shape and position from a\n    larger array.\n    \n    Parameters\n    ----------\n    array_large : ndarray\n        The array from which to extract the small array.\n    shape : int or tuple thereof\n        The shape of the extracted array (for 1D arrays, this can be an\n        `int`).  See the ``mode`` keyword for additional details.\n    position : number or tuple thereof\n        The position of the small array's center with respect to the\n        large array.  The pixel coordinates should be in the same order\n        as the array shape.  Integer positions are at the pixel centers\n        (for 1D arrays, this can be a number).\n    mode : {'partial', 'trim', 'strict'}, optional\n        The mode used for extracting the small array.  For the\n        ``'partial'`` and ``'trim'`` modes, a partial overlap of the\n        small array and the large array is sufficient.  For the\n        ``'strict'`` mode, the small array has to be fully contained\n        within the large array, otherwise an\n        `~astropy.nddata.utils.PartialOverlapError` is raised.   In all\n        modes, non-overlapping arrays will raise a\n        `~astropy.nddata.utils.NoOverlapError`.  In ``'partial'`` mode,\n        positions in the small array that do not overlap with the large\n        array will be filled with ``fill_value``.  In ``'trim'`` mode\n        only the overlapping elements are returned, thus the resulting\n        small array may be smaller than the requested ``shape``.\n    fill_value : number, optional\n        If ``mode='partial'``, the value to fill pixels in the extracted\n        small array that do not overlap with the input ``array_large``.\n        ``fill_value`` will be changed to have the same ``dtype`` as the\n        ``array_large`` array, with one exception. If ``array_large``\n        has integer type and ``fill_value`` is ``np.nan``, then a\n        `ValueError` will be raised.\n    return_position : bool, optional\n        If `True`, return the coordinates of ``position`` in the\n        coordinate system of the returned array.\n    \n    Returns\n    -------\n    array_small : ndarray\n        The extracted array.\n    new_position : tuple\n        If ``return_position`` is true, this tuple will contain the\n        coordinates of the input ``position`` in the coordinate system\n        of ``array_small``. Note that for partially overlapping arrays,\n        ``new_position`` might actually be outside of the\n        ``array_small``; ``array_small[new_position]`` might give wrong\n        results if any element in ``new_position`` is negative.\n    \n    Examples\n    --------\n    We consider a large array with the shape 11x10, from which we extract\n    a small array of shape 3x5:\n    \n    >>> import numpy as np\n    >>> from astropy.nddata.utils import extract_array\n    >>> large_array = np.arange(110).reshape((11, 10))\n    >>> extract_array(large_array, (3, 5), (7, 7))\n    array([[65, 66, 67, 68, 69],\n           [75, 76, 77, 78, 79],\n           [85, 86, 87, 88, 89]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f318e651275b31991b91255aa0c113e2f48368e8ae67d92ad7cfc811afcab43c",
            "fields": [
                {
                    "id": "jvtrw37v",
                    "encoding": "",
                    "name": "array_large",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array from which to extract the small array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijbtvvn5",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the extracted array (for 1D arrays, this can be an\n`int`).  See the ``mode`` keyword for additional details.",
                    "type": "int or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ycj8duy3",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position of the small array's center with respect to the\nlarge array.  The pixel coordinates should be in the same order\nas the array shape.  Integer positions are at the pixel centers\n(for 1D arrays, this can be a number).",
                    "type": "number or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_wbxwrlj",
                    "encoding": "",
                    "name": "mode",
                    "value": "partial",
                    "defaultValue": "partial",
                    "description": "The mode used for extracting the small array.  For the\n``'partial'`` and ``'trim'`` modes, a partial overlap of the\nsmall array and the large array is sufficient.  For the\n``'strict'`` mode, the small array has to be fully contained\nwithin the large array, otherwise an\n`~astropy.nddata.utils.PartialOverlapError` is raised.   In all\nmodes, non-overlapping arrays will raise a\n`~astropy.nddata.utils.NoOverlapError`.  In ``'partial'`` mode,\npositions in the small array that do not overlap with the large\narray will be filled with ``fill_value``.  In ``'trim'`` mode\nonly the overlapping elements are returned, thus the resulting\nsmall array may be smaller than the requested ``shape``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xq3q0jm4",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If ``mode='partial'``, the value to fill pixels in the extracted\nsmall array that do not overlap with the input ``array_large``.\n``fill_value`` will be changed to have the same ``dtype`` as the\n``array_large`` array, with one exception. If ``array_large``\nhas integer type and ``fill_value`` is ``np.nan``, then a\n`ValueError` will be raised.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mh2vfdyw",
                    "encoding": "",
                    "name": "return_position",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `True`, return the coordinates of ``position`` in the\ncoordinate system of the returned array.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cgwdi_22",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.extract_array",
                    "defaultValue": "astropy.nddata.extract_array",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "srd164le",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pbhux11",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "id4i75tk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fc9dn1v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xs7790iv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rj2nofsx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zlw8l8ep",
            "name": "nddata.fits_ccddata_reader",
            "description": "Generate a CCDData object from a FITS file.\n    \n    Parameters\n    ----------\n    filename : str\n        Name of fits file.\n    \n    hdu : int, str, tuple of (str, int), optional\n        Index or other identifier of the Header Data Unit of the FITS\n        file from which CCDData should be initialized. If zero and\n        no data in the primary HDU, it will search for the first\n        extension HDU with data. The header will be added to the primary HDU.\n        Default is ``0``.\n    \n    unit : `~astropy.units.Unit`, optional\n        Units of the image data. If this argument is provided and there is a\n        unit for the image in the FITS header (the keyword ``BUNIT`` is used\n        as the unit, if present), this argument is used for the unit.\n        Default is ``None``.\n    \n    hdu_uncertainty : str or None, optional\n        FITS extension from which the uncertainty should be initialized. If the\n        extension does not exist the uncertainty of the CCDData is ``None``.\n        Default is ``'UNCERT'``.\n    \n    hdu_mask : str or None, optional\n        FITS extension from which the mask should be initialized. If the\n        extension does not exist the mask of the CCDData is ``None``.\n        Default is ``'MASK'``.\n    \n    hdu_flags : str or None, optional\n        Currently not implemented.\n        Default is ``None``.\n    \n    key_uncertainty_type : str, optional\n        The header key name where the class name of the uncertainty  is stored\n        in the hdu of the uncertainty (if any).\n        Default is ``UTYPE``.\n    \n        .. versionadded:: 3.1\n    \n    hdu_psf : str or None, optional\n        FITS extension from which the psf image should be initialized. If the\n        extension does not exist the psf of the CCDData is `None`.\n    \n    kwd :\n        Any additional keyword parameters are passed through to the FITS reader\n        in :mod:`astropy.io.fits`; see Notes for additional discussion.\n    \n    Notes\n    -----\n    FITS files that contained scaled data (e.g. unsigned integer images) will\n    be scaled and the keywords used to manage scaled data in\n    :mod:`astropy.io.fits` are disabled.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "af27c890c4d8ddaf7f5e99926766e3b8d4f6f1b8e7ca07e5013e4af42ccfb568",
            "fields": [
                {
                    "id": "_wpys6z6",
                    "encoding": "",
                    "name": "filename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of fits file.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujsxp0px",
                    "encoding": "",
                    "name": "hdu",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Index or other identifier of the Header Data Unit of the FITS\nfile from which CCDData should be initialized. If zero and\nno data in the primary HDU, it will search for the first\nextension HDU with data. The header will be added to the primary HDU.\nDefault is ``0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unrcg5vb",
                    "encoding": "",
                    "name": "unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Units of the image data. If this argument is provided and there is a\nunit for the image in the FITS header (the keyword ``BUNIT`` is used\nas the unit, if present), this argument is used for the unit.\nDefault is ``None``.",
                    "type": "astropy.units.Unit",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmc4oan4",
                    "encoding": "",
                    "name": "hdu_uncertainty",
                    "value": "UNCERT",
                    "defaultValue": "UNCERT",
                    "description": "FITS extension from which the uncertainty should be initialized. If the\nextension does not exist the uncertainty of the CCDData is ``None``.\nDefault is ``'UNCERT'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6x8zdted",
                    "encoding": "",
                    "name": "hdu_mask",
                    "value": "MASK",
                    "defaultValue": "MASK",
                    "description": "FITS extension from which the mask should be initialized. If the\nextension does not exist the mask of the CCDData is ``None``.\nDefault is ``'MASK'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_mcit6_i",
                    "encoding": "",
                    "name": "hdu_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "Currently not implemented.\nDefault is ``None``.",
                    "type": "str or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zkjzxrao",
                    "encoding": "",
                    "name": "key_uncertainty_type",
                    "value": "UTYPE",
                    "defaultValue": "UTYPE",
                    "description": "The header key name where the class name of the uncertainty  is stored\nin the hdu of the uncertainty (if any).\nDefault is ``UTYPE``.\n\n.. versionadded:: 3.1",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hm_gutri",
                    "encoding": "",
                    "name": "hdu_psf",
                    "value": "PSFIMAGE",
                    "defaultValue": "PSFIMAGE",
                    "description": "FITS extension from which the psf image should be initialized. If the\nextension does not exist the psf of the CCDData is `None`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k90dxvc_",
                    "encoding": "",
                    "name": "kwd",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any additional keyword parameters are passed through to the FITS reader\nin :mod:`astropy.io.fits`; see Notes for additional discussion.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbc2e02_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.fits_ccddata_reader",
                    "defaultValue": "astropy.nddata.fits_ccddata_reader",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fnio4rpb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "txdanzqw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tvrhyg80",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qd7izwzn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e8x_ak4p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "96lttvus",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4kaclrk_",
            "name": "nddata.fits_ccddata_writer",
            "description": "Write CCDData object to FITS file.\n    \n    Parameters\n    ----------\n    ccd_data : CCDData\n        Object to write.\n    \n    filename : str\n        Name of file.\n    \n    hdu_mask, hdu_uncertainty, hdu_flags, hdu_psf : str or None, optional\n        If it is a string append this attribute to the HDUList as\n        `~astropy.io.fits.ImageHDU` with the string as extension name.\n        Flags are not supported at this time. If ``None`` this attribute\n        is not appended.\n        Default is ``'MASK'`` for mask, ``'UNCERT'`` for uncertainty,\n        ``'PSFIMAGE'`` for psf, and `None` for flags.\n    \n    key_uncertainty_type : str, optional\n        The header key name for the class name of the uncertainty (if any)\n        that is used to store the uncertainty type in the uncertainty hdu.\n        Default is ``UTYPE``.\n    \n        .. versionadded:: 3.1\n    \n    as_image_hdu : bool\n        If this option is `True`, the first item of the returned\n        `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead of\n        the default `~astropy.io.fits.PrimaryHDU`.\n    \n    kwd :\n        All additional keywords are passed to :py:mod:`astropy.io.fits`\n    \n    Raises\n    ------\n    ValueError\n        - If ``self.mask`` is set but not a `numpy.ndarray`.\n        - If ``self.uncertainty`` is set but not a\n          `~astropy.nddata.StdDevUncertainty`.\n        - If ``self.uncertainty`` is set but has another unit then\n          ``self.data``.\n    \n    NotImplementedError\n        Saving flags is not supported.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "34eea8548b742f1f47c367115d65ed5e1aa26b36b4ee146e46d4324d77cf1a30",
            "fields": [
                {
                    "id": "tpc91ury",
                    "encoding": "",
                    "name": "ccd_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "Object to write.",
                    "type": "CCDData",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9yiwf_a_",
                    "encoding": "",
                    "name": "filename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of file.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "shlprgqq",
                    "encoding": "",
                    "name": "hdu_mask",
                    "value": "MASK",
                    "defaultValue": "MASK",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nyie3jt_",
                    "encoding": "",
                    "name": "hdu_uncertainty",
                    "value": "UNCERT",
                    "defaultValue": "UNCERT",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ce52apml",
                    "encoding": "",
                    "name": "hdu_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jvau9jq1",
                    "encoding": "",
                    "name": "key_uncertainty_type",
                    "value": "UTYPE",
                    "defaultValue": "UTYPE",
                    "description": "The header key name for the class name of the uncertainty (if any)\nthat is used to store the uncertainty type in the uncertainty hdu.\nDefault is ``UTYPE``.\n\n.. versionadded:: 3.1",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emm_dfyr",
                    "encoding": "",
                    "name": "as_image_hdu",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this option is `True`, the first item of the returned\n`~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead of\nthe default `~astropy.io.fits.PrimaryHDU`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8a8ie24",
                    "encoding": "",
                    "name": "hdu_psf",
                    "value": "PSFIMAGE",
                    "defaultValue": "PSFIMAGE",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hu6pu6a8",
                    "encoding": "",
                    "name": "kwd",
                    "value": "",
                    "defaultValue": "",
                    "description": "All additional keywords are passed to :py:mod:`astropy.io.fits`",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wctx3346",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.fits_ccddata_writer",
                    "defaultValue": "astropy.nddata.fits_ccddata_writer",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2zb5m_st",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "biixuth9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4hcbeo4o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uex1sn6z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5cz43fq5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4utrncf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tav6n5io",
            "name": "nddata.interpret_bit_flags",
            "description": "Converts input bit flags to a single integer value (bit mask) or `None`.\n    \n    When input is a list of flags (either a Python list of integer flags or a\n    string of comma-, ``'|'``-, or ``'+'``-separated list of flags),\n    the returned bit mask is obtained by summing input flags.\n    \n    .. note::\n        In order to flip the bits of the returned bit mask,\n        for input of `str` type, prepend '~' to the input string. '~' must\n        be prepended to the *entire string* and not to each bit flag! For\n        input that is already a bit mask or a Python list of bit flags, set\n        ``flip_bits`` for `True` in order to flip the bits of the returned\n        bit mask.\n    \n    Parameters\n    ----------\n    bit_flags : int, str, list, None\n        An integer bit mask or flag, `None`, a string of comma-, ``'|'``- or\n        ``'+'``-separated list of integer bit flags or mnemonic flag names,\n        or a Python list of integer bit flags. If ``bit_flags`` is a `str`\n        and if it is prepended with '~', then the output bit mask will have\n        its bits flipped (compared to simple sum of input flags).\n        For input ``bit_flags`` that is already a bit mask or a Python list\n        of bit flags, bit-flipping can be controlled through ``flip_bits``\n        parameter.\n    \n        .. note::\n            When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n            parameter must be provided.\n    \n        .. note::\n            Only one flag separator is supported at a time. ``bit_flags``\n            string should not mix ``','``, ``'+'``, and ``'|'`` separators.\n    \n    flip_bits : bool, None\n        Indicates whether or not to flip the bits of the returned bit mask\n        obtained from input bit flags. This parameter must be set to `None`\n        when input ``bit_flags`` is either `None` or a Python list of flags.\n    \n    flag_name_map : BitFlagNameMap\n         A `BitFlagNameMap` object that provides mapping from mnemonic\n         bit flag names to integer bit values in order to translate mnemonic\n         flags to numeric values when ``bit_flags`` that are comma- or\n         '+'-separated list of menmonic bit flag names.\n    \n    Returns\n    -------\n    bitmask : int or None\n        Returns an integer bit mask formed from the input bit value or `None`\n        if input ``bit_flags`` parameter is `None` or an empty string.\n        If input string value was prepended with '~' (or ``flip_bits`` was set\n        to `True`), then returned value will have its bits flipped\n        (inverse mask).\n    \n    Examples\n    --------\n        >>> from astropy.nddata.bitmask import interpret_bit_flags, extend_bit_flag_map\n        >>> ST_DQ = extend_bit_flag_map('ST_DQ', CR=1, CLOUDY=4, RAINY=8, HOT=16, DEAD=32)\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags(28))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('4,8,16'))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('CLOUDY,RAINY,HOT', flag_name_map=ST_DQ))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('~4,8,16'))\n        '1111111111100011'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('~(4+8+16)'))\n        '1111111111100011'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('~(CLOUDY+RAINY+HOT)',\n        ... flag_name_map=ST_DQ))\n        '1111111111100011'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags([4, 8, 16]))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags([4, 8, 16], flip_bits=True))\n        '1111111111100011'",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a8ae9044c89a1558237fa6d7391a38ca70e2f426a68b957e8d8299fe43dfdaf2",
            "fields": [
                {
                    "id": "t6vcz3r7",
                    "encoding": "",
                    "name": "bit_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "An integer bit mask or flag, `None`, a string of comma-, ``'|'``- or\n``'+'``-separated list of integer bit flags or mnemonic flag names,\nor a Python list of integer bit flags. If ``bit_flags`` is a `str`\nand if it is prepended with '~', then the output bit mask will have\nits bits flipped (compared to simple sum of input flags).\nFor input ``bit_flags`` that is already a bit mask or a Python list\nof bit flags, bit-flipping can be controlled through ``flip_bits``\nparameter.\n\n.. note::\n    When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n    parameter must be provided.\n\n.. note::\n    Only one flag separator is supported at a time. ``bit_flags``\n    string should not mix ``','``, ``'+'``, and ``'|'`` separators.",
                    "type": "int, str, list, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kg8gmijn",
                    "encoding": "",
                    "name": "flip_bits",
                    "value": "",
                    "defaultValue": "",
                    "description": "Indicates whether or not to flip the bits of the returned bit mask\nobtained from input bit flags. This parameter must be set to `None`\nwhen input ``bit_flags`` is either `None` or a Python list of flags.",
                    "type": "bool, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ia4i_bvm",
                    "encoding": "",
                    "name": "flag_name_map",
                    "value": "",
                    "defaultValue": "",
                    "description": "A `BitFlagNameMap` object that provides mapping from mnemonic\nbit flag names to integer bit values in order to translate mnemonic\nflags to numeric values when ``bit_flags`` that are comma- or\n'+'-separated list of menmonic bit flag names.",
                    "type": "BitFlagNameMap",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "74ot0eg8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.interpret_bit_flags",
                    "defaultValue": "astropy.nddata.interpret_bit_flags",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9untzgr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "en_fthn8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kuw04ci9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwiogcs9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13h3gwla",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbkwnp2w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cvu35358",
            "name": "nddata.overlap_slices",
            "description": "Get slices for the overlapping part of a small and a large array.\n    \n    Given a certain position of the center of the small array, with\n    respect to the large array, tuples of slices are returned which can be\n    used to extract, add or subtract the small array at the given\n    position. This function takes care of the correct behavior at the\n    boundaries, where the small array is cut of appropriately.\n    Integer positions are at the pixel centers.\n    \n    Parameters\n    ----------\n    large_array_shape : tuple of int or int\n        The shape of the large array (for 1D arrays, this can be an\n        `int`).\n    small_array_shape : int or tuple thereof\n        The shape of the small array (for 1D arrays, this can be an\n        `int`).  See the ``mode`` keyword for additional details.\n    position : number or tuple thereof\n        The position of the small array's center with respect to the\n        large array.  The pixel coordinates should be in the same order\n        as the array shape.  Integer positions are at the pixel centers.\n        For any axis where ``small_array_shape`` is even, the position\n        is rounded up, e.g. extracting two elements with a center of\n        ``1`` will define the extracted region as ``[0, 1]``.\n    mode : {'partial', 'trim', 'strict'}, optional\n        In ``'partial'`` mode, a partial overlap of the small and the\n        large array is sufficient.  The ``'trim'`` mode is similar to\n        the ``'partial'`` mode, but ``slices_small`` will be adjusted to\n        return only the overlapping elements.  In the ``'strict'`` mode,\n        the small array has to be fully contained in the large array,\n        otherwise an `~astropy.nddata.utils.PartialOverlapError` is\n        raised.  In all modes, non-overlapping arrays will raise a\n        `~astropy.nddata.utils.NoOverlapError`.\n    \n    Returns\n    -------\n    slices_large : tuple of slice\n        A tuple of slice objects for each axis of the large array, such\n        that ``large_array[slices_large]`` extracts the region of the\n        large array that overlaps with the small array.\n    slices_small : tuple of slice\n        A tuple of slice objects for each axis of the small array, such\n        that ``small_array[slices_small]`` extracts the region that is\n        inside the large array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "628f7dd6c813464333af2b2f435581f7d13fd29e39591d033071d957fd7ba4f1",
            "fields": [
                {
                    "id": "wfln4b2l",
                    "encoding": "",
                    "name": "large_array_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the large array (for 1D arrays, this can be an\n`int`).",
                    "type": "tuple of int or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yk3v_d1w",
                    "encoding": "",
                    "name": "small_array_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the small array (for 1D arrays, this can be an\n`int`).  See the ``mode`` keyword for additional details.",
                    "type": "int or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25e6w5r_",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position of the small array's center with respect to the\nlarge array.  The pixel coordinates should be in the same order\nas the array shape.  Integer positions are at the pixel centers.\nFor any axis where ``small_array_shape`` is even, the position\nis rounded up, e.g. extracting two elements with a center of\n``1`` will define the extracted region as ``[0, 1]``.",
                    "type": "number or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5nsliie",
                    "encoding": "",
                    "name": "mode",
                    "value": "partial",
                    "defaultValue": "partial",
                    "description": "In ``'partial'`` mode, a partial overlap of the small and the\nlarge array is sufficient.  The ``'trim'`` mode is similar to\nthe ``'partial'`` mode, but ``slices_small`` will be adjusted to\nreturn only the overlapping elements.  In the ``'strict'`` mode,\nthe small array has to be fully contained in the large array,\notherwise an `~astropy.nddata.utils.PartialOverlapError` is\nraised.  In all modes, non-overlapping arrays will raise a\n`~astropy.nddata.utils.NoOverlapError`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhvpabwl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.overlap_slices",
                    "defaultValue": "astropy.nddata.overlap_slices",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7lh2ysdq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6rfiwo53",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6hv45mkw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zbjhj0u3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rh1etbkl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewzqo7zp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zkuirh_9",
            "name": "nddata.reshape_as_blocks",
            "description": "Reshape a data array into blocks.\n    \n    This is useful to efficiently apply functions on block subsets of\n    the data instead of using loops.  The reshaped array is a view of\n    the input data array.\n    \n    .. versionadded:: 4.1\n    \n    Parameters\n    ----------\n    data : ndarray\n        The input data array.\n    \n    block_size : int or array-like (int)\n        The integer block size along each axis.  If ``block_size`` is a\n        scalar and ``data`` has more than one dimension, then\n        ``block_size`` will be used for for every axis.  Each dimension\n        of ``block_size`` must divide evenly into the corresponding\n        dimension of ``data``.\n    \n    Returns\n    -------\n    output : ndarray\n        The reshaped array as a view of the input ``data`` array.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata import reshape_as_blocks\n    >>> data = np.arange(16).reshape(4, 4)\n    >>> data\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n    >>> reshape_as_blocks(data, (2, 2))\n    array([[[[ 0,  1],\n             [ 4,  5]],\n            [[ 2,  3],\n             [ 6,  7]]],\n           [[[ 8,  9],\n             [12, 13]],\n            [[10, 11],\n             [14, 15]]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "634c0da7eeef5a20a263e5499674dc56f25d9f5719d2166c884602faf107b7e5",
            "fields": [
                {
                    "id": "zky26mf3",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input data array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8mocllv",
                    "encoding": "",
                    "name": "block_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer block size along each axis.  If ``block_size`` is a\nscalar and ``data`` has more than one dimension, then\n``block_size`` will be used for for every axis.  Each dimension\nof ``block_size`` must divide evenly into the corresponding\ndimension of ``data``.",
                    "type": "int or array-like (int)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17nrvh9v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.reshape_as_blocks",
                    "defaultValue": "astropy.nddata.reshape_as_blocks",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdim_hps",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tqm7c_n2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xycgb78k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ixxobn16",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cq4rpjn9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ms5gwx_y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mbo3nm6j",
            "name": "nddata.subpixel_indices",
            "description": "Convert decimal points to indices, given a subsampling factor.\n    \n    This discards the integer part of the position and uses only the decimal\n    place, and converts this to a subpixel position depending on the\n    subsampling specified. The center of a pixel corresponds to an integer\n    position.\n    \n    Parameters\n    ----------\n    position : ndarray or array-like\n        Positions in pixels.\n    subsampling : int\n        Subsampling factor per pixel.\n    \n    Returns\n    -------\n    indices : ndarray\n        The integer subpixel indices corresponding to the input positions.\n    \n    Examples\n    --------\n    If no subsampling is used, then the subpixel indices returned are always 0:\n    \n    >>> from astropy.nddata.utils import subpixel_indices\n    >>> subpixel_indices([1.2, 3.4, 5.6], 1)  # doctest: +FLOAT_CMP\n    array([0., 0., 0.])\n    \n    If instead we use a subsampling of 2, we see that for the two first values\n    (1.1 and 3.4) the subpixel position is 1, while for 5.6 it is 0. This is\n    because the values of 1, 3, and 6 lie in the center of pixels, and 1.1 and\n    3.4 lie in the left part of the pixels and 5.6 lies in the right part.\n    \n    >>> subpixel_indices([1.2, 3.4, 5.5], 2)  # doctest: +FLOAT_CMP\n    array([1., 1., 0.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "101b14c7b106fbd772bceec8020b854a8b6771111c4628609b40569d7be7e7df",
            "fields": [
                {
                    "id": "0dws2teo",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions in pixels.",
                    "type": "ndarray or array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4grfh06s",
                    "encoding": "",
                    "name": "subsampling",
                    "value": "",
                    "defaultValue": "",
                    "description": "Subsampling factor per pixel.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uipjdd_a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.subpixel_indices",
                    "defaultValue": "astropy.nddata.subpixel_indices",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5w38fqj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_8w7k6hm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n94qgbrs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j92hmnyf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsc6479g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2uo31jc6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ouj_f59a",
            "name": "nddata.support_nddata",
            "description": "Decorator to wrap functions that could accept an NDData instance with\n    its properties passed as function arguments.\n    \n    Parameters\n    ----------\n    _func : callable, None, optional\n        The function to decorate or ``None`` if used as factory. The first\n        positional argument should be ``data`` and take a numpy array. It is\n        possible to overwrite the name, see ``attribute_argument_mapping``\n        argument.\n        Default is ``None``.\n    \n    accepts : class, optional\n        The class or subclass of ``NDData`` that should be unpacked before\n        calling the function.\n        Default is ``NDData``\n    \n    repack : bool, optional\n        Should be ``True`` if the return should be converted to the input\n        class again after the wrapped function call.\n        Default is ``False``.\n    \n        .. note::\n           Must be ``True`` if either one of ``returns`` or ``keeps``\n           is specified.\n    \n    returns : iterable, None, optional\n        An iterable containing strings which returned value should be set\n        on the class. For example if a function returns data and mask, this\n        should be ``['data', 'mask']``. If ``None`` assume the function only\n        returns one argument: ``'data'``.\n        Default is ``None``.\n    \n        .. note::\n           Must be ``None`` if ``repack=False``.\n    \n    keeps : iterable. None, optional\n        An iterable containing strings that indicate which values should be\n        copied from the original input to the returned class. If ``None``\n        assume that no attributes are copied.\n        Default is ``None``.\n    \n        .. note::\n           Must be ``None`` if ``repack=False``.\n    \n    attribute_argument_mapping :\n        Keyword parameters that optionally indicate which function argument\n        should be interpreted as which attribute on the input. By default\n        it assumes the function takes a ``data`` argument as first argument,\n        but if the first argument is called ``input`` one should pass\n        ``support_nddata(..., data='input')`` to the function.\n    \n    Returns\n    -------\n    decorator_factory or decorated_function : callable\n        If ``_func=None`` this returns a decorator, otherwise it returns the\n        decorated ``_func``.\n    \n    Notes\n    -----\n    If properties of ``NDData`` are set but have no corresponding function\n    argument a Warning is shown.\n    \n    If a property is set of the ``NDData`` are set and an explicit argument is\n    given, the explicitly given argument is used and a Warning is shown.\n    \n    The supported properties are:\n    \n    - ``mask``\n    - ``unit``\n    - ``wcs``\n    - ``meta``\n    - ``uncertainty``\n    - ``flags``\n    \n    Examples\n    --------\n    This function takes a Numpy array for the data, and some WCS information\n    with the ``wcs`` keyword argument::\n    \n        def downsample(data, wcs=None):\n            # downsample data and optionally WCS here\n            pass\n    \n    However, you might have an NDData instance that has the ``wcs`` property\n    set and you would like to be able to call the function with\n    ``downsample(my_nddata)`` and have the WCS information, if present,\n    automatically be passed to the ``wcs`` keyword argument.\n    \n    This decorator can be used to make this possible::\n    \n        @support_nddata\n        def downsample(data, wcs=None):\n            # downsample data and optionally WCS here\n            pass\n    \n    This function can now either be called as before, specifying the data and\n    WCS separately, or an NDData instance can be passed to the ``data``\n    argument.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "563c354dae52a9ac64ce7e3965b561065b58253f48673ba00eec4228f25cfad8",
            "fields": [
                {
                    "id": "4xh5jxfb",
                    "encoding": "",
                    "name": "_func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function to decorate or ``None`` if used as factory. The first\npositional argument should be ``data`` and take a numpy array. It is\npossible to overwrite the name, see ``attribute_argument_mapping``\nargument.\nDefault is ``None``.",
                    "type": "callable, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0g0u1rxb",
                    "encoding": "",
                    "name": "accepts",
                    "value": "abc.ABCMeta",
                    "defaultValue": "abc.ABCMeta",
                    "description": "The class or subclass of ``NDData`` that should be unpacked before\ncalling the function.\nDefault is ``NDData``",
                    "type": "abc.ABCMeta",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dw7ty_s2",
                    "encoding": "",
                    "name": "repack",
                    "value": false,
                    "defaultValue": false,
                    "description": "Should be ``True`` if the return should be converted to the input\nclass again after the wrapped function call.\nDefault is ``False``.\n\n.. note::\n   Must be ``True`` if either one of ``returns`` or ``keeps``\n   is specified.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imn95m7v",
                    "encoding": "",
                    "name": "returns",
                    "value": "",
                    "defaultValue": "",
                    "description": "An iterable containing strings which returned value should be set\non the class. For example if a function returns data and mask, this\nshould be ``['data', 'mask']``. If ``None`` assume the function only\nreturns one argument: ``'data'``.\nDefault is ``None``.\n\n.. note::\n   Must be ``None`` if ``repack=False``.",
                    "type": "iterable, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_qyxaka",
                    "encoding": "",
                    "name": "keeps",
                    "value": "",
                    "defaultValue": "",
                    "description": "An iterable containing strings that indicate which values should be\ncopied from the original input to the returned class. If ``None``\nassume that no attributes are copied.\nDefault is ``None``.\n\n.. note::\n   Must be ``None`` if ``repack=False``.",
                    "type": "iterable. None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qgvrk79g",
                    "encoding": "",
                    "name": "attribute_argument_mapping",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword parameters that optionally indicate which function argument\nshould be interpreted as which attribute on the input. By default\nit assumes the function takes a ``data`` argument as first argument,\nbut if the first argument is called ``input`` one should pass\n``support_nddata(..., data='input')`` to the function.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0tt2986p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.support_nddata",
                    "defaultValue": "astropy.nddata.support_nddata",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v4j_1hy8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ulbegk6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qzj8g0hd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jpgsw9ew",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata",
                    "defaultValue": "astropy.nddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "570kzuj5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4qvsjo9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wm6y6y0u",
            "name": "bitmask.bitfield_to_boolean_mask",
            "description": "bitfield_to_boolean_mask(bitfield, ignore_flags=None, flip_bits=None, good_mask_value=False, dtype=numpy.bool_)\n    Converts an array of bit fields to a boolean (or integer) mask array\n    according to a bit mask constructed from the supplied bit flags (see\n    ``ignore_flags`` parameter).\n    \n    This function is particularly useful to convert data quality arrays to\n    boolean masks with selective filtering of DQ flags.\n    \n    Parameters\n    ----------\n    bitfield : ndarray\n        An array of bit flags. By default, values different from zero are\n        interpreted as \"bad\" values and values equal to zero are considered\n        as \"good\" values. However, see ``ignore_flags`` parameter on how to\n        selectively ignore some bits in the ``bitfield`` array data.\n    \n    ignore_flags : int, str, list, None (default = 0)\n        An integer bit mask, `None`, a Python list of bit flags, a comma-,\n        or ``'|'``-separated, ``'+'``-separated string list of integer\n        bit flags or mnemonic flag names that indicate what bits in the input\n        ``bitfield`` should be *ignored* (i.e., zeroed), or `None`.\n    \n        .. note::\n            When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n            parameter must be provided.\n    \n        | Setting ``ignore_flags`` to `None` effectively will make\n          `bitfield_to_boolean_mask` interpret all ``bitfield`` elements\n          as \"good\" regardless of their value.\n    \n        | When ``ignore_flags`` argument is an integer bit mask, it will be\n          combined using bitwise-NOT and bitwise-AND with each element of the\n          input ``bitfield`` array (``~ignore_flags & bitfield``). If the\n          resultant bitfield element is non-zero, that element will be\n          interpreted as a \"bad\" in the output boolean mask and it will be\n          interpreted as \"good\" otherwise. ``flip_bits`` parameter may be used\n          to flip the bits (``bitwise-NOT``) of the bit mask thus effectively\n          changing the meaning of the ``ignore_flags`` parameter from \"ignore\"\n          to \"use only\" these flags.\n    \n        .. note::\n    \n            Setting ``ignore_flags`` to 0 effectively will assume that all\n            non-zero elements in the input ``bitfield`` array are to be\n            interpreted as \"bad\".\n    \n        | When ``ignore_flags`` argument is a Python list of integer bit\n          flags, these flags are added together to create an integer bit mask.\n          Each item in the list must be a flag, i.e., an integer that is an\n          integer power of 2. In order to flip the bits of the resultant\n          bit mask, use ``flip_bits`` parameter.\n    \n        | Alternatively, ``ignore_flags`` may be a string of comma- or\n          ``'+'``(or ``'|'``)-separated list of integer bit flags that should\n          be added (bitwise OR) together to create an integer bit mask.\n          For example, both ``'4,8'``, ``'4|8'``, and ``'4+8'`` are equivalent\n          and indicate that bit flags 4 and 8 in the input ``bitfield``\n          array should be ignored when generating boolean mask.\n    \n        .. note::\n    \n            ``'None'``, ``'INDEF'``, and empty (or all white space) strings\n            are special values of string ``ignore_flags`` that are\n            interpreted as `None`.\n    \n        .. note::\n    \n            Each item in the list must be a flag, i.e., an integer that is an\n            integer power of 2. In addition, for convenience, an arbitrary\n            **single** integer is allowed and it will be interpreted as an\n            integer bit mask. For example, instead of ``'4,8'`` one could\n            simply provide string ``'12'``.\n    \n        .. note::\n            Only one flag separator is supported at a time. ``ignore_flags``\n            string should not mix ``','``, ``'+'``, and ``'|'`` separators.\n    \n        .. note::\n    \n            When ``ignore_flags`` is a `str` and when it is prepended with\n            '~', then the meaning of ``ignore_flags`` parameters will be\n            reversed: now it will be interpreted as a list of bit flags to be\n            *used* (or *not ignored*) when deciding which elements of the\n            input ``bitfield`` array are \"bad\". Following this convention,\n            an ``ignore_flags`` string value of ``'~0'`` would be equivalent\n            to setting ``ignore_flags=None``.\n    \n        .. warning::\n    \n            Because prepending '~' to a string ``ignore_flags`` is equivalent\n            to setting ``flip_bits`` to `True`, ``flip_bits`` cannot be used\n            with string ``ignore_flags`` and it must be set to `None`.\n    \n    flip_bits : bool, None (default = None)\n        Specifies whether or not to invert the bits of the bit mask either\n        supplied directly through ``ignore_flags`` parameter or built from the\n        bit flags passed through ``ignore_flags`` (only when bit flags are\n        passed as Python lists of integer bit flags). Occasionally, it may be\n        useful to *consider only specific bit flags* in the ``bitfield``\n        array when creating a boolean mask as opposed to *ignoring* specific\n        bit flags as ``ignore_flags`` behaves by default. This can be achieved\n        by inverting/flipping the bits of the bit mask created from\n        ``ignore_flags`` flags which effectively changes the meaning of the\n        ``ignore_flags`` parameter from \"ignore\" to \"use only\" these flags.\n        Setting ``flip_bits`` to `None` means that no bit flipping will be\n        performed. Bit flipping for string lists of bit flags must be\n        specified by prepending '~' to string bit flag lists\n        (see documentation for ``ignore_flags`` for more details).\n    \n        .. warning::\n            This parameter can be set to either `True` or `False` **ONLY** when\n            ``ignore_flags`` is either an integer bit mask or a Python\n            list of integer bit flags. When ``ignore_flags`` is either\n            `None` or a string list of flags, ``flip_bits`` **MUST** be set\n            to `None`.\n    \n    good_mask_value : int, bool (default = False)\n        This parameter is used to derive the values that will be assigned to\n        the elements in the output boolean mask array that correspond to the\n        \"good\" bit fields (that are 0 after zeroing bits specified by\n        ``ignore_flags``) in the input ``bitfield`` array. When\n        ``good_mask_value`` is non-zero or ``numpy.True_`` then values in the\n        output boolean mask array corresponding to \"good\" bit fields in\n        ``bitfield`` will be ``numpy.True_`` (if ``dtype`` is ``numpy.bool_``)\n        or 1 (if ``dtype`` is of numerical type) and values of corresponding\n        to \"bad\" flags will be ``numpy.False_`` (or 0). When\n        ``good_mask_value`` is zero or ``numpy.False_`` then the values\n        in the output boolean mask array corresponding to \"good\" bit fields\n        in ``bitfield`` will be ``numpy.False_`` (if ``dtype`` is\n        ``numpy.bool_``) or 0 (if ``dtype`` is of numerical type) and values\n        of corresponding to \"bad\" flags will be ``numpy.True_`` (or 1).\n    \n    dtype : data-type (default = ``numpy.bool_``)\n        The desired data-type for the output binary mask array.\n    \n    flag_name_map : BitFlagNameMap\n         A `BitFlagNameMap` object that provides mapping from mnemonic\n         bit flag names to integer bit values in order to translate mnemonic\n         flags to numeric values when ``bit_flags`` that are comma- or\n         '+'-separated list of menmonic bit flag names.\n    \n    Returns\n    -------\n    mask : ndarray\n        Returns an array of the same dimensionality as the input ``bitfield``\n        array whose elements can have two possible values,\n        e.g., ``numpy.True_`` or ``numpy.False_`` (or 1 or 0 for integer\n        ``dtype``) according to values of to the input ``bitfield`` elements,\n        ``ignore_flags`` parameter, and the ``good_mask_value`` parameter.\n    \n    Examples\n    --------\n        >>> from astropy.nddata import bitmask\n        >>> import numpy as np\n        >>> dqarr = np.asarray([[0, 0, 1, 2, 0, 8, 12, 0],\n        ...                     [10, 4, 0, 0, 0, 16, 6, 0]])\n        >>> flag_map = bitmask.extend_bit_flag_map(\n        ...     'ST_DQ', CR=2, CLOUDY=4, RAINY=8, HOT=16, DEAD=32\n        ... )\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=0,\n        ...                                  dtype=int)\n        array([[0, 0, 1, 1, 0, 1, 1, 0],\n               [1, 1, 0, 0, 0, 1, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=0,\n        ...                                  dtype=bool)\n        array([[False, False,  True,  True, False,  True,  True, False],\n               [ True,  True, False, False, False,  True,  True, False]]...)\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=6,\n        ...                                  good_mask_value=0, dtype=int)\n        array([[0, 0, 1, 0, 0, 1, 1, 0],\n               [1, 0, 0, 0, 0, 1, 0, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=~6,\n        ...                                  good_mask_value=0, dtype=int)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=6, dtype=int,\n        ...                                  flip_bits=True, good_mask_value=0)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(2+4)',\n        ...                                  good_mask_value=0, dtype=int)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags=[2, 4],\n        ...                                  flip_bits=True, good_mask_value=0,\n        ...                                  dtype=int)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(CR,CLOUDY)',\n        ...                                  good_mask_value=0, dtype=int,\n        ...                                  flag_name_map=flag_map)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])\n        >>> bitmask.bitfield_to_boolean_mask(dqarr, ignore_flags='~(CR+CLOUDY)',\n        ...                                  good_mask_value=0, dtype=int,\n        ...                                  flag_name_map=flag_map)\n        array([[0, 0, 0, 1, 0, 0, 1, 0],\n               [1, 1, 0, 0, 0, 0, 1, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "346ab41636210fedbb74de996e96987a94c713675874bec1859a6f1f2a05cd27",
            "fields": [
                {
                    "id": "qlbjyesc",
                    "encoding": "",
                    "name": "bitfield",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of bit flags. By default, values different from zero are\ninterpreted as \"bad\" values and values equal to zero are considered\nas \"good\" values. However, see ``ignore_flags`` parameter on how to\nselectively ignore some bits in the ``bitfield`` array data.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etig9s4v",
                    "encoding": "",
                    "name": "ignore_flags",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "An integer bit mask, `None`, a Python list of bit flags, a comma-,\nor ``'|'``-separated, ``'+'``-separated string list of integer\nbit flags or mnemonic flag names that indicate what bits in the input\n``bitfield`` should be *ignored* (i.e., zeroed), or `None`.\n\n.. note::\n    When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n    parameter must be provided.\n\n| Setting ``ignore_flags`` to `None` effectively will make\n  `bitfield_to_boolean_mask` interpret all ``bitfield`` elements\n  as \"good\" regardless of their value.\n\n| When ``ignore_flags`` argument is an integer bit mask, it will be\n  combined using bitwise-NOT and bitwise-AND with each element of the\n  input ``bitfield`` array (``~ignore_flags & bitfield``). If the\n  resultant bitfield element is non-zero, that element will be\n  interpreted as a \"bad\" in the output boolean mask and it will be\n  interpreted as \"good\" otherwise. ``flip_bits`` parameter may be used\n  to flip the bits (``bitwise-NOT``) of the bit mask thus effectively\n  changing the meaning of the ``ignore_flags`` parameter from \"ignore\"\n  to \"use only\" these flags.\n\n.. note::\n\n    Setting ``ignore_flags`` to 0 effectively will assume that all\n    non-zero elements in the input ``bitfield`` array are to be\n    interpreted as \"bad\".\n\n| When ``ignore_flags`` argument is a Python list of integer bit\n  flags, these flags are added together to create an integer bit mask.\n  Each item in the list must be a flag, i.e., an integer that is an\n  integer power of 2. In order to flip the bits of the resultant\n  bit mask, use ``flip_bits`` parameter.\n\n| Alternatively, ``ignore_flags`` may be a string of comma- or\n  ``'+'``(or ``'|'``)-separated list of integer bit flags that should\n  be added (bitwise OR) together to create an integer bit mask.\n  For example, both ``'4,8'``, ``'4|8'``, and ``'4+8'`` are equivalent\n  and indicate that bit flags 4 and 8 in the input ``bitfield``\n  array should be ignored when generating boolean mask.\n\n.. note::\n\n    ``'None'``, ``'INDEF'``, and empty (or all white space) strings\n    are special values of string ``ignore_flags`` that are\n    interpreted as `None`.\n\n.. note::\n\n    Each item in the list must be a flag, i.e., an integer that is an\n    integer power of 2. In addition, for convenience, an arbitrary\n    **single** integer is allowed and it will be interpreted as an\n    integer bit mask. For example, instead of ``'4,8'`` one could\n    simply provide string ``'12'``.\n\n.. note::\n    Only one flag separator is supported at a time. ``ignore_flags``\n    string should not mix ``','``, ``'+'``, and ``'|'`` separators.\n\n.. note::\n\n    When ``ignore_flags`` is a `str` and when it is prepended with\n    '~', then the meaning of ``ignore_flags`` parameters will be\n    reversed: now it will be interpreted as a list of bit flags to be\n    *used* (or *not ignored*) when deciding which elements of the\n    input ``bitfield`` array are \"bad\". Following this convention,\n    an ``ignore_flags`` string value of ``'~0'`` would be equivalent\n    to setting ``ignore_flags=None``.\n\n.. warning::\n\n    Because prepending '~' to a string ``ignore_flags`` is equivalent\n    to setting ``flip_bits`` to `True`, ``flip_bits`` cannot be used\n    with string ``ignore_flags`` and it must be set to `None`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zp2yp2vd",
                    "encoding": "",
                    "name": "flip_bits",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies whether or not to invert the bits of the bit mask either\nsupplied directly through ``ignore_flags`` parameter or built from the\nbit flags passed through ``ignore_flags`` (only when bit flags are\npassed as Python lists of integer bit flags). Occasionally, it may be\nuseful to *consider only specific bit flags* in the ``bitfield``\narray when creating a boolean mask as opposed to *ignoring* specific\nbit flags as ``ignore_flags`` behaves by default. This can be achieved\nby inverting/flipping the bits of the bit mask created from\n``ignore_flags`` flags which effectively changes the meaning of the\n``ignore_flags`` parameter from \"ignore\" to \"use only\" these flags.\nSetting ``flip_bits`` to `None` means that no bit flipping will be\nperformed. Bit flipping for string lists of bit flags must be\nspecified by prepending '~' to string bit flag lists\n(see documentation for ``ignore_flags`` for more details).\n\n.. warning::\n    This parameter can be set to either `True` or `False` **ONLY** when\n    ``ignore_flags`` is either an integer bit mask or a Python\n    list of integer bit flags. When ``ignore_flags`` is either\n    `None` or a string list of flags, ``flip_bits`` **MUST** be set\n    to `None`.",
                    "type": "bool, None (default = None)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gn0uxc9f",
                    "encoding": "",
                    "name": "good_mask_value",
                    "value": false,
                    "defaultValue": false,
                    "description": "This parameter is used to derive the values that will be assigned to\nthe elements in the output boolean mask array that correspond to the\n\"good\" bit fields (that are 0 after zeroing bits specified by\n``ignore_flags``) in the input ``bitfield`` array. When\n``good_mask_value`` is non-zero or ``numpy.True_`` then values in the\noutput boolean mask array corresponding to \"good\" bit fields in\n``bitfield`` will be ``numpy.True_`` (if ``dtype`` is ``numpy.bool_``)\nor 1 (if ``dtype`` is of numerical type) and values of corresponding\nto \"bad\" flags will be ``numpy.False_`` (or 0). When\n``good_mask_value`` is zero or ``numpy.False_`` then the values\nin the output boolean mask array corresponding to \"good\" bit fields\nin ``bitfield`` will be ``numpy.False_`` (if ``dtype`` is\n``numpy.bool_``) or 0 (if ``dtype`` is of numerical type) and values\nof corresponding to \"bad\" flags will be ``numpy.True_`` (or 1).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0u95r7g8",
                    "encoding": "",
                    "name": "dtype",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The desired data-type for the output binary mask array.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptaqzii7",
                    "encoding": "",
                    "name": "flag_name_map",
                    "value": "",
                    "defaultValue": "",
                    "description": "A `BitFlagNameMap` object that provides mapping from mnemonic\nbit flag names to integer bit values in order to translate mnemonic\nflags to numeric values when ``bit_flags`` that are comma- or\n'+'-separated list of menmonic bit flag names.",
                    "type": "BitFlagNameMap",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39eaq_4f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.bitmask.bitfield_to_boolean_mask",
                    "defaultValue": "astropy.nddata.bitmask.bitfield_to_boolean_mask",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "drc2vdz2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "apebo8pb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ktranqw_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ge6n68vq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.bitmask",
                    "defaultValue": "astropy.nddata.bitmask",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5n7yy53q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eb6xciad",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ogvk521p",
            "name": "bitmask.extend_bit_flag_map",
            "description": "A convenience function for creating bit flags maps by subclassing an\n    existing map and adding additional flags supplied as keyword arguments.\n    \n    Parameters\n    ----------\n    cls_name : str\n        Class name of the bit flag map to be created.\n    \n    base_cls : BitFlagNameMap, optional\n        Base class for the new bit flag map.\n    \n    **kwargs : int\n        Each supplied keyword argument will be used to define bit flag\n        names in the new map. In addition to bit flag names, ``__version__`` is\n        allowed to indicate the version of the newly created map.\n    \n    Examples\n    --------\n        >>> from astropy.nddata.bitmask import extend_bit_flag_map\n        >>> ST_DQ = extend_bit_flag_map('ST_DQ', __version__='1.0.0', CR=1, CLOUDY=4, RAINY=8)\n        >>> ST_CAM1_DQ = extend_bit_flag_map('ST_CAM1_DQ', ST_DQ, HOT=16, DEAD=32)\n        >>> ST_CAM1_DQ['HOT']  # <-- Access flags as dictionary keys\n        16\n        >>> ST_CAM1_DQ.HOT  # <-- Access flags as class attributes\n        16",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d4ab1480128e6785db921a5e84ba487cb63781dd5302c1ca882fff4fc8b0eda",
            "fields": [
                {
                    "id": "_eitudri",
                    "encoding": "",
                    "name": "cls_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "Class name of the bit flag map to be created.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "st3uqql0",
                    "encoding": "",
                    "name": "base_cls",
                    "value": "astropy.nddata.bitmask.BitFlagNameMeta",
                    "defaultValue": "astropy.nddata.bitmask.BitFlagNameMeta",
                    "description": "Base class for the new bit flag map.",
                    "type": "astropy.nddata.bitmask.BitFlagNameMeta",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bt8ijp7f",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ps4udmwh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.bitmask.extend_bit_flag_map",
                    "defaultValue": "astropy.nddata.bitmask.extend_bit_flag_map",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhlvehee",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "znlkvhei",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d2ersxl1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xee39bso",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.bitmask",
                    "defaultValue": "astropy.nddata.bitmask",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "itjerz08",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0dkwysw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ekruul_1",
            "name": "bitmask.interpret_bit_flags",
            "description": "Converts input bit flags to a single integer value (bit mask) or `None`.\n    \n    When input is a list of flags (either a Python list of integer flags or a\n    string of comma-, ``'|'``-, or ``'+'``-separated list of flags),\n    the returned bit mask is obtained by summing input flags.\n    \n    .. note::\n        In order to flip the bits of the returned bit mask,\n        for input of `str` type, prepend '~' to the input string. '~' must\n        be prepended to the *entire string* and not to each bit flag! For\n        input that is already a bit mask or a Python list of bit flags, set\n        ``flip_bits`` for `True` in order to flip the bits of the returned\n        bit mask.\n    \n    Parameters\n    ----------\n    bit_flags : int, str, list, None\n        An integer bit mask or flag, `None`, a string of comma-, ``'|'``- or\n        ``'+'``-separated list of integer bit flags or mnemonic flag names,\n        or a Python list of integer bit flags. If ``bit_flags`` is a `str`\n        and if it is prepended with '~', then the output bit mask will have\n        its bits flipped (compared to simple sum of input flags).\n        For input ``bit_flags`` that is already a bit mask or a Python list\n        of bit flags, bit-flipping can be controlled through ``flip_bits``\n        parameter.\n    \n        .. note::\n            When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n            parameter must be provided.\n    \n        .. note::\n            Only one flag separator is supported at a time. ``bit_flags``\n            string should not mix ``','``, ``'+'``, and ``'|'`` separators.\n    \n    flip_bits : bool, None\n        Indicates whether or not to flip the bits of the returned bit mask\n        obtained from input bit flags. This parameter must be set to `None`\n        when input ``bit_flags`` is either `None` or a Python list of flags.\n    \n    flag_name_map : BitFlagNameMap\n         A `BitFlagNameMap` object that provides mapping from mnemonic\n         bit flag names to integer bit values in order to translate mnemonic\n         flags to numeric values when ``bit_flags`` that are comma- or\n         '+'-separated list of menmonic bit flag names.\n    \n    Returns\n    -------\n    bitmask : int or None\n        Returns an integer bit mask formed from the input bit value or `None`\n        if input ``bit_flags`` parameter is `None` or an empty string.\n        If input string value was prepended with '~' (or ``flip_bits`` was set\n        to `True`), then returned value will have its bits flipped\n        (inverse mask).\n    \n    Examples\n    --------\n        >>> from astropy.nddata.bitmask import interpret_bit_flags, extend_bit_flag_map\n        >>> ST_DQ = extend_bit_flag_map('ST_DQ', CR=1, CLOUDY=4, RAINY=8, HOT=16, DEAD=32)\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags(28))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('4,8,16'))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('CLOUDY,RAINY,HOT', flag_name_map=ST_DQ))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('~4,8,16'))\n        '1111111111100011'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('~(4+8+16)'))\n        '1111111111100011'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags('~(CLOUDY+RAINY+HOT)',\n        ... flag_name_map=ST_DQ))\n        '1111111111100011'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags([4, 8, 16]))\n        '0000000000011100'\n        >>> \"{0:016b}\".format(0xFFFF & interpret_bit_flags([4, 8, 16], flip_bits=True))\n        '1111111111100011'",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0cbff07fc9ea43da82f2b5d5a8cd27e616ba426b8a00b3934839db1db4af2c56",
            "fields": [
                {
                    "id": "h1b604rz",
                    "encoding": "",
                    "name": "bit_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "An integer bit mask or flag, `None`, a string of comma-, ``'|'``- or\n``'+'``-separated list of integer bit flags or mnemonic flag names,\nor a Python list of integer bit flags. If ``bit_flags`` is a `str`\nand if it is prepended with '~', then the output bit mask will have\nits bits flipped (compared to simple sum of input flags).\nFor input ``bit_flags`` that is already a bit mask or a Python list\nof bit flags, bit-flipping can be controlled through ``flip_bits``\nparameter.\n\n.. note::\n    When ``bit_flags`` is a list of flag names, the ``flag_name_map``\n    parameter must be provided.\n\n.. note::\n    Only one flag separator is supported at a time. ``bit_flags``\n    string should not mix ``','``, ``'+'``, and ``'|'`` separators.",
                    "type": "int, str, list, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynmu4ovt",
                    "encoding": "",
                    "name": "flip_bits",
                    "value": "",
                    "defaultValue": "",
                    "description": "Indicates whether or not to flip the bits of the returned bit mask\nobtained from input bit flags. This parameter must be set to `None`\nwhen input ``bit_flags`` is either `None` or a Python list of flags.",
                    "type": "bool, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27dhxae9",
                    "encoding": "",
                    "name": "flag_name_map",
                    "value": "",
                    "defaultValue": "",
                    "description": "A `BitFlagNameMap` object that provides mapping from mnemonic\nbit flag names to integer bit values in order to translate mnemonic\nflags to numeric values when ``bit_flags`` that are comma- or\n'+'-separated list of menmonic bit flag names.",
                    "type": "BitFlagNameMap",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "flymx110",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.bitmask.interpret_bit_flags",
                    "defaultValue": "astropy.nddata.bitmask.interpret_bit_flags",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hc71hw6o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fs6j93nl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aysr4uzd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wirtufp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.bitmask",
                    "defaultValue": "astropy.nddata.bitmask",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "14o1qigj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1t78i2rf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "18xakndf",
            "name": "blocks.block_reduce",
            "description": "Downsample a data array by applying a function to local blocks.\n    \n    If ``data`` is not perfectly divisible by ``block_size`` along a\n    given axis then the data will be trimmed (from the end) along that\n    axis.\n    \n    Parameters\n    ----------\n    data : array-like\n        The data to be resampled.\n    \n    block_size : int or array-like (int)\n        The integer block size along each axis.  If ``block_size`` is a\n        scalar and ``data`` has more than one dimension, then\n        ``block_size`` will be used for for every axis.\n    \n    func : callable, optional\n        The method to use to downsample the data. Must be a callable\n        that takes in a 4D `~numpy.ndarray` (the 2D `~numpy.ndarray`\n        input into `block_reduce` gets reshaped as 4D) and has an\n        ``axis`` keyword that accepts tuples. This function will be\n        called with ``axis=(2, 3)`` and it should return a 2D array. The\n        default is `~numpy.sum`, which provides block summation (and\n        conserves the data sum).\n    \n    Returns\n    -------\n    output : array-like\n        The resampled data. Note the depending on the input ``func``,\n        the dtype of the output array may not match the input array.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata import block_reduce\n    >>> data = np.arange(16).reshape(4, 4)\n    >>> block_reduce(data, 2)  # doctest: +FLOAT_CMP\n    array([[10, 18],\n           [42, 50]])\n    \n    >>> block_reduce(data, 2, func=np.mean)  # doctest: +FLOAT_CMP\n    array([[  2.5,   4.5],\n           [ 10.5,  12.5]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f10b661fa920588442b39be6c934bc20b75011ac50177e19485c3fbb1008d1eb",
            "fields": [
                {
                    "id": "ilt0j44s",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The data to be resampled.",
                    "type": "array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4zn2_vv",
                    "encoding": "",
                    "name": "block_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer block size along each axis.  If ``block_size`` is a\nscalar and ``data`` has more than one dimension, then\n``block_size`` will be used for for every axis.",
                    "type": "int or array-like (int)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zf6vm351",
                    "encoding": "",
                    "name": "func",
                    "value": "numpy._ArrayFunctionDispatcher",
                    "defaultValue": "numpy._ArrayFunctionDispatcher",
                    "description": "The method to use to downsample the data. Must be a callable\nthat takes in a 4D `~numpy.ndarray` (the 2D `~numpy.ndarray`\ninput into `block_reduce` gets reshaped as 4D) and has an\n``axis`` keyword that accepts tuples. This function will be\ncalled with ``axis=(2, 3)`` and it should return a 2D array. The\ndefault is `~numpy.sum`, which provides block summation (and\nconserves the data sum).",
                    "type": "numpy._ArrayFunctionDispatcher",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8eqq0ij",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.blocks.block_reduce",
                    "defaultValue": "astropy.nddata.blocks.block_reduce",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njyrw7bl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbcw1ppc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y3vna5r0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hqs9r763",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.blocks",
                    "defaultValue": "astropy.nddata.blocks",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rc3vgsq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k2193a9e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "z321b47j",
            "name": "blocks.block_replicate",
            "description": "Upsample a data array by block replication.\n    \n    Parameters\n    ----------\n    data : array-like\n        The data to be block replicated.\n    \n    block_size : int or array-like (int)\n        The integer block size along each axis.  If ``block_size`` is a\n        scalar and ``data`` has more than one dimension, then\n        ``block_size`` will be used for for every axis.\n    \n    conserve_sum : bool, optional\n        If `True` (the default) then the sum of the output\n        block-replicated data will equal the sum of the input ``data``.\n    \n    Returns\n    -------\n    output : array-like\n        The block-replicated data. Note that when ``conserve_sum`` is\n        `True`, the dtype of the output array will be float.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata import block_replicate\n    >>> data = np.array([[0., 1.], [2., 3.]])\n    >>> block_replicate(data, 2)  # doctest: +FLOAT_CMP\n    array([[0.  , 0.  , 0.25, 0.25],\n           [0.  , 0.  , 0.25, 0.25],\n           [0.5 , 0.5 , 0.75, 0.75],\n           [0.5 , 0.5 , 0.75, 0.75]])\n    \n    >>> block_replicate(data, 2, conserve_sum=False)  # doctest: +FLOAT_CMP\n    array([[0., 0., 1., 1.],\n           [0., 0., 1., 1.],\n           [2., 2., 3., 3.],\n           [2., 2., 3., 3.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f8a33287560adf6fdf7c5d6c9986eaf1ff91a9c81011e9d8ae6bb13c85e56626",
            "fields": [
                {
                    "id": "2e8fs_q8",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The data to be block replicated.",
                    "type": "array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tt7ly_s",
                    "encoding": "",
                    "name": "block_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer block size along each axis.  If ``block_size`` is a\nscalar and ``data`` has more than one dimension, then\n``block_size`` will be used for for every axis.",
                    "type": "int or array-like (int)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l4ihduwx",
                    "encoding": "",
                    "name": "conserve_sum",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `True` (the default) then the sum of the output\nblock-replicated data will equal the sum of the input ``data``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5b3cxxt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.blocks.block_replicate",
                    "defaultValue": "astropy.nddata.blocks.block_replicate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b767ntsy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tt0xdpgn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mmcu8byz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qv6dji33",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.blocks",
                    "defaultValue": "astropy.nddata.blocks",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lrb0l9w9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ma1jhyb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bkijs5rm",
            "name": "blocks.reshape_as_blocks",
            "description": "Reshape a data array into blocks.\n    \n    This is useful to efficiently apply functions on block subsets of\n    the data instead of using loops.  The reshaped array is a view of\n    the input data array.\n    \n    .. versionadded:: 4.1\n    \n    Parameters\n    ----------\n    data : ndarray\n        The input data array.\n    \n    block_size : int or array-like (int)\n        The integer block size along each axis.  If ``block_size`` is a\n        scalar and ``data`` has more than one dimension, then\n        ``block_size`` will be used for for every axis.  Each dimension\n        of ``block_size`` must divide evenly into the corresponding\n        dimension of ``data``.\n    \n    Returns\n    -------\n    output : ndarray\n        The reshaped array as a view of the input ``data`` array.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from astropy.nddata import reshape_as_blocks\n    >>> data = np.arange(16).reshape(4, 4)\n    >>> data\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n    >>> reshape_as_blocks(data, (2, 2))\n    array([[[[ 0,  1],\n             [ 4,  5]],\n            [[ 2,  3],\n             [ 6,  7]]],\n           [[[ 8,  9],\n             [12, 13]],\n            [[10, 11],\n             [14, 15]]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7b615d6735470c5ff70d4c346c92f81d09ec59f123617dba4b57a9184722acf6",
            "fields": [
                {
                    "id": "cht6qosl",
                    "encoding": "",
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input data array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0mqr_jj4",
                    "encoding": "",
                    "name": "block_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer block size along each axis.  If ``block_size`` is a\nscalar and ``data`` has more than one dimension, then\n``block_size`` will be used for for every axis.  Each dimension\nof ``block_size`` must divide evenly into the corresponding\ndimension of ``data``.",
                    "type": "int or array-like (int)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8fo51uc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.blocks.reshape_as_blocks",
                    "defaultValue": "astropy.nddata.blocks.reshape_as_blocks",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hu_cc0du",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6izzenhs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8pyi61q1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4g9yl1rg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.blocks",
                    "defaultValue": "astropy.nddata.blocks",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jb5l7mii",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kq1ih9v7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sbonrvd_",
            "name": "ccddata.fits_ccddata_reader",
            "description": "Generate a CCDData object from a FITS file.\n    \n    Parameters\n    ----------\n    filename : str\n        Name of fits file.\n    \n    hdu : int, str, tuple of (str, int), optional\n        Index or other identifier of the Header Data Unit of the FITS\n        file from which CCDData should be initialized. If zero and\n        no data in the primary HDU, it will search for the first\n        extension HDU with data. The header will be added to the primary HDU.\n        Default is ``0``.\n    \n    unit : `~astropy.units.Unit`, optional\n        Units of the image data. If this argument is provided and there is a\n        unit for the image in the FITS header (the keyword ``BUNIT`` is used\n        as the unit, if present), this argument is used for the unit.\n        Default is ``None``.\n    \n    hdu_uncertainty : str or None, optional\n        FITS extension from which the uncertainty should be initialized. If the\n        extension does not exist the uncertainty of the CCDData is ``None``.\n        Default is ``'UNCERT'``.\n    \n    hdu_mask : str or None, optional\n        FITS extension from which the mask should be initialized. If the\n        extension does not exist the mask of the CCDData is ``None``.\n        Default is ``'MASK'``.\n    \n    hdu_flags : str or None, optional\n        Currently not implemented.\n        Default is ``None``.\n    \n    key_uncertainty_type : str, optional\n        The header key name where the class name of the uncertainty  is stored\n        in the hdu of the uncertainty (if any).\n        Default is ``UTYPE``.\n    \n        .. versionadded:: 3.1\n    \n    hdu_psf : str or None, optional\n        FITS extension from which the psf image should be initialized. If the\n        extension does not exist the psf of the CCDData is `None`.\n    \n    kwd :\n        Any additional keyword parameters are passed through to the FITS reader\n        in :mod:`astropy.io.fits`; see Notes for additional discussion.\n    \n    Notes\n    -----\n    FITS files that contained scaled data (e.g. unsigned integer images) will\n    be scaled and the keywords used to manage scaled data in\n    :mod:`astropy.io.fits` are disabled.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ed5b6b3de11840cefb9f492f48ad86bf3c45cf8b1aa02ff51bbc99d87aa2a007",
            "fields": [
                {
                    "id": "xlfzgyz9",
                    "encoding": "",
                    "name": "filename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of fits file.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uol820bw",
                    "encoding": "",
                    "name": "hdu",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Index or other identifier of the Header Data Unit of the FITS\nfile from which CCDData should be initialized. If zero and\nno data in the primary HDU, it will search for the first\nextension HDU with data. The header will be added to the primary HDU.\nDefault is ``0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_17fkzr",
                    "encoding": "",
                    "name": "unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Units of the image data. If this argument is provided and there is a\nunit for the image in the FITS header (the keyword ``BUNIT`` is used\nas the unit, if present), this argument is used for the unit.\nDefault is ``None``.",
                    "type": "astropy.units.Unit",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lskui1g5",
                    "encoding": "",
                    "name": "hdu_uncertainty",
                    "value": "UNCERT",
                    "defaultValue": "UNCERT",
                    "description": "FITS extension from which the uncertainty should be initialized. If the\nextension does not exist the uncertainty of the CCDData is ``None``.\nDefault is ``'UNCERT'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wh1a199g",
                    "encoding": "",
                    "name": "hdu_mask",
                    "value": "MASK",
                    "defaultValue": "MASK",
                    "description": "FITS extension from which the mask should be initialized. If the\nextension does not exist the mask of the CCDData is ``None``.\nDefault is ``'MASK'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kwnuzl7g",
                    "encoding": "",
                    "name": "hdu_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "Currently not implemented.\nDefault is ``None``.",
                    "type": "str or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3iq9o8j1",
                    "encoding": "",
                    "name": "key_uncertainty_type",
                    "value": "UTYPE",
                    "defaultValue": "UTYPE",
                    "description": "The header key name where the class name of the uncertainty  is stored\nin the hdu of the uncertainty (if any).\nDefault is ``UTYPE``.\n\n.. versionadded:: 3.1",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zygpoqdy",
                    "encoding": "",
                    "name": "hdu_psf",
                    "value": "PSFIMAGE",
                    "defaultValue": "PSFIMAGE",
                    "description": "FITS extension from which the psf image should be initialized. If the\nextension does not exist the psf of the CCDData is `None`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oqj3nkn4",
                    "encoding": "",
                    "name": "kwd",
                    "value": "",
                    "defaultValue": "",
                    "description": "Any additional keyword parameters are passed through to the FITS reader\nin :mod:`astropy.io.fits`; see Notes for additional discussion.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wtavgggy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.fits_ccddata_reader",
                    "defaultValue": "astropy.nddata.ccddata.fits_ccddata_reader",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o1j0o_zc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3rehwz5k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "peag896c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jhnfkcfi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata",
                    "defaultValue": "astropy.nddata.ccddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmt72nxk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_etr1kn6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_x7pddpd",
            "name": "ccddata.fits_ccddata_writer",
            "description": "Write CCDData object to FITS file.\n    \n    Parameters\n    ----------\n    ccd_data : CCDData\n        Object to write.\n    \n    filename : str\n        Name of file.\n    \n    hdu_mask, hdu_uncertainty, hdu_flags, hdu_psf : str or None, optional\n        If it is a string append this attribute to the HDUList as\n        `~astropy.io.fits.ImageHDU` with the string as extension name.\n        Flags are not supported at this time. If ``None`` this attribute\n        is not appended.\n        Default is ``'MASK'`` for mask, ``'UNCERT'`` for uncertainty,\n        ``'PSFIMAGE'`` for psf, and `None` for flags.\n    \n    key_uncertainty_type : str, optional\n        The header key name for the class name of the uncertainty (if any)\n        that is used to store the uncertainty type in the uncertainty hdu.\n        Default is ``UTYPE``.\n    \n        .. versionadded:: 3.1\n    \n    as_image_hdu : bool\n        If this option is `True`, the first item of the returned\n        `~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead of\n        the default `~astropy.io.fits.PrimaryHDU`.\n    \n    kwd :\n        All additional keywords are passed to :py:mod:`astropy.io.fits`\n    \n    Raises\n    ------\n    ValueError\n        - If ``self.mask`` is set but not a `numpy.ndarray`.\n        - If ``self.uncertainty`` is set but not a\n          `~astropy.nddata.StdDevUncertainty`.\n        - If ``self.uncertainty`` is set but has another unit then\n          ``self.data``.\n    \n    NotImplementedError\n        Saving flags is not supported.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "11d0c538f7292f5cc8ddcdc51b12e72c0c9c281915d7df6422e94b19f735052b",
            "fields": [
                {
                    "id": "hk86zn2z",
                    "encoding": "",
                    "name": "ccd_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "Object to write.",
                    "type": "CCDData",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6o3i8vrm",
                    "encoding": "",
                    "name": "filename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of file.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "abi_xlcz",
                    "encoding": "",
                    "name": "hdu_mask",
                    "value": "MASK",
                    "defaultValue": "MASK",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tlhvn3cr",
                    "encoding": "",
                    "name": "hdu_uncertainty",
                    "value": "UNCERT",
                    "defaultValue": "UNCERT",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yw2cnrvw",
                    "encoding": "",
                    "name": "hdu_flags",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cx34jffm",
                    "encoding": "",
                    "name": "key_uncertainty_type",
                    "value": "UTYPE",
                    "defaultValue": "UTYPE",
                    "description": "The header key name for the class name of the uncertainty (if any)\nthat is used to store the uncertainty type in the uncertainty hdu.\nDefault is ``UTYPE``.\n\n.. versionadded:: 3.1",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cos1q3e3",
                    "encoding": "",
                    "name": "as_image_hdu",
                    "value": false,
                    "defaultValue": false,
                    "description": "If this option is `True`, the first item of the returned\n`~astropy.io.fits.HDUList` is a `~astropy.io.fits.ImageHDU`, instead of\nthe default `~astropy.io.fits.PrimaryHDU`.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfw_dcpy",
                    "encoding": "",
                    "name": "hdu_psf",
                    "value": "PSFIMAGE",
                    "defaultValue": "PSFIMAGE",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "44jr1oyp",
                    "encoding": "",
                    "name": "kwd",
                    "value": "",
                    "defaultValue": "",
                    "description": "All additional keywords are passed to :py:mod:`astropy.io.fits`",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2cid463s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.ccddata.fits_ccddata_writer",
                    "defaultValue": "astropy.nddata.ccddata.fits_ccddata_writer",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ux5xv1h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umzestve",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9j1hguga",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_0vvxn7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.ccddata",
                    "defaultValue": "astropy.nddata.ccddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdcwz5yi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dcq05_cy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fbc49jbo",
            "name": "decorators.support_nddata",
            "description": "Decorator to wrap functions that could accept an NDData instance with\n    its properties passed as function arguments.\n    \n    Parameters\n    ----------\n    _func : callable, None, optional\n        The function to decorate or ``None`` if used as factory. The first\n        positional argument should be ``data`` and take a numpy array. It is\n        possible to overwrite the name, see ``attribute_argument_mapping``\n        argument.\n        Default is ``None``.\n    \n    accepts : class, optional\n        The class or subclass of ``NDData`` that should be unpacked before\n        calling the function.\n        Default is ``NDData``\n    \n    repack : bool, optional\n        Should be ``True`` if the return should be converted to the input\n        class again after the wrapped function call.\n        Default is ``False``.\n    \n        .. note::\n           Must be ``True`` if either one of ``returns`` or ``keeps``\n           is specified.\n    \n    returns : iterable, None, optional\n        An iterable containing strings which returned value should be set\n        on the class. For example if a function returns data and mask, this\n        should be ``['data', 'mask']``. If ``None`` assume the function only\n        returns one argument: ``'data'``.\n        Default is ``None``.\n    \n        .. note::\n           Must be ``None`` if ``repack=False``.\n    \n    keeps : iterable. None, optional\n        An iterable containing strings that indicate which values should be\n        copied from the original input to the returned class. If ``None``\n        assume that no attributes are copied.\n        Default is ``None``.\n    \n        .. note::\n           Must be ``None`` if ``repack=False``.\n    \n    attribute_argument_mapping :\n        Keyword parameters that optionally indicate which function argument\n        should be interpreted as which attribute on the input. By default\n        it assumes the function takes a ``data`` argument as first argument,\n        but if the first argument is called ``input`` one should pass\n        ``support_nddata(..., data='input')`` to the function.\n    \n    Returns\n    -------\n    decorator_factory or decorated_function : callable\n        If ``_func=None`` this returns a decorator, otherwise it returns the\n        decorated ``_func``.\n    \n    Notes\n    -----\n    If properties of ``NDData`` are set but have no corresponding function\n    argument a Warning is shown.\n    \n    If a property is set of the ``NDData`` are set and an explicit argument is\n    given, the explicitly given argument is used and a Warning is shown.\n    \n    The supported properties are:\n    \n    - ``mask``\n    - ``unit``\n    - ``wcs``\n    - ``meta``\n    - ``uncertainty``\n    - ``flags``\n    \n    Examples\n    --------\n    This function takes a Numpy array for the data, and some WCS information\n    with the ``wcs`` keyword argument::\n    \n        def downsample(data, wcs=None):\n            # downsample data and optionally WCS here\n            pass\n    \n    However, you might have an NDData instance that has the ``wcs`` property\n    set and you would like to be able to call the function with\n    ``downsample(my_nddata)`` and have the WCS information, if present,\n    automatically be passed to the ``wcs`` keyword argument.\n    \n    This decorator can be used to make this possible::\n    \n        @support_nddata\n        def downsample(data, wcs=None):\n            # downsample data and optionally WCS here\n            pass\n    \n    This function can now either be called as before, specifying the data and\n    WCS separately, or an NDData instance can be passed to the ``data``\n    argument.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d6158bebbbe4e492adf54921d0da77f9e6df425d6c5d1b06e69ea9c343030bdb",
            "fields": [
                {
                    "id": "vdbmyn2m",
                    "encoding": "",
                    "name": "_func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function to decorate or ``None`` if used as factory. The first\npositional argument should be ``data`` and take a numpy array. It is\npossible to overwrite the name, see ``attribute_argument_mapping``\nargument.\nDefault is ``None``.",
                    "type": "callable, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2qbvjpl",
                    "encoding": "",
                    "name": "accepts",
                    "value": "abc.ABCMeta",
                    "defaultValue": "abc.ABCMeta",
                    "description": "The class or subclass of ``NDData`` that should be unpacked before\ncalling the function.\nDefault is ``NDData``",
                    "type": "abc.ABCMeta",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kb9peupr",
                    "encoding": "",
                    "name": "repack",
                    "value": false,
                    "defaultValue": false,
                    "description": "Should be ``True`` if the return should be converted to the input\nclass again after the wrapped function call.\nDefault is ``False``.\n\n.. note::\n   Must be ``True`` if either one of ``returns`` or ``keeps``\n   is specified.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fum5fh46",
                    "encoding": "",
                    "name": "returns",
                    "value": "",
                    "defaultValue": "",
                    "description": "An iterable containing strings which returned value should be set\non the class. For example if a function returns data and mask, this\nshould be ``['data', 'mask']``. If ``None`` assume the function only\nreturns one argument: ``'data'``.\nDefault is ``None``.\n\n.. note::\n   Must be ``None`` if ``repack=False``.",
                    "type": "iterable, None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wwvz_yzx",
                    "encoding": "",
                    "name": "keeps",
                    "value": "",
                    "defaultValue": "",
                    "description": "An iterable containing strings that indicate which values should be\ncopied from the original input to the returned class. If ``None``\nassume that no attributes are copied.\nDefault is ``None``.\n\n.. note::\n   Must be ``None`` if ``repack=False``.",
                    "type": "iterable. None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmwe5zud",
                    "encoding": "",
                    "name": "attribute_argument_mapping",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword parameters that optionally indicate which function argument\nshould be interpreted as which attribute on the input. By default\nit assumes the function takes a ``data`` argument as first argument,\nbut if the first argument is called ``input`` one should pass\n``support_nddata(..., data='input')`` to the function.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccfolm6g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.decorators.support_nddata",
                    "defaultValue": "astropy.nddata.decorators.support_nddata",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "skyk72r_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3bg0339",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qkte6peb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dze4zsya",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.decorators",
                    "defaultValue": "astropy.nddata.decorators",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t83y8lki",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5f3av0ae",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "i2xg37q5",
            "name": "utils.add_array",
            "description": "Add a smaller array at a given position in a larger array.\n    \n    Parameters\n    ----------\n    array_large : ndarray\n        Large array.\n    array_small : ndarray\n        Small array to add. Can be equal to ``array_large`` in size in a given\n        dimension, but not larger.\n    position : tuple\n        Position of the small array's center, with respect to the large array.\n        Coordinates should be in the same order as the array shape.\n    \n    Returns\n    -------\n    new_array : ndarray\n        The new array formed from the sum of ``array_large`` and\n        ``array_small``.\n    \n    Notes\n    -----\n    The addition is done in-place.\n    \n    Examples\n    --------\n    We consider a large array of zeros with the shape 5x5 and a small\n    array of ones with a shape of 3x3:\n    \n    >>> import numpy as np\n    >>> from astropy.nddata.utils import add_array\n    >>> large_array = np.zeros((5, 5))\n    >>> small_array = np.ones((3, 3))\n    >>> add_array(large_array, small_array, (1, 2))  # doctest: +FLOAT_CMP\n    array([[0., 1., 1., 1., 0.],\n           [0., 1., 1., 1., 0.],\n           [0., 1., 1., 1., 0.],\n           [0., 0., 0., 0., 0.],\n           [0., 0., 0., 0., 0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4c6a92ba5240216894891c80c1bdc2a34a78c45b3db56c91068890b89d73c0ae",
            "fields": [
                {
                    "id": "x6ivb47a",
                    "encoding": "",
                    "name": "array_large",
                    "value": "",
                    "defaultValue": "",
                    "description": "Large array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2ekdoyq",
                    "encoding": "",
                    "name": "array_small",
                    "value": "",
                    "defaultValue": "",
                    "description": "Small array to add. Can be equal to ``array_large`` in size in a given\ndimension, but not larger.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6x24t_v",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "Position of the small array's center, with respect to the large array.\nCoordinates should be in the same order as the array shape.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrmfh4p2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.add_array",
                    "defaultValue": "astropy.nddata.utils.add_array",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvo4ja6z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2uvf2m4s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iy7eo_xv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8o270ebi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils",
                    "defaultValue": "astropy.nddata.utils",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dt21r3v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5iht83n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8kvpq_q2",
            "name": "utils.extract_array",
            "description": "Extract a smaller array of the given shape and position from a\n    larger array.\n    \n    Parameters\n    ----------\n    array_large : ndarray\n        The array from which to extract the small array.\n    shape : int or tuple thereof\n        The shape of the extracted array (for 1D arrays, this can be an\n        `int`).  See the ``mode`` keyword for additional details.\n    position : number or tuple thereof\n        The position of the small array's center with respect to the\n        large array.  The pixel coordinates should be in the same order\n        as the array shape.  Integer positions are at the pixel centers\n        (for 1D arrays, this can be a number).\n    mode : {'partial', 'trim', 'strict'}, optional\n        The mode used for extracting the small array.  For the\n        ``'partial'`` and ``'trim'`` modes, a partial overlap of the\n        small array and the large array is sufficient.  For the\n        ``'strict'`` mode, the small array has to be fully contained\n        within the large array, otherwise an\n        `~astropy.nddata.utils.PartialOverlapError` is raised.   In all\n        modes, non-overlapping arrays will raise a\n        `~astropy.nddata.utils.NoOverlapError`.  In ``'partial'`` mode,\n        positions in the small array that do not overlap with the large\n        array will be filled with ``fill_value``.  In ``'trim'`` mode\n        only the overlapping elements are returned, thus the resulting\n        small array may be smaller than the requested ``shape``.\n    fill_value : number, optional\n        If ``mode='partial'``, the value to fill pixels in the extracted\n        small array that do not overlap with the input ``array_large``.\n        ``fill_value`` will be changed to have the same ``dtype`` as the\n        ``array_large`` array, with one exception. If ``array_large``\n        has integer type and ``fill_value`` is ``np.nan``, then a\n        `ValueError` will be raised.\n    return_position : bool, optional\n        If `True`, return the coordinates of ``position`` in the\n        coordinate system of the returned array.\n    \n    Returns\n    -------\n    array_small : ndarray\n        The extracted array.\n    new_position : tuple\n        If ``return_position`` is true, this tuple will contain the\n        coordinates of the input ``position`` in the coordinate system\n        of ``array_small``. Note that for partially overlapping arrays,\n        ``new_position`` might actually be outside of the\n        ``array_small``; ``array_small[new_position]`` might give wrong\n        results if any element in ``new_position`` is negative.\n    \n    Examples\n    --------\n    We consider a large array with the shape 11x10, from which we extract\n    a small array of shape 3x5:\n    \n    >>> import numpy as np\n    >>> from astropy.nddata.utils import extract_array\n    >>> large_array = np.arange(110).reshape((11, 10))\n    >>> extract_array(large_array, (3, 5), (7, 7))\n    array([[65, 66, 67, 68, 69],\n           [75, 76, 77, 78, 79],\n           [85, 86, 87, 88, 89]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6d3e9eb216910779bbaf635cfc86c0a53a4cb8528834d4d4330e0867cac1c87a",
            "fields": [
                {
                    "id": "3w2ddby5",
                    "encoding": "",
                    "name": "array_large",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array from which to extract the small array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjwkdr7e",
                    "encoding": "",
                    "name": "shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the extracted array (for 1D arrays, this can be an\n`int`).  See the ``mode`` keyword for additional details.",
                    "type": "int or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2k40syz",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position of the small array's center with respect to the\nlarge array.  The pixel coordinates should be in the same order\nas the array shape.  Integer positions are at the pixel centers\n(for 1D arrays, this can be a number).",
                    "type": "number or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p731fop4",
                    "encoding": "",
                    "name": "mode",
                    "value": "partial",
                    "defaultValue": "partial",
                    "description": "The mode used for extracting the small array.  For the\n``'partial'`` and ``'trim'`` modes, a partial overlap of the\nsmall array and the large array is sufficient.  For the\n``'strict'`` mode, the small array has to be fully contained\nwithin the large array, otherwise an\n`~astropy.nddata.utils.PartialOverlapError` is raised.   In all\nmodes, non-overlapping arrays will raise a\n`~astropy.nddata.utils.NoOverlapError`.  In ``'partial'`` mode,\npositions in the small array that do not overlap with the large\narray will be filled with ``fill_value``.  In ``'trim'`` mode\nonly the overlapping elements are returned, thus the resulting\nsmall array may be smaller than the requested ``shape``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sxhdsh0",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If ``mode='partial'``, the value to fill pixels in the extracted\nsmall array that do not overlap with the input ``array_large``.\n``fill_value`` will be changed to have the same ``dtype`` as the\n``array_large`` array, with one exception. If ``array_large``\nhas integer type and ``fill_value`` is ``np.nan``, then a\n`ValueError` will be raised.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0pg84_w",
                    "encoding": "",
                    "name": "return_position",
                    "value": false,
                    "defaultValue": false,
                    "description": "If `True`, return the coordinates of ``position`` in the\ncoordinate system of the returned array.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qkkxx0w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.extract_array",
                    "defaultValue": "astropy.nddata.utils.extract_array",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g4a0vl0o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z86jkpxu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i5c1sb1s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_ht98yt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils",
                    "defaultValue": "astropy.nddata.utils",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "02uhfrhf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jy_ti6te",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "co14kog9",
            "name": "utils.overlap_slices",
            "description": "Get slices for the overlapping part of a small and a large array.\n    \n    Given a certain position of the center of the small array, with\n    respect to the large array, tuples of slices are returned which can be\n    used to extract, add or subtract the small array at the given\n    position. This function takes care of the correct behavior at the\n    boundaries, where the small array is cut of appropriately.\n    Integer positions are at the pixel centers.\n    \n    Parameters\n    ----------\n    large_array_shape : tuple of int or int\n        The shape of the large array (for 1D arrays, this can be an\n        `int`).\n    small_array_shape : int or tuple thereof\n        The shape of the small array (for 1D arrays, this can be an\n        `int`).  See the ``mode`` keyword for additional details.\n    position : number or tuple thereof\n        The position of the small array's center with respect to the\n        large array.  The pixel coordinates should be in the same order\n        as the array shape.  Integer positions are at the pixel centers.\n        For any axis where ``small_array_shape`` is even, the position\n        is rounded up, e.g. extracting two elements with a center of\n        ``1`` will define the extracted region as ``[0, 1]``.\n    mode : {'partial', 'trim', 'strict'}, optional\n        In ``'partial'`` mode, a partial overlap of the small and the\n        large array is sufficient.  The ``'trim'`` mode is similar to\n        the ``'partial'`` mode, but ``slices_small`` will be adjusted to\n        return only the overlapping elements.  In the ``'strict'`` mode,\n        the small array has to be fully contained in the large array,\n        otherwise an `~astropy.nddata.utils.PartialOverlapError` is\n        raised.  In all modes, non-overlapping arrays will raise a\n        `~astropy.nddata.utils.NoOverlapError`.\n    \n    Returns\n    -------\n    slices_large : tuple of slice\n        A tuple of slice objects for each axis of the large array, such\n        that ``large_array[slices_large]`` extracts the region of the\n        large array that overlaps with the small array.\n    slices_small : tuple of slice\n        A tuple of slice objects for each axis of the small array, such\n        that ``small_array[slices_small]`` extracts the region that is\n        inside the large array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ba3a6abf6781dab60778313f7e3e73c763f97a8867714ec993e250a08a29e87",
            "fields": [
                {
                    "id": "1gtc5cxp",
                    "encoding": "",
                    "name": "large_array_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the large array (for 1D arrays, this can be an\n`int`).",
                    "type": "tuple of int or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6kfk35s",
                    "encoding": "",
                    "name": "small_array_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the small array (for 1D arrays, this can be an\n`int`).  See the ``mode`` keyword for additional details.",
                    "type": "int or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nui4eqpn",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position of the small array's center with respect to the\nlarge array.  The pixel coordinates should be in the same order\nas the array shape.  Integer positions are at the pixel centers.\nFor any axis where ``small_array_shape`` is even, the position\nis rounded up, e.g. extracting two elements with a center of\n``1`` will define the extracted region as ``[0, 1]``.",
                    "type": "number or tuple thereof",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2diwh5mk",
                    "encoding": "",
                    "name": "mode",
                    "value": "partial",
                    "defaultValue": "partial",
                    "description": "In ``'partial'`` mode, a partial overlap of the small and the\nlarge array is sufficient.  The ``'trim'`` mode is similar to\nthe ``'partial'`` mode, but ``slices_small`` will be adjusted to\nreturn only the overlapping elements.  In the ``'strict'`` mode,\nthe small array has to be fully contained in the large array,\notherwise an `~astropy.nddata.utils.PartialOverlapError` is\nraised.  In all modes, non-overlapping arrays will raise a\n`~astropy.nddata.utils.NoOverlapError`.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "loykyood",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.overlap_slices",
                    "defaultValue": "astropy.nddata.utils.overlap_slices",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lk8czh7u",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4tx7x1h9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r36ygpnk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4z9ej3c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils",
                    "defaultValue": "astropy.nddata.utils",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5h1b_ht",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "69garvu8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "48f4nioy",
            "name": "utils.subpixel_indices",
            "description": "Convert decimal points to indices, given a subsampling factor.\n    \n    This discards the integer part of the position and uses only the decimal\n    place, and converts this to a subpixel position depending on the\n    subsampling specified. The center of a pixel corresponds to an integer\n    position.\n    \n    Parameters\n    ----------\n    position : ndarray or array-like\n        Positions in pixels.\n    subsampling : int\n        Subsampling factor per pixel.\n    \n    Returns\n    -------\n    indices : ndarray\n        The integer subpixel indices corresponding to the input positions.\n    \n    Examples\n    --------\n    If no subsampling is used, then the subpixel indices returned are always 0:\n    \n    >>> from astropy.nddata.utils import subpixel_indices\n    >>> subpixel_indices([1.2, 3.4, 5.6], 1)  # doctest: +FLOAT_CMP\n    array([0., 0., 0.])\n    \n    If instead we use a subsampling of 2, we see that for the two first values\n    (1.1 and 3.4) the subpixel position is 1, while for 5.6 it is 0. This is\n    because the values of 1, 3, and 6 lie in the center of pixels, and 1.1 and\n    3.4 lie in the left part of the pixels and 5.6 lies in the right part.\n    \n    >>> subpixel_indices([1.2, 3.4, 5.5], 2)  # doctest: +FLOAT_CMP\n    array([1., 1., 0.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "48321fe0a4fac36e391834593a981d2bb54625b3a474607da6c635cc6c57baa2",
            "fields": [
                {
                    "id": "9i76_enk",
                    "encoding": "",
                    "name": "position",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions in pixels.",
                    "type": "ndarray or array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fa92ia_4",
                    "encoding": "",
                    "name": "subsampling",
                    "value": "",
                    "defaultValue": "",
                    "description": "Subsampling factor per pixel.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ao9gd24",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.nddata.utils.subpixel_indices",
                    "defaultValue": "astropy.nddata.utils.subpixel_indices",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fsl9mbih",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gi9pzzop",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hsqe7fg9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ksi9x377",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.nddata.utils",
                    "defaultValue": "astropy.nddata.utils",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ax77zkc6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15kncype",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}