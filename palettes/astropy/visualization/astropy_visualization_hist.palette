{
    "modelData": {
        "filePath": "astropy_visualization_hist.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.5.5",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "visualization",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "910b5150363b6ed474fc6d569e3ddb05d9ecf060f07355a24aff7c285d0dd241",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1752679421.353771,
        "numLGNodes": 1
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nfuuht3v",
            "name": "hist.hist",
            "description": "Enhanced histogram function.\n    \n    This is a histogram function that enables the use of more sophisticated\n    algorithms for determining bins.  Aside from the ``bins`` argument allowing\n    a string specified how bins are computed, the parameters are the same\n    as matplotlib.pyplot.hist().\n    \n    This function was ported from astroML: https://www.astroml.org/\n    \n    Parameters\n    ----------\n    x : array-like\n        array of data to be histogrammed\n    \n    bins : int, list, or str, optional\n        If bins is a string, then it must be one of:\n    \n        - 'blocks' : use bayesian blocks for dynamic bin widths\n    \n        - 'knuth' : use Knuth's rule to determine bins\n    \n        - 'scott' : use Scott's rule to determine bins\n    \n        - 'freedman' : use the Freedman-Diaconis rule to determine bins\n    \n    ax : `~matplotlib.axes.Axes` instance, optional\n        Specify the Axes on which to draw the histogram. If not specified,\n        then the current active axes will be used.\n    \n    max_bins : int, optional\n        Maximum number of bins allowed. With more than a few thousand bins\n        the performance of matplotlib will not be great. If the number of\n        bins is large *and* the number of input data points is large then\n        the it will take a very long time to compute the histogram.\n    \n    **kwargs :\n        other keyword arguments are described in ``plt.hist()``.\n    \n    Notes\n    -----\n    Return values are the same as for ``plt.hist()``\n    \n    See Also\n    --------\n    astropy.stats.histogram",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f2a1e585969f976659be83fc44b286f4667c61b0e6cda8ca7340b5f752e78249",
            "fields": [
                {
                    "id": "xo_y3e2z",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "array of data to be histogrammed",
                    "type": "array-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oar62qub",
                    "encoding": "",
                    "name": "bins",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "If bins is a string, then it must be one of:\n\n- 'blocks' : use bayesian blocks for dynamic bin widths\n\n- 'knuth' : use Knuth's rule to determine bins\n\n- 'scott' : use Scott's rule to determine bins\n\n- 'freedman' : use the Freedman-Diaconis rule to determine bins",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zchz5716",
                    "encoding": "",
                    "name": "ax",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specify the Axes on which to draw the histogram. If not specified,\nthen the current active axes will be used.",
                    "type": "matplotlib.axes.Axes instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tv63n284",
                    "encoding": "",
                    "name": "max_bins",
                    "value": 100000.0,
                    "defaultValue": 100000.0,
                    "description": "Maximum number of bins allowed. With more than a few thousand bins\nthe performance of matplotlib will not be great. If the number of\nbins is large *and* the number of input data points is large then\nthe it will take a very long time to compute the histogram.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agvkhiw_",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xkywaruk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.visualization.hist.hist",
                    "defaultValue": "astropy.visualization.hist.hist",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5iqx_uh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rehuw5nw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "czticuac",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqbqgh03",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.visualization.hist",
                    "defaultValue": "astropy.visualization.hist",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ltaeks8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqi_46gu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}