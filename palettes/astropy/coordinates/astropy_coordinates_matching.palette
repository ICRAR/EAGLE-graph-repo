{
    "modelData": {
        "filePath": "astropy_coordinates_matching.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "This module contains functions for matching coordinate catalogs.",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.5.5",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "coordinates",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "8850e11dc82e6577322cb83592bf3d36ac0ae6aad9dc63ed547a9a71c9f91fc7",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1752679350.060886,
        "numLGNodes": 4
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ckzosvat",
            "name": "matching.match_coordinates_3d",
            "description": "Finds the nearest 3-dimensional matches of a coordinate or coordinates in\n    a set of catalog coordinates.\n    \n    This finds the 3-dimensional closest neighbor, which is only different\n    from the on-sky distance if ``distance`` is set in either ``matchcoord``\n    or ``catalogcoord``.\n    \n    Parameters\n    ----------\n    matchcoord : `~astropy.coordinates.BaseCoordinateFrame` or `~astropy.coordinates.SkyCoord`\n        The coordinate(s) to match to the catalog.\n    catalogcoord : `~astropy.coordinates.BaseCoordinateFrame` or `~astropy.coordinates.SkyCoord`\n        The base catalog in which to search for matches. Typically this will\n        be a coordinate object that is an array (i.e.,\n        ``catalogcoord.isscalar == False``)\n    nthneighbor : int, optional\n        Which closest neighbor to search for.  Typically ``1`` is desired here,\n        as that is correct for matching one set of coordinates to another.\n        The next likely use case is ``2``, for matching a coordinate catalog\n        against *itself* (``1`` is inappropriate because each point will find\n        itself as the closest match).\n    storekdtree : bool or str, optional\n        If a string, will store the KD-Tree used for the computation\n        in the ``catalogcoord``, as in ``catalogcoord.cache`` with the\n        provided name.  This dramatically speeds up subsequent calls with the\n        same catalog. If False, the KD-Tree is discarded after use.\n    \n    Returns\n    -------\n    idx : int array\n        Indices into ``catalogcoord`` to get the matched points for each\n        ``matchcoord``. Shape matches ``matchcoord``.\n    sep2d : `~astropy.coordinates.Angle`\n        The on-sky separation between the closest match for each ``matchcoord``\n        and the ``matchcoord``. Shape matches ``matchcoord``.\n    dist3d : `~astropy.units.Quantity` ['length']\n        The 3D distance between the closest match for each ``matchcoord`` and\n        the ``matchcoord``. Shape matches ``matchcoord``.\n    \n    Notes\n    -----\n    This function requires `SciPy <https://www.scipy.org/>`_ to be installed\n    or it will fail.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d6a8c0425091868d3a7cb6efe2fecd152378757d1453f33c91a6010f46ab72c8",
            "fields": [
                {
                    "id": "4fr857nr",
                    "encoding": "",
                    "name": "matchcoord",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinate(s) to match to the catalog.",
                    "type": "astropy.coordinates.BaseCoordinateFrame or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7v9c38de",
                    "encoding": "",
                    "name": "catalogcoord",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base catalog in which to search for matches. Typically this will\nbe a coordinate object that is an array (i.e.,\n``catalogcoord.isscalar == False``)",
                    "type": "astropy.coordinates.BaseCoordinateFrame or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6j2et3bv",
                    "encoding": "",
                    "name": "nthneighbor",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Which closest neighbor to search for.  Typically ``1`` is desired here,\nas that is correct for matching one set of coordinates to another.\nThe next likely use case is ``2``, for matching a coordinate catalog\nagainst *itself* (``1`` is inappropriate because each point will find\nitself as the closest match).",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svuvkieu",
                    "encoding": "",
                    "name": "storekdtree",
                    "value": "kdtree_3d",
                    "defaultValue": "kdtree_3d",
                    "description": "If a string, will store the KD-Tree used for the computation\nin the ``catalogcoord``, as in ``catalogcoord.cache`` with the\nprovided name.  This dramatically speeds up subsequent calls with the\nsame catalog. If False, the KD-Tree is discarded after use.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6q0il7sa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.coordinates.matching.match_coordinates_3d",
                    "defaultValue": "astropy.coordinates.matching.match_coordinates_3d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c5vbh_n_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e68wsh_8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fd8qxfhg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9k8fs9v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.coordinates.matching",
                    "defaultValue": "astropy.coordinates.matching",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31vsjl0e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yyrazyq7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ccy61u1f",
            "name": "matching.match_coordinates_sky",
            "description": "Finds the nearest on-sky matches of a coordinate or coordinates in\n    a set of catalog coordinates.\n    \n    This finds the on-sky closest neighbor, which is only different from the\n    3-dimensional match if ``distance`` is set in either ``matchcoord``\n    or ``catalogcoord``.\n    \n    Parameters\n    ----------\n    matchcoord : `~astropy.coordinates.BaseCoordinateFrame` or `~astropy.coordinates.SkyCoord`\n        The coordinate(s) to match to the catalog.\n    catalogcoord : `~astropy.coordinates.BaseCoordinateFrame` or `~astropy.coordinates.SkyCoord`\n        The base catalog in which to search for matches. Typically this will\n        be a coordinate object that is an array (i.e.,\n        ``catalogcoord.isscalar == False``)\n    nthneighbor : int, optional\n        Which closest neighbor to search for.  Typically ``1`` is desired here,\n        as that is correct for matching one set of coordinates to another.\n        The next likely use case is ``2``, for matching a coordinate catalog\n        against *itself* (``1`` is inappropriate because each point will find\n        itself as the closest match).\n    storekdtree : bool or str, optional\n        If a string, will store the KD-Tree used for the computation\n        in the ``catalogcoord`` in ``catalogcoord.cache`` with the\n        provided name.  This dramatically speeds up subsequent calls with the\n        same catalog. If False, the KD-Tree is discarded after use.\n    \n    Returns\n    -------\n    idx : int array\n        Indices into ``catalogcoord`` to get the matched points for each\n        ``matchcoord``. Shape matches ``matchcoord``.\n    sep2d : `~astropy.coordinates.Angle`\n        The on-sky separation between the closest match for each\n        ``matchcoord`` and the ``matchcoord``. Shape matches ``matchcoord``.\n    dist3d : `~astropy.units.Quantity` ['length']\n        The 3D distance between the closest match for each ``matchcoord`` and\n        the ``matchcoord``. Shape matches ``matchcoord``.  If either\n        ``matchcoord`` or ``catalogcoord`` don't have a distance, this is the 3D\n        distance on the unit sphere, rather than a true distance.\n    \n    Notes\n    -----\n    This function requires `SciPy <https://www.scipy.org/>`_ to be installed\n    or it will fail.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce531f7e49b81e2635c1f839dfca6c7f5f1b6a283eec3766f97e7c54f6f80c14",
            "fields": [
                {
                    "id": "li0z8c5_",
                    "encoding": "",
                    "name": "matchcoord",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinate(s) to match to the catalog.",
                    "type": "astropy.coordinates.BaseCoordinateFrame or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mys2q8rl",
                    "encoding": "",
                    "name": "catalogcoord",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base catalog in which to search for matches. Typically this will\nbe a coordinate object that is an array (i.e.,\n``catalogcoord.isscalar == False``)",
                    "type": "astropy.coordinates.BaseCoordinateFrame or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acr20pt5",
                    "encoding": "",
                    "name": "nthneighbor",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Which closest neighbor to search for.  Typically ``1`` is desired here,\nas that is correct for matching one set of coordinates to another.\nThe next likely use case is ``2``, for matching a coordinate catalog\nagainst *itself* (``1`` is inappropriate because each point will find\nitself as the closest match).",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pog28f_x",
                    "encoding": "",
                    "name": "storekdtree",
                    "value": "kdtree_sky",
                    "defaultValue": "kdtree_sky",
                    "description": "If a string, will store the KD-Tree used for the computation\nin the ``catalogcoord`` in ``catalogcoord.cache`` with the\nprovided name.  This dramatically speeds up subsequent calls with the\nsame catalog. If False, the KD-Tree is discarded after use.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqgzdy8u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.coordinates.matching.match_coordinates_sky",
                    "defaultValue": "astropy.coordinates.matching.match_coordinates_sky",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xdg2zeez",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7dikyveo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5qblhzyl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jd_7jyz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.coordinates.matching",
                    "defaultValue": "astropy.coordinates.matching",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "enqv8liy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3metg2m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "a5pnt5ef",
            "name": "matching.search_around_3d",
            "description": "Searches for pairs of points that are at least as close as a specified\n    distance in 3D space.\n    \n    This is intended for use on coordinate objects with arrays of coordinates,\n    not scalars.  For scalar coordinates, it is better to use the\n    ``separation_3d`` methods.\n    \n    Parameters\n    ----------\n    coords1 : `~astropy.coordinates.BaseCoordinateFrame` or `~astropy.coordinates.SkyCoord`\n        The first set of coordinates, which will be searched for matches from\n        ``coords2`` within ``seplimit``.  Cannot be a scalar coordinate.\n    coords2 : `~astropy.coordinates.BaseCoordinateFrame` or `~astropy.coordinates.SkyCoord`\n        The second set of coordinates, which will be searched for matches from\n        ``coords1`` within ``seplimit``.  Cannot be a scalar coordinate.\n    distlimit : `~astropy.units.Quantity` ['length']\n        The physical radius to search within.\n    storekdtree : bool or str, optional\n        If a string, will store the KD-Tree used in the search with the name\n        ``storekdtree`` in ``coords2.cache``. This speeds up subsequent calls\n        to this function. If False, the KD-Trees are not saved.\n    \n    Returns\n    -------\n    idx1 : int array\n        Indices into ``coords1`` that matches to the corresponding element of\n        ``idx2``. Shape matches ``idx2``.\n    idx2 : int array\n        Indices into ``coords2`` that matches to the corresponding element of\n        ``idx1``. Shape matches ``idx1``.\n    sep2d : `~astropy.coordinates.Angle`\n        The on-sky separation between the coordinates. Shape matches ``idx1``\n        and ``idx2``.\n    dist3d : `~astropy.units.Quantity` ['length']\n        The 3D distance between the coordinates. Shape matches ``idx1`` and\n        ``idx2``. The unit is that of ``coords1``.\n    \n    Notes\n    -----\n    This function requires `SciPy <https://www.scipy.org/>`_\n    to be installed or it will fail.\n    \n    If you are using this function to search in a catalog for matches around\n    specific points, the convention is for ``coords2`` to be the catalog, and\n    ``coords1`` are the points to search around.  While these operations are\n    mathematically the same if ``coords1`` and ``coords2`` are flipped, some of\n    the optimizations may work better if this convention is obeyed.\n    \n    In the current implementation, the return values are always sorted in the\n    same order as the ``coords1`` (so ``idx1`` is in ascending order).  This is\n    considered an implementation detail, though, so it could change in a future\n    release.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ad746f308621848cd3f6aa9b566352904986727b68a35aa92e92897664f6f86e",
            "fields": [
                {
                    "id": "kxmfzdmb",
                    "encoding": "",
                    "name": "coords1",
                    "value": "",
                    "defaultValue": "",
                    "description": "The first set of coordinates, which will be searched for matches from\n``coords2`` within ``seplimit``.  Cannot be a scalar coordinate.",
                    "type": "astropy.coordinates.BaseCoordinateFrame or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3uj4j9_",
                    "encoding": "",
                    "name": "coords2",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second set of coordinates, which will be searched for matches from\n``coords1`` within ``seplimit``.  Cannot be a scalar coordinate.",
                    "type": "astropy.coordinates.BaseCoordinateFrame or astropy.coordinates.SkyCoord",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n74xlmyo",
                    "encoding": "",
                    "name": "distlimit",
                    "value": "",
                    "defaultValue": "",
                    "description": "The physical radius to search within.",
                    "type": "astropy.units.Quantity ['length']",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jztu751",
                    "encoding": "",
                    "name": "storekdtree",
                    "value": "kdtree_3d",
                    "defaultValue": "kdtree_3d",
                    "description": "If a string, will store the KD-Tree used in the search with the name\n``storekdtree`` in ``coords2.cache``. This speeds up subsequent calls\nto this function. If False, the KD-Trees are not saved.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhbe007m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.coordinates.matching.search_around_3d",
                    "defaultValue": "astropy.coordinates.matching.search_around_3d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5p4tzota",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5cj5useu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mfvfzqr9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3otfwofl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.coordinates.matching",
                    "defaultValue": "astropy.coordinates.matching",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhuje1ox",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x_yak8rb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xt_stzw_",
            "name": "matching.search_around_sky",
            "description": "Searches for pairs of points that have an angular separation at least as\n    close as a specified angle.\n    \n    This is intended for use on coordinate objects with arrays of coordinates,\n    not scalars.  For scalar coordinates, it is better to use the ``separation``\n    methods.\n    \n    Parameters\n    ----------\n    coords1 : coordinate-like\n        The first set of coordinates, which will be searched for matches from\n        ``coords2`` within ``seplimit``. Cannot be a scalar coordinate.\n    coords2 : coordinate-like\n        The second set of coordinates, which will be searched for matches from\n        ``coords1`` within ``seplimit``. Cannot be a scalar coordinate.\n    seplimit : `~astropy.units.Quantity` ['angle']\n        The on-sky separation to search within.\n    storekdtree : bool or str, optional\n        If a string, will store the KD-Tree used in the search with the name\n        ``storekdtree`` in ``coords2.cache``. This speeds up subsequent calls\n        to this function. If False, the KD-Trees are not saved.\n    \n    Returns\n    -------\n    idx1 : int array\n        Indices into ``coords1`` that matches to the corresponding element of\n        ``idx2``. Shape matches ``idx2``.\n    idx2 : int array\n        Indices into ``coords2`` that matches to the corresponding element of\n        ``idx1``. Shape matches ``idx1``.\n    sep2d : `~astropy.coordinates.Angle`\n        The on-sky separation between the coordinates. Shape matches ``idx1``\n        and ``idx2``.\n    dist3d : `~astropy.units.Quantity` ['length']\n        The 3D distance between the coordinates. Shape matches ``idx1``\n        and ``idx2``; the unit is that of ``coords1``.\n        If either ``coords1`` or ``coords2`` don't have a distance,\n        this is the 3D distance on the unit sphere, rather than a\n        physical distance.\n    \n    Notes\n    -----\n    This function requires `SciPy <https://www.scipy.org/>`_\n    to be installed or it will fail.\n    \n    In the current implementation, the return values are always sorted in the\n    same order as the ``coords1`` (so ``idx1`` is in ascending order).  This is\n    considered an implementation detail, though, so it could change in a future\n    release.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6deff97e3e4a0b657762916df8712a1dae0c00abce8955964c330b1fcdae00d1",
            "fields": [
                {
                    "id": "9llfhyve",
                    "encoding": "",
                    "name": "coords1",
                    "value": "",
                    "defaultValue": "",
                    "description": "The first set of coordinates, which will be searched for matches from\n``coords2`` within ``seplimit``. Cannot be a scalar coordinate.",
                    "type": "coordinate-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "591xprke",
                    "encoding": "",
                    "name": "coords2",
                    "value": "",
                    "defaultValue": "",
                    "description": "The second set of coordinates, which will be searched for matches from\n``coords1`` within ``seplimit``. Cannot be a scalar coordinate.",
                    "type": "coordinate-like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hoqktnxc",
                    "encoding": "",
                    "name": "seplimit",
                    "value": "",
                    "defaultValue": "",
                    "description": "The on-sky separation to search within.",
                    "type": "astropy.units.Quantity ['angle']",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0kxvleg5",
                    "encoding": "",
                    "name": "storekdtree",
                    "value": "kdtree_sky",
                    "defaultValue": "kdtree_sky",
                    "description": "If a string, will store the KD-Tree used in the search with the name\n``storekdtree`` in ``coords2.cache``. This speeds up subsequent calls\nto this function. If False, the KD-Trees are not saved.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zo5m76op",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.coordinates.matching.search_around_sky",
                    "defaultValue": "astropy.coordinates.matching.search_around_sky",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qa690uxf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oaww_qaz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0xbyp_po",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b7547jg8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.coordinates.matching",
                    "defaultValue": "astropy.coordinates.matching",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a39007_j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_w_4hw9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}