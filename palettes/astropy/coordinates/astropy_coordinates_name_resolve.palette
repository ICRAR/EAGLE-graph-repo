{
    "modelData": {
        "filePath": "astropy_coordinates_name_resolve.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "This module contains convenience functions for getting a coordinate object\nfor a named object by querying SESAME and getting the first returned result.\nNote that this is intended to be a convenience, and is very simple. If you\nneed precise coordinates for an object you should find the appropriate\nreference for that measurement and input the coordinates manually.",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.5.5",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "coordinates",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "a79cffec5581f1025471d1281a16b37184d5ee40c080ae3bfedd8a7e71adfc54",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1752679350.071899,
        "numLGNodes": 1
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jlvjafia",
            "name": "name_resolve.get_icrs_coordinates",
            "description": "Retrieve an ICRS object by using `Sesame <https://cds.unistra.fr/cgi-bin/Sesame>`_\n    to retrieve coordinates for the specified name. By default, this will\n    search all available databases (SIMBAD, NED and VizieR) until a match is found.\n    If you would like to specify the database, use the science state\n    ``astropy.coordinates.name_resolve.sesame_database``. You can also\n    specify a list of servers to use for querying Sesame using the science\n    state ``astropy.coordinates.name_resolve.sesame_url``. This will try\n    each one in order until a valid response is returned. By default, this\n    list includes the main Sesame host and a mirror at vizier.  The\n    configuration item `astropy.utils.data.Conf.remote_timeout` controls the\n    number of seconds to wait for a response from the server before giving\n    up.\n    \n    Parameters\n    ----------\n    name : str\n        The name of the object to get coordinates for, e.g. ``'M42'``.\n    parse : bool\n        Whether to attempt extracting the coordinates from the name by\n        parsing with a regex. For objects catalog names that have\n        J-coordinates embedded in their names eg:\n        'CRTS SSS100805 J194428-420209', this may be much faster than a\n        sesame query for the same object name. The coordinates extracted\n        in this way may differ from the database coordinates by a few\n        deci-arcseconds, so only use this option if you do not need\n        sub-arcsecond accuracy for coordinates.\n    cache : bool, str, optional\n        Determines whether to cache the results or not. Passed through to\n        `~astropy.utils.data.download_file`, so pass \"update\" to update the\n        cached value.\n    \n    Returns\n    -------\n    coord : `astropy.coordinates.ICRS` object\n        The object's coordinates in the ICRS frame.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bab2c9d76c4f35dd920c21c95bc4155fdf7f48496e6d72c79ca063775457ed04",
            "fields": [
                {
                    "id": "qyeb1gn7",
                    "encoding": "",
                    "name": "name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The name of the object to get coordinates for, e.g. ``'M42'``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "204gkb22",
                    "encoding": "",
                    "name": "parse",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to attempt extracting the coordinates from the name by\nparsing with a regex. For objects catalog names that have\nJ-coordinates embedded in their names eg:\n'CRTS SSS100805 J194428-420209', this may be much faster than a\nsesame query for the same object name. The coordinates extracted\nin this way may differ from the database coordinates by a few\ndeci-arcseconds, so only use this option if you do not need\nsub-arcsecond accuracy for coordinates.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3p0hm6o7",
                    "encoding": "",
                    "name": "cache",
                    "value": false,
                    "defaultValue": false,
                    "description": "Determines whether to cache the results or not. Passed through to\n`~astropy.utils.data.download_file`, so pass \"update\" to update the\ncached value.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kk0s0h_8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "astropy.coordinates.name_resolve.get_icrs_coordinates",
                    "defaultValue": "astropy.coordinates.name_resolve.get_icrs_coordinates",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cz9z3kyt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfo8klbn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bok3ywh3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8rhhiaw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "astropy.coordinates.name_resolve",
                    "defaultValue": "astropy.coordinates.name_resolve",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cw13i8yd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyajhh2e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}