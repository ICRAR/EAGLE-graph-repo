{
    "modelData": {
        "filePath": "astroquery.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "Accessing Online Astronomical Data.\n\nAstroquery is an astropy affiliated package that contains a collection of tools\nto access online Astronomical data. Each web service has its own sub-package.",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "astroquery",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "aa2d72b5a9ed61c4cbaf17f39cf12b4ccdb5cae19571bb84c2b1f83bc2b248b7",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1730182401.661465,
        "numLGNodes": 1
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "test",
            "description": "Run the tests for the package.\n    \n    This method builds arguments for and then calls ``pytest.main``.\n    \n    \n    package : str, optional\n        The name of a specific package to test, e.g. 'io.fits' or\n        'utils'. Accepts comma separated string to specify multiple\n        packages. If nothing is specified all default tests are run.\n    \n    args : str, optional\n        Additional arguments to be passed to ``pytest.main`` in the ``args``\n        keyword argument.\n    \n    docs_path : str, optional\n        The path to the documentation .rst files.\n    \n    parallel : int or 'auto', optional\n        When provided, run the tests in parallel on the specified\n        number of CPUs.  If parallel is ``'auto'``, it will use the all\n        the cores on the machine.  Requires the ``pytest-xdist`` plugin.\n    \n    pastebin : ('failed', 'all', None), optional\n        Convenience option for turning on pytest pastebin output. Set to\n        'failed' to upload info for failed tests, or 'all' to upload info\n        for all tests.\n    \n    pdb : bool, optional\n        Turn on PDB post-mortem analysis for failing tests. Same as\n        specifying ``--pdb`` in ``args``.\n    \n    pep8 : bool, optional\n        Turn on PEP8 checking via the pytest-pep8 plugin and disable normal\n        tests. Same as specifying ``--pep8 -k pep8`` in ``args``.\n    \n    plugins : list, optional\n        Plugins to be passed to ``pytest.main`` in the ``plugins`` keyword\n        argument.\n    \n    remote_data : {'none', 'astropy', 'any'}, optional\n        Controls whether to run tests marked with @pytest.mark.remote_data. This can be\n        set to run no tests with remote data (``none``), only ones that use\n        data from http://data.astropy.org (``astropy``), or all tests that\n        use remote data (``any``). The default is ``none``.\n    \n    repeat : `int`, optional\n        If set, specifies how many times each test should be run. This is\n        useful for diagnosing sporadic failures.\n    \n    skip_docs : `bool`, optional\n        When `True`, skips running the doctests in the .rst files.\n    \n    test_path : str, optional\n        Specify location to test by path. May be a single file or\n        directory. Must be specified absolutely or relative to the\n        calling directory.\n    \n    verbose : bool, optional\n        Convenience option to turn on verbose output from pytest. Passing\n        True is the same as specifying ``-v`` in ``args``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa553773ed4e070c708b3bebb40fb532920702d80f80381dfa1e8dd50237bb4c",
            "fields": [
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "astroquery._astropy_init.TestRunnerBase.make_test_runner_in.<locals>",
                    "defaultValue": "astroquery._astropy_init.TestRunnerBase.make_test_runner_in.<locals>",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "astroquery._astropy_init.TestRunnerBase.make_test_runner_in.<locals>.test",
                    "defaultValue": "astroquery._astropy_init.TestRunnerBase.make_test_runner_in.<locals>.test",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}