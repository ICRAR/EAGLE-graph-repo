{
    "modelData": {
        "filePath": "pycpl_drs.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "CPL DRS submodule\n  \n  This module provides standard implementations of instrument independent,\n  higher level data processing functions for general non-linear fitting, image\n  fourier transformation, point pattern matching, world coordinate system\n  transformation, etc.",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "CPL",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "cfb8e28bcb95acd71da35259d059b31cc62efe97a9259f124c519e648d5400cf",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695266259.374637,
        "numLGNodes": 61
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "Aperture.__init__",
            "description": "No description found\nReturned from a Apertures' __getitem__ method or iterator. Used to access\n    each Aperture record individually.\n    \n    Not instantiatable on its own.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e953bfa9a5e856bf0a7f5e62edf3af95837706ddac15da58b2dec415069f9246",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "Aperture",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": true
                },
                {
                    "name": "args",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "args",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "kwargs",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Aperture.__init__",
                    "defaultValue": "cpl.drs.Aperture.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.__init__",
            "description": "__init__(self: cpl.drs.Apertures, reference: cpl.core.Image, labelized: cpl.core.Image) -> None",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bfeb31d5cd961bb316ac8533210d0ffe83607586a2071c8098d2e3490a2f9b9f",
            "fields": [
                {
                    "name": "reference",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Image     Reference image ",
                    "type": "cpl.core.Image",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labelized",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Image     Labelized image (of type cpl.core.Type.INT). Must contain at least one pixel     for each value from 1 to the maximum value in the image. ",
                    "type": "cpl.core.Image",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.__init__",
                    "defaultValue": "cpl.drs.Apertures.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.extract",
            "description": "\nRaises\n------\ncpl.core.DataNotFoundError\n    if the apertures could not be detected\n\nSee Also\n--------\ncpl.drs.Apertures.extract_sigma :\n    Used on the image for aperture detection. Also provides detailed explaination\n    of individual sigmas.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7bd3355ca2b1fdb93cf8cf464f976b3c303622ffa422b1c839854a07de0aa8e8",
            "fields": [
                {
                    "name": "source_image",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Image     The image to process ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigmas",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     Detection levels. Positive, decreasing sigmas to apply ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.extract",
                    "defaultValue": "cpl.drs.Apertures.extract",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.extract_mask",
            "description": "extract_mask(source_image: cpl.core.Image, selection: object) -> cpl.drs.Apertures\n\n\nSimple detection of apertures in an image from a user supplied selection mask\n\nThe values selected for inclusion in the apertures must have the non-zero value\nin the selection mask, and must not be flagged as bad in the bad pixel map of\nthe image.\n\nParameters\n----------\nsource_image : cpl.core.Image\n    The image to process. Can be of type cpl.core.Type.DOUBLE,\n    cpl.core.Type.FLOAT, or cpl.core.Type.INT\nsigmas : cpl.core.Vector\n    Detection levels. Positive, decreasing sigmas to apply\n\nReturns\n-------\ncpl.drs.Apertures\n    The detected apertures\n\nRaises\n------\ncpl.core.IncompatibleInputError\n    if`source_image`and selection have different sizes\ncpl.core.TypeMistmatchError\n    if`source_image`is of a complex type\ncpl.core.DataNotFoundError\n    if the selection mask is empty",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "05e9bcab1c86a4941bfe00999552b78af74d3f3da51383ecde1d6d43aef819ae",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.extract_mask",
                    "defaultValue": "cpl.drs.Apertures.extract_mask",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.extract_sigma",
            "description": "extract_sigma(source_image: cpl.core.Image, selection: float) -> cpl.drs.Apertures\n\n\nSimple detection of apertures in an image using a provided sigma\n\nSigma is used to calculate the threshold for the aperture detection. This\nthreshold is calculated using the median plus the average distance to the median\ntimes sigma.\n\nParameters\n----------\nsource_image : cpl.core.Image\n    The image to process\nsigma : float\n    Detection level. Used as a variable to calculate the threshold for detection.\n\nReturns\n-------\ncpl.drs.Apertures\n    The detected apertures\n\nRaises\n------\ncpl.core.IllegalInputError\n    if sigma is non-positive\ncpl.core.TypeMismatchError\n    if`source_image`is of a complex type\ncpl.core.DataNotFoundError\n    if the apertures could not be detected\n\nNotes\n-----\nIn order to avoid (the potentially many) detections of small objects the mask\nof detected pixels is subjected to a 3x3 morphological opening filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "18fd7d6b54b2f92f8f88f8e4463a515616ca8d224bb5ff301c22d4e36c570b4f",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.extract_sigma",
                    "defaultValue": "cpl.drs.Apertures.extract_sigma",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.extract_window",
            "description": "    Rectangle of the window in the format (llx, lly, urx, ury) where:\n    \n        - llx : Lower left x position\n        - lly : Lower left y position\n        - urx : Upper right x position\n        - ury : Upper right y position\n\n    Position indices are zero based.\n\nReturns\n-------\ncpl.drs.Apertures, int\n    The detected apertures (cpl.drs.Apertures) and the index of the sigma that\n    was used (int)\n\nRaises\n------\ncpl.core.DataNotFoundError\n    if the apertures could not be detected\n\nSee Also\n--------\ncpl.drs.Apertures.extract_sigma :\n    Used on the window for aperture detection. Also provides detailed\n    explaination of individual sigmas.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a127fef70c5bf30d16c69e68108e65410ed1df1c2f07abc46a904155ee4c0637",
            "fields": [
                {
                    "name": "source_image",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Image     The image to process ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigmas",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     Detection level. Positive, decreasing sigmas to apply ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "area",
                    "value": "",
                    "defaultValue": "",
                    "description": "tuple(int, int, int, int)     Rectangle of the window in the format (llx, lly, urx, ury) where:              - ",
                    "type": "'tuple'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.extract_window",
                    "defaultValue": "cpl.drs.Apertures.extract_window",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_bottom",
            "description": "\nReturns\n-------\nint\n    the bottommost y position in the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a29ec0317a7b8e6f7c929e5cbbae78ba0f72347a979b9874a64d99857f51c89d",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_bottom",
                    "defaultValue": "cpl.drs.Apertures.get_bottom",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_bottom_x",
            "description": "\nReturns\n-------\nint\n    the bottommost x position of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "db0c7b567a07d137d466418e4a0ad82f62175c79cdde2ad57bfa997a6ca8bd6c",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_bottom_x",
                    "defaultValue": "cpl.drs.Apertures.get_bottom_x",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_centroid_x",
            "description": "\nReturns\n-------\nfloat\n    The X-centroid of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ffa8037a24ef0e13b6f3e4ac93656c8cb5a1e68f2f06ba8e3877e75a2df8f833",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_centroid_x",
                    "defaultValue": "cpl.drs.Apertures.get_centroid_x",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_centroid_y",
            "description": "\nReturns\n-------\nfloat\n    The Y-centroid of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "22034d79657a5675f8a96f4762f71b0973cf7f9814017de338fc24f7576142a5",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_centroid_y",
                    "defaultValue": "cpl.drs.Apertures.get_centroid_y",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_flux",
            "description": "\nReturns\n-------\nint\n    The flux of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8df1d67bb94fd8a6ae9723ce2b1e5c84c41f84d1221c589aed005cbfe280eb2",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_flux",
                    "defaultValue": "cpl.drs.Apertures.get_flux",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_left",
            "description": "\nReturns\n-------\nint\n    the leftmost x position of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5d1ed114365447ad2ffd7592ad7633162593241d057b4a5a1f86d28dc6b3aaad",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_left",
                    "defaultValue": "cpl.drs.Apertures.get_left",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_left_y",
            "description": "\nReturns\n-------\nint\n    the y position of the leftmost x position\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b520b7653e554ebbba471a4e78897fcd31fe9f2c3b377c4ce3c2819d8d9a9c23",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_left_y",
                    "defaultValue": "cpl.drs.Apertures.get_left_y",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_max",
            "description": "\nReturns\n-------\nint\n    The maximum value of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ad2f2d8badcd1201dbeef41dad609df9334643d02cbe2ae518d4dbae6698021e",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_max",
                    "defaultValue": "cpl.drs.Apertures.get_max",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_maxpos_x",
            "description": "\nReturns\n-------\nint\n    The X-position of the aperture maximum value\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eac2e203ead6faddb7667e57f74dd1c5039a84d4c69fb34665d0a25ba20f0fcb",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_maxpos_x",
                    "defaultValue": "cpl.drs.Apertures.get_maxpos_x",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_maxpos_y",
            "description": "\nReturns\n-------\nint\n    The Y-position of the aperture maximum value\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a18c88dfc48c748796f851d63a235dfe638de7657ef96969f5327203b424502a",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_maxpos_y",
                    "defaultValue": "cpl.drs.Apertures.get_maxpos_y",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_mean",
            "description": "\nReturns\n-------\nint\n    The mean value of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "000855d0a2f4eb9ce579b092d73860be5615ffca688ee229d4f6276615e7f1ea",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_mean",
                    "defaultValue": "cpl.drs.Apertures.get_mean",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_median",
            "description": "\nReturns\n-------\nint\n    The median value of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fc655e7a8efbacf7a58d0c06fe08f1370d6d3c06b054ddceffa26f332faa6c74",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_median",
                    "defaultValue": "cpl.drs.Apertures.get_median",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_min",
            "description": "\nReturns\n-------\nint\n    The minimum value of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9dc195b431eb01e3f3aa66f60c47e5531e519285262d2f9d808372ab92e25d74",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_min",
                    "defaultValue": "cpl.drs.Apertures.get_min",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_minpos_x",
            "description": "\nReturns\n-------\nint\n    The X-position of the aperture minimum value\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b19d172434c6e87b3bb2803d7dd0211ac4c2ba20bddb47cbf4710901c2761e1f",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_minpos_x",
                    "defaultValue": "cpl.drs.Apertures.get_minpos_x",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_minpos_y",
            "description": "\nReturns\n-------\nint\n    The Y-position of the aperture minimum value\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "afb1af7cadbde5ce0b070bb6e0c4f6d8ef7809dd14738eff4010ebab4b3b8947",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_minpos_y",
                    "defaultValue": "cpl.drs.Apertures.get_minpos_y",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_npix",
            "description": "\nReturns\n-------\nint\n    The number of pixels of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94035a101c0edc19dce1b0927c037ee45dc92c8784b0aa00a0721cbe0cc60154",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_npix",
                    "defaultValue": "cpl.drs.Apertures.get_npix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_pos_x",
            "description": "\nReturns\n-------\nfloat\n    The average X-position of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7e6d1c706a9f8018d3b6f25405cffcbae142ccb7c3ceb27393273846f74e8db3",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_pos_x",
                    "defaultValue": "cpl.drs.Apertures.get_pos_x",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_pos_y",
            "description": "\nReturns\n-------\nfloat\n    The average Y-position of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "196ffea1a3252c65b7618a5ac131eae587e604d3ceabd6b54dcc4a3d9771bd5d",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_pos_y",
                    "defaultValue": "cpl.drs.Apertures.get_pos_y",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_right",
            "description": "\nReturns\n-------\nint\n    the rightmost x position in an aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0e0d5d8f84474dd82d44414e4d145838b2677e61ddc5384fd9c5b561643d07bd",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_right",
                    "defaultValue": "cpl.drs.Apertures.get_right",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_right_y",
            "description": "\nReturns\n-------\nint\n    the y position of the rightmost x position\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7787d9fe37a31cc32b1dda6c12dc4a62bcf049a83bbd5cc6895948d2738bc62b",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_right_y",
                    "defaultValue": "cpl.drs.Apertures.get_right_y",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_stdev",
            "description": "\nReturns\n-------\nint\n    The standard deviation value of the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures\ncpl.core.DataNotFOundError\n    if the aperture comprises of less than two pixels",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cee6c35c68521b210b083a8e7215da2ad2526324c84c79dc40201b4a2e42ac26",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_stdev",
                    "defaultValue": "cpl.drs.Apertures.get_stdev",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_top",
            "description": "\nReturns\n-------\nint\n    the topmost y position in the aperture\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0039db5a8e927d58e90f65b8fca3720c43752a9b7e67936d41edb243a6762c18",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_top",
                    "defaultValue": "cpl.drs.Apertures.get_top",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.get_top_x",
            "description": "\nReturns\n-------\nint\n    the x position of the topmost y position or negative on error\n\nRaises\n------\ncpl.core.IllegalInputError\n    if idx is non-positive\ncpl.core.AccessOutOfRangeError\n    if idx is greater than the number of apertures",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ef0adac76dab43941d29be0b7c9dc3610d8973d43d73fbb518d43a41cea0dc7f",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "idx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The aperture index (1 for the first one) ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.get_top_x",
                    "defaultValue": "cpl.drs.Apertures.get_top_x",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.sort_by_flux",
            "description": "sort_by_flux(self: cpl.drs.Apertures) -> None\n\nSort apertures by decreasing aperture flux and apply changes",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "abf38c559b932790ab7f9f9926f6b57074037ad8c7423fa460c0ce46d988178b",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.sort_by_flux",
                    "defaultValue": "cpl.drs.Apertures.sort_by_flux",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.sort_by_max",
            "description": "sort_by_max(self: cpl.drs.Apertures) -> None\n\nSort apertures by decreasing peak value and apply changes",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ecea1d44bab1a5052cd4ca9c92dbaf0076506f24c9f497b7535b51ea722cd336",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.sort_by_max",
                    "defaultValue": "cpl.drs.Apertures.sort_by_max",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.sort_by_npix",
            "description": "sort_by_npix(self: cpl.drs.Apertures) -> None\n\nSort apertures by decreasing size (in pixels) and apply changes",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ea827c3a20f202cdd817814cff723cc84ec174d43cc5ce45b292b24ac8ec58f3",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.sort_by_npix",
                    "defaultValue": "cpl.drs.Apertures.sort_by_npix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.Apertures.write",
            "description": "write(self: cpl.drs.Apertures, file: str, mode: str) -> None\n\n\nWrite the aperture information to a text file.\n\nParameters\n----------\nfile : str\n    Path of the file to write to\nmode : str\n    file mode to open. Supports \"w\" for write, and \"a\" for append.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3d518d2ae4e8e79cb070c52ab39caf09753b6b21995fc4ab9cf1fbf0bf2926f6",
            "fields": [
                {
                    "name": "file",
                    "value": null,
                    "defaultValue": null,
                    "description": "str     Path of the file to write to ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": null,
                    "defaultValue": null,
                    "description": "str     file mode to open. Supports \"w\" for write, and \"a\" for append.",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.Apertures.write",
                    "defaultValue": "cpl.drs.Apertures.write",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.WCS.__init__",
            "description": "__init__(self: cpl.drs.WCS, arg0: cpl.core.PropertyList) -> None",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0d7e24e5af79d7aaeb6ac100d7d2da9101bc6825693cdfb531fda48862c2ba7e",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.WCS.__init__",
                    "defaultValue": "cpl.drs.WCS.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.WCS.convert",
            "description": "world coordinates:\n     The real astronomical coordinate system for the observations. This may\n     be spectral, celestial, time, etc.\nstandard coordinates:\n    These are an intermediate relative coordinate representation, defined as a\n    distance from a reference point in the natural units of the world coordinate\n    system. Any defined projection geometry will have already been included in the\n    definition of standard coordinates.\n\nThe supported conversion modes are:\n\n- cpl.drs.WCS.trans_mode.PHYS2WORLD: Converts from physical to world coordinates\n- cpl.drs.WCS.trans_mode.WORLD2PHYS: Converts from world to physical coordinates\n- cpl.drs.WCS.trans_mode.WORLD2STD: Converts from world to standard coordinates\n- cpl.drs.WCS.trans_mode.PHYS2STD: Converts from physical to standard coordinates",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ae7bf664836d0205fb3dcc8edd62b650826928a2fb4c74f9305c45addc8a485d",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "from",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Matrix     The input coordinate matrix ",
                    "type": "'cpl.core.Matrix'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transform",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.WCS.trans_mode     The transformation mode ",
                    "type": "'cpl.drs.WCS.trans_mode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.WCS.convert",
                    "defaultValue": "cpl.drs.WCS.convert",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.WCS.platesol",
            "description": "outmode : cpl.drs.WCS.platesol_outmode\n    The output mode (see below)\n\nReturns\n-------\ncpl.core.PropertyList\n    The output property list containing the new WCS\n\nNotes\n-----\nThis function allows for the following type of fits:\n\n- cpl.drs.WCS.PLATESOL_4: Fit for zero point, 1 scale and 1 rotation.\n- cpl.drs.WCS.PLATESOL_6: Fit for zero point, 2 scales, 1 rotation, 1 shear.\n\nThis function allows the zeropoint to be defined by shifting either the\nphysical or the celestial coordinates of the reference point:\n\n- cpl.drs.WCS.MV_CRVAL: Keeps the physical point fixed and shifts the celestial\n- cpl.drs.WCS.MV_CRPIX: Keeps the celestial point fixed and shifts the physical\n\nThe output property list contains WCS relevant information only.\n\nRaises\n------\ncpl.core.UnspecifiedError\n    If unable to parse the input propertylist into a proper FITS WCS or there\n    are too few points in the input matrices for a fit.\ncpl.core.IncompatibleInputError\n    If the matrices `cel` and `xy` have different sizes.\ncpl.core.UnsupportedModeError\n    If either fitmode or outmode are specified incorrectly.\ncpl.core.DataNotFoundError\n    If the threshold is so low that no valid points are found. If the threshold \n    is not positive, this error is certain to occur.\ncpl.core.IllegalInputError\n    If the parameter niter is non-positive.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9fefe0a642081b6240e284e1132f8d8faaf8d94813c35f80eea1e40801f57198",
            "fields": [
                {
                    "name": "ilist",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.PropertyList     The input property list containing the first pass WCS ",
                    "type": "'cpl.core.PropertyList'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cel",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Matrix     The celestial coordinate matrix ",
                    "type": "'cpl.core.Matrix'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xy",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Matrix     The physical coordinate matrix ",
                    "type": "'cpl.core.Matrix'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "niter",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The number of fitting iterations ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "thresh",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     The threshold for the fitting rejection cycle ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fitmode",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.WCS.platesol_fitmode     The fitting mode (see below) ",
                    "type": "'cpl.drs.WCS.platesol_fitmode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "outmode",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.WCS.platesol_outmode     The output mode (see below) ",
                    "type": "'cpl.drs.WCS.platesol_outmode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.WCS.platesol",
                    "defaultValue": "cpl.drs.WCS.platesol",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "WCSLibError.__init__",
            "description": "No description found\nUsed to return errors from WCSLIB conversion functions.\n    \n    Contains error_list attribute containing a list of all errors found\n    in the opertation for each row in the format:\n    (matrix row, error enum string)\n    \n    This is not meant to be thrown in the Python environment.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e08abe2e39afce26ac6b80838ed2816ff91adde04f121e413bfb8e7fb4c61d2",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to object",
                    "type": "WCSLibError",
                    "parameterType": "ApplicationArgument",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "error_list",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "error_list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "message",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "message",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.WCSLibError.__init__",
                    "defaultValue": "cpl.drs.WCSLibError.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.detector.get_bias_window",
            "description": "ron_hsize: int, optional\n    to specify half size of squares default 4\nron_nsamp: int, optional\n    to specify the nb of samples, default 1000\n\nReturns\n-------\ntuple(float, float)\n    The bias in the frame and the error of the bias in the format (bias, error)\n\nRaises\n------\ncpl.core.IllegalInputError\n    if the specified window (zone_def) is invalid\n\nNotes\n-----\nThe algorithm will create typically 100 9x9 windows on the frame, scattered\noptimally using a Poisson law. In each window, the mean of all pixels in the\nwindow is computed and this value is stored.\n\nThe output `bias` is the median of all computed means, and the error is the\nstandard deviation of the means.\n  ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6abe7185587b80ab4cd71f303fef74ef2e9e5a8f6a3f5ab77475f26de6e830c9",
            "fields": [
                {
                    "name": "bias_image",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Image     Input image, normally a bias frame ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "zone_def",
                    "value": "",
                    "defaultValue": "",
                    "description": "tuple(int, int, int, int), optional     Tuple to describe the window where the bias is to be computed in the     format (xmin, xmax, ymin, ymax), using PyCPL notation where the bottom     left pixel is (0,0) ",
                    "type": "'Optional[Tuple[int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "int",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "']]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ron_hsize",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "int, optional     to specify half size of squares default 4 ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ron_nsamp",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "int, optional     to specify the nb of samples, default 1000 ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.detector.cpl.drs.detector.get_bias_window",
                    "defaultValue": "cpl.drs.detector.cpl.drs.detector.get_bias_window",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.detector.get_noise_ring",
            "description": "    Tuple to describe the window where the bias is to be computed in the\n    format (x, y, r1, r2). The first two intergers specify the centre position\n    of the ring as x, y, using PyCPL notation where the bottom left is (0,0).\n    Floats r1 and r2 specify the ring start and end radiuses.\nron_hsize: int, optional\n    to specify half size of squares default 4\nron_nsamp: int, optional\n    to specify the nb of samples, default 1000\n\nReturns\n-------\ntuple(float, float)\n    The noise in the frame and the error of the noise in the format (noise, error).\n\nRaises\n------\ncpl.core.IllegalInputError\n    if the internal radius (r1) is bigger than the external one (r2) in `zone_def`\ncpl.core.DataNotFoundError\n    If an insufficient number of samples were found inside the ring\n\nNotes\n-----\nThe algorithm will create typically 100 9x9 windows on the frame, scattered\noptimally using a Poisson law. In each window, the standard deviation of all\npixels in the window is computed and this value is stored. The `output` noise\nis the median of all computed standard deviations, and the error is the\nstandard deviation of the standard deviations.\n\nSee Also\n--------\ncpl.drs.detector.get_noise_window : Computes noise using a rectangle.\n  ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3823583d6a5ecc5da996df849bd762f27100d2348e0ea573eb7c40ef3563129a",
            "fields": [
                {
                    "name": "diff_image",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Image     Input image, usually a difference frame. ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "zone_def",
                    "value": "",
                    "defaultValue": "",
                    "description": "tuple(int, int, float, float)     Tuple to describe the window where the bias is to be computed in the     format (x, y, r1, r2). The first two intergers specify the centre position     of the ring as x, y, using PyCPL notation where the bottom left is (0,0).     Floats r1 and r2 specify the ring start and end radiuses. ",
                    "type": "'Tuple[int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "int",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "float",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "']'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ron_hsize",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "int, optional     to specify half size of squares default 4 ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ron_nsamp",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "int, optional     to specify the nb of samples, default 1000 ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.detector.cpl.drs.detector.get_noise_ring",
                    "defaultValue": "cpl.drs.detector.cpl.drs.detector.get_noise_ring",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.detector.get_noise_window",
            "description": "ron_hsize: int, optional\n    to specify half size of squares, default 4\nron_nsamp: int, optional\n    to specify the nb of samples, default 1000\n\nReturns\n-------\ntuple(float, float)\n    The noise in the frame and the error of the noise in the format (noise, error).\n\nRaises\n------\ncpl.core.IllegalInputError\n    if the specified window (zone_def) is invalid\n\nNotes\n-----\nThe algorithm will create typically 100 9x9 windows on the frame, scattered\noptimally using a Poisson law. In each window, the standard deviation of all\npixels in the window is computed and this value is stored.\n\nThe output `noise` is the median of all computed standard deviations, and the error is the\nstandard deviation of the standard deviations.\n\nSee Also\n--------\ncpl.drs.detector.get_noise_ring : Computes noise using a ring.\n  ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ea969d7f4502b4baf5be381eae09fc84a87b91acdfdcce1bc98216d2eeb7918f",
            "fields": [
                {
                    "name": "diff_image",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Image     Input image, usually a difference frame. ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "zone_def",
                    "value": "",
                    "defaultValue": "",
                    "description": "tuple(int, int, int, int), optional     Tuple to describe the window where the bias is to be computed in the format (xmin, xmax, ymin, ymax), using PyCPL notation where the bottom left is (0,0) ",
                    "type": "'Optional[Tuple[int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "int",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "']]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ron_hsize",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "int, optional     to specify half size of squares, default 4 ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ron_nsamp",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "int, optional     to specify the nb of samples, default 1000 ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.detector.cpl.drs.detector.get_noise_window",
                    "defaultValue": "cpl.drs.detector.cpl.drs.detector.get_noise_window",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.detector.interpolate_rejected",
            "description": "interpolate_rejected(to_clean: cpl.core.Image) -> None\n\n\nInterpolate any bad pixels in an image in place\n\nParameters\n----------\nto_clean: cpl.core.Image\n    The image to clean\n\nRaises\n------\ncpl.core.DataNotFoundError\n    if all pixels are bad\n\nNotes\n-----\nThe value of a bad pixel is interpolated from the good pixels among the\n8 nearest. (If all but one of the eight neighboring pixels are bad, the\ninterpolation becomes a nearest neighbor interpolation). For integer\nimages the interpolation in done with floating-point and rounded to the\nnearest integer.\n\nIf there are pixels for which all of the eight neighboring pixels are bad,\na subsequent interpolation pass is done, where the already interpolated\npixels are included as source for the interpolation.\n\nThe interpolation passes are repeated until all bad pixels have been\ninterpolated. In the worst case, all pixels will be interpolated from a\nsingle good pixel.\n  ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7ddb8324a61a277fe89731159923a70da20905521601385f214ad70c35d9b69b",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.detector.cpl.drs.detector.interpolate_rejected",
                    "defaultValue": "cpl.drs.detector.cpl.drs.detector.interpolate_rejected",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.fft.Mode.__init__",
            "description": "__init__(self: cpl.drs.fft.Mode, value: int) -> None",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1da6aac63d213f82348ac7e1c0b4a3352aae9fc785f9ab33a100b7d49ff69d1a",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.fft.Mode.__init__",
                    "defaultValue": "cpl.drs.fft.Mode.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.fft.fft_image",
            "description": "- scale: true or false, whether or not to transform without scaling (only\n         effects backwards transforms)\n\nReturn\n------\noutput image of the FFT operation\n\nNotes\n-----\nThis function performs an FFT on an image, using FFTW. CPL may be configured\nwithout this library, in this case an otherwise valid call will set and throw\nUnsupportedModeError.\n\nThe input and output images must match in precision level. Integer images are\nnot supported.\n\nIn a forward transform the input image may be non-complex. In this case a\nreal-to-complex transform is performed. This will only compute the first\nnx/2 + 1 columns of the transform. In this transform it is allowed to pass\nan output image with nx/2 + 1 columns.\n\nSimilarly, in a backward transform the output image may be non-complex. In\nthis case a complex-to-real transform is performed. This will only transform\nthe first nx/2 + 1 columns of the input. In this transform it is allowed to\npass an input image with nx/2 + 1 columns.\n\nPer default the backward transform scales (divides) the result with the\nnumber of elements transformed (i.e. the number of pixels in the result\nimage). This scaling can be turned off with CPL_FFT_NOSCALE.\n\nIf many transformations in the same direction are to be done on data of the\nsame size and type, a reduction in the time required to perform the\ntransformations can be achieved by passing cpl.drs.FIND_MEASURE to the find\nparam.\n\nFor a larger number of transformations a further reduction may be achived\ncpl.drs.FIND_PATIENT and for an even larger number of\ntransformations a further reduction may be achived with the flag\ncpl.drs.FIND_EXHAUSTIVE.\n\nIf many transformations are to be done then a reduction in the time required\nto perform the transformations can be achieved by using cpl_fft_imagelist().\n\nRaises\n------\ncpl.core.IllegalInputError\n  if the mode is illegal\ncpl.core.TypeMismatchError\n  if the image types are incompatible with each other\ncpl.core.UnsupportedModeError\n  if FFTW has not been installed",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b52e6ac4d32b84c590f156d179991c54be2eccca829d075da868ad318deaf683",
            "fields": [
                {
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "The frameset from which the product frames are taken. - ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transform",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.fft.FORWARD or cpl.drs.fft.FORWARD - ",
                    "type": "'cpl.drs.fft.Mode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "find",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "based on enum, time spent searching (cpl.drs.fft.FIND_MEASURE,         cpl.drs.fft.FIND_PATIENT, cpl.drs.fft.FIND_EXHAUSTIVE) - ",
                    "type": "'cpl.drs.fft.Mode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "true or false, whether or not to transform without scaling (only          effects backwards transforms)  Return ------ output image of the FFT operation  Notes ----- This function performs an FFT on an image, using FFTW. CPL may be configured without this library, in this case an otherwise valid call will set and throw UnsupportedModeError.  The input and output images must match in precision level. Integer images are not supported.  In a forward transform the input image may be non-complex. In this case a real-to-complex transform is performed. This will only compute the first nx/2 + 1 columns of the transform. In this transform it is allowed to pass an output image with nx/2 + 1 columns.  Similarly, in a backward transform the output image may be non-complex. In this case a complex-to-real transform is performed. This will only transform the first nx/2 + 1 columns of the input. In this transform it is allowed to pass an input image with nx/2 + 1 columns.  Per default the backward transform scales (divides) the result with the number of elements transformed (i.e. the number of pixels in the result image). This scaling can be turned off with CPL_FFT_NOSCALE.  If many transformations in the same direction are to be done on data of the same size and type, a reduction in the time required to perform the transformations can be achieved by passing cpl.drs.FIND_MEASURE to the find param.  For a larger number of transformations a further reduction may be achived cpl.drs.FIND_PATIENT and for an even larger number of transformations a further reduction may be achived with the flag cpl.drs.FIND_EXHAUSTIVE.  If many transformations are to be done then a reduction in the time required to perform the transformations can be achieved by using cpl_fft_imagelist(). ",
                    "type": "'bool'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.fft.cpl.drs.fft.fft_image",
                    "defaultValue": "cpl.drs.fft.cpl.drs.fft.fft_image",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.fft.fft_imagelist",
            "description": "scale : bool, default=True\n  true or false, whether or not to transform without scaling (only effects backwards transforms)\n\nReturns\n-------\ncpl.core.ImageList\n  output imagelist to store transformed images\n\nNotes\n-----\nConvenience function for running cpl.drs.fft.image() on all images in the input imagelist",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8d01934df813dee7fb836e64e290872a9d9becaa1fbc40e14e5f238279c99dab",
            "fields": [
                {
                    "name": "other",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.ImageList   Input imagelist to transform from ",
                    "type": "'cpl.core.ImageList'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "transform",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.fft.Mode   cpl.drs.fft.FORWARD or cpl.drs.fft.FORWARD ",
                    "type": "'cpl.drs.fft.Mode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "find",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cpl.drs.fft.Mode or None, default=None   based on enum, time spent searching (cpl.drs.fft.FIND_MEASURE, cpl.drs.fft.FIND_PATIENT, cpl.drs.fft.FIND_EXHAUSTIVE) ",
                    "type": "'cpl.drs.fft.Mode'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "scale",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "bool, default=True   true or false, whether or not to transform without scaling (only effects backwards transforms) ",
                    "type": "'bool'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.fft.cpl.drs.fft.fft_imagelist",
                    "defaultValue": "cpl.drs.fft.cpl.drs.fft.fft_imagelist",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.fit.image_gaussian",
            "description": "and C is the 7x7 matrix of the gaussian parameters.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "31008605d693b8e9a429809aee0b1de0633603d2677c5ee474d15fb7de86e15b",
            "fields": [
                {
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Image     Input image with data values to fit. ",
                    "type": "'cpl.core.Image'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xpos",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     X position of center of fitting domain. ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ypos",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Y position of center of fitting domain. ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xsize",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     X size of fitting domain. It must be at least 3 pixels. ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ysize",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Y size of fitting domain. It must be at least 3 pixels. ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "errors",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cpl.core.Image, optional     Optional input image with statistical errors associated to data. ",
                    "type": "'Optional[cpl.core.Image]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "guesses",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "list or array of 7 floats or None, optional     7 first-guesses for the gaussian parameters in the format:     [B, A, rho, mu_x, mu_y,sigma_x, sigma_y]      If None is passed for a parameter it will be considered     invalid and not be used as a first-guess for the parameter.      These parameters are futher detailed in the notes. fit_params :list or array of 7 bool elements, optional     Used to flag parameters for freezing. If an array element is set to False, the     corresponding parameter will be frozen. Any other value (including an \"invalid\"     array element) would indicate a free parameter. If a parameter is frozen, a     first-guess value must be specified at the corresponding element of the parameters     array. Default setting is all parameters being free.",
                    "type": "'Optional[List[Optional[float]]]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fit_params",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "'Optional[List[bool]]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.fit.cpl.drs.fit.image_gaussian",
                    "defaultValue": "cpl.drs.fit.cpl.drs.fit.image_gaussian",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.fit.imagelist_polynomial",
            "description": "\nReturns\n-------\nThe image list of the fitted polynomial coefficients\n\nRaises\n------\nIllegalInputError if mindeg is negative or maxdeg is less than mindeg or if llx or lly are smaller\n    than 1 or if urx or ury is smaller than llx and lly respectively.\nAccessOutOfRange error if x2 or y2 from window exceed the size of the images\nIncompatibleInputError if x_pos and values have different lengths, or if fiterror is given with a\n    different size than that of values, or if the input images do not all have the same dimensions\n    and pixel type.\nDataNotFoundError if x_pos contains less than nc values\nSingularMatrixError if x_pos contains less than nc distinct values.\nUnsupportedModeError if the chosen pixel type is not one of cpl.core.Type.DOUBLE, cpl.core.Type.FLOAT,\n    cpl.core.Type.INT.\n\nNotes\n-----\nFor each pixel, a polynomial representing the relation value = P(x) is\ncomputed where:\n\n    P(x) = x^{mindeg} * (a_0 + a_1 * x + ... + a_{nc-1} * x^{nc-1}),\n\nwhere mindeg >= 0 and maxdeg >= mindeg, and nc is the number of\npolynomial coefficients to determine, nc = 1 + (maxdeg - mindeg).\n\nThe returned image list thus contains nc coefficient images,\n\n    a_0, a_1, ..., a_{nc-1}.\n\nnp is the number of sample points, i.e. the number of elements in x_pos\nand number of images in the input image list.\n\nIf mindeg is nonzero then is_symsamp is ignored, otherwise\nis_symsamp may to be set to CPL_TRUE if and only if the values in x_pos are\nknown a-priori to be symmetric around their mean, e.g. (1, 2, 4, 6, 10,\n14, 16, 18, 19), but not (1, 2, 4, 6, 10, 14, 16). Setting is_symsamp to\nTrue while mindeg is zero eliminates certain round-off errors.\n\nFor higher order fitting the fitting problem known as \"Runge's phenomenon\"\nis minimized using the socalled \"Chebyshev nodes\" as sampling points.\nFor Chebyshev nodes is_symsamp can be set to True.\n\nEven though it is not an error, it is hardly useful to use an image of pixel\ntype integer for the fitting error. An image of pixel type float should on\nthe other hand be sufficient for most fitting errors.\n\nThe call requires the following number of FLOPs, where\nnz is the number of pixels in any one image in the imagelist:\n\n    2 * nz * nc * (nc + np) + np * nc^2 + nc^3/3 + O(nc * (nc + np)).\n\nIf mindeg is zero an additional nz * nc^2 FLOPs are required.\n\nIf fiterror is given an additional 2 * nz * nc * np FLOPs are required.\n\nBad pixels in the input is suported as follows:\n\n    First all pixels are fitted ignoring any bad pixel maps in the input. If\n    this succeeds then each fit, where bad pixel(s) are involved is redone.\n    During this second pass all input pixels flagged as bad are ignored.\n\n    For each pixel to be redone, the remaining good samples are passed to\n    cpl_polynomial_fit(). The input is_symsamp is ignored in this second pass.\n    The reduced number of samples may reduce the number of sampling points to\n    equal the number of coefficients to fit. In this case the fit has another\n    meaning (any non-zero residual is due to rounding errors, not a fitting\n    error). If for a given fit bad pixels reduces the number of sampling points\n    to less than the number of coefficients to fit, then as many coefficients are\n    fit as there are sampling points. The higher order coefficients are set to\n    zero and flagged as bad. If a given pixel has no good samples, then the\n    resulting fit will consist of zeroes, all flagged as bad.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "702a5c238f198eef2e95dcec26393fda0df77cb1c9c85366205fb79e402a603d",
            "fields": [
                {
                    "name": "x_pos",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     The vector of positions to fit ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.ImageList     The list of images with values to fit ",
                    "type": "'cpl.core.ImageList'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mindeg",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The smallest degree with a non-zero coefficient ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "maxdeg",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     The polynomial degree of the fit, at least mindeg ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "is_symsamp",
                    "value": "",
                    "defaultValue": "",
                    "description": "bool     True iff the x_pos values are symmetric around their mean ",
                    "type": "'bool'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pixeltype",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Type     The pixel-type of the created image list ",
                    "type": "'cpl.core.Type'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "fiterror",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cpl.core.Image, optional     Image to contain the error of the fit ",
                    "type": "'Optional[cpl.core.Image]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "window",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple(int,int,int,int), optional     If given, the window defining the area of the images to use in the format (x1,y1, x2, y2) ",
                    "type": "'Optional[tuple]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.fit.cpl.drs.fit.imagelist_polynomial",
                    "defaultValue": "cpl.drs.fit.cpl.drs.fit.imagelist_polynomial",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.fit.lvmq",
            "description": "lvmq(x: cpl.core.Matrix, y: cpl.core.Vector, starting_guess_params: cpl.core.Vector, evaluate: Callable[[List[float], List[float]], float], evaluate_derivatives: Callable[[List[float], List[float]], List[float]], participating_parameters: Optional[List[bool]] = None, sigma_y: Optional[cpl.core.Vector] = None, relative_tolerance: float = 0.01, tolerance_count: int = 5, max_iterations: int = 1000) -> object\n\n\nFit a function to a set of data.\n\nThis function makes a minimum chi squared fit of the specified function to the specified\ndata set using a Levenberg-Marquardt algorithm.\n\nParameters\n----------\nx : cpl.core.Matrix\n    N x D matrix of the positions to fit. Each matrix row is a D-dimensional position.\ny : cpl.core.Vector\n    The N values to fit.\nstarting_guess_params : cpl.core.Vector\n    Vector containing M fit parameters used for the evaulate function Must contain\n    a guess solution on input.\nparticipating_parameters : list or array of bools or None\n    Optional array of size M defining which fit parameters participate\n    in the fit (non-zero) and which fit parameters are held\n    constant (zero). Pass None to fit all parameters.\nevaluate : function(list or array of float, list or array of float) -> float\n    Function that evaluates the fit function\n    at the position specified by the first argument (an array of\n    size D) using the fit parameters specified by the second\n    argument (list or array of size M). The result is the return value of\n    the function.\nevaluate_derivatives : function(list or array of float, list or array of float) -> list of float\n    Function that evaluates the first order partial\n    derivatives of the fit function with respect to the fit\n    parameters at the position specified by the first argument\n    (an array of size D) using the parameters specified by the\n    second argument (an array of size M). The result is the return\n    value of the function, being a float array of size M).\nsigma_y : cpl.core.Vector\n    Vector of size N containing the uncertainties of\n    the y-values.\nrelative_tolerance : float, optional\n    The algorithm converges by definition if the relative\n    decrease in chi squared is less than `tolerance`\n    `tolerance_count` times in a row. The current default value\n    is the CPL recommended default of 0.01.\ntolerance_count : int\n    The algorithm converges by definition if the relative\n    decrease in chi squared is less than `tolerance`\n    `tolerance_count` times in a row. The current default value\n    is the CPL recommended default of 5.\nmax_iterations : int\n    If this number of iterations is reached without convergence,\n    the algorithm diverges, by definition. The current default value\n    is the CPL recommended default of 1000\nReturns\n-------\nA lvmqResult NamedTuple with the following elements:\n\nbest_fit : list or array of float\n    the best fit parameters for the evaluate function.\n    Derived from `starting_guess_params` if given.\nmse : float\n    the mean squared error of the best fit\nred_chisq : float\n    the reduced chi-squared of the best fit. None if `sigma_y` is not passed\ncovariance : cpl.core.Matrix\n    The formal covariance matrix of the best fi, On success the diagonal\n    terms of the covariance matrix are guaranteed to be positive.\n    However, terms that involve a constant parameter (as defined by the input\n    array `evaluate_derivatives`) are always set to zero. None if `sigma_y`\n    is not passed",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6cb3dfb8304adeedd91845e4b27b59f273d1c33c9aed9c7f3812fde14f3e496e",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.fit.cpl.drs.fit.lvmq",
                    "defaultValue": "cpl.drs.fit.cpl.drs.fit.lvmq",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.geometric_transforms.Combine.__init__",
            "description": "__init__(self: cpl.drs.geometric_transforms.Combine, value: int) -> None",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01723d29422a8759aba48a6bd51b6f22090d7950cf18186ac5e916a08e736b7d",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.geometric_transforms.Combine.__init__",
                    "defaultValue": "cpl.drs.geometric_transforms.Combine.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.geometric_transforms.offset_combine",
            "description": "    NamedTuple in the format (combined, contribution, pisigma) where:\n\n    - combined: the combined image\n    - contribution: the contribution map\n    - pisigma: Index of the sigma that was used. None if `sigmas` is not given\n\nRaises\n------\ncpl.core.NullInputError\n    if `sigmas` is not given when either refine set to True and anchors is\n    also not given\ncpl.core.IllegalInputError\n    if ilist is not uniform, or if `search_hx`, `search_hy`, `measure_hx`\n    and `measure_hy` have not been set when `refine` is set to `True`.\ncpl.core.IncompatibleInputError\n    if ilist and offs have different sizes\ncpl.core.DataNotFoundError\n    if the shift and add of the images fails\n\nSee Also\n--------\ncpl.drs.geometric_transformations.offset_fine : used to refine the offsets if refine is `True`\ncpl.drs.geometric_transformations.offset_saa : used for image recombination using the default kernel",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "36a75e94231171dd62b3da1a2b9c5edd4117701788d6490a0f2dd610055fc8d1",
            "fields": [
                {
                    "name": "ilist",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.ImageList     Input image list ",
                    "type": "'cpl.core.ImageList'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "offs",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Bivector     List of offsets in x and y. Applied directly if `refine` is False,     otherwise it will be refined using cross-correlation. ",
                    "type": "'cpl.core.Bivector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "min_rej",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_rej",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "union_flag",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.geometric_transforms.Combine     Combination ",
                    "type": "'cpl.drs.geometric_transforms.Combine'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "refine",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "bool, optional     Set to True to enable offset refinement offsets ",
                    "type": "'bool'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "search_hx",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Half-width of search area. This parameter must be set when `refine` is     `True`, if `refine` is `False` it has no effect. ",
                    "type": "'Optional[int]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "search_hy",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Half-height of search area. This parameter must be set when `refine`     is `True`, otherwise it has no effect. ",
                    "type": "'Optional[int]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "measure_hx",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Half-width of the measurement area. This parameter must be set when     `refine` is `True`, otherwise it has no effect. ",
                    "type": "'Optional[int]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "measure_hy",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "int     Half-height of the measurement area. This parameter must be set when     `refine` is `True`, otherwise it has no effect. ",
                    "type": "'Optional[int]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "anchors",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cpl.core.Bivector, optional     List of cross corelation points in the first image. Unused if `refine`     is set to False ",
                    "type": "'Optional[cpl.core.Bivector]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigmas",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cpl.core.Vector, optional     Positive, decreasing sigmas to apply for cross-correlation point     detection. Unused if `refine` is set to False, or if `refine` is     True but `anchors` is given.  Return ------ NamedTuple(cpl.core.Image, cpl.core.Image, int or None)     NamedTuple in the format (combined, contribution, pisigma) where:      - ",
                    "type": "'Optional[cpl.core.Vector]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.geometric_transforms.cpl.drs.geometric_transforms.offset_combine",
                    "defaultValue": "cpl.drs.geometric_transforms.cpl.drs.geometric_transforms.offset_combine",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.geometric_transforms.offset_fine",
            "description": "    Tuple of the List of offsets and the list of cross-correlation quality\n    factors, in the format (`offsets`, `quality_factors`).\n\nNotes\n-----\nThe matching is performed using a 2d cross-correlation, using a minimal\nsquared differences criterion. One measurement is performed per input anchor\npoint, and the median offset is returned together with a measure of\nsimilarity for each plane.\n\nThe images in the input list must only differ from a shift. In order\nfrom the correlation to work, they must have the same level (check the\naverage values of your input images if the correlation does not work).\n\nThe ith offset (:code:`offsets.x`, :code:`offsets.y`) in the returned\n`offsets` is the one that have to be used to shift the ith image to align\nit on the reference image (the first one).\n\nRaises\n------\ncpl.core.IllegalInputError\n    if ilist is not valid",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa51f4297bb95a05a68174de099044960a6ad7c72bf41a09506dcd7a98f9ae85",
            "fields": [
                {
                    "name": "ilist",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.ImageList     Input image list ",
                    "type": "'cpl.core.ImageList'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "estimates",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Bivector     First-guess estimation of the offsets ",
                    "type": "'cpl.core.Bivector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "anchors",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Bivector     List of cross-correlation points ",
                    "type": "'cpl.core.Bivector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "search_hx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Half-width of search area ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "search_hy",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Half-height of search area ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "measure_hx",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Half-width of the measurement area ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "measure_hy",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Half-height of the measurement area  Return ------ tuple(cpl.core.Bivector, cpl.core.Vector)     Tuple of the List of offsets and the list of cross-correlation quality     factors, in the format (`offsets`, `quality_factors`).  Notes ----- The matching is performed using a 2d cross-correlation, using a minimal squared differences criterion. One measurement is performed per input anchor point, and the median offset is returned together with a measure of similarity for each plane.  The images in the input list must only differ from a shift. In order from the correlation to work, they must have the same level (check the average values of your input images if the correlation does not work).  The ith offset (:code:`offsets.x`, :code:`offsets.y`) in the returned `offsets` is the one that have to be used to shift the ith image to align it on the reference image (the first one). ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.geometric_transforms.cpl.drs.geometric_transforms.offset_fine",
                    "defaultValue": "cpl.drs.geometric_transforms.cpl.drs.geometric_transforms.offset_fine",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.geometric_transforms.offset_saa",
            "description": "\nIf the number of input images is lower or equal to 3, the rejection\nparameters are ignored.\nIf the number of input images is lower or equal to 2*(rejmin+rejmax), the\nrejection parameters are ignored.\n\nPixels with a zero in the contribution map are flagged as bad in the\ncombined image.\n\nThe return values ppos_x and ppos_y follow the PyCPL standard, where the\nlower-leftmost pixel of the output image is at (0, 0). Note that this\ndiffers from the corresponding CPL function, where the lower-leftmost\npixel of the output image is at (1, 1).\n\nParameters\n----------\nilist : cpl.core.ImageList\n    Input image list\noffs : cpl.core.Bivector\n    List of offsets in x and y\nkernel : cpl.core.Kernel\n    Interpolation kernel to use for resampling. See extended summary for\n    supported kernel types\nrejmin : int\n    Number of minimum value pixels to reject in stacking\nrejmax : int\n    Number of maximum value pixels to reject in stacking\nunion_flag : cpl.drs.geometric_transforms.Combine\n    Combination mode: cpl.drs.geometric_transforms.Combine.UNION,\n    cpl.drs.geometric_transforms.Combine.INTERSECT or cpl.drs.geometric_transforms.Combine.FIRST\n\nReturn\n------\nNamedTuple(cpl.core.Image, cpl.core.Image, float, float)\n    NamedTuple in the format (combined, contribution, ppos_x, ppos_y) where:\n\n    - combined: the combined image\n    - contribution: the contribution map\n    - ppos_x: X-position of the first image in the combined image\n    - ppos_y: Y-position of the first image in the combined image\n\n    `ppos_x` and `ppos_y` represent the pixel coordinate in\n    the created output image-pair `combined` and `contribution` where the\n    lowermost-leftmost pixel of the first input image is located. So with\n    cpl.drs.geometric_transforms.Combine.FIRST this will always be (0, 0).\n\nRaises\n------\ncpl.core.IllegalInputError\n    if ilist is not valid or rejmin or rejmax is negative\ncpl.core.IncompatibleInputError\n    if ilist and offs have different sizes\ncpl.core.IllegalOutputError\n    if cpl.drs.geometric_transforms.INTERSECT is used with non-overlapping images.\ncpl.core.InvalidTypeError\n    if the passed image list type is not supported\ncpl.core.UnsupportedModeError\n    if union_flag is not one of the supported modes.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "496dc3ee0cd46d0d5b98d089ba01a237913b71a39250f85d29a3756bc8a54bd7",
            "fields": [
                {
                    "name": "ilist",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.ImageList     Input image list ",
                    "type": "'cpl.core.ImageList'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "offs",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Bivector     List of offsets in x and y ",
                    "type": "'cpl.core.Bivector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kernel",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Kernel     Interpolation kernel to use for resampling. See extended summary for     supported kernel types ",
                    "type": "'cpl.core.Kernel'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rejmin",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Number of minimum value pixels to reject in stacking ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rejmax",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Number of maximum value pixels to reject in stacking ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "union_flag",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.geometric_transforms.Combine     Combination ",
                    "type": "'cpl.drs.geometric_transforms.Combine'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.geometric_transforms.cpl.drs.geometric_transforms.offset_saa",
                    "defaultValue": "cpl.drs.geometric_transforms.cpl.drs.geometric_transforms.offset_saa",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.photom.Unit.__init__",
            "description": "__init__(self: cpl.drs.photom.Unit, value: int) -> None",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "616c442cdad5641fe8b9b90a9d9e712df8df67517e9823cc0a3d68d06467ed0e",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.photom.Unit.__init__",
                    "defaultValue": "cpl.drs.photom.Unit.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.photom.fill_blackbody",
            "description": "in_unit: cpl.drs.photom.Unit\n    cpl.drs.photom.Unit.LENGTH or cpl.drs.photom.Unit.FREQUENCY\ntemp: float\n    The black body temperature [K]\n\nReturn\n------\ncpl.core.Vector\n    The computed radiance\n\nRaises\n------\ncpl.core.IncompatibleInputError\n    if the size of evalpoints is different from the size of spectrum\ncpl.core.UnsupportedModeError\n    if in_unit and out_unit are not as requested\ncpl.core.IllegalInputError\n    if temp or a wavelength is non-positive\n\nNotes\n-----\nThe Planck black-body radiance can be computed in 5 different ways:\nAs a radiance of either energy [J*radian/s/m^3] or photons [radian/s/m^3],\nand in terms of either wavelength [m] or frequency [1/s]. The fifth way is\nas a unit-less radiance in terms of wavelength, in which case the area under\nthe planck curve is 1.\nThe dimension of the spectrum (energy or photons or unit-less, cpl.drs.photom.Unit.LESS)\nis controlled by out_unit, and the dimension of the input (length or\nfrequency) is controlled by in_unit.\n\nevalpoints and spectrum must be of equal, positive length.\n\nThe input wavelengths/frequencies and the temperature must be positive.\n\nThe four different radiance formulas are:\n\n.. math::\n    Rph1(\\lambda,T) = 2 \\pi \\frac{c}{\\lambda^4} (\\exp(hc/kT\\lambda)-1)^{-1}\n\n.. math::\n    Rph2(\\nu,T) = 2 \\pi \\frac{\\nu^2}{c^4} (\\exp(h\\nu/kT)-1)^{-1}\n\n.. math::\n    Re1(\\lambda,T) = 2 \\pi \\frac{hc^2}{\\lambda^5} (\\exp(hc/kT\\lambda)-1)^{-1} =\n    \\frac{hc}{\\lambda} Rph1(\\lambda,T)\n\n.. math::\n    Re2(\\nu,T) = 2 \\pi \\frac{h\\nu^3}{c^2} (\\exp(h\\nu/kT)-1)^{-1} = h\\nu Rph2(\\nu,T)\n\n.. math::\n    R1(\\lambda,T) = \\frac{15h^5c^5}{\\pi^4k^5\\lambda^5T^5}\n    (\\exp(hc/kT\\lambda)-1)^{-1} = \\frac{h^4c^3}{2\\pi^5k^5T^5} Rph1(\\lambda,T)\n\nwhere :math:`\\lambda` is the wavelength, :math:`\\nu` is the frequency,\n:math:`T` is the temperature, h is the Planck constant, k is the Boltzmann\nconstant and c is the speed of light in vacuum.\n\nWhen the radiance is computed in terms of wavelength, the radiance peaks\nat :math:`\\lambda_{max} = 2.897771955\\times 10^{-3}/T` [m]. When the radiance\nis unit-less this maximum, :math:`R1(\\lambda_{max},T)`, is approximately 3.2648.\n:math:`R1(\\lambda,T)` integrated over l from 0 to infinity is 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fd3da487fbc64a8cf4c0088d07d62c784b938370927715d6112b97b0d415a9dc",
            "fields": [
                {
                    "name": "out_unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.photom.Unit     cpl.drs.photom.Unit.PHOTONRADIANCE, cpl.drs.photom.Unit.ENERGYRADIANCE or cpl.drs.photom.Unit.LESS ",
                    "type": "'cpl.drs.photom.Unit'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "evalpoints",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     The evaluation points (wavelengths or frequencies) ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "in_unit",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.drs.photom.Unit     cpl.drs.photom.Unit.LENGTH or cpl.drs.photom.Unit.FREQUENCY ",
                    "type": "'cpl.drs.photom.Unit'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "temp",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     The black body temperature [K]  Return ------ cpl.core.Vector     The computed radiance ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.photom.cpl.drs.photom.fill_blackbody",
                    "defaultValue": "cpl.drs.photom.cpl.drs.photom.fill_blackbody",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.ppm.match_points",
            "description": "\n    matches : list of int\n        Indexes of identified data points (pattern-to-data).\n    mdata : cpl.core.Matrix\n        the list of identified `data` points\n    mpattern,: cpl.core.Matrix\n        the list of matching `pattern` points\n    lin_scale : float\n        the Linear transformation scale factor\n    lin_angle : float\n        the Linear transformation rotation angle\n\nNotes\n-----\nA point is described here by its coordinates on a cartesian plane.\nThe input matrices `data` and `pattern` must have 2 rows, as\ntheir column vectors are the points coordinates.\n\nThis function attemps to associate points in `data` to points in\n`pattern`, under the assumption that a transformation limited to\nscaling, rotation, and translation, would convert positions in\n`pattern` into positions in `data`. Association between points\nis also indicated in the following as \"match\", or \"identification\".\n\nPoint identification is performed in two steps. In the first step\nonly a subset of the points is identified (preliminary match). In\nthe second step the identified points are used to define a first-guess\ntransformation from `pattern` points to `data` points, that is\napplied to identify all the remaining points as well. The second\nstep would be avoided if a `use_pattern` equal to the number of\npoints in `pattern` is given, and exactly `use_pattern` points\nwould be identified already in the first step.\n\nFirst step:\n\nAll possible triangles (sub-patterns) are built using the first\n`use_data` points from `data` and the first `use_pattern`\npoints from `pattern`. The values of `use_data` and `use_pattern`\nmust always be at least 3 (however, see the note at the end),\nand should not be greater than the length of the corresponding\nlists of points. The point-matching algorithm goes as follow:\n\nFor every triplet of points:\n   Select one point as the reference. The triangle coordinates\n   are defined by\n\n               ((Rmin/Rmax)^2, theta_min theta_max)\n\n   where Rmin (Rmax) is the shortest (longest) distance from the\n   reference point to one of the two other points, and theta_min\n   (theta_max) is the view angle in [0; 2pi[ to the nearest\n   (farthest) point.\n\n   Triangles are computed by using each point in the triplet\n   as reference, thereby computing 3 times as many triangles\n   as needed.\n\n   The accuracy of triangle patterns is robust against distortions\n   (i.e., systematic inaccuracies in the points positions) of the\n   second order. This is because, if the points positions had\n   constant statistical uncertainty, the relative uncertainty in\n   the triangle coordinates would be inversely proportional to\n   the triangle size, while if second order distortions are\n   present the systematic error on points position would be\n   directly proportional to the triangle size.\n\nFor every triangle derived from the `pattern` points:\n   Match with nearest triangle derived from `data` points\n   if their distance in the parameter space is less than their\n   uncertainties (propagated from the points positions uncertainties\n   `err_data` and `err_pattern`). For every matched pair of\n   triangles, record their scale ratio, and their orientation\n   difference. Note that if both `err_data` and `err_pattern`\n   are zero, the tolerance in triangle comparison will also be\n   zero, and therefore no match will be found.\n\nGet median scale ratio and median angle of rotation, and reject\nmatches with a relative variation greater than `tolerance` from\nthe median of either quantities. The estimator of all the rotation\nangles a_i is computed as::\n\n            atan(med sin(a_i) / med cos(a_i))\n\n\nSecond step:\n\nFrom the safely matched triangles, a list of identified points is\nderived, and the best transformation from `pattern` points to\n`data` points (in terms of best rotation angle, best scaling\nfactor, and best shift) is applied to attempt the identification of\nall the points that are still without match. This matching is made\nby selecting for each `pattern` point the `data` point which is\nclosest to its transformed position, and at a distance less than\n`radius`.\n\nThe returned array of integers is as long as the number of points in\n`pattern`, and each element reports the position of the matching\npoint in `data` (counted starting from zero), or is invalid if no\nmatch was found for the `pattern` point. For instance, if element\nN of the array has value M, it means that the Nth point in `pattern`\nmatches the Mth point in `data`. \n\nTwo more matrices `mdata` and `mpattern` will be returned with the \ncoordinates of the identified points. These two matrices will both \nhave the same size: 2 rows, and as many columns as successfully \nidentified points. Matching points will be in the same column of both \nmatrices.\n\nIf `lin_scale` is returned with a good estimate\nof the scale (distance_in_data = lin_scaledistance_in_pattern).\nThis makes sense only in case the transformation between `pattern`\nand `data` is an affine transformation. In case of failure,\n`lin_scale` is set to zero.\n\nIf `lin_angle` is returned with a good\nestimate of the rotation angle between `pattern` and `data`\nin degrees (counted counterclockwise, from -180 to +180, and with\ndata_orientation = pattern_orientation + lin_angle). This makes\nsense only in case the transformation between `pattern` and\n`data` is an affine transformation. In case of failure,\n`lin_angle` is set to zero.\n\nThe returned values for `lin_scale` and `lin_angle` have the only\npurpose of providing a hint on the relation between `pattern` points\nand `data` points. This function doesn't attempt in any way to\ndetermine or even suggest a possible transformation between `pattern`\npoints and `data` points: this function just matches points, and it\nis entriely a responsibility of the caller to fit the appropriate\ntransformation between one coordinate system and the other.\nA polynomial transformation of degree 2 from `pattern` to `data`\nmay be fit in the following way (assuming that `mpattern` and\n`mdata` are available):\n\n.. code-block:: python\n\n    x = cpl.core.Vector(mdata[0,:])\n    y = cpl.core.Vector(mdata[1,:])\n    x_transform = cpl.core.Polynomial(2)\n    y_transform = cpl.core.Polynomial(2)\n    x_transform.fit(mpattern, x, False, [transform_x.degree,])\n    y_transform.fit(mpattern, y, False, [transform_y.degree,])\n\nThe basic requirement for using this function is that the searched\npoint pattern (or at least most of it) is contained in the data.\nAs an indirect consequence of this, it would generally be appropriate\nto have more points in `data` than in `pattern` (and analogously,\nto have `use_data` greater than `use_pattern`), even if this is\nnot strictly necessary.\n\nAlso, `pattern` and `data` should not contain too few points\n(say, less than 5 or 4) or the identification may risk to be incorrect:\nmore points enable the construction of many more triangles, reducing\nthe risk of ambiguity (multiple valid solutions). Special situations,\ninvolving regularities in patterns (as, for instance, input `data`\ncontaining just three equidistant points, or the case of a regular\ngrid of points) would certainly provide an answer, and this answer\nwould very likely be wrong (the human brain would fail as well,\nand for exactly the same reasons).\n\nThe reason why a two steps approach is encouraged here is mainly to\nenable an efficient use of this function: in principle, constructing\nall possible triangles using all of the available points is never\nwrong, but it could become very slow: a list of N points implies the\nevaluation of N*(N-1)*(N-2)/2 triangles, and an even greater number\nof comparisons between triangles. The possibility of evaluating\nfirst a rough transformation based on a limited number of identified\npoints, and then using this transformation for recovering all the\nremaining points, may significantly speed up the whole identification\nprocess. However it should again be ensured that the main requirement\n(i.e., that the searched point pattern must be contained in the data)\nwould still be valid for the selected subsets of points: a random\nchoice would likely lead to a matching failure (due to too few, or\nno, common points).\n\nA secondary reason for the two steps approach is to limit the effect\nof another class of ambiguities, happening when either or both of\nthe input matrices contains a very large number of uniformely\ndistributed points. The likelihood to find several triangles that\nare similar by chance, and at all scales and orientations, may\nincrease to unacceptable levels.\n\nA real example may clarify a possible way of using this function:\nlet `data` contain the positions (in pixel) of detected stars\non a CCD. Typically hundreds of star positions would be available,\nbut only the brightest ones may be used for preliminary identification.\nThe input `data` positions will therefore be opportunely ordered\nfrom the brightest to the dimmest star positions. In order to\nidentify stars, a star catalogue is needed. From a rough knowledge\nof the pointing position of the telescope and of the size of the\nfield of view, a subset of stars can be selected from the catalogue:\nthey will be stored in the `pattern` list, ordered as well by their\nbrightness, and with their RA and Dec coordinates converted into\nstandard coordinates (a gnomonic coordinate system centered on the\ntelescope pointing, i.e., a cartesian coordinate system), no matter\nin what units of arc, and no matter what orientation of the field.\nFor the first matching step, the 10 brightest catalogue stars may\nbe selected (selecting less stars would perhaps be unsafe, selecting\nmore would likely make the program slower without producing any\nbetter result). Therefore `use_pattern` would be set to 10.\nFrom the data side, it would generally be appropriate to select\ntwice as many stars positions, just to ensure that the searched\npattern is present. Therefore `use_data` would be set to 20.\nA reasonable value for `tolerance` and for `radius` would be\nrespectively 0.1 (a 10% variation of scales and angles) and 20\n(pixels).\n        ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cafec0de73206385b27f561adf67e9c99fee76a950437a01f4520525b6ad502b",
            "fields": [
                {
                    "name": "data",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Matrix     List of data points (e.g., detected stars positions). ",
                    "type": "'cpl.core.Matrix'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "use_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Number of `data` points used for preliminary match. ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "err_data",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     Error on `data` points positions. ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pattern",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Matrix     List of pattern points (e.g., expected stars positions). ",
                    "type": "'cpl.core.Matrix'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "use_pattern",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Number of `pattern` points used for preliminary match. ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "err_pattern",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     Error on `pattern` points positions. tolerance :double     Max relative difference of angles and scales from their median value for match      acceptance. ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tolerance",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     Search radius applied in final matching (`data` units).  Return ------ NamedTuple(",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.ppm.cpl.drs.ppm.match_points",
                    "defaultValue": "cpl.drs.ppm.cpl.drs.ppm.match_points",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.ppm.match_positions",
            "description": "lines : cpl.core.Vector\n    List of positions in searched pattern (e.g., wavelengths)\nmin_disp : float\n    Min expected scale (e.g., spectral dispersion in A/pixel)\nmax_disp : float\n    Max expected scale (e.g., spectral dispersion in A/pixel)\ntolerance : float\n    Tolerance for interval ratio comparison\n\nReturn\n-------\nList of all matching points positions\n\nNotes\n-----\nThis function attempts to find the reference pattern `lines` in a\nlist of observed positions `peaks`. In the following documentation\na terminology drawn from the context of arc lamp spectra calibration\nis used for simplicity: the reference pattern is then a list of\nwavelengths corresponding to a set of reference arc lamp emission\nlines the so-called line catalog; while the observed positions are\nthe positions (in pixel) on the CCD, measured along the dispersion\ndirection, of any significant peak of the signal. To identify the\nobserved peaks means to associate them with the right reference\nwavelength. This is attempted here with a point-pattern matching\ntechnique, where the pattern is contained in the vector `lines`,\nand is searched in the vector `peak`.\n\nIn order to work, this method just requires a rough expectation\nvalue of the spectral dispersion (in Angstrom/pixel), and a line\ncatalog. The line catalog `lines` should just include lines that\nare expected somewhere in the CCD exposure of the calibration lamp\n(note, however, that a catalog including extra lines at its blue\nand/or red ends is still allowed).\n\nTypically, the arc lamp lines candidates `peak` will include\nlight contaminations, hot pixels, and other unwanted signal,\nbut only in extreme cases does this prevent the pattern-recognition\nalgorithm from identifying all the spectral lines. The pattern\nis detected even in the case `peak` contained more arc lamp\nlines than actually listed in the input line catalog.\n\nThis method is based on the assumption that the relation between\nwavelengths and CCD positions is with good approximation `locally`\nlinear (this is always true, for any modern spectrograph).\n\nThe ratio between consecutive intervals pairs in wavelength and in\npixel is invariant to linear transformations, and therefore this\nquantity can be used in the recognition of local portions of the\nsearched pattern. All the examined sub-patterns will overlap, leading\nto the final identification of the whole pattern, notwithstanding the\noverall non-linearity of the relation between pixels and wavelengths.\n\nAmbiguous cases, caused by exceptional regularities in the pattern,\nor by a number of undetected (but expected) peaks that disrupt the\npattern on the data, are recovered by linear interpolation and\nextrapolation of the safely identified peaks.\n\nMore details about the applied algorithm can be found in the comments\nto the function code.\n    ",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "af5b753ba2e0b43d86667918d4d90b4611aefaeded69b1c50766bee46f098e0c",
            "fields": [
                {
                    "name": "peaks",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     List of observed positions (e.g., of emission peaks) ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "lines",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     List of positions in searched pattern (e.g., wavelengths) ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "min_disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     Min expected scale (e.g., spectral dispersion in A/pixel) ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_disp",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     Max expected scale (e.g., spectral dispersion in A/pixel) ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "tolerance",
                    "value": "",
                    "defaultValue": "",
                    "description": "float     Tolerance for interval ratio comparison  Return ------- List of all matching points positions  Notes ----- This function attempts to find the reference pattern `lines` in a list of observed positions `peaks`. In the following documentation a terminology drawn from the context of arc lamp spectra calibration is used for ",
                    "type": "'float'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.ppm.cpl.drs.ppm.match_positions",
                    "defaultValue": "cpl.drs.ppm.cpl.drs.ppm.match_positions",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.wlcalib.SlitModel.__init__",
            "description": "__init__(self: cpl.drs.wlcalib.SlitModel, catalog: cpl.core.Bivector, wfwhm: float, wslit: float, spectrum_size: int, threshold: float = 5.0) -> None\n\n\nCreate a new line model to be initialized.\n\n\n\nReturn\n------\ncpl.drs.SlitModel\n    Newly created line model\n\nRaises\n------\ncpl.core.IllegalInputError\n    if threshold, wfwhm or wslit is non-positive",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94129f841659bca9d698cc8047e6c348171abef1e9bc3f674d069290a546acfe",
            "fields": [
                {
                    "name": "catalog",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Bivector     the catalog of lines to be used by the spectrum filler ",
                    "type": "cpl.core.Bivector",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "wfwhm",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     the FWHM of th etransfer function to be used by the spectrum filler ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "wslit",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     the slit width to be used by the spectrum filler ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "spectrum_size",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     The size of the spectrum, returned by the spectrum filler functions ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "threshold",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     The threshold for truncating the transfer function, default 5 (recommended).",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.wlcalib.SlitModel.__init__",
                    "defaultValue": "cpl.drs.wlcalib.SlitModel.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.wlcalib.SlitModel.fill_line_spectrum",
            "description": "fill_line_spectrum(self: cpl.drs.wlcalib.SlitModel, dispersion: cpl.core.Polynomial) -> cpl.core.Vector\n\n\nGenerate a 1D spectrum from a model and a dispersion relation from the line intensities.\n\nParameters\n----------\ndisp : cpl.core.Polynomial\n    1D-Dispersion relation, at least of degree 1\n\nReturns\n-------\ncpl.core.Vector\n    A vector of self.spectrum_size, containing the spectrum generated.\n\nNotes\n-----\nEach line profile is given by the convolution of the Dirac delta function\nwith a Gaussian with :math:`sigma = w_{\\mathrm{FWHM}}/(2\\sqrt{2\\log(2)})` and\na top-hat with the slit width as width. This continuous line profile is then\nintegrated over each pixel, wherever the intensity is above the threshold\nset by the given model. For a given line the value on a given pixel\nrequires the evaluation of two calls to erf().",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5ae7a2366e87855d15749e276bab4e338c9f68c9c40b802fd0227a68965a51da",
            "fields": [
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Polynomial     1D-Dispersion relation, at least of degree 1 ",
                    "type": "cpl.core.Polynomial",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.wlcalib.SlitModel.fill_line_spectrum",
                    "defaultValue": "cpl.drs.wlcalib.SlitModel.fill_line_spectrum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.wlcalib.SlitModel.fill_line_spectrum_fast",
            "description": "fill_line_spectrum_fast(self: cpl.drs.wlcalib.SlitModel, dispersion: cpl.core.Polynomial) -> cpl.core.Vector\n\n\nGenerate a 1D spectrum from a model and a dispersion relation from the line intensities, approximating the line profile for speed.\n\nThe approximation preserves the position of the maximum, the symmetry and\nthe flux of the line profile.\n\nThe fast spectrum generation can be useful when the model spectrum includes\nmany catalog lines.\n\nParameters\n----------\ndisp : cpl.core.Polynomial\n    1D-Dispersion relation, at least of degree 1\n\nReturns\n-------\ncpl.core.Vector\n    A vector of self.spectrum_size, containing the spectrum generated.\n\nNotes\n-----\nEach line profile is given by the convolution of the Dirac delta function\nwith a Gaussian with\n\n.. math::\n\n    \\sigma = w_{\\mathrm{FWHM}}/(2\\sqrt{2\\log(2)}) and a\n\ntop-hat with the slit width as width. This continuous line profile is then\nintegrated over each pixel, wherever the intensity is above the threshold\nset by the given model. The use of a given line in a spectrum requires the \nevaluation of four calls to erf().",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8a0dc4e8e3c21c1ec251977c9b7aeb0ad841b9e2368c166c28e4ba80f56a6a97",
            "fields": [
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Polynomial     1D-Dispersion relation, at least of degree 1 ",
                    "type": "cpl.core.Polynomial",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.wlcalib.SlitModel.fill_line_spectrum_fast",
                    "defaultValue": "cpl.drs.wlcalib.SlitModel.fill_line_spectrum_fast",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.wlcalib.SlitModel.fill_logline_spectrum",
            "description": "fill_logline_spectrum(self: cpl.drs.wlcalib.SlitModel, dispersion: cpl.core.Polynomial) -> cpl.core.Vector\n\n\nGenerate a 1D spectrum from a model and a dispersion relation from log(1 + the line intensities).\n\nParameters\n----------\ndisp : cpl.core.Polynomial\n    1D-Dispersion relation, at least of degree 1\n\nReturns\n-------\ncpl.core.Vector\n    A vector of self.spectrum_size, containing the spectrum generated.\n\nNotes\n-----\nEach line profile is given by the convolution of the Dirac delta function\nwith a Gaussian with ..math:: sigma = w_{\\mathrm{FWHM}}/(2\\sqrt{2\\log(2)}) and a\ntop-hat with the slit width as width. This continuous line profile is then\nintegrated over each pixel, wherever the intensity is above the threshold\nset by the given model. For a given line the value on a given pixel\nrequires the evaluation of two calls to erf().",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f62e936b4219129b7ff8ce7577e9185ca4daaca28f596ef0ad4bf09a07117108",
            "fields": [
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Polynomial     1D-Dispersion relation, at least of degree 1 ",
                    "type": "cpl.core.Polynomial",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.wlcalib.SlitModel.fill_logline_spectrum",
                    "defaultValue": "cpl.drs.wlcalib.SlitModel.fill_logline_spectrum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.wlcalib.SlitModel.fill_logline_spectrum_fast",
            "description": "fill_logline_spectrum_fast(self: cpl.drs.wlcalib.SlitModel, dispersion: cpl.core.Polynomial) -> cpl.core.Vector\n\n\nGenerate a 1D spectrum from a model and a dispersion relation from\nlog(1 + the line intensities), approximating the line profile for speed.\n\nThe approximation preserves the position of the maximum, the symmetry and the\nflux of the line profile.\n\nThe fast spectrum generation can be useful when the model spectrum includes many\ncatalog lines.\n\nParameters\n----------\ndisp : cpl.core.Polynomial\n    1D-Dispersion relation, at least of degree 1\n\nReturns\n-------\ncpl.core.Vector\n    A vector of self.spectrum_size, containing the spectrum generated.\n\nNotes\n-----\nEach line profile is given by the convolution of the Dirac delta function\nwith a Gaussian with :math:`\\sigma = w_{\\mathrm{FWHM}}/(2\\sqrt{2\\log(2)})` and a\ntop-hat with the slit width as width. This continuous line profile is then\nintegrated over each pixel, wherever the intensity is above the threshold\nset by the given model. The use of a given line in a spectrum requires the \nevaluation of four calls to erf().",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "635b718864bffa77088b98986c053b1a5391e23df158c57e99c3c680ca2a8e75",
            "fields": [
                {
                    "name": "disp",
                    "value": null,
                    "defaultValue": null,
                    "description": "cpl.core.Polynomial     1D-Dispersion relation, at least of degree 1 ",
                    "type": "cpl.core.Polynomial",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.wlcalib.SlitModel.fill_logline_spectrum_fast",
                    "defaultValue": "cpl.drs.wlcalib.SlitModel.fill_logline_spectrum_fast",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "cpl.drs.wlcalib.SlitModel.find_best_1d",
            "description": "    The function used to make the spectrum. Currently only supports fill functions\n    in cpl.drs.wlcalib, including:\n\n    - cpl.drs.wlcalib.SlitModel.fill_line_spectrum\n    - cpl.drs.wlcalib.SlitModel.fill_line_spectrum_fast\n    - cpl.drs.wlcalib.SlitModel.fill_logline_spectrum\n    - cpl.drs.wlcalib.SlitModel.fill_logline_spectrum_fast\nguess : cpl.core.Polynomial, optional\n    1D-polynomial with the guess. If not given the guess will simply be a 1D-Polynomial \n    with no coefficients\n\nReturn\n-------\nNamedTuple(cpl.core.Polynomial, float, cpl.core.Vector)\n    NamedTuple in the format (result, xcmax, xcoors) where:\n\n    - result: the resulting best 1D dispersion polynomial\n    - xcmax: the maximum cross-correlation\n    - xcoors: the correlation values    \n\nRaises\n------\ncpl.core.InvalidTypeError\n    if an input polynomial is not 1D\ncpl.core.IllegalInputError\n    if wl_search size is less than 2, nsamples is less than 1, hsize is negative, or \n    wl_search contains a zero search bound.\ncpl.core.DataNotFoundError\n    if no model spectra can be created with the calling SlitModel and passed filler",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ac15faf0a8d7a9397898a075f2d950636040259521ae0727a5e9be2c5c166661",
            "fields": [
                {
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to object",
                    "type": "cpl",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "spectrum",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     The vector with the observed 1D-spectrum ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "wl_search",
                    "value": "",
                    "defaultValue": "",
                    "description": "cpl.core.Vector     Search range around the anchor points ",
                    "type": "'cpl.core.Vector'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "nsamples",
                    "value": "",
                    "defaultValue": "",
                    "description": "int      Number of samples around the anchor points ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "hsize",
                    "value": "",
                    "defaultValue": "",
                    "description": "int     Maximum (pixel) displacement of the polynomial guess ",
                    "type": "'int'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "filler",
                    "value": "",
                    "defaultValue": "",
                    "description": "function(cpl.core.Vector, cpl.core.Polynomial)     The function used to make the spectrum. Currently only supports fill functions     in cpl.drs.wlcalib, including:      - cpl.drs.wlcalib.SlitModel.fill_line_spectrum     - cpl.drs.wlcalib.SlitModel.fill_line_spectrum_fast     - cpl.drs.wlcalib.SlitModel.fill_logline_spectrum     - cpl.drs.wlcalib.SlitModel.fill_logline_spectrum_fast ",
                    "type": "'function'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "guess",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "cpl.core.Polynomial, optional     1D-polynomial with the guess. If not given the guess will simply be a 1D-Polynomial      with no coefficients  Return ------- NamedTuple(cpl.core.Polynomial, float, cpl.core.Vector)     NamedTuple in the format (result, xcmax, xcoors) where:      - ",
                    "type": "'Optional[cpl.core.Polynomial]'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "cpl.drs.wlcalib.SlitModel.find_best_1d",
                    "defaultValue": "cpl.drs.wlcalib.SlitModel.find_best_1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}