{
    "modelData": {
        "filePath": "pypeit_sampling.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "Provides a set of functions to handle resampling.\n\n.. include common links, assuming primary doc root is up one directory\n.. include:: ../include/links.rst",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "pypeit",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "6adf423ecfd1fe3bcceedbd31324a5a972f9dd593aa71bf3d60e351f93b092ae",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1731409048.582413,
        "numLGNodes": 6
    },
    "nodeDataArray": [
        {
            "category": "PythonMemberFunction",
            "id": "ast0kzs9",
            "name": "Resample.__init__",
            "description": "\nResample regularly or irregularly sampled data to a new grid using\n    integration.\n    \n    This is a generalization of the routine ``ppxf_util.log_rebin`` from from\n    the `ppxf`_ package by Michele Cappellari.\n    \n    The abscissa coordinates (`x`) or the pixel borders (`xBorders`) for\n    the data (`y`) should be provided for irregularly sampled data.  If\n    the input data is linearly or geometrically sampled (`inLog=True`),\n    the abscissa coordinates can be generated using the input range for\n    the (geometric) center of each grid point.  If `x`, `xBorders`, and\n    `xRange` are all None, the function assumes grid coordinates of\n    `x=numpy.arange(y.shape[-1])`.\n    \n    The function resamples the data by constructing the borders of the\n    output grid using the `new*` keywords and integrating the input\n    function between those borders.  The output data will be set to\n    `ext_value` for any data beyond the abscissa limits of the input\n    data.\n    \n    The data to resample (`y`) can be a 1D or 2D vector; the abscissa\n    coordinates must always be 1D.  If (`y`) is 2D, the resampling is\n    performed along the last axis (i.e., `axis=-1`).\n    \n    The nominal assumption is that the provided function is a step\n    function based on the provided input (i.e., `step=True`).  If the\n    output grid is substantially finer than the input grid, the\n    assumption of a step function will be very apparent.  To assume the\n    function is instead linearly interpolated between each provided\n    point, choose `step=False`; higher-order interpolations are not\n    provided.\n    \n    If errors are provided, a nominal error propagation is performed to\n    provide the errors in the resampled data.  \n    \n    .. warning::\n        Depending on the details of the resampling, the output errors\n        are likely highly correlated.  Any later analysis of the\n        resampled function should account for this.  A covariance\n        calculation will be provided in the future on a best-effort\n        basis.\n    \n    The `conserve` keyword sets how the units of the input data should\n    be treated.  If `conserve=False`, the input data are expected to be\n    in density units (i.e., per `x` coordinate unit) such that the\n    integral over :math:`dx` is independent of the units of :math:`x`\n    (i.e., flux per unit angstrom, or flux density).  If\n    `conserve=True`, the value of the data is assumed to have been\n    integrated over the size of each pixel (i.e., units of flux).  If\n    `conserve=True`, :math:`y` is converted to units of per step in\n    :math:`x` such that the integral before and after the resample is\n    the same.  For example, if :math:`y` is a spectrum in units of flux,\n    the function first converts the units to flux density and then\n    computes the integral over each new pixel to produce the new spectra\n    with units of flux.\n    \n    .. todo::\n        - Allow the user to provide the output pixel borders directly.\n        - Allow for higher order interpolations.\n        - Allow for a covariance matrix calculation.\n    \n    Args:\n        y (`numpy.ndarray`_):\n            Data values to resample.  Can be a numpy.ma.MaskedArray, and\n            the shape can be 1 or 2D.  If 1D, the shape must be\n            :math:`(N_{\\rm pix},)`; otherwise, it must be\n            :math:`(N_y,N_{\\rm pix})`.  I.e., the length of the last\n            axis must match the input coordinates.\n        e (`numpy.ndarray`_, optional):\n            Errors in the data that should be resampled.  Can be a\n            numpy.ma.MaskedArray, and the shape must match the input `y`\n            array.  These data are used to perform a nominal calculation\n            of the error in the resampled array.\n        mask (`numpy.ndarray`_, optional):\n            A boolean array (masked values are True) indicating values\n            in `y` that should be ignored during the resampling.  The\n            mask used during the resampling is the union of this object\n            and the masks of `y` and `e`, if they are provided as\n            numpy.ma.MaskedArrays.\n        x (`numpy.ndarray`_, optional):\n            Abcissa coordinates for the data, which do not need to be\n            regularly sampled.  If the pixel borders are not provided,\n            they are assumed to be half-way between adjacent pixels, and\n            the first and last borders are assumed to be equidistant\n            about the provided value.  If these coordinates are not\n            provided, they are determined by the input borders, the\n            input range, or just assumed to be the indices,\n            :math:`0..N_{\\rm pix}-1`.\n        xRange (array-like, optional):\n            A two-element array with the starting and ending value for\n            the coordinates of the centers of the first and last pixels\n            in y.  Default is :math:`[0,N_{\\rm pix}-1]`.\n        xBorders (`numpy.ndarray`_, optional):\n            An array with the borders of each pixel that must have a\n            length of :math:`N_{\\rm pix}+1`.\n        inLog (:obj:`bool`, optional):\n            Flag that the input is logarithmically binned, primarily\n            meaning that the coordinates are at the geometric center of\n            each pixel and the centers are spaced logarithmically.  If\n            false, the sampling is expected to be linear.\n        newRange (array-like, optional):\n            A two-element array with the (geometric) centers of the\n            first and last pixel in the output vector.  If not provided,\n            assumed to be the same as the input range.\n        newpix (:obj:`int`, optional): \n            Number of pixels for the output vector.  If not provided,\n            assumed to be the same as the input vector.\n        newLog (:obj:`bool`, optional):\n            The output vector should be logarithmically binned.\n        newdx (:obj:`float`, optional):\n            The sampling step for the output vector.  If `newLog=True`,\n            this has to be the change in the logarithm of x for the\n            output vector!  If not provided, the sampling is set by the\n            output range (see `newRange` above) and number of pixels\n            (see `newpix` above).\n        base (:obj:`float`, optional):\n            The base of the logarithm used for both input and output\n            sampling, if specified.  The default is 10; use\n            `numpy.exp(1)` for natural logarithm.\n        ext_value (:obj:`float`, optional):\n            Set extrapolated values to the provided float.  By default,\n            extrapolated values are set to 0.  If set to None, values\n            are just set to the linear exatrapolation of the data beyond\n            the provided limits; use `ext_value=None` with caution!\n        conserve (:obj:`bool`, optional):\n            Conserve the integral of the input vector.  For example, if\n            the input vector is a spectrum in flux units, you should\n            conserve the flux in the resampling; if the spectrum is in\n            units of flux density, you do not want to conserve the\n            integral.\n        step (:obj:`bool`, optional):\n            Treat the input function as a step function during the\n            resampling integration.  If False, use a linear\n            interpolation between pixel samples.\n    \n    Attributes:\n        x (`numpy.ndarray`_):\n            The coordinates of the function on input.\n        xborders (`numpy.ndarray`_):\n            The borders of the input pixel samples.\n        y (`numpy.ndarray`_):\n            The function to resample.\n        e (`numpy.ndarray`_):\n            The 1-sigma errors in the function to resample.\n        m (`numpy.ndarray`_):\n            The boolean mask for the input function.\n        outx (`numpy.ndarray`_):\n            The coordinates of the function on output.\n        outborders (`numpy.ndarray`_):\n            The borders of the output pixel samples.\n        outy (`numpy.ndarray`_):\n            The resampled function.\n        oute (`numpy.ndarray`_):\n            The resampled 1-sigma errors.\n        outf (`numpy.ndarray`_):\n            The fraction of each output pixel that includes valid data\n            from the input function.\n    \n    Raises:\n        ValueError: Raised if *y* is not of type `numpy.ndarray`_, if *y*\n            is not one-dimensional, or if *xRange* is not provided and\n            the input vector is logarithmically binned (see *inLog*\n            above).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "68ec500cea5db74da1703e28cf11f1385ad6080eaa0bef9f7df24df1b5d12fd1",
            "fields": [
                {
                    "name": "self",
                    "value": null,
                    "defaultValue": null,
                    "description": "Reference to Resample object",
                    "type": "Object:pypeit.sampling.Resample",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "y",
                    "value": null,
                    "defaultValue": null,
                    "description": "The function to resample.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "e",
                    "value": null,
                    "defaultValue": null,
                    "description": "The 1-sigma errors in the function to resample.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "A boolean array (masked values are True) indicating values in `y` that should be ignored during the resampling.  The mask used during the resampling is the union of this object and the masks of `y` and `e`, if they are provided as numpy.ma.MaskedArrays.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "x",
                    "value": null,
                    "defaultValue": null,
                    "description": "Abcissa coordinates for the data, which do not need to be regularly sampled.  If the pixel borders are not provided, they are assumed to be half-way between adjacent pixels, and the first and last borders are assumed to be equidistant about the provided value.  If these coordinates are not provided, they are determined by the input borders, the input range, or just assumed to be the indices, :math:`0..N_{\\rm pix}-1`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xRange",
                    "value": null,
                    "defaultValue": null,
                    "description": "A two-element array with the starting and ending value for the coordinates of the centers of the first and last pixels in y.  Default is :math:`[0,N_{\\rm pix}-1]`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "xBorders",
                    "value": null,
                    "defaultValue": null,
                    "description": "An array with the borders of each pixel that must have a length of :math:`N_{\\rm pix}+1`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "inLog",
                    "value": false,
                    "defaultValue": false,
                    "description": "Flag that the input is logarithmically binned, primarily meaning that the coordinates are at the geometric center of each pixel and the centers are spaced logarithmically.  If false, the sampling is expected to be linear.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "newRange",
                    "value": null,
                    "defaultValue": null,
                    "description": "A two-element array with the (geometric) centers of the first and last pixel in the output vector.  If not provided, assumed to be the same as the input range.\nnewpix (:obj:`int`, optional):  Number of pixels for the output vector.  If not provided, assumed to be the same as the input vector.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "newpix",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "newLog",
                    "value": true,
                    "defaultValue": true,
                    "description": "The output vector should be logarithmically binned.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "newdx",
                    "value": null,
                    "defaultValue": null,
                    "description": "The sampling step for the output vector.  If `newLog=True`, this has to be the change in the logarithm of x for the output vector!  If not provided, the sampling is set by the output range (see `newRange` above) and number of pixels (see `newpix` above).",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base",
                    "value": 10.0,
                    "defaultValue": 10.0,
                    "description": "The base of the logarithm used for both input and output sampling, if specified.  The default is 10; use `numpy.exp(1)` for natural logarithm.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ext_value",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Set extrapolated values to the provided float.  By default, extrapolated values are set to 0.  If set to None, values are just set to the linear exatrapolation of the data beyond the provided limits; use `ext_value=None` with caution!",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "conserve",
                    "value": false,
                    "defaultValue": false,
                    "description": "Conserve the integral of the input vector.  For example, if the input vector is a spectrum in flux units, you should conserve the flux in the resampling; if the spectrum is in units of flux density, you do not want to conserve the integral.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "step",
                    "value": true,
                    "defaultValue": true,
                    "description": "Treat the input function as a step function during the resampling integration.  If False, use a linear interpolation between pixel samples.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "pypeit.sampling.Resample",
                    "defaultValue": "pypeit.sampling.Resample",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "pypeit.sampling.Resample.__init__",
                    "defaultValue": "pypeit.sampling.Resample.__init__",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "urgb2276",
            "name": "angstroms_per_pixel",
            "description": "Return a vector with the angstroms per pixel at each channel.\n    \n    When `regular=True`, the function assumes that the wavelengths are\n    either sampled linearly or geometrically.  Otherwise, it calculates\n    the size of each pixel as the difference between the wavelength\n    coordinates.  The first and last pixels are assumed to have a width\n    as determined by assuming the coordinate is at its center.\n    \n    Args:\n        wave (`numpy.ndarray`_):\n            (Geometric) centers of the spectrum pixels in angstroms.\n        log (`numpy.ndarray`_, optional):\n            The vector is geometrically sampled.\n        base (:obj:`float`, optional):\n            Base of the logarithm used in the geometric sampling.\n        regular (:obj:`bool`, optional):\n            The vector is regularly sampled.\n    \n    Returns:\n        `numpy.ndarray`_: The angstroms per pixel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a6331aace9668f411e271425dbe8e6725639892701e47bc445f56df167add04f",
            "fields": [
                {
                    "name": "wave",
                    "value": null,
                    "defaultValue": null,
                    "description": "(Geometric) centers of the spectrum pixels in angstroms.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "log",
                    "value": false,
                    "defaultValue": false,
                    "description": "The vector is geometrically sampled.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base",
                    "value": 10.0,
                    "defaultValue": 10.0,
                    "description": "Base of the logarithm used in the geometric sampling.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "regular",
                    "value": true,
                    "defaultValue": true,
                    "description": "The vector is regularly sampled.",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "pypeit.sampling",
                    "defaultValue": "pypeit.sampling",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "pypeit.sampling.angstroms_per_pixel",
                    "defaultValue": "pypeit.sampling.angstroms_per_pixel",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "th4wy1vs",
            "name": "rectify_image",
            "description": "Rectify the image by shuffling flux along columns using the provided\n    column mapping.\n    \n    The image recification is one dimensional, treating each image row\n    independently. It can be done either by a direct resampling of the\n    image columns using the provided mapping of output to input column\n    location (see `col` and :class:`Resample`) or by an extraction along\n    the provided column locations (see `extract_width`). The latter is\n    generally faster; however, when resampling each row, the flux is\n    explicitly conserved (see the `conserve` argument of\n    :class:`Resample`).\n    \n    Args:\n        img (`numpy.ndarray`_):\n            The 2D image to rectify. Shape is :math:`(N_{\\rm row},\n            N_{\\rm col})`.\n        col (`numpy.ndarray`_):\n            The array mapping each output column to its location in\n            the input image. That is, e.g., `col[:,0]` provides the\n            column coordinate in `img` that should be rectified to\n            column 0 in the output image. Shape is :math:`(N_{\\rm\n            row}, N_{\\rm map})`.\n        bpm (`numpy.ndarray`_, optional):\n            Boolean bad-pixel mask for pixels to ignore in input\n            image. If None, no pixels are masked in the\n            rectification. If provided, shape must match `img`.\n        ocol (`numpy.ndarray`_, optional):\n            The column in the output image for each column in `col`.\n            If None, assume::\n    \n                ocol = numpy.arange(col.shape[1])\n    \n            These coordinates can fall off the output image (i.e.,\n            :math:`<0` or :math:`\\geq N_{\\rm out,col}`), but those\n            columns are removed from the output).\n        max_ocol (:obj:`int`, optional):\n            The last viable column *index* to include in the output\n            image; ie., for an image with `ncol` columns, this should\n            be `ncol-1`. If None, assume `max(ocol)`.\n        extract_width (:obj:`float`, optional):\n            The width of the extraction aperture to use for the image\n            rectification. If None, the image recification is performed\n            using :class:`Resample` along each row.\n        mask_threshold (:obj:`float`, optional):\n            Either due to `bpm` or the bounds of the provided `img`,\n            pixels in the rectified image may not be fully covered by\n            valid pixels in `img`. Pixels in the output image with\n            less than this fractional coverage of an input pixel are\n            flagged in the output.\n    \n    Returns:\n        Two `numpy.ndarray`_ objects are returned both with shape\n        `(nrow,max_ocol+1)`, the rectified image and its boolean\n        bad-pixel mask.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bb3b04142ae8b9e9e7dc7653b0ef737e882897e93cf6b0fb9905e43c226e3815",
            "fields": [
                {
                    "name": "img",
                    "value": null,
                    "defaultValue": null,
                    "description": "The 2D image to rectify. Shape is :math:`(N_{\\rm row}, N_{\\rm col})`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "col",
                    "value": null,
                    "defaultValue": null,
                    "description": "The array mapping each output column to its location in the input image. That is, e.g., `col[:,0]` provides the column coordinate in `img` that should be rectified to column 0 in the output image. Shape is :math:`(N_{\\rm row}, N_{\\rm map})`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bpm",
                    "value": null,
                    "defaultValue": null,
                    "description": "Boolean bad-pixel mask for pixels to ignore in input image. If None, no pixels are masked in the rectification. If provided, shape must match `img`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "ocol",
                    "value": null,
                    "defaultValue": null,
                    "description": "The column in the output image for each column in `col`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_ocol",
                    "value": null,
                    "defaultValue": null,
                    "description": "The last viable column *index* to include in the output image; ie., for an image with `ncol` columns, this should be `ncol-1`. If None, assume `max(ocol)`.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extract_width",
                    "value": null,
                    "defaultValue": null,
                    "description": "The width of the extraction aperture to use for the image rectification. If None, the image recification is performed using :class:`Resample` along each row.",
                    "type": "UNIDENTIFIED",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask_threshold",
                    "value": 0.5,
                    "defaultValue": 0.5,
                    "description": "Either due to `bpm` or the bounds of the provided `img`, pixels in the rectified image may not be fully covered by valid pixels in `img`. Pixels in the output image with less than this fractional coverage of an input pixel are flagged in the output.",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "pypeit.sampling",
                    "defaultValue": "pypeit.sampling",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "pypeit.sampling.rectify_image",
                    "defaultValue": "pypeit.sampling.rectify_image",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "i97mslly",
            "name": "resample_vector_npix",
            "description": "Determine the number of pixels needed to resample a vector given first, last pixel and dx\n    \n    Args:\n        outRange (list, `numpy.ndarray`_) : Two-element array with the\n            starting and ending x coordinate of the pixel centers to\n            divide into pixels of a given width.  If *log* is True, this\n            must still be the linear value of the x coordinate, not\n            log(x)!.\n        dx (float) : Linear or logarithmic pixel width.\n        log (bool) : Flag that the range should be logarithmically\n            binned.\n        base (float) : Base for the logarithm\n        default (int) : Default number of pixels to use.  The default is\n            returned if either *outRange* or *dx* are not provided.\n    \n    Returns:\n        :obj:`tuple`: Returns two objects: The number of pixels to\n        cover *outRange* with pixels of width *dx* and the adjusted\n        range such that number of pixels of size dx is the exact integer.\n    \n    Raises:\n        ValueError: Raised if the range is not a two-element vector",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "625c10456e224e1d2c5d1f4b35fddf62cae20414bc85c432d5b836091cd2a492",
            "fields": [
                {
                    "name": "outRange",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dx",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "log",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base",
                    "value": 10.0,
                    "defaultValue": 10.0,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "default",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "pypeit.sampling",
                    "defaultValue": "pypeit.sampling",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "pypeit.sampling.resample_vector_npix",
                    "defaultValue": "pypeit.sampling.resample_vector_npix",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "8fc2nwop",
            "name": "spectral_coordinate_step",
            "description": "Return the sampling step for the input wavelength vector.\n    \n    If the sampling is logarithmic, return the change in the logarithm\n    of the wavelength; otherwise, return the linear step in angstroms.\n    \n    Args: \n        wave (`numpy.ndarray`_): Wavelength coordinates of each spectral\n            channel in angstroms.\n        log (bool): (**Optional**) Input spectrum has been sampled\n            geometrically.\n        base (float): (**Optional**) If sampled geometrically, the\n            sampling is done using a logarithm with this base.  For\n            natural logarithm, use numpy.exp(1).\n    \n    Returns:\n        float: Spectral sampling step in either angstroms (log=False) or\n        the step in log(angstroms).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2184c233a7dccc5703a38998d5fb0952c816a132e9425a2cf4a7575074322df3",
            "fields": [
                {
                    "name": "wave",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "log",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base",
                    "value": 10.0,
                    "defaultValue": 10.0,
                    "description": "",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "pypeit.sampling",
                    "defaultValue": "pypeit.sampling",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "pypeit.sampling.spectral_coordinate_step",
                    "defaultValue": "pypeit.sampling.spectral_coordinate_step",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "id": "_skbw5pz",
            "name": "spectrum_velocity_scale",
            "description": "Determine the velocity sampling of an input wavelength vector when log sampled\n    \n    .. note::\n        The wavelength vector is assumed to be geometrically sampled!\n        However, the input units expected to be in angstroms, not, e.g.,\n        log(angstrom).\n    \n    Args: \n        wave (`numpy.ndarray`_): Wavelength coordinates of each spectral\n            channel in angstroms.  It is expected that the spectrum has\n            been sampled geometrically\n    \n    Returns:\n        float: Velocity scale of the spectrum in km/s.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c8cceb83045f55e649b0de38839b01d44939d518967a39c6308364de17051c4",
            "fields": [
                {
                    "name": "wave",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "base_name",
                    "value": "pypeit.sampling",
                    "defaultValue": "pypeit.sampling",
                    "description": "The base class for this member function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "pypeit.sampling.spectrum_velocity_scale",
                    "defaultValue": "pypeit.sampling.spectrum_velocity_scale",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}