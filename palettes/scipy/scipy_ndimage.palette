{
    "modelData": {
        "filePath": "scipy_ndimage.palette",
        "fileType": "palette",
        "shortDescription": "",
        "detailedDescription": "=========================================================\nMultidimensional image processing (:mod:`scipy.ndimage`)\n=========================================================\n\n.. currentmodule:: scipy.ndimage\n\nThis package contains various functions for multidimensional image\nprocessing.\n\n\nFilters\n=======\n\n.. autosummary::\n   :toctree: generated/\n\n   convolve - Multidimensional convolution\n   convolve1d - 1-D convolution along the given axis\n   correlate - Multidimensional correlation\n   correlate1d - 1-D correlation along the given axis\n   gaussian_filter\n   gaussian_filter1d\n   gaussian_gradient_magnitude\n   gaussian_laplace\n   generic_filter - Multidimensional filter using a given function\n   generic_filter1d - 1-D generic filter along the given axis\n   generic_gradient_magnitude\n   generic_laplace\n   laplace - N-D Laplace filter based on approximate second derivatives\n   maximum_filter\n   maximum_filter1d\n   median_filter - Calculates a multidimensional median filter\n   minimum_filter\n   minimum_filter1d\n   percentile_filter - Calculates a multidimensional percentile filter\n   prewitt\n   rank_filter - Calculates a multidimensional rank filter\n   sobel\n   uniform_filter - Multidimensional uniform filter\n   uniform_filter1d - 1-D uniform filter along the given axis\n\nFourier filters\n===============\n\n.. autosummary::\n   :toctree: generated/\n\n   fourier_ellipsoid\n   fourier_gaussian\n   fourier_shift\n   fourier_uniform\n\nInterpolation\n=============\n\n.. autosummary::\n   :toctree: generated/\n\n   affine_transform - Apply an affine transformation\n   geometric_transform - Apply an arbritrary geometric transform\n   map_coordinates - Map input array to new coordinates by interpolation\n   rotate - Rotate an array\n   shift - Shift an array\n   spline_filter\n   spline_filter1d\n   zoom - Zoom an array\n\nMeasurements\n============\n\n.. autosummary::\n   :toctree: generated/\n\n   center_of_mass - The center of mass of the values of an array at labels\n   extrema - Min's and max's of an array at labels, with their positions\n   find_objects - Find objects in a labeled array\n   histogram - Histogram of the values of an array, optionally at labels\n   label - Label features in an array\n   labeled_comprehension\n   maximum\n   maximum_position\n   mean - Mean of the values of an array at labels\n   median\n   minimum\n   minimum_position\n   standard_deviation - Standard deviation of an N-D image array\n   sum_labels - Sum of the values of the array\n   variance - Variance of the values of an N-D image array\n   watershed_ift\n\nMorphology\n==========\n\n.. autosummary::\n   :toctree: generated/\n\n   binary_closing\n   binary_dilation\n   binary_erosion\n   binary_fill_holes\n   binary_hit_or_miss\n   binary_opening\n   binary_propagation\n   black_tophat\n   distance_transform_bf\n   distance_transform_cdt\n   distance_transform_edt\n   generate_binary_structure\n   grey_closing\n   grey_dilation\n   grey_erosion\n   grey_opening\n   iterate_structure\n   morphological_gradient\n   morphological_laplace\n   white_tophat",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "eagleVersion": "",
        "eagleCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "f86e4a0f1d03a1e5fdea03e50e8ad3821ad0d9e353c766aac69e591145000822",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1695173659.363896,
        "numLGNodes": 73
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.affine_transform",
            "description": "Apply an affine transformation.\n    \n    Given an output image pixel index vector ``o``, the pixel value\n    is determined from the input image at position\n    ``np.dot(matrix, o) + offset``.\n    \n    This does 'pull' (or 'backward') resampling, transforming the output space\n    to the input to locate data. Affine transformations are often described in\n    the 'push' (or 'forward') direction, transforming input to output. If you\n    have a matrix for the 'push' transformation, use its inverse\n    (:func:`numpy.linalg.inv`) in this function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "54cd5d8bb10db7a4387de73b0e0082df31837f330673e8abc98f8acc7f069056",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "matrix",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     The inverse coordinate transformation matrix, mapping output     coordinates to input coordinates. If ``ndim`` is the number of     dimensions of ``input``, the given matrix must have one of the     following shapes:          - ``(ndim, ndim)``: the linear transformation matrix for each           output coordinate.         - ``(ndim,)``: assume that the 2-D transformation matrix is           diagonal, with the diagonal specified by the given value. A more           efficient algorithm is then used that exploits the separability           of the problem.         - ``(ndim + 1, ndim + 1)``: assume that the transformation is           specified using homogeneous coordinates [1]_. In this case, any           value passed to ``offset`` is ignored.         - ``(ndim, ndim + 1)``: as above, but the bottom row of a           homogeneous transformation matrix is always ``[0, 0, ..., 1]``,           and may be omitted.  ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "offset",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "float or sequence, optional     The offset into the array where the transform is applied. If a float,     `offset` is the same for each axis. If a sequence, `offset` should     contain one value for each axis. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_shape",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints, optional     Shape tuple. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional     The order of the spline interpolation, default is 3.     The order has to be in the range 0-5. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'constant'. Behavior for each valid     value is as follows (see additional plots and details on     :ref:`boundary modes <ndimage-interpolation-modes>`):      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'grid-mirror'         This is a synonym for 'reflect'.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. No         interpolation is performed beyond the edges of the input.      'grid-constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. Interpolation         occurs for samples outside the input's extent  as well.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'grid-wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      'wrap' (`d b c d | a b c d | b c a b`)         The input is extended by wrapping around to the opposite edge, but in a         way such that the last point and initial point exactly overlap. In this         case it is not well defined which sample will be chosen at the point of         overlap. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Determines if the input array is prefiltered with `spline_filter`     before interpolation. The default is True, which will create a     temporary `float64` array of filtered values if `order > 1`. If     setting this to False, the output will be slightly blurred if     `order > 1`, unless the input is prefiltered, i.e. it is the result     of calling `spline_filter` on the original input. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.affine_transform",
                    "defaultValue": "scipy.ndimage._interpolation.affine_transform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_closing",
            "description": "Multidimensional binary closing with the given structuring element.\n    \n    The *closing* of an input image by a structuring element is the\n    *erosion* of the *dilation* of the image by the structuring element.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "560677806935879f56f6638a3a9be2eff3017565bc296ab60b1196704e089ba3",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Binary array_like to be closed. Non-zero (True) elements form     the subset to be closed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Structuring element used for the closing. Non-zero elements are     considered True. If no structuring element is provided an element     is generated with a square connectivity equal to one (i.e., only     nearest neighbors are connected to the center, diagonally-connected     elements are not considered neighbors). ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     The dilation step of the closing, then the erosion step are each     repeated `iterations` times (one, by default). If iterations is     less than 1, each operations is repeated until the result does     not change anymore. Only an integer of iterations is accepted. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or tuple of ints, optional     Placement of the filter, by default 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     If a mask is given, only those elements with a True value at     the corresponding mask element are modified at each iteration.      .. versionadded:: 1.1.0 ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int (cast to 0 or 1), optional     Value at the border in the output array.      .. versionadded:: 1.1.0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "boolean, optional     Memory ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_closing",
                    "defaultValue": "scipy.ndimage._morphology.binary_closing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_dilation",
            "description": "Multidimensional binary dilation with the given structuring element.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8fa67c76cb90d9ae600570a9b0d7164020945cd0647477c22434e1a0b9d1a3d0",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Binary array_like to be dilated. Non-zero (True) elements form     the subset to be dilated. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Structuring element used for the dilation. Non-zero elements are     considered True. If no structuring element is provided an element     is generated with a square connectivity equal to one. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     The dilation is repeated `iterations` times (one, by default).     If iterations is less than 1, the dilation is repeated until the     result does not change anymore. Only an integer of iterations is     accepted. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     If a mask is given, only those elements with a True value at     the corresponding mask element are modified at each iteration. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int (cast to 0 or 1), optional     Value at the border in the output array. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or tuple of ints, optional     Placement of the filter, by default 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "boolean, optional     Memory ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_dilation",
                    "defaultValue": "scipy.ndimage._morphology.binary_dilation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_erosion",
            "description": "Multidimensional binary erosion with a given structuring element.\n    \n    Binary erosion is a mathematical morphology operation used for image\n    processing.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7f1f28600a9491c503552812e66cfffddeff3de2396e971af37c1f8d98527989",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Binary image to be eroded. Non-zero (True) elements form     the subset to be eroded. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Structuring element used for the erosion. Non-zero elements are     considered True. If no structuring element is provided, an element     is generated with a square connectivity equal to one. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     The erosion is repeated `iterations` times (one, by default).     If iterations is less than 1, the erosion is repeated until the     result does not change anymore. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     If a mask is given, only those elements with a True value at     the corresponding mask element are modified at each iteration. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int (cast to 0 or 1), optional     Value at the border in the output array. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or tuple of ints, optional     Placement of the filter, by default 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "boolean, optional     Memory ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_erosion",
                    "defaultValue": "scipy.ndimage._morphology.binary_erosion",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_fill_holes",
            "description": "Fill the holes in binary objects.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4043d3990985d69e2433d26312ab5c8135bc47d3ae62eab9e89e489379b3db09",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     N-D binary array with holes to be filled ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Structuring element used in the computation; large-size elements     make computations faster but may miss holes separated from the     background by thin regions. The default element (with a square     connectivity equal to one) yields the intuitive result where all     holes in the input have been filled. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, tuple of ints, optional     Position of the structuring element. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_fill_holes",
                    "defaultValue": "scipy.ndimage._morphology.binary_fill_holes",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_hit_or_miss",
            "description": "Multidimensional binary hit-or-miss transform.\n    \n    The hit-or-miss transform finds the locations of a given pattern\n    inside the input image.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7531decddb4f181f6db612f5992ff677ace6eba9e09aa38a83fb46afef4b0f33",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like (cast to booleans)     Binary image where a pattern is to be detected. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure1",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like (cast to booleans), optional     Part of the structuring element to be fitted to the foreground     (non-zero elements) of `input`. If no value is provided, a     structure of square connectivity 1 is chosen. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure2",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like (cast to booleans), optional     Second part of the structuring element that has to miss completely     the foreground. If no value is provided, the complementary of     `structure1` is taken. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin1",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or tuple of ints, optional     Placement of the first part of the structuring element `structure1`,     by default 0 for a centered structure. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin2",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or tuple of ints, optional     Placement of the second part of the structuring element `structure2`,     by default 0 for a centered structure. If a value is provided for     `origin1` and not for `origin2`, then `origin2` is set to `origin1`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_hit_or_miss",
                    "defaultValue": "scipy.ndimage._morphology.binary_hit_or_miss",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_opening",
            "description": "Multidimensional binary opening with the given structuring element.\n    \n    The *opening* of an input image by a structuring element is the\n    *dilation* of the *erosion* of the image by the structuring element.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "920850e6f71e931789321f7b511d606e1db343148320f66055dcba915c1d8969",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Binary array_like to be opened. Non-zero (True) elements form     the subset to be opened. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Structuring element used for the opening. Non-zero elements are     considered True. If no structuring element is provided an element     is generated with a square connectivity equal to one (i.e., only     nearest neighbors are connected to the center, diagonally-connected     elements are not considered neighbors). ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "int, optional     The erosion step of the opening, then the dilation step are each     repeated `iterations` times (one, by default). If `iterations` is     less than 1, each operation is repeated until the result does     not change anymore. Only an integer of iterations is accepted. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or tuple of ints, optional     Placement of the filter, by default 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     If a mask is given, only those elements with a True value at     the corresponding mask element are modified at each iteration.      .. versionadded:: 1.1.0 ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int (cast to 0 or 1), optional     Value at the border in the output array.      .. versionadded:: 1.1.0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "boolean, optional     Memory ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_opening",
                    "defaultValue": "scipy.ndimage._morphology.binary_opening",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.binary_propagation",
            "description": "Multidimensional binary propagation with the given structuring element.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ba6a0b47db24722ad08fb6c60e59bc3b9d3b5e5cb5a51daa902d00a33645a02",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Binary image to be propagated inside `mask`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Structuring element used in the successive dilations. The output     may depend on the structuring element, especially if `mask` has     several connex components. If no structuring element is     provided, an element is generated with a squared connectivity equal     to one. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mask",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Binary mask defining the region into which `input` is allowed to     propagate. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Array of the same shape as input, into which the output is placed.     By default, a new array is created. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int (cast to 0 or 1), optional     Value at the border in the output array. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or tuple of ints, optional     Placement of the filter, by default 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.binary_propagation",
                    "defaultValue": "scipy.ndimage._morphology.binary_propagation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.black_tophat",
            "description": "Multidimensional black tophat filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e89b8a2e52f497f20153bd479f2e1805840385df201ef7da148b3c8d1d575a4d",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints, optional     Shape of a flat and full structuring element used for the filter.     Optional if `footprint` or `structure` is provided. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of non-infinite elements of a flat structuring element     used for the black tophat filter. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the filter. `structure`     may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the filter may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default 0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.black_tophat",
                    "defaultValue": "scipy.ndimage._morphology.black_tophat",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.center_of_mass",
            "description": "Calculate the center of mass of the values of an array at labels.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2886a54b9c31c991687b94f1caedd911e35a718f00b02547326fc3b3c2a6aa55",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     Data from which to calculate center-of-mass. The masses can either     be positive or negative. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Labels for objects in `input`, as generated by `ndimage.label`.     Only used with `index`. Dimensions must be the same as `input`. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     Labels for which to calculate centers-of-mass. If not specified,     the combined center of mass of all labels greater than zero     will be calculated. Only used with `labels`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.center_of_mass",
                    "defaultValue": "scipy.ndimage._measurements.center_of_mass",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.convolve",
            "description": "Multidimensional convolution.\n    \n    The array is convolved with the given kernel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e2c232cf09af4c3dee99b2f530f4c8ab721a950e93056c4596592b99282796f2",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array of weights, same number of dimensions as input ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the origin of the input signal, which is where the     filter is centered to produce the first element of the output.     Positive values shift the filter to the right, and negative values     shift the filter to the left. Default is 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.convolve",
                    "defaultValue": "scipy.ndimage._filters.convolve",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.convolve1d",
            "description": "Calculate a 1-D convolution along the given axis.\n    \n    The lines of the array along the given axis are convolved with the\n    given weights.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9be09c71a6a5ea327ad95f244093f8ad175f69508ab66fc796473e6e16790a66",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     1-D sequence of numbers. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.convolve1d",
                    "defaultValue": "scipy.ndimage._filters.convolve1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.correlate",
            "description": "Multidimensional correlation.\n    \n    The array is correlated with the given kernel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6f1388c8903c681a1261aaf38bc83eaf7cd9b86c21dab7744b49eebd65f57c76",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     array of weights, same number of dimensions as input ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.correlate",
                    "defaultValue": "scipy.ndimage._filters.correlate",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.correlate1d",
            "description": "Calculate a 1-D correlation along the given axis.\n    \n    The lines of the array along the given axis are correlated with the\n    given weights.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "621b7e4070116ef830d1a5bd6b0022b28f6125159a2349b68ca488617609a664",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "weights",
                    "value": null,
                    "defaultValue": null,
                    "description": "array     1-D sequence of numbers. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right.  Examples -------- >>> from scipy.ndimage import correlate1d >>> correlate1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3]) array([ 8, 26,  8, 12,  7, 28, 36,  9])",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.correlate1d",
                    "defaultValue": "scipy.ndimage._filters.correlate1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.distance_transform_bf",
            "description": "Distance transform function by a brute force algorithm.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "be0401cf99aba799f0e05f26acaf960bd2b25239259c886de3e9b2456cd23332",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "metric",
                    "value": "euclidean",
                    "defaultValue": "euclidean",
                    "description": "{'euclidean', 'taxicab', 'chessboard'}, optional     'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.     The default is 'euclidean'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sampling",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, or sequence of float, optional     This parameter is only used when `metric` is 'euclidean'.     Spacing of elements along each dimension. If a sequence, must be of     length equal to the input rank; if a single number, this is used for     all axes. If not specified, a grid spacing of unity is implied. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Whether to calculate the distance transform.     Default is True. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to calculate the feature transform.     Default is False. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distances",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     An output array to store the calculated distance transform, instead of     returning it.     `return_distances` must be True.     It must be the same shape as `input`, and of type float64 if `metric`     is 'euclidean', uint32 otherwise. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "int32 ndarray, optional     An output array to store the calculated feature transform, instead of     returning it.     `return_indicies` must be True.     Its shape must be `(input.ndim,) + input.shape`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.distance_transform_bf",
                    "defaultValue": "scipy.ndimage._morphology.distance_transform_bf",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.distance_transform_cdt",
            "description": "Distance transform for chamfer type of transforms.\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c9b06a115f7ba3b7721a53aa7ff3db0b7288b7ca83b8ab9df57f6f0da1a00d09",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "metric",
                    "value": "chessboard",
                    "defaultValue": "chessboard",
                    "description": "{'chessboard', 'taxicab'} or array_like, optional     The `metric` determines the type of chamfering that is done. If the     `metric` is equal to 'taxicab' a structure is generated using     generate_binary_structure with a squared distance equal to 1. If     the `metric` is equal to 'chessboard', a `metric` is generated     using generate_binary_structure with a squared distance equal to     the dimensionality of the array. These choices correspond to the     common interpretations of the 'taxicab' and the 'chessboard'     distance metrics in two dimensions.     A custom metric may be provided, in the form of a matrix where     each dimension has a length of three.     'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.     The default is 'chessboard'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Whether to calculate the distance transform.     Default is True. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to calculate the feature transform.     Default is False. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distances",
                    "value": null,
                    "defaultValue": null,
                    "description": "int32 ndarray, optional     An output array to store the calculated distance transform, instead of     returning it.     `return_distances` must be True.     It must be the same shape as `input`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "int32 ndarray, optional     An output array to store the calculated feature transform, instead of     returning it.     `return_indicies` must be True.     Its shape must be `(input.ndim,) + input.shape`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.distance_transform_cdt",
                    "defaultValue": "scipy.ndimage._morphology.distance_transform_cdt",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.distance_transform_edt",
            "description": "Exact Euclidean distance transform.\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "29704c87a2a5e2d4d888a83c8c71cee8fdd5257c2e7237e5b7c8399d846238ed",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input data to transform. Can be any type but will be converted     into ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sampling",
                    "value": null,
                    "defaultValue": null,
                    "description": "float, or sequence of float, optional     Spacing of elements along each dimension. If a sequence, must be of     length equal to the input rank; if a single number, this is used for     all axes. If not specified, a grid spacing of unity is implied. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Whether to calculate the distance transform.     Default is True. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     Whether to calculate the feature transform.     Default is False. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "distances",
                    "value": null,
                    "defaultValue": null,
                    "description": "float64 ndarray, optional     An output array to store the calculated distance transform, instead of     returning it.     `return_distances` must be True.     It must be the same shape as `input`. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "indices",
                    "value": null,
                    "defaultValue": null,
                    "description": "int32 ndarray, optional     An output array to store the calculated feature transform, instead of     returning it.     `return_indicies` must be True.     Its shape must be `(input.ndim,) + input.shape`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.distance_transform_edt",
                    "defaultValue": "scipy.ndimage._morphology.distance_transform_edt",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.extrema",
            "description": "Calculate the minimums and maximums of the values of an array\n    at labels, along with their positions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "15fb4501be929432609ab6f88b58fceba926e1709724217dfb26f90bb7561d0c",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray     N-D image data to process. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     Labels of features in input.     If not None, must be same shape as `input`. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     Labels to include in output.  If None (default), all values where     non-zero `labels` are used. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.extrema",
                    "defaultValue": "scipy.ndimage._measurements.extrema",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.find_objects",
            "description": "Find objects in a labeled array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3e9a92d90e04120c05e9ee8b2e2d74f0d71681b512074706fa27fc1800d690ec",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray of ints     Array containing objects defined by different labels. Labels with     value 0 are ignored. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max_label",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Maximum label to be searched for in `input`. If max_label is not     given, the positions of all objects are returned. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.find_objects",
                    "defaultValue": "scipy.ndimage._measurements.find_objects",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.fourier_ellipsoid",
            "description": "Multidimensional ellipsoid Fourier filter.\n    \n    The array is multiplied with the fourier transform of a ellipsoid of\n    given sizes.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf54e3b2461ad3a736a9203c415289ffffc6a7473a900cac1861e7b2363957db",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or sequence     The size of the box used for filtering.     If a float, `size` is the same for all axes. If a sequence, `size` has     to contain one value for each axis. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     If `n` is negative (default), then the input is assumed to be the     result of a complex fft.     If `n` is larger than or equal to zero, the input is assumed to be the     result of a real fft, and `n` gives the length of the array before     transformation along the real transform direction. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of the real transform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     If given, the result of filtering the input is placed in this array.     None is returned in this case. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._fourier.fourier_ellipsoid",
                    "defaultValue": "scipy.ndimage._fourier.fourier_ellipsoid",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.fourier_gaussian",
            "description": "Multidimensional Gaussian fourier filter.\n    \n    The array is multiplied with the fourier transform of a Gaussian\n    kernel.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4e84e52aa417947a4aa843d138eff655513312a20c32659fbb462765ee04a029",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or sequence     The sigma of the Gaussian kernel. If a float, `sigma` is the same for     all axes. If a sequence, `sigma` has to contain one value for each     axis. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     If `n` is negative (default), then the input is assumed to be the     result of a complex fft.     If `n` is larger than or equal to zero, the input is assumed to be the     result of a real fft, and `n` gives the length of the array before     transformation along the real transform direction. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of the real transform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     If given, the result of filtering the input is placed in this array.     None is returned in this case. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._fourier.fourier_gaussian",
                    "defaultValue": "scipy.ndimage._fourier.fourier_gaussian",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.fourier_shift",
            "description": "Multidimensional Fourier shift filter.\n    \n    The array is multiplied with the Fourier transform of a shift operation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bb9335e477a4da75a36a877ad2331206eb8f7d59dc00aa2096bddcece749f068",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "shift",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or sequence     The size of the box used for filtering.     If a float, `shift` is the same for all axes. If a sequence, `shift`     has to contain one value for each axis. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     If `n` is negative (default), then the input is assumed to be the     result of a complex fft.     If `n` is larger than or equal to zero, the input is assumed to be the     result of a real fft, and `n` gives the length of the array before     transformation along the real transform direction. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of the real transform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     If given, the result of shifting the input is placed in this array.     None is returned in this case. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._fourier.fourier_shift",
                    "defaultValue": "scipy.ndimage._fourier.fourier_shift",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.fourier_uniform",
            "description": "Multidimensional uniform fourier filter.\n    \n    The array is multiplied with the Fourier transform of a box of given\n    size.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7d2f4e44963ddee91bd7d5208165f873a26103f5a193c7c7c8b60be2ce81cb10",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or sequence     The size of the box used for filtering.     If a float, `size` is the same for all axes. If a sequence, `size` has     to contain one value for each axis. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     If `n` is negative (default), then the input is assumed to be the     result of a complex fft.     If `n` is larger than or equal to zero, the input is assumed to be the     result of a real fft, and `n` gives the length of the array before     transformation along the real transform direction. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of the real transform. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     If given, the result of filtering the input is placed in this array.     None is returned in this case. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._fourier.fourier_uniform",
                    "defaultValue": "scipy.ndimage._fourier.fourier_uniform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.gaussian_filter",
            "description": "Multidimensional Gaussian filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "45f87ea4da07a3233534d3667e27f4afca42ba14b62d035dc60dc7e12f25b89a",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or sequence of scalars     Standard deviation for Gaussian kernel. The standard     deviations of the Gaussian filter are given for each axis as a     sequence, or as a single number, in which case it is equal for     all axes. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence of ints, optional     The order of the filter along each axis is given as a sequence     of integers, or as a single number. An order of 0 corresponds     to convolution with a Gaussian kernel. A positive order     corresponds to convolution with that derivative of a Gaussian. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "truncate",
                    "value": 4.0,
                    "defaultValue": 4.0,
                    "description": "float     Truncate the filter at this many standard deviations.     Default is 4.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.gaussian_filter",
                    "defaultValue": "scipy.ndimage._filters.gaussian_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.gaussian_filter1d",
            "description": "1-D Gaussian filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2e442b152479b8b9fc07a72c5c7abe1c53cedcd3849e63bf5796d479b08596fb",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     standard deviation for Gaussian kernel ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     An order of 0 corresponds to convolution with a Gaussian     kernel. A positive order corresponds to convolution with     that derivative of a Gaussian. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "truncate",
                    "value": 4.0,
                    "defaultValue": 4.0,
                    "description": "float, optional     Truncate the filter at this many standard deviations.     Default is 4.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.gaussian_filter1d",
                    "defaultValue": "scipy.ndimage._filters.gaussian_filter1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.gaussian_gradient_magnitude",
            "description": "Multidimensional gradient magnitude using Gaussian derivatives.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "13083a74f00d067171a4748c3d5c5304f8248486302468cce2d44838b676382a",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or sequence of scalars     The standard deviations of the Gaussian filter are given for     each axis as a sequence, or as a single number, in which case     it is equal for all axes. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. Extra keyword arguments will be passed to gaussian_filter(). ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.gaussian_gradient_magnitude",
                    "defaultValue": "scipy.ndimage._filters.gaussian_gradient_magnitude",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.gaussian_laplace",
            "description": "Multidimensional Laplace filter using Gaussian second derivatives.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "188a25a7e1d1748c73da799ee3df7d2c394147b85ae592e7a44bc05895983ad5",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "sigma",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or sequence of scalars     The standard deviations of the Gaussian filter are given for     each axis as a sequence, or as a single number, in which case     it is equal for all axes. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. Extra keyword arguments will be passed to gaussian_filter().  Examples -------- >>> from scipy import ndimage, misc >>> import matplotlib.pyplot as plt >>> ascent = misc.ascent()  >>> fig = plt.figure() >>> plt.gray()  # show the filtered result in grayscale >>> ax1 = fig.add_subplot(121)  # left side >>> ax2 = fig.add_subplot(122)  # right side  >>> result = ndimage.gaussian_laplace(ascent, sigma=1) >>> ax1.imshow(result)  >>> result = ndimage.gaussian_laplace(ascent, sigma=3) >>> ax2.imshow(result) >>> plt.show()",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "kwargs",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.gaussian_laplace",
                    "defaultValue": "scipy.ndimage._filters.gaussian_laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.generate_binary_structure",
            "description": "Generate a binary structure for binary morphological operations.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "20677983066cec45b14b022830abc6434bb1dbe5fbad9df930ff8ee1da21b07f",
            "fields": [
                {
                    "name": "rank",
                    "value": null,
                    "defaultValue": null,
                    "description": "int      Number of dimensions of the array to which the structuring element      will be applied, as returned by `np.ndim`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "connectivity",
                    "value": null,
                    "defaultValue": null,
                    "description": "int      `connectivity` determines which elements of the output array belong      to the structure, i.e., are considered as neighbors of the central      element. Elements up to a squared distance of `connectivity` from      the center are considered neighbors. `connectivity` may range from 1      (no diagonal elements are neighbors) to `rank` (all elements are      neighbors). ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.generate_binary_structure",
                    "defaultValue": "scipy.ndimage._morphology.generate_binary_structure",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.generic_filter",
            "description": "Calculate a multidimensional filter using the given function.\n    \n    At each element the provided function is called. The input values\n    within the filter footprint at that element are passed to the function\n    as a 1-D array of double values.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d36f6ddc13db77cc3bdc4a84e09bb7747799de829f7098b1db5b8312399ab993",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "function",
                    "value": null,
                    "defaultValue": null,
                    "description": "{callable, scipy.LowLevelCallable}     Function to apply at each element. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or tuple, optional     See footprint, below. Ignored if footprint is given. ",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     Either `size` or `footprint` must be defined. `size` gives     the shape that is taken from the input array, at every element     position, to define the input to the filter function.     `footprint` is a boolean array that specifies (implicitly) a     shape, but also which of the elements within this shape will get     passed to the filter function. Thus ``size=(n,m)`` is equivalent     to ``footprint=np.ones((n,m))``.  We adjust `size` to the number     of dimensions of the input array, so that, if the input array is     shape (10,10,10), and `size` is 2, then the actual size used is     (2,2,2). When `footprint` is given, `size` is ignored. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_arguments",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional     Sequence of extra positional arguments to pass to passed function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_keywords",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     dict of extra keyword arguments to pass to passed function.  Notes ----- This function also accepts low-level callback functions with one of the following signatures and wrapped in `scipy.LowLevelCallable`:  .. code:: c     int callback(double *buffer, npy_intp filter_size,                 double *return_value, void *user_data)    int callback(double *buffer, intptr_t filter_size,                 double *return_value, void *user_data)  The calling function iterates over the elements of the input and output arrays, calling the callback function at each element. The elements within the footprint of the filter at the current element are passed through the ``buffer`` parameter, and the number of elements within the footprint through ``filter_size``. The calculated value is returned in ``return_value``. ``user_data`` is the data pointer provided to `scipy.LowLevelCallable` as-is.  The callback function must return an integer error status that is zero if something went wrong and one otherwise. If an error occurs, you should normally set the python error status with an informative message before returning, otherwise a default error message is set by the calling function.  In addition, some other low-level function pointer specifications are accepted, but these are for backward compatibility only and should not be used in new code.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.generic_filter",
                    "defaultValue": "scipy.ndimage._filters.generic_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.generic_filter1d",
            "description": "Calculate a 1-D filter along the given axis.\n    \n    `generic_filter1d` iterates over the lines of the array, calling the\n    given function at each line. The arguments of the line are the\n    input line, and the output line. The input and output lines are 1-D\n    double arrays. The input line is extended appropriately according\n    to the filter size and origin. The output line must be modified\n    in-place with the result.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b83c7ea27bd83df8b9bfd8f4880e037ca857f2ecd5235afae70828b7f45a8e3d",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "function",
                    "value": null,
                    "defaultValue": null,
                    "description": "{callable, scipy.LowLevelCallable}     Function to apply along given axis. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "filter_size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     Length of the filter. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_arguments",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional     Sequence of extra positional arguments to pass to passed function. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_keywords",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     dict of extra keyword arguments to pass to passed function.  Notes ----- This function also accepts low-level callback functions with one of the following signatures and wrapped in `scipy.LowLevelCallable`:  .. code:: c     int function(double *input_line, npy_intp input_length,                 double *output_line, npy_intp output_length,                 void *user_data)    int function(double *input_line, intptr_t input_length,                 double *output_line, intptr_t output_length,                 void *user_data)  The calling function iterates over the lines of the input and output arrays, calling the callback function at each line. The current line is extended according to the border conditions set by the calling function, and the result is copied into the array that is passed through ``input_line``. The length of the input line (after extension) is passed through ``input_length``. The callback function should apply the filter and store the result in the array passed through ``output_line``. The length of the output line is passed through ``output_length``. ``user_data`` is the data pointer provided to `scipy.LowLevelCallable` as-is.  The callback function must return an integer error status that is zero if something went wrong and one otherwise. If an error occurs, you should normally set the python error status with an informative message before returning, otherwise a default error message is set by the calling function.  In addition, some other low-level function pointer specifications are accepted, but these are for backward compatibility only and should not be used in new code.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.generic_filter1d",
                    "defaultValue": "scipy.ndimage._filters.generic_filter1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.generic_gradient_magnitude",
            "description": "Gradient magnitude using a provided gradient function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "440de7085c3286d622e2459a74b67022d9db61956c50d3afc9534b85d90cb97c",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derivative",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Callable with the following signature::          derivative(input, axis, output, mode, cval,                    *extra_arguments, **extra_keywords)      See `extra_arguments`, `extra_keywords` below.     `derivative` can assume that `input` and `output` are ndarrays.     Note that the output from `derivative` is modified inplace;     be careful to copy important inputs before returning them. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_arguments",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional     Sequence of extra positional arguments to pass to passed function.",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_keywords",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     dict of extra keyword arguments to pass to passed function. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.generic_gradient_magnitude",
                    "defaultValue": "scipy.ndimage._filters.generic_gradient_magnitude",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.generic_laplace",
            "description": "N-D Laplace filter using a provided second derivative function.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ff62a4aeaf8d52c33e03b8400164fca9eb40e17ed3b07ddb2ef7deb4eb9f61af",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "derivative2",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Callable with the following signature::          derivative2(input, axis, output, mode, cval,                     *extra_arguments, **extra_keywords)      See `extra_arguments`, `extra_keywords` below. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_arguments",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "sequence, optional     Sequence of extra positional arguments to pass to passed function.",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_keywords",
                    "value": null,
                    "defaultValue": null,
                    "description": "dict, optional     dict of extra keyword arguments to pass to passed function. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.generic_laplace",
                    "defaultValue": "scipy.ndimage._filters.generic_laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.geometric_transform",
            "description": "Apply an arbitrary geometric transform.\n    \n    The given mapping function is used to find, for each point in the\n    output, the corresponding coordinates in the input. The value of the\n    input at those coordinates is determined by spline interpolation of\n    the requested order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7535d4da0be958e966979dc40b381fce7b97dfbcddf612192eb280a1c7850899",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mapping",
                    "value": null,
                    "defaultValue": null,
                    "description": "{callable, scipy.LowLevelCallable}     A callable object that accepts a tuple of length equal to the output     array rank, and returns the corresponding input coordinates as a tuple     of length equal to the input array rank. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_shape",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints, optional     Shape tuple. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional     The order of the spline interpolation, default is 3.     The order has to be in the range 0-5. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'constant'. Behavior for each valid     value is as follows (see additional plots and details on     :ref:`boundary modes <ndimage-interpolation-modes>`):      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'grid-mirror'         This is a synonym for 'reflect'.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. No         interpolation is performed beyond the edges of the input.      'grid-constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. Interpolation         occurs for samples outside the input's extent  as well.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'grid-wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      'wrap' (`d b c d | a b c d | b c a b`)         The input is extended by wrapping around to the opposite edge, but in a         way such that the last point and initial point exactly overlap. In this         case it is not well defined which sample will be chosen at the point of         overlap. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Determines if the input array is prefiltered with `spline_filter`     before interpolation. The default is True, which will create a     temporary `float64` array of filtered values if `order > 1`. If     setting this to False, the output will be slightly blurred if     `order > 1`, unless the input is prefiltered, i.e. it is the result     of calling `spline_filter` on the original input. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_arguments",
                    "value": "()",
                    "defaultValue": "()",
                    "description": "tuple, optional     Extra arguments passed to `mapping`. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "extra_keywords",
                    "value": {},
                    "defaultValue": {},
                    "description": "dict, optional     Extra keywords passed to `mapping`. ",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.geometric_transform",
                    "defaultValue": "scipy.ndimage._interpolation.geometric_transform",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.grey_closing",
            "description": "Multidimensional grayscale closing.\n    \n    A grayscale closing consists in the succession of a grayscale dilation,\n    and a grayscale erosion.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4725de06a16c5ec435ec99b40d3a3463590bfe8692e826dffa65384cae0ff3d7",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array over which the grayscale closing is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints     Shape of a flat and full structuring element used for the grayscale     closing. Optional if `footprint` or `structure` is provided. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of non-infinite elements of a flat structuring element     used for the grayscale closing. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the grayscale closing. `structure`     may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the closing may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default 0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.grey_closing",
                    "defaultValue": "scipy.ndimage._morphology.grey_closing",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.grey_dilation",
            "description": "Calculate a greyscale dilation, using either a structuring element,\n    or a footprint corresponding to a flat structuring element.\n    \n    Grayscale dilation is a mathematical morphology operation. For the\n    simple case of a full and flat structuring element, it can be viewed\n    as a maximum filter over a sliding window.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "99487774ac80d5236dd7e5cc291390f9f65333e0ec600fde8cd27bb5f61dd37f",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array over which the grayscale dilation is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints     Shape of a flat and full structuring element used for the grayscale     dilation. Optional if `footprint` or `structure` is provided. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of non-infinite elements of a flat structuring element     used for the grayscale dilation. Non-zero values give the set of     neighbors of the center over which the maximum is chosen. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the grayscale dilation. `structure`     may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the dilation may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect','constant','nearest','mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default 0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.grey_dilation",
                    "defaultValue": "scipy.ndimage._morphology.grey_dilation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.grey_erosion",
            "description": "Calculate a greyscale erosion, using either a structuring element,\n    or a footprint corresponding to a flat structuring element.\n    \n    Grayscale erosion is a mathematical morphology operation. For the\n    simple case of a full and flat structuring element, it can be viewed\n    as a minimum filter over a sliding window.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb450b3cfa8998f9b92feee95e03e25d96ab10a6e9e274b476891963bf0e5e2e",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array over which the grayscale erosion is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints     Shape of a flat and full structuring element used for the grayscale     erosion. Optional if `footprint` or `structure` is provided. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of non-infinite elements of a flat structuring element     used for the grayscale erosion. Non-zero values give the set of     neighbors of the center over which the minimum is chosen. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the grayscale erosion. `structure`     may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the erosion may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect','constant','nearest','mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default 0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.grey_erosion",
                    "defaultValue": "scipy.ndimage._morphology.grey_erosion",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.grey_opening",
            "description": "Multidimensional grayscale opening.\n    \n    A grayscale opening consists in the succession of a grayscale erosion,\n    and a grayscale dilation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8fad07bba600240750ef7351ef0f767779e745e95026e9847296337de7980eff",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array over which the grayscale opening is to be computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints     Shape of a flat and full structuring element used for the grayscale     opening. Optional if `footprint` or `structure` is provided. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of non-infinite elements of a flat structuring element     used for the grayscale opening. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the grayscale opening. `structure`     may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the opening may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default 0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.grey_opening",
                    "defaultValue": "scipy.ndimage._morphology.grey_opening",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.histogram",
            "description": "Calculate the histogram of the values of an array, optionally at labels.\n    \n    Histogram calculates the frequency of values in an array within bins\n    determined by `min`, `max`, and `bins`. The `labels` and `index`\n    keywords can limit the scope of the histogram to specified sub-regions\n    within the array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e14425661bc419671ee61aa1c4e88136ccf34d8c7e49086a38c5c84463c56d26",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Data for which to calculate histogram. min, ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "min",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "max",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     Minimum and maximum values of range of histogram bins. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "bins",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     Number of bins. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Labels for objects in `input`.     If not None, must be same shape as `input`. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     Label or labels for which to calculate histogram. If None, all values     where label is greater than zero are used ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.histogram",
                    "defaultValue": "scipy.ndimage._measurements.histogram",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.iterate_structure",
            "description": "Iterate a structure by dilating it with itself.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8a65dae3bf155f3edab4967b9e1ef5278a3b4c046b13f58fee11186007110c27",
            "fields": [
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like    Structuring element (an array of bools, for example), to be dilated with    itself. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "iterations",
                    "value": null,
                    "defaultValue": null,
                    "description": "int    number of dilations performed on the structure with itself ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": null,
                    "defaultValue": null,
                    "description": "optional     If origin is None, only the iterated structure is returned. If     not, a tuple of the iterated structure and the modified origin is     returned. ",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.iterate_structure",
                    "defaultValue": "scipy.ndimage._morphology.iterate_structure",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.label",
            "description": "Label features in an array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c153341eb04f3fcd6ce9392392390580040a00c4798481d8d6cfcee9fceb0f36",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     An array-like object to be labeled. Any non-zero values in `input` are     counted as features and zero values are considered the background. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     A structuring element that defines feature connections.     `structure` must be centrosymmetric     (see Notes).     If no structuring element is provided,     one is automatically generated with a squared connectivity equal to     one.  That is, for a 2-D `input` array, the default structuring element     is::          [[0,1,0],          [1,1,1],          [0,1,0]]  ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "(None, data-type, array_like), optional     If `output` is a data type, it specifies the type of the resulting     labeled feature array.     If `output` is an array-like object, then `output` will be updated     with the labeled features from this function.  This function can     operate in-place, by passing output=input.     Note that the output must be able to store the largest label, or this     function will raise an Exception. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.label",
                    "defaultValue": "scipy.ndimage._measurements.label",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.labeled_comprehension",
            "description": "Roughly equivalent to [func(input[labels == i]) for i in index].\n    \n    Sequentially applies an arbitrary function (that works on array_like input)\n    to subsets of an N-D image array specified by `labels` and `index`.\n    The option exists to provide the function with positional parameters as the\n    second argument.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7d7951e5eb2a06642c9a804100e3ca01d23668bf652626a03253e5119a7b81ec",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Data from which to select `labels` to process. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like or None     Labels to objects in `input`.     If not None, array must be same shape as `input`.     If None, `func` is applied to raveled `input`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, sequence of ints or None     Subset of `labels` to which to apply `func`.     If a scalar, a single value is returned.     If None, `func` is applied to all non-zero values of `labels`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "func",
                    "value": null,
                    "defaultValue": null,
                    "description": "callable     Python function to apply to `labels` from `input`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "out_dtype",
                    "value": null,
                    "defaultValue": null,
                    "description": "dtype     Dtype to use for `result`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "default",
                    "value": null,
                    "defaultValue": null,
                    "description": "int, float or None     Default return value when a element of `index` does not exist     in `labels`. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "pass_positions",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If True, pass linear indices to `func` as a second argument.     Default is False. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.labeled_comprehension",
                    "defaultValue": "scipy.ndimage._measurements.labeled_comprehension",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.laplace",
            "description": "N-D Laplace filter based on approximate second derivatives.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1fa6e79bc95fe0dd1dc7c1b3c6c94ed007d1d46d20f02be41962d42897ef3c57",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0.  Examples -------- >>> from scipy import ndimage, misc >>> import matplotlib.pyplot as plt >>> fig = plt.figure() >>> plt.gray()  # show the filtered result in grayscale >>> ax1 = fig.add_subplot(121)  # left side >>> ax2 = fig.add_subplot(122)  # right side >>> ascent = misc.ascent() >>> result = ndimage.laplace(ascent) >>> ax1.imshow(ascent) >>> ax2.imshow(result) >>> plt.show()",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.laplace",
                    "defaultValue": "scipy.ndimage._filters.laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.map_coordinates",
            "description": "Map the input array to new coordinates by interpolation.\n    \n    The array of coordinates is used to find, for each point in the output,\n    the corresponding coordinates in the input. The value of the input at\n    those coordinates is determined by spline interpolation of the\n    requested order.\n    \n    The shape of the output is derived from that of the coordinate\n    array by dropping the first axis. The values of the array along\n    the first axis are the coordinates in the input array at which the\n    output value is found.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d49c29e954861f1861725279954710e2edb9cd0275c5d8112fcc9938308ba22d",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "coordinates",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The coordinates at which `input` is evaluated. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional     The order of the spline interpolation, default is 3.     The order has to be in the range 0-5. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'constant'. Behavior for each valid     value is as follows (see additional plots and details on     :ref:`boundary modes <ndimage-interpolation-modes>`):      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'grid-mirror'         This is a synonym for 'reflect'.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. No         interpolation is performed beyond the edges of the input.      'grid-constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. Interpolation         occurs for samples outside the input's extent  as well.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'grid-wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      'wrap' (`d b c d | a b c d | b c a b`)         The input is extended by wrapping around to the opposite edge, but in a         way such that the last point and initial point exactly overlap. In this         case it is not well defined which sample will be chosen at the point of         overlap. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Determines if the input array is prefiltered with `spline_filter`     before interpolation. The default is True, which will create a     temporary `float64` array of filtered values if `order > 1`. If     setting this to False, the output will be slightly blurred if     `order > 1`, unless the input is prefiltered, i.e. it is the result     of calling `spline_filter` on the original input. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.map_coordinates",
                    "defaultValue": "scipy.ndimage._interpolation.map_coordinates",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.maximum",
            "description": "Calculate the maximum of the values of an array over labeled regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "86f52f9f5ae60b9ad5de1fb0c28fa8b836e5b1648e6c0d50373a317db2e23105",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array_like of values. For each region specified by `labels`, the     maximal values of `input` over the region is computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     An array of integers marking different regions over which the     maximum value of `input` is to be computed. `labels` must have the     same shape as `input`. If `labels` is not specified, the maximum     over the whole array is returned. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     A list of region labels that are taken into account for computing the     maxima. If index is None, the maximum over all elements where `labels`     is non-zero is returned. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.maximum",
                    "defaultValue": "scipy.ndimage._measurements.maximum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.maximum_filter",
            "description": "Calculate a multidimensional maximum filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a6f34f264bd8695eb7466a3a539705291c9112653c7ce7493ec5b9a3a233ea39",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or tuple, optional     See footprint, below. Ignored if footprint is given. ",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     Either `size` or `footprint` must be defined. `size` gives     the shape that is taken from the input array, at every element     position, to define the input to the filter function.     `footprint` is a boolean array that specifies (implicitly) a     shape, but also which of the elements within this shape will get     passed to the filter function. Thus ``size=(n,m)`` is equivalent     to ``footprint=np.ones((n,m))``.  We adjust `size` to the number     of dimensions of the input array, so that, if the input array is     shape (10,10,10), and `size` is 2, then the actual size used is     (2,2,2). When `footprint` is given, `size` is ignored. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.maximum_filter",
                    "defaultValue": "scipy.ndimage._filters.maximum_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.maximum_filter1d",
            "description": "Calculate a 1-D maximum filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    maximum filter of given size.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5c75e7d39b59849d4f4309989807c5c4d3fc22733c7eded9103271a33b52e014",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     Length along which to calculate the 1-D maximum. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.maximum_filter1d",
                    "defaultValue": "scipy.ndimage._filters.maximum_filter1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.maximum_position",
            "description": "Find the positions of the maximums of the values of an array at labels.\n    \n    For each region specified by `labels`, the position of the maximum\n    value of `input` within the region is returned.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6495eee7aacdd175614c9bb5795fea011a4b23ad3b6d3dc98169fe8985863709",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array_like of values. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     An array of integers marking different regions over which the     position of the maximum value of `input` is to be computed.     `labels` must have the same shape as `input`. If `labels` is not     specified, the location of the first maximum over the whole     array is returned.      The `labels` argument only works when `index` is specified. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     A list of region labels that are taken into account for finding the     location of the maxima. If `index` is None, the first maximum     over all elements where `labels` is non-zero is returned.      The `index` argument only works when `labels` is specified. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.maximum_position",
                    "defaultValue": "scipy.ndimage._measurements.maximum_position",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.mean",
            "description": "Calculate the mean of the values of an array at labels.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5ec65d451c1b8b9b2175d38329b470300677d4b39cda42d80bdccf52e3ed6f29",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array on which to compute the mean of elements over distinct     regions. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Array of labels of same shape, or broadcastable to the same shape as     `input`. All elements sharing the same label form one region over     which the mean of the elements is computed. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     Labels of the objects over which the mean is to be computed.     Default is None, in which case the mean for all values where label is     greater than 0 is calculated. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.mean",
                    "defaultValue": "scipy.ndimage._measurements.mean",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.median_filter",
            "description": "Calculate a multidimensional median filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c1d1f2458163e4b3e96f85fb3250a14b11983db5da49386d5e4d90fac22b2a2a",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or tuple, optional     See footprint, below. Ignored if footprint is given. ",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     Either `size` or `footprint` must be defined. `size` gives     the shape that is taken from the input array, at every element     position, to define the input to the filter function.     `footprint` is a boolean array that specifies (implicitly) a     shape, but also which of the elements within this shape will get     passed to the filter function. Thus ``size=(n,m)`` is equivalent     to ``footprint=np.ones((n,m))``.  We adjust `size` to the number     of dimensions of the input array, so that, if the input array is     shape (10,10,10), and `size` is 2, then the actual size used is     (2,2,2). When `footprint` is given, `size` is ignored. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.median_filter",
                    "defaultValue": "scipy.ndimage._filters.median_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.minimum",
            "description": "Calculate the minimum of the values of an array over labeled regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f44c7b5f8d8f46fe406d615f5f7771618d5b9049dd41c81427911f9555ec2dbf",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array_like of values. For each region specified by `labels`, the     minimal values of `input` over the region is computed. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     An array_like of integers marking different regions over which the     minimum value of `input` is to be computed. `labels` must have the     same shape as `input`. If `labels` is not specified, the minimum     over the whole array is returned. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     A list of region labels that are taken into account for computing the     minima. If index is None, the minimum over all elements where `labels`     is non-zero is returned. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.minimum",
                    "defaultValue": "scipy.ndimage._measurements.minimum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.minimum_filter",
            "description": "Calculate a multidimensional minimum filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5c7c291378b65bfdea928b6f2075ce8fecfbebe49a82b2a0ae0fed52c8692e6e",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or tuple, optional     See footprint, below. Ignored if footprint is given. ",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     Either `size` or `footprint` must be defined. `size` gives     the shape that is taken from the input array, at every element     position, to define the input to the filter function.     `footprint` is a boolean array that specifies (implicitly) a     shape, but also which of the elements within this shape will get     passed to the filter function. Thus ``size=(n,m)`` is equivalent     to ``footprint=np.ones((n,m))``.  We adjust `size` to the number     of dimensions of the input array, so that, if the input array is     shape (10,10,10), and `size` is 2, then the actual size used is     (2,2,2). When `footprint` is given, `size` is ignored. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.minimum_filter",
                    "defaultValue": "scipy.ndimage._filters.minimum_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.minimum_filter1d",
            "description": "Calculate a 1-D minimum filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    minimum filter of given size.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6df41eb0fbf58b1f467d124f8e4d45832cc30afa2fff0701a88e5d20e343313b",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     length along which to calculate 1D minimum ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right.  Notes ----- This function implements the MINLIST algorithm [1]_, as described by Richard Harter [2]_, and has a guaranteed O(n) performance, `n` being the `input` length, regardless of filter size.  References ---------- .. [1] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.2777 .. [2] http://www.richardhartersworld.com/cri/2001/slidingmin.html   Examples -------- >>> from scipy.ndimage import minimum_filter1d >>> minimum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3) array([2, 0, 0, 0, 1, 1, 0, 0])",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.minimum_filter1d",
                    "defaultValue": "scipy.ndimage._filters.minimum_filter1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.minimum_position",
            "description": "Find the positions of the minimums of the values of an array at labels.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94fbb36cc85db977c6ca613ab7436f42f0d84ad1cbcc0dc743fd37ff0b23d257",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array_like of values. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     An array of integers marking different regions over which the     position of the minimum value of `input` is to be computed.     `labels` must have the same shape as `input`. If `labels` is not     specified, the location of the first minimum over the whole     array is returned.      The `labels` argument only works when `index` is specified. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     A list of region labels that are taken into account for finding the     location of the minima. If `index` is None, the ``first`` minimum     over all elements where `labels` is non-zero is returned.      The `index` argument only works when `labels` is specified. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.minimum_position",
                    "defaultValue": "scipy.ndimage._measurements.minimum_position",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.morphological_gradient",
            "description": "Multidimensional morphological gradient.\n    \n    The morphological gradient is calculated as the difference between a\n    dilation and an erosion of the input with a given structuring element.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1a9120604d4ba2f186fef2c9dcabf1cb7d58d97b5c4e2bf387c679332d3d477e",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Array over which to compute the morphlogical gradient. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints     Shape of a flat and full structuring element used for the mathematical     morphology operations. Optional if `footprint` or `structure` is     provided. A larger `size` yields a more blurred gradient. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of non-infinite elements of a flat structuring element     used for the morphology operations. Larger footprints     give a more blurred morphological gradient. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the morphology operations.     `structure` may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the morphological gradient     may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default 0 ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.morphological_gradient",
                    "defaultValue": "scipy.ndimage._morphology.morphological_gradient",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.morphological_laplace",
            "description": "Multidimensional morphological laplace.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "866837f8b00d60f610e7229a4beb8cdd4a47da446a988637d41cb7c48577118a",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     See `structure`. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "bool or ndarray, optional     See `structure`. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "structure, optional     Either `size`, `footprint`, or the `structure` must be provided. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     An output array can optionally be provided. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect','constant','nearest','mirror', 'wrap'}, optional     The mode parameter determines how the array borders are handled.     For 'constant' mode, values beyond borders are set to be `cval`.     Default is 'reflect'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if mode is 'constant'.     Default is 0.0 ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "origin, optional     The origin parameter controls the placement of the filter. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.morphological_laplace",
                    "defaultValue": "scipy.ndimage._morphology.morphological_laplace",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.percentile_filter",
            "description": "Calculate a multidimensional percentile filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "94cddb98061856c690847e8a80e9af61eb4b1300671b70c9a8b3077f2da8e1c5",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "percentile",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar     The percentile parameter may be less than zero, i.e.,     percentile = -20 equals percentile = 80 ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or tuple, optional     See footprint, below. Ignored if footprint is given. ",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     Either `size` or `footprint` must be defined. `size` gives     the shape that is taken from the input array, at every element     position, to define the input to the filter function.     `footprint` is a boolean array that specifies (implicitly) a     shape, but also which of the elements within this shape will get     passed to the filter function. Thus ``size=(n,m)`` is equivalent     to ``footprint=np.ones((n,m))``.  We adjust `size` to the number     of dimensions of the input array, so that, if the input array is     shape (10,10,10), and `size` is 2, then the actual size used is     (2,2,2). When `footprint` is given, `size` is ignored. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.percentile_filter",
                    "defaultValue": "scipy.ndimage._filters.percentile_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.prewitt",
            "description": "Calculate a Prewitt filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "af038e7d375107458ef110c6389662f81a5a2962d53543077d22150b6efa71db",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0.  Examples -------- >>> from scipy import ndimage, misc >>> import matplotlib.pyplot as plt >>> fig = plt.figure() >>> plt.gray()  # show the filtered result in grayscale >>> ax1 = fig.add_subplot(121)  # left side >>> ax2 = fig.add_subplot(122)  # right side >>> ascent = misc.ascent() >>> result = ndimage.prewitt(ascent) >>> ax1.imshow(ascent) >>> ax2.imshow(result) >>> plt.show()",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.prewitt",
                    "defaultValue": "scipy.ndimage._filters.prewitt",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.rank_filter",
            "description": "Calculate a multidimensional rank filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cc20bf536d89f8b890e31d2d745567e51e2636922b7f9cac000024c1cb640c21",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "rank",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     The rank parameter may be less than zero, i.e., rank = -1     indicates the largest element. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "scalar or tuple, optional     See footprint, below. Ignored if footprint is given. ",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     Either `size` or `footprint` must be defined. `size` gives     the shape that is taken from the input array, at every element     position, to define the input to the filter function.     `footprint` is a boolean array that specifies (implicitly) a     shape, but also which of the elements within this shape will get     passed to the filter function. Thus ``size=(n,m)`` is equivalent     to ``footprint=np.ones((n,m))``.  We adjust `size` to the number     of dimensions of the input array, so that, if the input array is     shape (10,10,10), and `size` is 2, then the actual size used is     (2,2,2). When `footprint` is given, `size` is ignored. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.rank_filter",
                    "defaultValue": "scipy.ndimage._filters.rank_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.rotate",
            "description": "Rotate an array.\n    \n    The array is rotated in the plane defined by the two axes given by the\n    `axes` parameter using spline interpolation of the requested order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0550c21d43e2a997af858c729dcf6a65cb150ec3c50222284eac8405662f726d",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "angle",
                    "value": null,
                    "defaultValue": null,
                    "description": "float     The rotation angle in degrees. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axes",
                    "value": "(1, 0)",
                    "defaultValue": "(1, 0)",
                    "description": "tuple of 2 ints, optional     The two axes that define the plane of rotation. Default is the first     two axes. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "reshape",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     If `reshape` is true, the output shape is adapted so that the input     array is contained completely in the output. Default is True. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional     The order of the spline interpolation, default is 3.     The order has to be in the range 0-5. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'constant'. Behavior for each valid     value is as follows (see additional plots and details on     :ref:`boundary modes <ndimage-interpolation-modes>`):      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'grid-mirror'         This is a synonym for 'reflect'.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. No         interpolation is performed beyond the edges of the input.      'grid-constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. Interpolation         occurs for samples outside the input's extent  as well.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'grid-wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      'wrap' (`d b c d | a b c d | b c a b`)         The input is extended by wrapping around to the opposite edge, but in a         way such that the last point and initial point exactly overlap. In this         case it is not well defined which sample will be chosen at the point of         overlap. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Determines if the input array is prefiltered with `spline_filter`     before interpolation. The default is True, which will create a     temporary `float64` array of filtered values if `order > 1`. If     setting this to False, the output will be slightly blurred if     `order > 1`, unless the input is prefiltered, i.e. it is the result     of calling `spline_filter` on the original input. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.rotate",
                    "defaultValue": "scipy.ndimage._interpolation.rotate",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.sobel",
            "description": "Calculate a Sobel filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "45a745c26efb7f8dca861892e443622870e96eac64d490e1ad888ee8080747df",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0.  Examples -------- >>> from scipy import ndimage, misc >>> import matplotlib.pyplot as plt >>> fig = plt.figure() >>> plt.gray()  # show the filtered result in grayscale >>> ax1 = fig.add_subplot(121)  # left side >>> ax2 = fig.add_subplot(122)  # right side >>> ascent = misc.ascent() >>> result = ndimage.sobel(ascent) >>> ax1.imshow(ascent) >>> ax2.imshow(result) >>> plt.show()",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.sobel",
                    "defaultValue": "scipy.ndimage._filters.sobel",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.spline_filter",
            "description": "Multidimensional spline filter.\n    \n    For more details, see `spline_filter1d`.\n    \n    See Also\n    --------\n    spline_filter1d : Calculate a 1-D spline filter along the given axis.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D spline filters. The intermediate arrays are stored\n    in the same data type as the output. Therefore, for output types\n    with a limited precision, the results may be imprecise because\n    intermediate results may be stored with insufficient precision.\n    \n    For complex-valued `input`, this function processes the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    We can filter an image using multidimentional splines:\n    \n    >>> from scipy.ndimage import spline_filter\n    >>> import matplotlib.pyplot as plt\n    >>> orig_img = np.eye(20)  # create an image\n    >>> orig_img[10, :] = 1.0\n    >>> sp_filter = spline_filter(orig_img, order=3)\n    >>> f, ax = plt.subplots(1, 2, sharex=True)\n    >>> for ind, data in enumerate([[orig_img, \"original image\"],\n    ...                             [sp_filter, \"spline filter\"]]):\n    ...     ax[ind].imshow(data[0], cmap='gray_r')\n    ...     ax[ind].set_title(data[1])\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b9812025ae3a09985d94c6bbdbc647ee336860bc042b479a738e70f499d10f78",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "mirror",
                    "defaultValue": "mirror",
                    "description": "",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.spline_filter",
                    "defaultValue": "scipy.ndimage._interpolation.spline_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.spline_filter1d",
            "description": "Calculate a 1-D spline filter along the given axis.\n    \n    The lines of the array along the given axis are filtered by a\n    spline filter. The order of the spline must be >= 2 and <= 5.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "543f233f125555250db8ed189ec91363b40d16863cbfdfa0ad6d388cacdbb9c6",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional     The order of the spline, default is 3. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis along which the spline filter is applied. Default is the last     axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray or dtype, optional     The array in which to place the output, or the dtype of the returned     array. Default is ``numpy.float64``. ",
                    "type": "type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "mirror",
                    "defaultValue": "mirror",
                    "description": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'mirror'. Behavior for each valid     value is as follows (see additional plots and details on     :ref:`boundary modes <ndimage-interpolation-modes>`):      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'grid-mirror'         This is a synonym for 'reflect'.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. No         interpolation is performed beyond the edges of the input.      'grid-constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. Interpolation         occurs for samples outside the input's extent  as well.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'grid-wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      'wrap' (`d b c d | a b c d | b c a b`)         The input is extended by wrapping around to the opposite edge, but in a         way such that the last point and initial point exactly overlap. In this         case it is not well defined which sample will be chosen at the point of         overlap. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.spline_filter1d",
                    "defaultValue": "scipy.ndimage._interpolation.spline_filter1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.standard_deviation",
            "description": "Calculate the standard deviation of the values of an N-D image array,\n    optionally at specified sub-regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2358d6e906ce702b148742e85cef86d65873beb2cd30061ddc814ad1c1c46ac7",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     N-D image data to process. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Labels to identify sub-regions in `input`.     If not None, must be same shape as `input`. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     `labels` to include in output. If None (default), all values where     `labels` is non-zero are used. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.standard_deviation",
                    "defaultValue": "scipy.ndimage._measurements.standard_deviation",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.sum",
            "description": "Calculate the sum of the values of the array.\n    \n    Notes\n    -----\n    This is an alias for `ndimage.sum_labels` kept for backwards compatibility\n    reasons, for new code please prefer `sum_labels`.  See the `sum_labels`\n    docstring for more details.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c2db91db680b27f339ace5ec5e1068f0406875270b289affea1d937b6217956e",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "",
                    "type": "Object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.sum",
                    "defaultValue": "scipy.ndimage._measurements.sum",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.sum_labels",
            "description": "Calculate the sum of the values of the array.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56d14c70741888cd8b748958ad0adba20b27dbcf99a83c3e5dd5c0f6224f8af1",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Values of `input` inside the regions defined by `labels`     are summed together. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like of ints, optional     Assign labels to the values of the array. Has to have the same shape as     `input`. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     A single label number or a sequence of label numbers of     the objects to be measured. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.sum_labels",
                    "defaultValue": "scipy.ndimage._measurements.sum_labels",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.uniform_filter",
            "description": "Multidimensional uniform filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f616f19f221f881d767254053f42c650cf0a5df0032389425de91997dd2dab71",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int or sequence of ints, optional     The sizes of the uniform filter are given for each axis as a     sequence, or as a single number, in which case the size is     equal for all axes. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "str or sequence, optional     The `mode` parameter determines how the input array is extended     when the filter overlaps a border. By passing a sequence of modes     with length equal to the number of dimensions of the input array,     different modes can be specified along each axis. Default value is     'reflect'. The valid values and their behavior is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-constant'         This is a synonym for 'constant'.      'grid-mirror'         This is a synonym for 'reflect'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int or sequence, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right. By passing a sequence of origins with length equal to     the number of dimensions of the input array, different shifts can     be specified along each axis. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.uniform_filter",
                    "defaultValue": "scipy.ndimage._filters.uniform_filter",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.uniform_filter1d",
            "description": "Calculate a 1-D uniform filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    uniform filter of given size.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e0cd08e0b7267c8dd4e884c3e9773ba782484fe866de7beb0f7571cbb828f0b",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": null,
                    "defaultValue": null,
                    "description": "int     length of uniform filter ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "int, optional     The axis of `input` along which to calculate. Default is -1. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'reflect'. Behavior for each valid     value is as follows:      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      For consistency with the interpolation functions, the following mode     names can also be used:      'grid-mirror'         This is a synonym for 'reflect'.      'grid-constant'         This is a synonym for 'constant'.      'grid-wrap'         This is a synonym for 'wrap'. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "int, optional     Controls the placement of the filter on the input array's pixels.     A value of 0 (the default) centers the filter over the pixel, with     positive values shifting the filter to the left, and negative ones     to the right.  Examples -------- >>> from scipy.ndimage import uniform_filter1d >>> uniform_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3) array([4, 3, 4, 1, 4, 6, 6, 3])",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._filters.uniform_filter1d",
                    "defaultValue": "scipy.ndimage._filters.uniform_filter1d",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.variance",
            "description": "Calculate the variance of the values of an N-D image array, optionally at\n    specified sub-regions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "99ccc4283670c916a5ff94d95f62d7024931f24e76a5f8bf838ba27c43de47fd",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Nd-image data to process. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "labels",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like, optional     Labels defining sub-regions in `input`.     If not None, must be same shape as `input`. ",
                    "type": "array_like",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "index",
                    "value": null,
                    "defaultValue": null,
                    "description": "int or sequence of ints, optional     `labels` to include in output.  If None (default), all values where     `labels` is non-zero are used. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.variance",
                    "defaultValue": "scipy.ndimage._measurements.variance",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.watershed_ift",
            "description": "Apply watershed from markers using image foresting transform algorithm.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a1ea0f86b2fdb612a7f2fca1bc06464b841c4c7dadb1211de018db43f932f97",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "markers",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Markers are points within each watershed that form the beginning     of the process. Negative markers are considered background markers     which are processed after the other markers. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "structure element, optional     A structuring element defining the connectivity of the object can be     provided. If None, an element is generated with a squared     connectivity equal to one. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "ndarray, optional     An output array can optionally be provided. The same shape as input. ",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._measurements.watershed_ift",
                    "defaultValue": "scipy.ndimage._measurements.watershed_ift",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.white_tophat",
            "description": "Multidimensional white tophat filter.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0fa21347416af4221931c55991c759e0adb9c2b911b941d58f7231b1cc36bbe9",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     Input. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "size",
                    "value": "None",
                    "defaultValue": "None",
                    "description": "tuple of ints     Shape of a flat and full structuring element used for the filter.     Optional if `footprint` or `structure` is provided. ",
                    "type": "Json",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "footprint",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Positions of elements of a flat structuring element     used for the white tophat filter. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "structure",
                    "value": null,
                    "defaultValue": null,
                    "description": "array of ints, optional     Structuring element used for the filter. `structure`     may be a non-flat structuring element. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array, optional     An array used for storing the output of the filter may be provided. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "{'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional     The `mode` parameter determines how the array borders are     handled, where `cval` is the value when mode is equal to     'constant'. Default is 'reflect' ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'.     Default is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "scalar, optional     The `origin` parameter controls the placement of the filter.     Default is 0. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._morphology.white_tophat",
                    "defaultValue": "scipy.ndimage._morphology.white_tophat",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.zoom",
            "description": "Zoom an array.\n    \n    The array is zoomed using spline interpolation of the requested order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d54cbe00329364560543ed14bffb30d90615d7f86a511dafb7f8128e396a8539",
            "fields": [
                {
                    "name": "input",
                    "value": null,
                    "defaultValue": null,
                    "description": "array_like     The input array. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "zoom",
                    "value": null,
                    "defaultValue": null,
                    "description": "float or sequence     The zoom factor along the axes. If a float, `zoom` is the same for each     axis. If a sequence, `zoom` should contain one value for each axis. ",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output",
                    "value": null,
                    "defaultValue": null,
                    "description": "array or dtype, optional     The array in which to place the output, or the dtype of the     returned array. By default an array of the same dtype as input     will be created. ",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "int, optional     The order of the spline interpolation, default is 3.     The order has to be in the range 0-5. ",
                    "type": "Integer",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "{'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest',            'mirror', 'grid-wrap', 'wrap'}, optional     The `mode` parameter determines how the input array is extended     beyond its boundaries. Default is 'constant'. Behavior for each valid     value is as follows (see additional plots and details on     :ref:`boundary modes <ndimage-interpolation-modes>`):      'reflect' (`d c b a | a b c d | d c b a`)         The input is extended by reflecting about the edge of the last         pixel. This mode is also sometimes referred to as half-sample         symmetric.      'grid-mirror'         This is a synonym for 'reflect'.      'constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. No         interpolation is performed beyond the edges of the input.      'grid-constant' (`k k k k | a b c d | k k k k`)         The input is extended by filling all values beyond the edge with         the same constant value, defined by the `cval` parameter. Interpolation         occurs for samples outside the input's extent  as well.      'nearest' (`a a a a | a b c d | d d d d`)         The input is extended by replicating the last pixel.      'mirror' (`d c b | a b c d | c b a`)         The input is extended by reflecting about the center of the last         pixel. This mode is also sometimes referred to as whole-sample         symmetric.      'grid-wrap' (`a b c d | a b c d | a b c d`)         The input is extended by wrapping around to the opposite edge.      'wrap' (`d b c d | a b c d | b c a b`)         The input is extended by wrapping around to the opposite edge, but in a         way such that the last point and initial point exactly overlap. In this         case it is not well defined which sample will be chosen at the point of         overlap. ",
                    "type": "String",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "scalar, optional     Value to fill past edges of input if `mode` is 'constant'. Default     is 0.0. ",
                    "type": "Float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "bool, optional     Determines if the input array is prefiltered with `spline_filter`     before interpolation. The default is True, which will create a     temporary `float64` array of filtered values if `order > 1`. If     setting this to False, the output will be slightly blurred if     `order > 1`, unless the input is prefiltered, i.e. it is the result     of calling `spline_filter` on the original input. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "grid_mode",
                    "value": false,
                    "defaultValue": false,
                    "description": "bool, optional     If False, the distance from the pixel centers is zoomed. Otherwise, the     distance including the full pixel extent is used. For example, a 1d     signal of length 5 is considered to have length 4 when `grid_mode` is     False, but length 5 when `grid_mode` is True. See the following     visual illustration:      .. code-block:: text              | pixel 1 | pixel 2 | pixel 3 | pixel 4 | pixel 5 |                  |<-------------------------------------->|                                     vs.             |<----------------------------------------------->|      The starting point of the arrow in the diagram above corresponds to     coordinate location 0 in each mode. ",
                    "type": "Boolean",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy.ndimage._interpolation.zoom",
                    "defaultValue": "scipy.ndimage._interpolation.zoom",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.filters.normalize_axis_index",
            "description": "\nNormalizes an axis index, `axis`, such that is a valid positive index into\nthe shape of array with `ndim` dimensions. Raises an AxisError with an\nappropriate message if this is not possible.\n\nUsed internally by all axis-checking logic.\n\n.. versionadded:: 1.13.0\n\nParameters\n----------\naxis : int\n    The un-normalized index of the axis. Can be negative\nndim : int\n    The number of dimensions of the array that `axis` should be normalized\n    against\nmsg_prefix : str\n    A prefix to put before the message, typically the name of the argument\n\nReturns\n-------\nnormalized_axis : int\n    The normalized axis index, such that `0 <= normalized_axis < ndim`\n\nRaises\n------\nAxisError\n    If the axis index is invalid, when `-ndim <= axis < ndim` is false.\n\nExamples\n--------\n>>> normalize_axis_index(0, ndim=3)\n0\n>>> normalize_axis_index(1, ndim=3)\n1\n>>> normalize_axis_index(-1, ndim=3)\n2\n\n>>> normalize_axis_index(3, ndim=3)\nTraceback (most recent call last):\n...\nAxisError: axis 3 is out of bounds for array of dimension 3\n>>> normalize_axis_index(-4, ndim=3, msg_prefix='axes_arg')\nTraceback (most recent call last):\n...\nAxisError: axes_arg: axis -4 is out of bounds for array of dimension 3",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d268822768b695b588a35e851ece2102dbcf425de849fd1b9b7fb631ee515bb",
            "fields": [
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "numpy.core._multiarray_umath.normalize_axis_index",
                    "defaultValue": "numpy.core._multiarray_umath.normalize_axis_index",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "category": "PythonApp",
            "key": -1,
            "name": "scipy.ndimage.interpolation.decorate",
            "description": "No description found",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5fd1defe7eae5d5d4df634c28d8ee537ecff0395364c1721aa04a43f2650909b",
            "fields": [
                {
                    "name": "f",
                    "value": null,
                    "defaultValue": null,
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": null,
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "dummy",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": "false"
                },
                {
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": "dummy",
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": 1
                },
                {
                    "name": "func_name",
                    "value": "scipy._lib.doccer.filldoc.<locals>.decorate",
                    "defaultValue": "scipy._lib.doccer.filldoc.<locals>.decorate",
                    "description": "Complete import path of function",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}