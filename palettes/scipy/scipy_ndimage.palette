{
    "modelData": {
        "filePath": "scipy_ndimage.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "=========================================================\nMultidimensional image processing (:mod:`scipy.ndimage`)\n=========================================================\n\n.. currentmodule:: scipy.ndimage\n\nThis package contains various functions for multidimensional image\nprocessing.\n\n\nFilters\n=======\n\n.. autosummary::\n   :toctree: generated/\n\n   convolve - Multidimensional convolution\n   convolve1d - 1-D convolution along the given axis\n   correlate - Multidimensional correlation\n   correlate1d - 1-D correlation along the given axis\n   gaussian_filter\n   gaussian_filter1d\n   gaussian_gradient_magnitude\n   gaussian_laplace\n   generic_filter - Multidimensional filter using a given function\n   generic_filter1d - 1-D generic filter along the given axis\n   generic_gradient_magnitude\n   generic_laplace\n   laplace - N-D Laplace filter based on approximate second derivatives\n   maximum_filter\n   maximum_filter1d\n   median_filter - Calculates a multidimensional median filter\n   minimum_filter\n   minimum_filter1d\n   percentile_filter - Calculates a multidimensional percentile filter\n   prewitt\n   rank_filter - Calculates a multidimensional rank filter\n   sobel\n   uniform_filter - Multidimensional uniform filter\n   uniform_filter1d - 1-D uniform filter along the given axis\n   vectorized_filter\n\nFourier filters\n===============\n\n.. autosummary::\n   :toctree: generated/\n\n   fourier_ellipsoid\n   fourier_gaussian\n   fourier_shift\n   fourier_uniform\n\nInterpolation\n=============\n\n.. autosummary::\n   :toctree: generated/\n\n   affine_transform - Apply an affine transformation\n   geometric_transform - Apply an arbitrary geometric transform\n   map_coordinates - Map input array to new coordinates by interpolation\n   rotate - Rotate an array\n   shift - Shift an array\n   spline_filter\n   spline_filter1d\n   zoom - Zoom an array\n\nMeasurements\n============\n\n.. autosummary::\n   :toctree: generated/\n\n   center_of_mass - The center of mass of the values of an array at labels\n   extrema - Min's and max's of an array at labels, with their positions\n   find_objects - Find objects in a labeled array\n   histogram - Histogram of the values of an array, optionally at labels\n   label - Label features in an array\n   labeled_comprehension\n   maximum\n   maximum_position\n   mean - Mean of the values of an array at labels\n   median\n   minimum\n   minimum_position\n   standard_deviation - Standard deviation of an N-D image array\n   sum_labels - Sum of the values of the array\n   value_indices - Find indices of each distinct value in given array\n   variance - Variance of the values of an N-D image array\n   watershed_ift\n\nMorphology\n==========\n\n.. autosummary::\n   :toctree: generated/\n\n   binary_closing\n   binary_dilation\n   binary_erosion\n   binary_fill_holes\n   binary_hit_or_miss\n   binary_opening\n   binary_propagation\n   black_tophat\n   distance_transform_bf\n   distance_transform_cdt\n   distance_transform_edt\n   generate_binary_structure\n   grey_closing\n   grey_dilation\n   grey_erosion\n   grey_opening\n   iterate_structure\n   morphological_gradient\n   morphological_laplace\n   white_tophat",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "30b1f1bb3e0fcda9f77671217fef83cfabe4726f0e98cfda4da71d8e5d74e711",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100437.398917,
        "numLGNodes": 148
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mp57nnq5",
            "name": "ndimage.affine_transform",
            "description": "Apply an affine transformation.\n    \n    Given an output image pixel index vector ``o``, the pixel value\n    is determined from the input image at position\n    ``np.dot(matrix, o) + offset``.\n    \n    This does 'pull' (or 'backward') resampling, transforming the output space\n    to the input to locate data. Affine transformations are often described in\n    the 'push' (or 'forward') direction, transforming input to output. If you\n    have a matrix for the 'push' transformation, use its inverse\n    (:func:`numpy.linalg.inv`) in this function.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    matrix : ndarray\n        The inverse coordinate transformation matrix, mapping output\n        coordinates to input coordinates. If ``ndim`` is the number of\n        dimensions of ``input``, the given matrix must have one of the\n        following shapes:\n    \n            - ``(ndim, ndim)``: the linear transformation matrix for each\n              output coordinate.\n            - ``(ndim,)``: assume that the 2-D transformation matrix is\n              diagonal, with the diagonal specified by the given value. A more\n              efficient algorithm is then used that exploits the separability\n              of the problem.\n            - ``(ndim + 1, ndim + 1)``: assume that the transformation is\n              specified using homogeneous coordinates [1]_. In this case, any\n              value passed to ``offset`` is ignored.\n            - ``(ndim, ndim + 1)``: as above, but the bottom row of a\n              homogeneous transformation matrix is always ``[0, 0, ..., 1]``,\n              and may be omitted.\n    \n    offset : float or sequence, optional\n        The offset into the array where the transform is applied. If a float,\n        `offset` is the same for each axis. If a sequence, `offset` should\n        contain one value for each axis.\n    output_shape : tuple of ints, optional\n        Shape tuple.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    affine_transform : ndarray\n        The transformed input.\n    \n    Examples\n    --------\n    Use `affine_transform` to stretch an image::\n    \n    >>> from scipy.ndimage import affine_transform\n    >>> from scipy.datasets import face\n    >>> from matplotlib import pyplot as plt\n    >>> import numpy as np\n    >>> im = face(gray=True)\n    >>> matrix = (0.5, 2)\n    >>> im2 = affine_transform(im, matrix)\n    >>> plt.imshow(im2)\n    >>> plt.show()\n    \n    Rotate an image by 90 degrees and project it onto an expanded canvas::\n    \n    >>> matrix = ((0, 1), (1, 0))\n    >>> im3 = affine_transform(im, matrix, output_shape=(1024, 1024))\n    >>> plt.imshow(im3)\n    >>> plt.show()\n    \n    Offset the rotation so that the image is centred::\n    \n    >>> output_shape = (1200, 1200)\n    >>> offset = (np.array(im.shape) - output_shape) / 2\n    >>> im4 = affine_transform(im, matrix, offset=offset, output_shape=output_shape)\n    >>> plt.imshow(im4)\n    >>> plt.show()\n    \n    Notes\n    -----\n    The given matrix and offset are used to find for each point in the\n    output the corresponding coordinates in the input by an affine\n    transformation. The value of the input at those coordinates is\n    determined by spline interpolation of the requested order. Points\n    outside the boundaries of the input are filled according to the given\n    mode.\n    \n    .. versionchanged:: 0.18.0\n        Previously, the exact interpretation of the affine transformation\n        depended on whether the matrix was supplied as a 1-D or a\n        2-D array. If a 1-D array was supplied\n        to the matrix parameter, the output pixel value at index ``o``\n        was determined from the input image at position\n        ``matrix * (o + offset)``.\n    \n    For complex-valued `input`, this function transforms the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Homogeneous_coordinates",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0cd4718683049198001bbddec6e305db7131e62fcfb08e242e3fbedeb660ca3c",
            "fields": [
                {
                    "id": "02f3krw2",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8dlgfq4",
                    "encoding": "",
                    "name": "matrix",
                    "value": "",
                    "defaultValue": "",
                    "description": "The inverse coordinate transformation matrix, mapping output\ncoordinates to input coordinates. If ``ndim`` is the number of\ndimensions of ``input``, the given matrix must have one of the\nfollowing shapes:\n\n    - ``(ndim, ndim)``: the linear transformation matrix for each\n      output coordinate.\n    - ``(ndim,)``: assume that the 2-D transformation matrix is\n      diagonal, with the diagonal specified by the given value. A more\n      efficient algorithm is then used that exploits the separability\n      of the problem.\n    - ``(ndim + 1, ndim + 1)``: assume that the transformation is\n      specified using homogeneous coordinates [1]_. In this case, any\n      value passed to ``offset`` is ignored.\n    - ``(ndim, ndim + 1)``: as above, but the bottom row of a\n      homogeneous transformation matrix is always ``[0, 0, ..., 1]``,\n      and may be omitted.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_rhmgoi",
                    "encoding": "",
                    "name": "offset",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The offset into the array where the transform is applied. If a float,\n`offset` is the same for each axis. If a sequence, `offset` should\ncontain one value for each axis.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jckaht4v",
                    "encoding": "",
                    "name": "output_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape tuple.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "324ksl72",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hbywfy2n",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b0exjawd",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ywbylp6",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovws972p",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ofwuogho",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.affine_transform",
                    "defaultValue": "scipy.ndimage.affine_transform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7snbiy6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8an9nqcl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "imt7o177",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gas5yrte",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhuwacpi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh_sggtf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gt7ejzv9",
            "name": "ndimage.binary_closing",
            "description": "Multidimensional binary closing with the given structuring element.\n    \n    The *closing* of an input image by a structuring element is the\n    *erosion* of the *dilation* of the image by the structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary array_like to be closed. Non-zero (True) elements form\n        the subset to be closed.\n    structure : array_like, optional\n        Structuring element used for the closing. Non-zero elements are\n        considered True. If no structuring element is provided an element\n        is generated with a square connectivity equal to one (i.e., only\n        nearest neighbors are connected to the center, diagonally-connected\n        elements are not considered neighbors).\n    iterations : int, optional\n        The dilation step of the closing, then the erosion step are each\n        repeated `iterations` times (one, by default). If iterations is\n        less than 1, each operations is repeated until the result does\n        not change anymore. Only an integer of iterations is accepted.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    \n        .. versionadded:: 1.1.0\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    \n        .. versionadded:: 1.1.0\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated in the\n        current iteration; if true al pixels are considered as candidates for\n        update, regardless of what happened in the previous iteration.\n        False by default.\n    \n        .. versionadded:: 1.1.0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_closing : ndarray of bools\n        Closing of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_closing, binary_opening, binary_dilation, binary_erosion,\n    generate_binary_structure\n    \n    Notes\n    -----\n    *Closing* [1]_ is a mathematical morphology operation [2]_ that\n    consists in the succession of a dilation and an erosion of the\n    input with the same structuring element. Closing therefore fills\n    holes smaller than the structuring element.\n    \n    Together with *opening* (`binary_opening`), closing can be used for\n    noise removal.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Closing_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5,5), dtype=int)\n    >>> a[1:-1, 1:-1] = 1; a[2,2] = 0\n    >>> a\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Closing removes small holes\n    >>> ndimage.binary_closing(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Closing is the erosion of the dilation of the input\n    >>> ndimage.binary_dilation(a).astype(int)\n    array([[0, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1],\n           [1, 1, 1, 1, 1],\n           [1, 1, 1, 1, 1],\n           [0, 1, 1, 1, 0]])\n    >>> ndimage.binary_erosion(ndimage.binary_dilation(a)).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    \n    \n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1:6, 2:5] = 1; a[1:3,3] = 0\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 1, 0, 0],\n           [0, 0, 1, 0, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> # In addition to removing holes, closing can also\n    >>> # coarsen boundaries with fine hollows.\n    >>> ndimage.binary_closing(a).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_closing(a, structure=np.ones((2,2))).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e6451381a52606ff326ee6a06c1815c07f3ecc21c1991493b7756927f615fb36",
            "fields": [
                {
                    "id": "nj_lu4bi",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary array_like to be closed. Non-zero (True) elements form\nthe subset to be closed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pzv_ljm",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the closing. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one (i.e., only\nnearest neighbors are connected to the center, diagonally-connected\nelements are not considered neighbors).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "av_l1itc",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The dilation step of the closing, then the erosion step are each\nrepeated `iterations` times (one, by default). If iterations is\nless than 1, each operations is repeated until the result does\nnot change anymore. Only an integer of iterations is accepted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k9xxc2e0",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uien24l7",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tt8x7ijo",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.\n\n.. versionadded:: 1.1.0",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kltad_dx",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.\n\n.. versionadded:: 1.1.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ma1ylhyw",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated in the\ncurrent iteration; if true al pixels are considered as candidates for\nupdate, regardless of what happened in the previous iteration.\nFalse by default.\n\n.. versionadded:: 1.1.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fdvxbjxm",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zwauw7o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_closing",
                    "defaultValue": "scipy.ndimage.binary_closing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oj0oomiy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33uku6aj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ocvg07c7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ecpspvn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwi_x_bz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0y8imwmo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6j_j8sp6",
            "name": "ndimage.binary_dilation",
            "description": "Multidimensional binary dilation with the given structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary array_like to be dilated. Non-zero (True) elements form\n        the subset to be dilated.\n    structure : array_like, optional\n        Structuring element used for the dilation. Non-zero elements are\n        considered True. If no structuring element is provided an element\n        is generated with a square connectivity equal to one.\n    iterations : int, optional\n        The dilation is repeated `iterations` times (one, by default).\n        If iterations is less than 1, the dilation is repeated until the\n        result does not change anymore. Only an integer of iterations is\n        accepted.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated (dilated)\n        in the current iteration; if True all pixels are considered as\n        candidates for dilation, regardless of what happened in the previous\n        iteration. False by default.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_dilation : ndarray of bools\n        Dilation of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_dilation, binary_erosion, binary_closing, binary_opening,\n    generate_binary_structure\n    \n    Notes\n    -----\n    Dilation [1]_ is a mathematical morphology operation [2]_ that uses a\n    structuring element for expanding the shapes in an image. The binary\n    dilation of an image by a structuring element is the locus of the points\n    covered by the structuring element, when its center lies within the\n    non-zero points of the image.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Dilation_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5, 5))\n    >>> a[2, 2] = 1\n    >>> a\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(a)\n    array([[False, False, False, False, False],\n           [False, False,  True, False, False],\n           [False,  True,  True,  True, False],\n           [False, False,  True, False, False],\n           [False, False, False, False, False]], dtype=bool)\n    >>> ndimage.binary_dilation(a).astype(a.dtype)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> # 3x3 structuring element with connectivity 1, used by default\n    >>> struct1 = ndimage.generate_binary_structure(2, 1)\n    >>> struct1\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> # 3x3 structuring element with connectivity 2\n    >>> struct2 = ndimage.generate_binary_structure(2, 2)\n    >>> struct2\n    array([[ True,  True,  True],\n           [ True,  True,  True],\n           [ True,  True,  True]], dtype=bool)\n    >>> ndimage.binary_dilation(a, structure=struct1).astype(a.dtype)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(a, structure=struct2).astype(a.dtype)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(a, structure=struct1,\\\n    ... iterations=2).astype(a.dtype)\n    array([[ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 1.,  1.,  1.,  1.,  1.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0af01bc0450ed1f89e51f0613d20942c22bcf16a98ce35dcddfc08ff715604a",
            "fields": [
                {
                    "id": "bhiu2d6z",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary array_like to be dilated. Non-zero (True) elements form\nthe subset to be dilated.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_sl9xjt0",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the dilation. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "krvi1qzk",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The dilation is repeated `iterations` times (one, by default).\nIf iterations is less than 1, the dilation is repeated until the\nresult does not change anymore. Only an integer of iterations is\naccepted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3g33cbt",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97n7b7dc",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "moxhb4xy",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozggolbr",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d9ij0934",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (dilated)\nin the current iteration; if True all pixels are considered as\ncandidates for dilation, regardless of what happened in the previous\niteration. False by default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvtma0l_",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "plbrjuqm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_dilation",
                    "defaultValue": "scipy.ndimage.binary_dilation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zzh7iv9k",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7zyjr7b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mi55cxoz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5nj3dpq9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "is8svk3b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dz0ecr3m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "myrmk494",
            "name": "ndimage.binary_erosion",
            "description": "Multidimensional binary erosion with a given structuring element.\n    \n    Binary erosion is a mathematical morphology operation used for image\n    processing.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary image to be eroded. Non-zero (True) elements form\n        the subset to be eroded.\n    structure : array_like, optional\n        Structuring element used for the erosion. Non-zero elements are\n        considered True. If no structuring element is provided, an element\n        is generated with a square connectivity equal to one.\n    iterations : int, optional\n        The erosion is repeated `iterations` times (one, by default).\n        If iterations is less than 1, the erosion is repeated until the\n        result does not change anymore.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated (eroded) in\n        the current iteration; if True all pixels are considered as candidates\n        for erosion, regardless of what happened in the previous iteration.\n        False by default.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_erosion : ndarray of bools\n        Erosion of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_erosion, binary_dilation, binary_closing, binary_opening,\n    generate_binary_structure\n    \n    Notes\n    -----\n    Erosion [1]_ is a mathematical morphology operation [2]_ that uses a\n    structuring element for shrinking the shapes in an image. The binary\n    erosion of an image by a structuring element is the locus of the points\n    where a superimposition of the structuring element centered on the point\n    is entirely contained in the set of non-zero elements of the image.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Erosion_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1:6, 2:5] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_erosion(a).astype(a.dtype)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> #Erosion removes objects smaller than the structure\n    >>> ndimage.binary_erosion(a, structure=np.ones((5,5))).astype(a.dtype)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2632f37e035748793c53193f97c3c1d5ebc141c140f2ca53b00ad0e2873b3d60",
            "fields": [
                {
                    "id": "kb8j2b4i",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary image to be eroded. Non-zero (True) elements form\nthe subset to be eroded.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hd69f1yd",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the erosion. Non-zero elements are\nconsidered True. If no structuring element is provided, an element\nis generated with a square connectivity equal to one.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xwwhb68",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The erosion is repeated `iterations` times (one, by default).\nIf iterations is less than 1, the erosion is repeated until the\nresult does not change anymore.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6tkmgai",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uig7808e",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ebwya5u_",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lezryoqy",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_a616xq",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (eroded) in\nthe current iteration; if True all pixels are considered as candidates\nfor erosion, regardless of what happened in the previous iteration.\nFalse by default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_jng32p",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ycwv5orr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_erosion",
                    "defaultValue": "scipy.ndimage.binary_erosion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fv7_866k",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrj3m6lj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v1qzccpx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1nmxlh7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7nt943g0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1geppii",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3gy_so62",
            "name": "ndimage.binary_fill_holes",
            "description": "Fill the holes in binary objects.\n    \n    \n    Parameters\n    ----------\n    input : array_like\n        N-D binary array with holes to be filled\n    structure : array_like, optional\n        Structuring element used in the computation; large-size elements\n        make computations faster but may miss holes separated from the\n        background by thin regions. The default element (with a square\n        connectivity equal to one) yields the intuitive result where all\n        holes in the input have been filled.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin : int, tuple of ints, optional\n        Position of the structuring element.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    out : ndarray\n        Transformation of the initial image `input` where holes have been\n        filled.\n    \n    See Also\n    --------\n    binary_dilation, binary_propagation, label\n    \n    Notes\n    -----\n    The algorithm used in this function consists in invading the complementary\n    of the shapes in `input` from the outer boundary of the image,\n    using binary dilations. Holes are not connected to the boundary and are\n    therefore not invaded. The result is the complementary subset of the\n    invaded region.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5, 5), dtype=int)\n    >>> a[1:4, 1:4] = 1\n    >>> a[2,2] = 0\n    >>> a\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> ndimage.binary_fill_holes(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Too big structuring element\n    >>> ndimage.binary_fill_holes(a, structure=np.ones((5,5))).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "356ef9704288efd57800a32dc162588598ff4dd47de1bb590009a166b73a4d41",
            "fields": [
                {
                    "id": "jod9aybe",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D binary array with holes to be filled",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zu_bnkj0",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used in the computation; large-size elements\nmake computations faster but may miss holes separated from the\nbackground by thin regions. The default element (with a square\nconnectivity equal to one) yields the intuitive result where all\nholes in the input have been filled.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_8yi08j",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zboicv47",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Position of the structuring element.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xcm_go81",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6tlehs6h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_fill_holes",
                    "defaultValue": "scipy.ndimage.binary_fill_holes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "skorgckb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pcw0u66b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cbpq40oo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "me00scu0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8rvlt72a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z72xy2j0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "han9kd8f",
            "name": "ndimage.binary_hit_or_miss",
            "description": "Multidimensional binary hit-or-miss transform.\n    \n    The hit-or-miss transform finds the locations of a given pattern\n    inside the input image.\n    \n    Parameters\n    ----------\n    input : array_like (cast to booleans)\n        Binary image where a pattern is to be detected.\n    structure1 : array_like (cast to booleans), optional\n        Part of the structuring element to be fitted to the foreground\n        (non-zero elements) of `input`. If no value is provided, a\n        structure of square connectivity 1 is chosen.\n    structure2 : array_like (cast to booleans), optional\n        Second part of the structuring element that has to miss completely\n        the foreground. If no value is provided, the complementary of\n        `structure1` is taken.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin1 : int or tuple of ints, optional\n        Placement of the first part of the structuring element `structure1`,\n        by default 0 for a centered structure.\n    origin2 : int or tuple of ints, optional\n        Placement of the second part of the structuring element `structure2`,\n        by default 0 for a centered structure. If a value is provided for\n        `origin1` and not for `origin2`, then `origin2` is set to `origin1`.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If `origin1` or `origin2` tuples are provided, their\n        length must match the number of axes.\n    \n    Returns\n    -------\n    binary_hit_or_miss : ndarray\n        Hit-or-miss transform of `input` with the given structuring\n        element (`structure1`, `structure2`).\n    \n    See Also\n    --------\n    binary_erosion\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Hit-or-miss_transform\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1, 1] = 1; a[2:4, 2:4] = 1; a[4:6, 4:6] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0, 0],\n           [0, 0, 0, 0, 1, 1, 0],\n           [0, 0, 0, 0, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> structure1 = np.array([[1, 0, 0], [0, 1, 1], [0, 1, 1]])\n    >>> structure1\n    array([[1, 0, 0],\n           [0, 1, 1],\n           [0, 1, 1]])\n    >>> # Find the matches of structure1 in the array a\n    >>> ndimage.binary_hit_or_miss(a, structure1=structure1).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> # Change the origin of the filter\n    >>> # origin1=1 is equivalent to origin1=(1,1) here\n    >>> ndimage.binary_hit_or_miss(a, structure1=structure1,\\\n    ... origin1=1).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "31d5f39a848dc7e828b6baaf95052b3052eedd75d89faf57e07a8f7f74a02a1a",
            "fields": [
                {
                    "id": "o51flcgr",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary image where a pattern is to be detected.",
                    "type": "arraylike (cast to booleans)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_13noz0",
                    "encoding": "",
                    "name": "structure1",
                    "value": "",
                    "defaultValue": "",
                    "description": "Part of the structuring element to be fitted to the foreground\n(non-zero elements) of `input`. If no value is provided, a\nstructure of square connectivity 1 is chosen.",
                    "type": "arraylike (cast to booleans)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qtzd_1o",
                    "encoding": "",
                    "name": "structure2",
                    "value": "",
                    "defaultValue": "",
                    "description": "Second part of the structuring element that has to miss completely\nthe foreground. If no value is provided, the complementary of\n`structure1` is taken.",
                    "type": "arraylike (cast to booleans)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_1989sz",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vzjnfx_q",
                    "encoding": "",
                    "name": "origin1",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the first part of the structuring element `structure1`,\nby default 0 for a centered structure.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqc9fotu",
                    "encoding": "",
                    "name": "origin2",
                    "value": "",
                    "defaultValue": "",
                    "description": "Placement of the second part of the structuring element `structure2`,\nby default 0 for a centered structure. If a value is provided for\n`origin1` and not for `origin2`, then `origin2` is set to `origin1`.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6ktysf8",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If `origin1` or `origin2` tuples are provided, their\nlength must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5cnps6jx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_hit_or_miss",
                    "defaultValue": "scipy.ndimage.binary_hit_or_miss",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_zzjf8rw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffgpg5iz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jm1ccgdm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7nch4uv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8i4neunf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2eph0yci",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2le9v4b1",
            "name": "ndimage.binary_opening",
            "description": "Multidimensional binary opening with the given structuring element.\n    \n    The *opening* of an input image by a structuring element is the\n    *dilation* of the *erosion* of the image by the structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary array_like to be opened. Non-zero (True) elements form\n        the subset to be opened.\n    structure : array_like, optional\n        Structuring element used for the opening. Non-zero elements are\n        considered True. If no structuring element is provided an element\n        is generated with a square connectivity equal to one (i.e., only\n        nearest neighbors are connected to the center, diagonally-connected\n        elements are not considered neighbors).\n    iterations : int, optional\n        The erosion step of the opening, then the dilation step are each\n        repeated `iterations` times (one, by default). If `iterations` is\n        less than 1, each operation is repeated until the result does\n        not change anymore. Only an integer of iterations is accepted.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    \n        .. versionadded:: 1.1.0\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    \n        .. versionadded:: 1.1.0\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated in the\n        current iteration; if true all pixels are considered as candidates for\n        update, regardless of what happened in the previous iteration.\n        False by default.\n    \n        .. versionadded:: 1.1.0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_opening : ndarray of bools\n        Opening of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_opening, binary_closing, binary_erosion, binary_dilation,\n    generate_binary_structure\n    \n    Notes\n    -----\n    *Opening* [1]_ is a mathematical morphology operation [2]_ that\n    consists in the succession of an erosion and a dilation of the\n    input with the same structuring element. Opening, therefore, removes\n    objects smaller than the structuring element.\n    \n    Together with *closing* (`binary_closing`), opening can be used for\n    noise removal.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Opening_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5,5), dtype=int)\n    >>> a[1:4, 1:4] = 1; a[4, 4] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 1]])\n    >>> # Opening removes small objects\n    >>> ndimage.binary_opening(a, structure=np.ones((3,3))).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Opening can also smooth corners\n    >>> ndimage.binary_opening(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Opening is the dilation of the erosion of the input\n    >>> ndimage.binary_erosion(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0]])\n    >>> ndimage.binary_dilation(ndimage.binary_erosion(a)).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "24e7c9b899f43fa71db5e02c6476511cb233fe1d3a63d1a734bf0d14c1c6c1e4",
            "fields": [
                {
                    "id": "kyud18_9",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary array_like to be opened. Non-zero (True) elements form\nthe subset to be opened.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n9ph_g90",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the opening. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one (i.e., only\nnearest neighbors are connected to the center, diagonally-connected\nelements are not considered neighbors).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "55_yi88t",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The erosion step of the opening, then the dilation step are each\nrepeated `iterations` times (one, by default). If `iterations` is\nless than 1, each operation is repeated until the result does\nnot change anymore. Only an integer of iterations is accepted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "miw_za2c",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gihbej3o",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_dbtisom",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.\n\n.. versionadded:: 1.1.0",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pjuw0fj3",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.\n\n.. versionadded:: 1.1.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t046yqg1",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated in the\ncurrent iteration; if true all pixels are considered as candidates for\nupdate, regardless of what happened in the previous iteration.\nFalse by default.\n\n.. versionadded:: 1.1.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epi8qc_o",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6mq9ncq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_opening",
                    "defaultValue": "scipy.ndimage.binary_opening",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2maay5n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0bbok32",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "x7ucftej",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wl5pcd1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfx1968a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "285pwi_0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y260tmiy",
            "name": "ndimage.binary_propagation",
            "description": "Multidimensional binary propagation with the given structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary image to be propagated inside `mask`.\n    structure : array_like, optional\n        Structuring element used in the successive dilations. The output\n        may depend on the structuring element, especially if `mask` has\n        several connex components. If no structuring element is\n        provided, an element is generated with a squared connectivity equal\n        to one.\n    mask : array_like, optional\n        Binary mask defining the region into which `input` is allowed to\n        propagate.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_propagation : ndarray\n        Binary propagation of `input` inside `mask`.\n    \n    Notes\n    -----\n    This function is functionally equivalent to calling binary_dilation\n    with the number of iterations less than one: iterative dilation until\n    the result does not change anymore.\n    \n    The succession of an erosion and propagation inside the original image\n    can be used instead of an *opening* for deleting small objects while\n    keeping the contours of larger objects untouched.\n    \n    References\n    ----------\n    .. [1] http://cmm.ensmp.fr/~serra/cours/pdf/en/ch6en.pdf, slide 15.\n    .. [2] I.T. Young, J.J. Gerbrands, and L.J. van Vliet, \"Fundamentals of\n        image processing\", 1998\n        ftp://qiftp.tudelft.nl/DIPimage/docs/FIP2.3.pdf\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> input = np.zeros((8, 8), dtype=int)\n    >>> input[2, 2] = 1\n    >>> mask = np.zeros((8, 8), dtype=int)\n    >>> mask[1:4, 1:4] = mask[4, 4]  = mask[6:8, 6:8] = 1\n    >>> input\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0]])\n    >>> mask\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 1, 1],\n           [0, 0, 0, 0, 0, 0, 1, 1]])\n    >>> ndimage.binary_propagation(input, mask=mask).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_propagation(input, mask=mask,\\\n    ... structure=np.ones((3,3))).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0]])\n    \n    >>> # Comparison between opening and erosion+propagation\n    >>> a = np.zeros((6,6), dtype=int)\n    >>> a[2:5, 2:5] = 1; a[0, 0] = 1; a[5, 5] = 1\n    >>> a\n    array([[1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 1]])\n    >>> ndimage.binary_opening(a).astype(int)\n    array([[0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> b = ndimage.binary_erosion(a)\n    >>> b.astype(int)\n    array([[0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_propagation(b, mask=a).astype(int)\n    array([[0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6f55cab786384bb470c32108cded1a1e1c518ef5365244e184eb5dbe505a37b5",
            "fields": [
                {
                    "id": "091cdmfa",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary image to be propagated inside `mask`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dt1zv_p4",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used in the successive dilations. The output\nmay depend on the structuring element, especially if `mask` has\nseveral connex components. If no structuring element is\nprovided, an element is generated with a squared connectivity equal\nto one.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ji0tg_xn",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary mask defining the region into which `input` is allowed to\npropagate.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4zz_6to0",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pnzmtv9m",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2nk_3w9",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1rvttbas",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x__0q8yg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.binary_propagation",
                    "defaultValue": "scipy.ndimage.binary_propagation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndvvlytd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7fcq1f6s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0hlc489g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45ogc56d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o4t4t_yb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gnlsog0y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_hqx52hb",
            "name": "ndimage.black_tophat",
            "description": "Multidimensional black tophat filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    size : tuple of ints, optional\n        Shape of a flat and full structuring element used for the filter.\n        Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the black tophat filter.\n    structure : array of ints, optional\n        Structuring element used for the filter. `structure` may be a non-flat\n        structuring element. The `structure` array applies offsets to the\n        pixels in a neighborhood (the offset is additive during dilation and\n        subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the filter may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    black_tophat : ndarray\n        Result of the filter of `input` with `structure`.\n    \n    See Also\n    --------\n    white_tophat, grey_opening, grey_closing\n    \n    Examples\n    --------\n    Change dark peak to bright peak and subtract background.\n    \n    >>> from scipy.ndimage import generate_binary_structure, black_tophat\n    >>> import numpy as np\n    >>> square = generate_binary_structure(rank=2, connectivity=3)\n    >>> dark_on_gray = np.array([[7, 6, 6, 6, 7],\n    ...                          [6, 5, 4, 5, 6],\n    ...                          [6, 4, 0, 4, 6],\n    ...                          [6, 5, 4, 5, 6],\n    ...                          [7, 6, 6, 6, 7]])\n    >>> black_tophat(input=dark_on_gray, structure=square)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 5, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "084369d8f9236303ceb0f510e07ce97ce26c2eb5b896898d899de2f8e2dde193",
            "fields": [
                {
                    "id": "q80rc3wf",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_h1i0tvg",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the filter.\nOptional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ds8h0y19",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the black tophat filter.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bblh6qh4",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the filter. `structure` may be a non-flat\nstructuring element. The `structure` array applies offsets to the\npixels in a neighborhood (the offset is additive during dilation and\nsubtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1lx6_no",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the filter may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0zisub_0",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jursbkd",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rn7j50e8",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ooyckxe1",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8g41rb8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.black_tophat",
                    "defaultValue": "scipy.ndimage.black_tophat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fhh0_wt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1hx_qjbx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "swkfms58",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgo4_v4o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ms_kuuec",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8gr95gw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f35ui907",
            "name": "ndimage.center_of_mass",
            "description": "Calculate the center of mass of the values of an array at labels.\n    \n    Parameters\n    ----------\n    input : ndarray\n        Data from which to calculate center-of-mass. The masses can either\n        be positive or negative.\n    labels : ndarray, optional\n        Labels for objects in `input`, as generated by `ndimage.label`.\n        Only used with `index`. Dimensions must be the same as `input`.\n    index : int or sequence of ints, optional\n        Labels for which to calculate centers-of-mass. If not specified,\n        the combined center of mass of all labels greater than zero\n        will be calculated. Only used with `labels`.\n    \n    Returns\n    -------\n    center_of_mass : tuple, or list of tuples\n        Coordinates of centers-of-mass.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array(([0,0,0,0],\n    ...               [0,1,1,0],\n    ...               [0,1,1,0],\n    ...               [0,1,1,0]))\n    >>> from scipy import ndimage\n    >>> ndimage.center_of_mass(a)\n    (2.0, 1.5)\n    \n    Calculation of multiple objects in an image\n    \n    >>> b = np.array(([0,1,1,0],\n    ...               [0,1,0,0],\n    ...               [0,0,0,0],\n    ...               [0,0,1,1],\n    ...               [0,0,1,1]))\n    >>> lbl = ndimage.label(b)[0]\n    >>> ndimage.center_of_mass(b, lbl, [1,2])\n    [(0.33333333333333331, 1.3333333333333333), (3.5, 2.5)]\n    \n    Negative masses are also accepted, which can occur for example when\n    bias is removed from measured data due to random noise.\n    \n    >>> c = np.array(([-1,0,0,0],\n    ...               [0,-1,-1,0],\n    ...               [0,1,-1,0],\n    ...               [0,1,1,0]))\n    >>> ndimage.center_of_mass(c)\n    (-4.0, 1.0)\n    \n    If there are division by zero issues, the function does not raise an\n    error but rather issues a RuntimeWarning before returning inf and/or NaN.\n    \n    >>> d = np.array([-1, 1])\n    >>> ndimage.center_of_mass(d)\n    (inf,)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8be956a8bc33369bb91c353ab9563efb6c254546354e6f9355ed41f5a572eb9c",
            "fields": [
                {
                    "id": "hukgyi8a",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data from which to calculate center-of-mass. The masses can either\nbe positive or negative.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ut1etuj_",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels for objects in `input`, as generated by `ndimage.label`.\nOnly used with `index`. Dimensions must be the same as `input`.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15caprxv",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels for which to calculate centers-of-mass. If not specified,\nthe combined center of mass of all labels greater than zero\nwill be calculated. Only used with `labels`.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "38kyomfz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.center_of_mass",
                    "defaultValue": "scipy.ndimage.center_of_mass",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i9v7fr2t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g9_69up_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8u9uq7or",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fifna2cq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2awanesb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tobv4gng",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1vz9vies",
            "name": "ndimage.convolve",
            "description": "Multidimensional convolution.\n    \n    The array is convolved with the given kernel.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : array_like\n        Array of weights, same number of dimensions as input\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the right, and negative ones\n        to the left. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `mode` or `origin` must match the length\n        of `axes`. The ith entry in any of these tuples corresponds to the ith\n        entry in `axes`.\n    \n    Returns\n    -------\n    result : ndarray\n        The result of convolution of `input` with `weights`.\n    \n    See Also\n    --------\n    correlate : Correlate an image with a kernel.\n    \n    Notes\n    -----\n    Each value in result is :math:`C_i = \\sum_j{I_{i+k-j} W_j}`, where\n    W is the `weights` kernel,\n    j is the N-D spatial index over :math:`W`,\n    I is the `input` and k is the coordinate of the center of\n    W, specified by `origin` in the input parameters.\n    \n    Examples\n    --------\n    Perhaps the simplest case to understand is ``mode='constant', cval=0.0``,\n    because in this case borders (i.e., where the `weights` kernel, centered\n    on any one value, extends beyond an edge of `input`) are treated as zeros.\n    \n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> k = np.array([[1,1,1],[1,1,0],[1,0,0]])\n    >>> from scipy import ndimage\n    >>> ndimage.convolve(a, k, mode='constant', cval=0.0)\n    array([[11, 10,  7,  4],\n           [10,  3, 11, 11],\n           [15, 12, 14,  7],\n           [12,  3,  7,  0]])\n    \n    Setting ``cval=1.0`` is equivalent to padding the outer edge of `input`\n    with 1.0's (and then extracting only the original region of the result).\n    \n    >>> ndimage.convolve(a, k, mode='constant', cval=1.0)\n    array([[13, 11,  8,  7],\n           [11,  3, 11, 14],\n           [16, 12, 14, 10],\n           [15,  6, 10,  5]])\n    \n    With ``mode='reflect'`` (the default), outer values are reflected at the\n    edge of `input` to fill in missing values.\n    \n    >>> b = np.array([[2, 0, 0],\n    ...               [1, 0, 0],\n    ...               [0, 0, 0]])\n    >>> k = np.array([[0,1,0], [0,1,0], [0,1,0]])\n    >>> ndimage.convolve(b, k, mode='reflect')\n    array([[5, 0, 0],\n           [3, 0, 0],\n           [1, 0, 0]])\n    \n    This includes diagonally at the corners.\n    \n    >>> k = np.array([[1,0,0],[0,1,0],[0,0,1]])\n    >>> ndimage.convolve(b, k)\n    array([[4, 2, 0],\n           [3, 2, 0],\n           [1, 1, 0]])\n    \n    With ``mode='nearest'``, the single nearest value in to an edge in\n    `input` is repeated as many times as needed to match the overlapping\n    `weights`.\n    \n    >>> c = np.array([[2, 0, 1],\n    ...               [1, 0, 0],\n    ...               [0, 0, 0]])\n    >>> k = np.array([[0, 1, 0],\n    ...               [0, 1, 0],\n    ...               [0, 1, 0],\n    ...               [0, 1, 0],\n    ...               [0, 1, 0]])\n    >>> ndimage.convolve(c, k, mode='nearest')\n    array([[7, 0, 3],\n           [5, 0, 2],\n           [3, 0, 1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b7135b8637589e57abe457872790c6210b21a1cdc015684f7849b7f095600391",
            "fields": [
                {
                    "id": "4hlcvkno",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xag7ogpi",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of weights, same number of dimensions as input",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xjxak8an",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrrxs2vv",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t36fsk0x",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9jn8ova8",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the right, and negative ones\nto the left. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ph6b3q2d",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `mode` or `origin` must match the length\nof `axes`. The ith entry in any of these tuples corresponds to the ith\nentry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6fn_avz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.convolve",
                    "defaultValue": "scipy.ndimage.convolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0zz4may",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lmwqsir8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ar8scuuu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ulu1z0_7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6pdlahe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6n4ic43",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g9envaqu",
            "name": "ndimage.convolve1d",
            "description": "Calculate a 1-D convolution along the given axis.\n    \n    The lines of the array along the given axis are convolved with the\n    given weights.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : ndarray\n        1-D sequence of numbers.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    convolve1d : ndarray\n        Convolved array with same shape as input\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import convolve1d\n    >>> convolve1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3])\n    array([14, 24,  4, 13, 12, 36, 27,  0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a707b1ab1a13d8a81ac0d957733c1ce55b6a2aa1206093e08df779c5ca19783",
            "fields": [
                {
                    "id": "88u32swb",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dl5relek",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D sequence of numbers.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25bo43j5",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rp837gv_",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7zn6ltz",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nnuscv36",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s30x6l4u",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "me7oi113",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.convolve1d",
                    "defaultValue": "scipy.ndimage.convolve1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jtugsmez",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjm3mxm3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f_o_utn3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xlx5q30",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eqau7kx5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2bx0qdf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1g8cbkpj",
            "name": "ndimage.correlate",
            "description": "Multidimensional correlation.\n    \n    The array is correlated with the given kernel.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : ndarray\n        array of weights, same number of dimensions as input\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `mode` or `origin` must match the length\n        of `axes`. The ith entry in any of these tuples corresponds to the ith\n        entry in `axes`.\n    \n    Returns\n    -------\n    result : ndarray\n        The result of correlation of `input` with `weights`.\n    \n    See Also\n    --------\n    convolve : Convolve an image with a kernel.\n    \n    Examples\n    --------\n    Correlation is the process of moving a filter mask often referred to\n    as kernel over the image and computing the sum of products at each location.\n    \n    >>> from scipy.ndimage import correlate\n    >>> import numpy as np\n    >>> input_img = np.arange(25).reshape(5,5)\n    >>> print(input_img)\n    [[ 0  1  2  3  4]\n    [ 5  6  7  8  9]\n    [10 11 12 13 14]\n    [15 16 17 18 19]\n    [20 21 22 23 24]]\n    \n    Define a kernel (weights) for correlation. In this example, it is for sum of\n    center and up, down, left and right next elements.\n    \n    >>> weights = [[0, 1, 0],\n    ...            [1, 1, 1],\n    ...            [0, 1, 0]]\n    \n    We can calculate a correlation result:\n    For example, element ``[2,2]`` is ``7 + 11 + 12 + 13 + 17 = 60``.\n    \n    >>> correlate(input_img, weights)\n    array([[  6,  10,  15,  20,  24],\n        [ 26,  30,  35,  40,  44],\n        [ 51,  55,  60,  65,  69],\n        [ 76,  80,  85,  90,  94],\n        [ 96, 100, 105, 110, 114]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b205f6fe72ae8fe71ad0c34bde1e0d6caf4718e4da8a221947b18413efa4cc3b",
            "fields": [
                {
                    "id": "1jnx_be_",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g541cekm",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "array of weights, same number of dimensions as input",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vh7nvziy",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vht2hehe",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "an7heofp",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zdkgbtqd",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqyrzz7f",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `mode` or `origin` must match the length\nof `axes`. The ith entry in any of these tuples corresponds to the ith\nentry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbwlim92",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.correlate",
                    "defaultValue": "scipy.ndimage.correlate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d92c1sat",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qitjdl1e",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9js98ylx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oqlfu3hx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5tcmx3q",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7t91wumz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "akl1ekeh",
            "name": "ndimage.correlate1d",
            "description": "Calculate a 1-D correlation along the given axis.\n    \n    The lines of the array along the given axis are correlated with the\n    given weights.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : array\n        1-D sequence of numbers.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    result : ndarray\n        Correlation result. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import correlate1d\n    >>> correlate1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3])\n    array([ 8, 26,  8, 12,  7, 28, 36,  9])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0f80b31cc5d4313ea6d7044b66f09f8a507d9596083065cc15a97104192f7dc2",
            "fields": [
                {
                    "id": "3j0t3z1j",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wd21glvc",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D sequence of numbers.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1cky4sjb",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pg6htkpg",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmmedgug",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbdp7s50",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujw_fa08",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cly9gtt9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.correlate1d",
                    "defaultValue": "scipy.ndimage.correlate1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_et5h2y1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qlozww2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n79sgak7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7dyrs29",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0t3vey32",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_ge8ewn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y0o8w9c3",
            "name": "ndimage.distance_transform_bf",
            "description": "Distance transform function by a brute force algorithm.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input\n    metric : {'euclidean', 'taxicab', 'chessboard'}, optional\n        'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\n        The default is 'euclidean'.\n    sampling : float, or sequence of float, optional\n        This parameter is only used when `metric` is 'euclidean'.\n        Spacing of elements along each dimension. If a sequence, must be of\n        length equal to the input rank; if a single number, this is used for\n        all axes. If not specified, a grid spacing of unity is implied.\n    return_distances : bool, optional\n        Whether to calculate the distance transform.\n        Default is True.\n    return_indices : bool, optional\n        Whether to calculate the feature transform.\n        Default is False.\n    distances : ndarray, optional\n        An output array to store the calculated distance transform, instead of\n        returning it.\n        `return_distances` must be True.\n        It must be the same shape as `input`, and of type float64 if `metric`\n        is 'euclidean', uint32 otherwise.\n    indices : int32 ndarray, optional\n        An output array to store the calculated feature transform, instead of\n        returning it.\n        `return_indicies` must be True.\n        Its shape must be ``(input.ndim,) + input.shape``.\n    \n    Returns\n    -------\n    distances : ndarray, optional\n        The calculated distance transform. Returned only when\n        `return_distances` is True and `distances` is not supplied.\n        It will have the same shape as the input array.\n    indices : int32 ndarray, optional\n        The calculated feature transform. It has an input-shaped array for each\n        dimension of the input. See distance_transform_edt documentation for an\n        example.\n        Returned only when `return_indices` is True and `indices` is not\n        supplied.\n    \n    See Also\n    --------\n    distance_transform_cdt : Faster distance transform for taxicab and\n                             chessboard metrics\n    distance_transform_edt : Faster distance transform for euclidean metric\n    \n    Notes\n    -----\n    This function employs a slow brute force algorithm. See also the\n    function `distance_transform_cdt` for more efficient taxicab [1]_ and\n    chessboard algorithms [2]_.\n    \n    References\n    ----------\n    .. [1] Taxicab distance. Wikipedia, 2023.\n           https://en.wikipedia.org/wiki/Taxicab_geometry\n    .. [2] Chessboard distance. Wikipedia, 2023.\n           https://en.wikipedia.org/wiki/Chebyshev_distance\n    \n    Examples\n    --------\n    Import the necessary modules.\n    \n    >>> import numpy as np\n    >>> from scipy.ndimage import distance_transform_bf\n    >>> import matplotlib.pyplot as plt\n    >>> from mpl_toolkits.axes_grid1 import ImageGrid\n    \n    First, we create a toy binary image.\n    \n    >>> def add_circle(center_x, center_y, radius, image, fillvalue=1):\n    ...     # fill circular area with 1\n    ...     xx, yy = np.mgrid[:image.shape[0], :image.shape[1]]\n    ...     circle = (xx - center_x) ** 2 + (yy - center_y) ** 2\n    ...     circle_shape = np.sqrt(circle) < radius\n    ...     image[circle_shape] = fillvalue\n    ...     return image\n    >>> image = np.zeros((100, 100), dtype=np.uint8)\n    >>> image[35:65, 20:80] = 1\n    >>> image = add_circle(28, 65, 10, image)\n    >>> image = add_circle(37, 30, 10, image)\n    >>> image = add_circle(70, 45, 20, image)\n    >>> image = add_circle(45, 80, 10, image)\n    \n    Next, we set up the figure.\n    \n    >>> fig = plt.figure(figsize=(8, 8))  # set up the figure structure\n    >>> grid = ImageGrid(fig, 111, nrows_ncols=(2, 2), axes_pad=(0.4, 0.3),\n    ...                  label_mode=\"1\", share_all=True,\n    ...                  cbar_location=\"right\", cbar_mode=\"each\",\n    ...                  cbar_size=\"7%\", cbar_pad=\"2%\")\n    >>> for ax in grid:\n    ...     ax.axis('off')  # remove axes from images\n    \n    The top left image is the original binary image.\n    \n    >>> binary_image = grid[0].imshow(image, cmap='gray')\n    >>> cbar_binary_image = grid.cbar_axes[0].colorbar(binary_image)\n    >>> cbar_binary_image.set_ticks([0, 1])\n    >>> grid[0].set_title(\"Binary image: foreground in white\")\n    \n    The distance transform calculates the distance between foreground pixels\n    and the image background according to a distance metric. Available metrics\n    in `distance_transform_bf` are: ``euclidean`` (default), ``taxicab``\n    and ``chessboard``. The top right image contains the distance transform\n    based on the ``euclidean`` metric.\n    \n    >>> distance_transform_euclidean = distance_transform_bf(image)\n    >>> euclidean_transform = grid[1].imshow(distance_transform_euclidean,\n    ...                                      cmap='gray')\n    >>> cbar_euclidean = grid.cbar_axes[1].colorbar(euclidean_transform)\n    >>> colorbar_ticks = [0, 10, 20]\n    >>> cbar_euclidean.set_ticks(colorbar_ticks)\n    >>> grid[1].set_title(\"Euclidean distance\")\n    \n    The lower left image contains the distance transform using the ``taxicab``\n    metric.\n    \n    >>> distance_transform_taxicab = distance_transform_bf(image,\n    ...                                                    metric='taxicab')\n    >>> taxicab_transformation = grid[2].imshow(distance_transform_taxicab,\n    ...                                         cmap='gray')\n    >>> cbar_taxicab = grid.cbar_axes[2].colorbar(taxicab_transformation)\n    >>> cbar_taxicab.set_ticks(colorbar_ticks)\n    >>> grid[2].set_title(\"Taxicab distance\")\n    \n    Finally, the lower right image contains the distance transform using the\n    ``chessboard`` metric.\n    \n    >>> distance_transform_cb = distance_transform_bf(image,\n    ...                                               metric='chessboard')\n    >>> chessboard_transformation = grid[3].imshow(distance_transform_cb,\n    ...                                            cmap='gray')\n    >>> cbar_taxicab = grid.cbar_axes[3].colorbar(chessboard_transformation)\n    >>> cbar_taxicab.set_ticks(colorbar_ticks)\n    >>> grid[3].set_title(\"Chessboard distance\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "782edb94baa7a1ca1ec330604d4d50a54490e145d4ced004682543bdc15d7110",
            "fields": [
                {
                    "id": "9x0nj9ch",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xvobs8j8",
                    "encoding": "",
                    "name": "metric",
                    "value": "euclidean",
                    "defaultValue": "euclidean",
                    "description": "'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\nThe default is 'euclidean'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0n5eyf7",
                    "encoding": "",
                    "name": "sampling",
                    "value": "",
                    "defaultValue": "",
                    "description": "This parameter is only used when `metric` is 'euclidean'.\nSpacing of elements along each dimension. If a sequence, must be of\nlength equal to the input rank; if a single number, this is used for\nall axes. If not specified, a grid spacing of unity is implied.",
                    "type": "float, or sequence of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vrvmx_yk",
                    "encoding": "",
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate the distance transform.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xr9u56i",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate the feature transform.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sk205b3u",
                    "encoding": "",
                    "name": "distances",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated distance transform, instead of\nreturning it.\n`return_distances` must be True.\nIt must be the same shape as `input`, and of type float64 if `metric`\nis 'euclidean', uint32 otherwise.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ouypzgtt",
                    "encoding": "",
                    "name": "indices",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated feature transform, instead of\nreturning it.\n`return_indicies` must be True.\nIts shape must be ``(input.ndim,) + input.shape``.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ig7247bf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.distance_transform_bf",
                    "defaultValue": "scipy.ndimage.distance_transform_bf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34rvec1f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0lx8bnu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f17he3zz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zk9jq6xb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzw3ag0b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3av0f49p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "db_in4_5",
            "name": "ndimage.distance_transform_cdt",
            "description": "Distance transform for chamfer type of transforms.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input. Values of 0 are treated as background.\n    metric : {'chessboard', 'taxicab'} or array_like, optional\n        The `metric` determines the type of chamfering that is done. If the\n        `metric` is equal to 'taxicab' a structure is generated using\n        `generate_binary_structure` with a squared distance equal to 1. If\n        the `metric` is equal to 'chessboard', a `metric` is generated\n        using `generate_binary_structure` with a squared distance equal to\n        the dimensionality of the array. These choices correspond to the\n        common interpretations of the 'taxicab' and the 'chessboard'\n        distance metrics in two dimensions.\n        A custom metric may be provided, in the form of a matrix where\n        each dimension has a length of three.\n        'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\n        The default is 'chessboard'.\n    return_distances : bool, optional\n        Whether to calculate the distance transform.\n        Default is True.\n    return_indices : bool, optional\n        Whether to calculate the feature transform.\n        Default is False.\n    distances : int32 ndarray, optional\n        An output array to store the calculated distance transform, instead of\n        returning it.\n        `return_distances` must be True.\n        It must be the same shape as `input`.\n    indices : int32 ndarray, optional\n        An output array to store the calculated feature transform, instead of\n        returning it.\n        `return_indicies` must be True.\n        Its shape must be ``(input.ndim,) + input.shape``.\n    \n    Returns\n    -------\n    distances : int32 ndarray, optional\n        The calculated distance transform. Returned only when\n        `return_distances` is True, and `distances` is not supplied.\n        It will have the same shape as the input array.\n    indices : int32 ndarray, optional\n        The calculated feature transform. It has an input-shaped array for each\n        dimension of the input. See distance_transform_edt documentation for an\n        example.\n        Returned only when `return_indices` is True, and `indices` is not\n        supplied.\n    \n    See Also\n    --------\n    distance_transform_edt : Fast distance transform for euclidean metric\n    distance_transform_bf : Distance transform for different metrics using\n                            a slower brute force algorithm\n    \n    Examples\n    --------\n    Import the necessary modules.\n    \n    >>> import numpy as np\n    >>> from scipy.ndimage import distance_transform_cdt\n    >>> import matplotlib.pyplot as plt\n    >>> from mpl_toolkits.axes_grid1 import ImageGrid\n    \n    First, we create a toy binary image.\n    \n    >>> def add_circle(center_x, center_y, radius, image, fillvalue=1):\n    ...     # fill circular area with 1\n    ...     xx, yy = np.mgrid[:image.shape[0], :image.shape[1]]\n    ...     circle = (xx - center_x) ** 2 + (yy - center_y) ** 2\n    ...     circle_shape = np.sqrt(circle) < radius\n    ...     image[circle_shape] = fillvalue\n    ...     return image\n    >>> image = np.zeros((100, 100), dtype=np.uint8)\n    >>> image[35:65, 20:80] = 1\n    >>> image = add_circle(28, 65, 10, image)\n    >>> image = add_circle(37, 30, 10, image)\n    >>> image = add_circle(70, 45, 20, image)\n    >>> image = add_circle(45, 80, 10, image)\n    \n    Next, we set up the figure.\n    \n    >>> fig = plt.figure(figsize=(5, 15))\n    >>> grid = ImageGrid(fig, 111, nrows_ncols=(3, 1), axes_pad=(0.5, 0.3),\n    ...                  label_mode=\"1\", share_all=True,\n    ...                  cbar_location=\"right\", cbar_mode=\"each\",\n    ...                  cbar_size=\"7%\", cbar_pad=\"2%\")\n    >>> for ax in grid:\n    ...     ax.axis('off')\n    >>> top, middle, bottom = grid\n    >>> colorbar_ticks = [0, 10, 20]\n    \n    The top image contains the original binary image.\n    \n    >>> binary_image = top.imshow(image, cmap='gray')\n    >>> cbar_binary_image = top.cax.colorbar(binary_image)\n    >>> cbar_binary_image.set_ticks([0, 1])\n    >>> top.set_title(\"Binary image: foreground in white\")\n    \n    The middle image contains the distance transform using the ``taxicab``\n    metric.\n    \n    >>> distance_taxicab = distance_transform_cdt(image, metric=\"taxicab\")\n    >>> taxicab_transform = middle.imshow(distance_taxicab, cmap='gray')\n    >>> cbar_taxicab = middle.cax.colorbar(taxicab_transform)\n    >>> cbar_taxicab.set_ticks(colorbar_ticks)\n    >>> middle.set_title(\"Taxicab metric\")\n    \n    The bottom image contains the distance transform using the ``chessboard``\n    metric.\n    \n    >>> distance_chessboard = distance_transform_cdt(image,\n    ...                                              metric=\"chessboard\")\n    >>> chessboard_transform = bottom.imshow(distance_chessboard, cmap='gray')\n    >>> cbar_chessboard = bottom.cax.colorbar(chessboard_transform)\n    >>> cbar_chessboard.set_ticks(colorbar_ticks)\n    >>> bottom.set_title(\"Chessboard metric\")\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b92f657a8fd2679aba040e1dd166233d5915b66c40fafd5edd62af847cb69743",
            "fields": [
                {
                    "id": "nbk3nnke",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input. Values of 0 are treated as background.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nh1hqkg_",
                    "encoding": "",
                    "name": "metric",
                    "value": "chessboard",
                    "defaultValue": "chessboard",
                    "description": "The `metric` determines the type of chamfering that is done. If the\n`metric` is equal to 'taxicab' a structure is generated using\n`generate_binary_structure` with a squared distance equal to 1. If\nthe `metric` is equal to 'chessboard', a `metric` is generated\nusing `generate_binary_structure` with a squared distance equal to\nthe dimensionality of the array. These choices correspond to the\ncommon interpretations of the 'taxicab' and the 'chessboard'\ndistance metrics in two dimensions.\nA custom metric may be provided, in the form of a matrix where\neach dimension has a length of three.\n'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\nThe default is 'chessboard'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xzl_y1_",
                    "encoding": "",
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate the distance transform.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s1q3ra8d",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate the feature transform.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dwj71hc5",
                    "encoding": "",
                    "name": "distances",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated distance transform, instead of\nreturning it.\n`return_distances` must be True.\nIt must be the same shape as `input`.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tabnyegk",
                    "encoding": "",
                    "name": "indices",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated feature transform, instead of\nreturning it.\n`return_indicies` must be True.\nIts shape must be ``(input.ndim,) + input.shape``.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bqscvqtk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.distance_transform_cdt",
                    "defaultValue": "scipy.ndimage.distance_transform_cdt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vsmdejah",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qup1gdd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "axhkx9lk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1r3jt9x0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sov3h7d3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mk7coowa",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kyqeysxy",
            "name": "ndimage.distance_transform_edt",
            "description": "Exact Euclidean distance transform.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input data to transform. Can be any type but will be converted\n        into binary: 1 wherever input equates to True, 0 elsewhere.\n    sampling : float, or sequence of float, optional\n        Spacing of elements along each dimension. If a sequence, must be of\n        length equal to the input rank; if a single number, this is used for\n        all axes. If not specified, a grid spacing of unity is implied.\n    return_distances : bool, optional\n        Whether to calculate the distance transform.\n        Default is True.\n    return_indices : bool, optional\n        Whether to calculate the feature transform.\n        Default is False.\n    distances : float64 ndarray, optional\n        An output array to store the calculated distance transform, instead of\n        returning it.\n        `return_distances` must be True.\n        It must be the same shape as `input`.\n    indices : int32 ndarray, optional\n        An output array to store the calculated feature transform, instead of\n        returning it.\n        `return_indicies` must be True.\n        Its shape must be ``(input.ndim,) + input.shape``.\n    \n    Returns\n    -------\n    distances : float64 ndarray, optional\n        The calculated distance transform. Returned only when\n        `return_distances` is True and `distances` is not supplied.\n        It will have the same shape as the input array.\n    indices : int32 ndarray, optional\n        The calculated feature transform. It has an input-shaped array for each\n        dimension of the input. See example below.\n        Returned only when `return_indices` is True and `indices` is not\n        supplied.\n    \n    Notes\n    -----\n    The Euclidean distance transform gives values of the Euclidean\n    distance::\n    \n                    n\n      y_i = sqrt(sum (x[i]-b[i])**2)\n                    i\n    \n    where b[i] is the background point (value 0) with the smallest\n    Euclidean distance to input points x[i], and n is the\n    number of dimensions.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array(([0,1,1,1,1],\n    ...               [0,0,1,1,1],\n    ...               [0,1,1,1,1],\n    ...               [0,1,1,1,0],\n    ...               [0,1,1,0,0]))\n    >>> ndimage.distance_transform_edt(a)\n    array([[ 0.    ,  1.    ,  1.4142,  2.2361,  3.    ],\n           [ 0.    ,  0.    ,  1.    ,  2.    ,  2.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.4142,  1.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.    ,  0.    ],\n           [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])\n    \n    With a sampling of 2 units along x, 1 along y:\n    \n    >>> ndimage.distance_transform_edt(a, sampling=[2,1])\n    array([[ 0.    ,  1.    ,  2.    ,  2.8284,  3.6056],\n           [ 0.    ,  0.    ,  1.    ,  2.    ,  3.    ],\n           [ 0.    ,  1.    ,  2.    ,  2.2361,  2.    ],\n           [ 0.    ,  1.    ,  2.    ,  1.    ,  0.    ],\n           [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])\n    \n    Asking for indices as well:\n    \n    >>> edt, inds = ndimage.distance_transform_edt(a, return_indices=True)\n    >>> inds\n    array([[[0, 0, 1, 1, 3],\n            [1, 1, 1, 1, 3],\n            [2, 2, 1, 3, 3],\n            [3, 3, 4, 4, 3],\n            [4, 4, 4, 4, 4]],\n           [[0, 0, 1, 1, 4],\n            [0, 1, 1, 1, 4],\n            [0, 0, 1, 4, 4],\n            [0, 0, 3, 3, 4],\n            [0, 0, 3, 3, 4]]], dtype=int32)\n    \n    With arrays provided for inplace outputs:\n    \n    >>> indices = np.zeros(((np.ndim(a),) + a.shape), dtype=np.int32)\n    >>> ndimage.distance_transform_edt(a, return_indices=True, indices=indices)\n    array([[ 0.    ,  1.    ,  1.4142,  2.2361,  3.    ],\n           [ 0.    ,  0.    ,  1.    ,  2.    ,  2.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.4142,  1.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.    ,  0.    ],\n           [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])\n    >>> indices\n    array([[[0, 0, 1, 1, 3],\n            [1, 1, 1, 1, 3],\n            [2, 2, 1, 3, 3],\n            [3, 3, 4, 4, 3],\n            [4, 4, 4, 4, 4]],\n           [[0, 0, 1, 1, 4],\n            [0, 1, 1, 1, 4],\n            [0, 0, 1, 4, 4],\n            [0, 0, 3, 3, 4],\n            [0, 0, 3, 3, 4]]], dtype=int32)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e83c6edb902b04f29318cfb88097b1a61cc682eea7a625adb2b5981467010b6",
            "fields": [
                {
                    "id": "zpvo6p41",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input data to transform. Can be any type but will be converted\ninto binary: 1 wherever input equates to True, 0 elsewhere.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_cjzyktg",
                    "encoding": "",
                    "name": "sampling",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spacing of elements along each dimension. If a sequence, must be of\nlength equal to the input rank; if a single number, this is used for\nall axes. If not specified, a grid spacing of unity is implied.",
                    "type": "float, or sequence of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "760g7uoo",
                    "encoding": "",
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate the distance transform.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uhe55pps",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate the feature transform.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5v3g9wu",
                    "encoding": "",
                    "name": "distances",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated distance transform, instead of\nreturning it.\n`return_distances` must be True.\nIt must be the same shape as `input`.",
                    "type": "float64 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9i94r4v2",
                    "encoding": "",
                    "name": "indices",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated feature transform, instead of\nreturning it.\n`return_indicies` must be True.\nIts shape must be ``(input.ndim,) + input.shape``.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjfphmdf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.distance_transform_edt",
                    "defaultValue": "scipy.ndimage.distance_transform_edt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3h8iqos",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "byfw3_0i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9psog43m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reb_0o87",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frkhop1b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_3x88q7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "x3juit67",
            "name": "ndimage.extrema",
            "description": "Calculate the minimums and maximums of the values of an array\n    at labels, along with their positions.\n    \n    Parameters\n    ----------\n    input : ndarray\n        N-D image data to process.\n    labels : ndarray, optional\n        Labels of features in input.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        Labels to include in output.  If None (default), all values where\n        non-zero `labels` are used.\n    \n    Returns\n    -------\n    minimums, maximums : int or ndarray\n        Values of minimums and maximums in each feature.\n    min_positions, max_positions : tuple or list of tuples\n        Each tuple gives the N-D coordinates of the corresponding minimum\n        or maximum.\n    \n    See Also\n    --------\n    maximum, minimum, maximum_position, minimum_position, center_of_mass\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.extrema(a)\n    (0, 9, (0, 2), (3, 0))\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.extrema(a, lbl, index=np.arange(1, nlbl+1))\n    (array([1, 4, 3]),\n     array([5, 7, 9]),\n     [(0, 0), (1, 3), (3, 1)],\n     [(1, 0), (2, 3), (3, 0)])\n    \n    If no index is given, non-zero `labels` are processed:\n    \n    >>> ndimage.extrema(a, lbl)\n    (1, 9, (0, 0), (3, 0))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "df91ef8dc7f68d38be0f2195a3a722a44153be1dc801c71eaf3d29d16f977061",
            "fields": [
                {
                    "id": "yef3cztr",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D image data to process.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0v3vkdxw",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels of features in input.\nIf not None, must be same shape as `input`.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pzi8xxrj",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels to include in output.  If None (default), all values where\nnon-zero `labels` are used.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6az4k4v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.extrema",
                    "defaultValue": "scipy.ndimage.extrema",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_6eclbc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2cpmecf1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pqcuf3bp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5bm9t4v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n27mrz8y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "77urbegc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pbq2xbh5",
            "name": "ndimage.find_objects",
            "description": "Find objects in a labeled array.\n    \n    Parameters\n    ----------\n    input : ndarray of ints\n        Array containing objects defined by different labels. Labels with\n        value 0 are ignored.\n    max_label : int, optional\n        Maximum label to be searched for in `input`. If max_label is not\n        given, the positions of all objects are returned.\n    \n    Returns\n    -------\n    object_slices : list of tuples\n        A list of tuples, with each tuple containing N slices (with N the\n        dimension of the input array). Slices correspond to the minimal\n        parallelepiped that contains the object. If a number is missing,\n        None is returned instead of a slice. The label ``l`` corresponds to\n        the index ``l-1`` in the returned list.\n    \n    See Also\n    --------\n    label, center_of_mass\n    \n    Notes\n    -----\n    This function is very useful for isolating a volume of interest inside\n    a 3-D array, that cannot be \"seen through\".\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((6,6), dtype=int)\n    >>> a[2:4, 2:4] = 1\n    >>> a[4, 4] = 1\n    >>> a[:2, :3] = 2\n    >>> a[0, 5] = 3\n    >>> a\n    array([[2, 2, 2, 0, 0, 3],\n           [2, 2, 2, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0],\n           [0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> ndimage.find_objects(a)\n    [(slice(2, 5, None), slice(2, 5, None)),\n     (slice(0, 2, None), slice(0, 3, None)),\n     (slice(0, 1, None), slice(5, 6, None))]\n    >>> ndimage.find_objects(a, max_label=2)\n    [(slice(2, 5, None), slice(2, 5, None)), (slice(0, 2, None), slice(0, 3, None))]\n    >>> ndimage.find_objects(a == 1, max_label=2)\n    [(slice(2, 5, None), slice(2, 5, None)), None]\n    \n    >>> loc = ndimage.find_objects(a)[0]\n    >>> a[loc]\n    array([[1, 1, 0],\n           [1, 1, 0],\n           [0, 0, 1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5ff538a8bd90778ee5e5167e51c5367166ed48a7382f5d2d689996640a904e96",
            "fields": [
                {
                    "id": "609nxjeo",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array containing objects defined by different labels. Labels with\nvalue 0 are ignored.",
                    "type": "ndarray of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mcwlgo36",
                    "encoding": "",
                    "name": "max_label",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum label to be searched for in `input`. If max_label is not\ngiven, the positions of all objects are returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xclawzr1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.find_objects",
                    "defaultValue": "scipy.ndimage.find_objects",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b867ptzl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agqdzbdz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yb1kkt1u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dte2dgl6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5uzw6pp5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdabjfpf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9mxmjtq3",
            "name": "ndimage.fourier_ellipsoid",
            "description": "Multidimensional ellipsoid Fourier filter.\n    \n    The array is multiplied with the fourier transform of an ellipsoid of\n    given sizes.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : float or sequence\n        The size of the box used for filtering.\n        If a float, `size` is the same for all axes. If a sequence, `size` has\n        to contain one value for each axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of filtering the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_ellipsoid : ndarray\n        The filtered input.\n    \n    Notes\n    -----\n    This function is implemented for arrays of rank 1, 2, or 3.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import numpy.fft\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_ellipsoid(input_, size=20)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bef3fb42bf1f361b7546c634070c75accedc3e6561db320b49501feed985ae09",
            "fields": [
                {
                    "id": "zxr_z_d1",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e830yc9x",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the box used for filtering.\nIf a float, `size` is the same for all axes. If a sequence, `size` has\nto contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "be6502tn",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lnxthhzv",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3cvv5l4v",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of filtering the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tc6mp8xc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier_ellipsoid",
                    "defaultValue": "scipy.ndimage.fourier_ellipsoid",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1uqtbm5a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12ua94x9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_v5svjcf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05p4twuj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8kby2ts_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n1gnikfj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dmqdglns",
            "name": "ndimage.fourier_gaussian",
            "description": "Multidimensional Gaussian fourier filter.\n    \n    The array is multiplied with the fourier transform of a Gaussian\n    kernel.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : float or sequence\n        The sigma of the Gaussian kernel. If a float, `sigma` is the same for\n        all axes. If a sequence, `sigma` has to contain one value for each\n        axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of filtering the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_gaussian : ndarray\n        The filtered input.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import numpy.fft\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_gaussian(input_, sigma=4)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5e94bd895287e11c32a4e0a49158cab57c7adb6bf3b7ebe8e6b2a6a0c0416ba9",
            "fields": [
                {
                    "id": "3iznntjk",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j38xu1f8",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "The sigma of the Gaussian kernel. If a float, `sigma` is the same for\nall axes. If a sequence, `sigma` has to contain one value for each\naxis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lfdgihsb",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7woc_pfu",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkvqr0jw",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of filtering the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "95xz1jhh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier_gaussian",
                    "defaultValue": "scipy.ndimage.fourier_gaussian",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwbqcfll",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmxwzanf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fi1g1aq5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tiv8i3h5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g06k6svh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6g8hrke",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "loy4w9wk",
            "name": "ndimage.fourier_shift",
            "description": "Multidimensional Fourier shift filter.\n    \n    The array is multiplied with the Fourier transform of a shift operation.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    shift : float or sequence\n        The size of the box used for filtering.\n        If a float, `shift` is the same for all axes. If a sequence, `shift`\n        has to contain one value for each axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of shifting the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_shift : ndarray\n        The shifted input.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> import numpy.fft\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_shift(input_, shift=200)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2333a4c6b67b1d66107a6c366e671b40efee2d7372ffb970cc53c82e567cc2d2",
            "fields": [
                {
                    "id": "4xppavw3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u87rpzgb",
                    "encoding": "",
                    "name": "shift",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the box used for filtering.\nIf a float, `shift` is the same for all axes. If a sequence, `shift`\nhas to contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dd56xs9",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bulp8o_9",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohz5_072",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of shifting the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8pl0zbly",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier_shift",
                    "defaultValue": "scipy.ndimage.fourier_shift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3lo1rnp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s6afft4v",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "relqfs33",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wibiv10z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfyoco1c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c274igxd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kmdbw2rp",
            "name": "ndimage.fourier_uniform",
            "description": "Multidimensional uniform fourier filter.\n    \n    The array is multiplied with the Fourier transform of a box of given\n    size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : float or sequence\n        The size of the box used for filtering.\n        If a float, `size` is the same for all axes. If a sequence, `size` has\n        to contain one value for each axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of filtering the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_uniform : ndarray\n        The filtered input.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import numpy.fft\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_uniform(input_, size=20)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "731bf4d5edeadca7290d2e24b20910f5e5dd60a6f47a50abb42ed115ae2b8378",
            "fields": [
                {
                    "id": "jsj5gaxt",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8u9zpc2",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the box used for filtering.\nIf a float, `size` is the same for all axes. If a sequence, `size` has\nto contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ng63b6e4",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2x4x4r80",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_s116jah",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of filtering the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yu5eken6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier_uniform",
                    "defaultValue": "scipy.ndimage.fourier_uniform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8qobl11e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9wuq7co",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gw894ed5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l9ng59_p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0um1l0v6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1u81h_mp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8t71mf2z",
            "name": "ndimage.gaussian_filter",
            "description": "Multidimensional Gaussian filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar or sequence of scalars\n        Standard deviation for Gaussian kernel. The standard\n        deviations of the Gaussian filter are given for each axis as a\n        sequence, or as a single number, in which case it is equal for\n        all axes.\n    order : int or sequence of ints, optional\n        The order of the filter along each axis is given as a sequence\n        of integers, or as a single number. An order of 0 corresponds\n        to convolution with a Gaussian kernel. A positive order\n        corresponds to convolution with that derivative of a Gaussian.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    truncate : float, optional\n        Truncate the filter at this many standard deviations.\n        Default is 4.0.\n    radius : None or int or sequence of ints, optional\n        Radius of the Gaussian kernel. The radius are given for each axis\n        as a sequence, or as a single number, in which case it is equal\n        for all axes. If specified, the size of the kernel along each axis\n        will be ``2*radius + 1``, and `truncate` is ignored.\n        Default is None.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `sigma`, `order`, `mode` and/or `radius`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    gaussian_filter : ndarray\n        Returned array of same shape as `input`.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D convolution filters. The intermediate arrays are\n    stored in the same data type as the output. Therefore, for output\n    types with a limited precision, the results may be imprecise\n    because intermediate results may be stored with insufficient\n    precision.\n    \n    The Gaussian kernel will have size ``2*radius + 1`` along each axis. If\n    `radius` is None, the default ``radius = round(truncate * sigma)`` will be\n    used.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import gaussian_filter\n    >>> import numpy as np\n    >>> a = np.arange(50, step=2).reshape((5,5))\n    >>> a\n    array([[ 0,  2,  4,  6,  8],\n           [10, 12, 14, 16, 18],\n           [20, 22, 24, 26, 28],\n           [30, 32, 34, 36, 38],\n           [40, 42, 44, 46, 48]])\n    >>> gaussian_filter(a, sigma=1)\n    array([[ 4,  6,  8,  9, 11],\n           [10, 12, 14, 15, 17],\n           [20, 22, 24, 25, 27],\n           [29, 31, 33, 34, 36],\n           [35, 37, 39, 40, 42]])\n    \n    >>> from scipy import datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = gaussian_filter(ascent, sigma=5)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e083030c00511bbb0848fcbcb226b08fd0a91a46e3c741abafb70f426c4d4545",
            "fields": [
                {
                    "id": "y2vyg2i0",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bnstfgv4",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation for Gaussian kernel. The standard\ndeviations of the Gaussian filter are given for each axis as a\nsequence, or as a single number, in which case it is equal for\nall axes.",
                    "type": "scalar or sequence of scalars",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fallf0x4",
                    "encoding": "",
                    "name": "order",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The order of the filter along each axis is given as a sequence\nof integers, or as a single number. An order of 0 corresponds\nto convolution with a Gaussian kernel. A positive order\ncorresponds to convolution with that derivative of a Gaussian.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v45p1ik9",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d32qycns",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uc8eti5c",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jx8gcr_0",
                    "encoding": "",
                    "name": "truncate",
                    "value": 4.0,
                    "defaultValue": 4.0,
                    "description": "Truncate the filter at this many standard deviations.\nDefault is 4.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3auvcsa",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "Radius of the Gaussian kernel. The radius are given for each axis\nas a sequence, or as a single number, in which case it is equal\nfor all axes. If specified, the size of the kernel along each axis\nwill be ``2*radius + 1``, and `truncate` is ignored.\nDefault is None.",
                    "type": "None or int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fukyu7xk",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `sigma`, `order`, `mode` and/or `radius`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tngo704",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.gaussian_filter",
                    "defaultValue": "scipy.ndimage.gaussian_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9lv6zwxi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqkm3n2t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j1czzpn8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9m_ifjbz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oqeokmpe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qs83m3_h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kmnjhxsj",
            "name": "ndimage.gaussian_filter1d",
            "description": "1-D Gaussian filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar\n        standard deviation for Gaussian kernel\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    order : int, optional\n        An order of 0 corresponds to convolution with a Gaussian\n        kernel. A positive order corresponds to convolution with\n        that derivative of a Gaussian.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    truncate : float, optional\n        Truncate the filter at this many standard deviations.\n        Default is 4.0.\n    radius : None or int, optional\n        Radius of the Gaussian kernel. If specified, the size of\n        the kernel will be ``2*radius + 1``, and `truncate` is ignored.\n        Default is None.\n    \n    Returns\n    -------\n    gaussian_filter1d : ndarray\n    \n    Notes\n    -----\n    The Gaussian kernel will have size ``2*radius + 1`` along each axis. If\n    `radius` is None, a default ``radius = round(truncate * sigma)`` will be\n    used.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import gaussian_filter1d\n    >>> import numpy as np\n    >>> gaussian_filter1d([1.0, 2.0, 3.0, 4.0, 5.0], 1)\n    array([ 1.42704095,  2.06782203,  3.        ,  3.93217797,  4.57295905])\n    >>> gaussian_filter1d([1.0, 2.0, 3.0, 4.0, 5.0], 4)\n    array([ 2.91948343,  2.95023502,  3.        ,  3.04976498,  3.08051657])\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = rng.standard_normal(101).cumsum()\n    >>> y3 = gaussian_filter1d(x, 3)\n    >>> y6 = gaussian_filter1d(x, 6)\n    >>> plt.plot(x, 'k', label='original data')\n    >>> plt.plot(y3, '--', label='filtered, sigma=3')\n    >>> plt.plot(y6, ':', label='filtered, sigma=6')\n    >>> plt.legend()\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2257e476dcf365da22c7be5ade79a505bb1e8fd313610aa488f08205b1d5b029",
            "fields": [
                {
                    "id": "gqj2mr91",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7jv606xl",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "standard deviation for Gaussian kernel",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "21s8iqvs",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5pk71z5v",
                    "encoding": "",
                    "name": "order",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "An order of 0 corresponds to convolution with a Gaussian\nkernel. A positive order corresponds to convolution with\nthat derivative of a Gaussian.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rz70ib9j",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8qmw7r78",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ny8prvfq",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kou7csuz",
                    "encoding": "",
                    "name": "truncate",
                    "value": 4.0,
                    "defaultValue": 4.0,
                    "description": "Truncate the filter at this many standard deviations.\nDefault is 4.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ugcppa2r",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "Radius of the Gaussian kernel. If specified, the size of\nthe kernel will be ``2*radius + 1``, and `truncate` is ignored.\nDefault is None.",
                    "type": "None or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f788x1hq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.gaussian_filter1d",
                    "defaultValue": "scipy.ndimage.gaussian_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5lty055",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ysn8o2br",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8njou9eb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0bdumbz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qtmkgf_w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hkz8_o9j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1fuhkf4v",
            "name": "ndimage.gaussian_gradient_magnitude",
            "description": "Multidimensional gradient magnitude using Gaussian derivatives.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar or sequence of scalars\n        The standard deviations of the Gaussian filter are given for\n        each axis as a sequence, or as a single number, in which case\n        it is equal for all axes.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If `sigma` or `mode` tuples\n        are provided, their length must match the number of axes.\n    Extra keyword arguments will be passed to gaussian_filter().\n    \n    Returns\n    -------\n    gaussian_gradient_magnitude : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.gaussian_gradient_magnitude(ascent, sigma=5)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0c3f48be7da25a3009aca5a970cd47710269f718f76ea1602fff028a5f58a6f",
            "fields": [
                {
                    "id": "li8hwwot",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aax_3wn_",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "The standard deviations of the Gaussian filter are given for\neach axis as a sequence, or as a single number, in which case\nit is equal for all axes.",
                    "type": "scalar or sequence of scalars",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3489yxfd",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g0p5oa74",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4bgjsrbk",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kn4yqae5",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If `sigma` or `mode` tuples\nare provided, their length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "drir4czr",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8hyij19u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.gaussian_gradient_magnitude",
                    "defaultValue": "scipy.ndimage.gaussian_gradient_magnitude",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5aeycjxm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33xo4msw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ol3exb9k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m6ttqz30",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3mkmoeg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kfie39_t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dl2jmua3",
            "name": "ndimage.gaussian_laplace",
            "description": "Multidimensional Laplace filter using Gaussian second derivatives.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar or sequence of scalars\n        The standard deviations of the Gaussian filter are given for\n        each axis as a sequence, or as a single number, in which case\n        it is equal for all axes.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If `sigma` or `mode` tuples\n        are provided, their length must match the number of axes.\n    Extra keyword arguments will be passed to gaussian_filter().\n    \n    Returns\n    -------\n    gaussian_laplace : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> ascent = datasets.ascent()\n    \n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    \n    >>> result = ndimage.gaussian_laplace(ascent, sigma=1)\n    >>> ax1.imshow(result)\n    \n    >>> result = ndimage.gaussian_laplace(ascent, sigma=3)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb0d7a915b751deabfa7d85fe43991803990044a141363759759db4affcd2272",
            "fields": [
                {
                    "id": "et_xg71x",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxpbky8a",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "The standard deviations of the Gaussian filter are given for\neach axis as a sequence, or as a single number, in which case\nit is equal for all axes.",
                    "type": "scalar or sequence of scalars",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yp5jpbuw",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fg_86qm7",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8r9o4se",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3wr5tzv",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If `sigma` or `mode` tuples\nare provided, their length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ylrj6_e",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4s733zw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.gaussian_laplace",
                    "defaultValue": "scipy.ndimage.gaussian_laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6479rcu_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acvxmy79",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vg94144s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5f7p4y5y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xrk3j6iv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_s6me_xy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iaq62w0c",
            "name": "ndimage.generate_binary_structure",
            "description": "Generate a binary structure for binary morphological operations.\n    \n    Parameters\n    ----------\n    rank : int\n         Number of dimensions of the array to which the structuring element\n         will be applied, as returned by `np.ndim`.\n    connectivity : int\n         `connectivity` determines which elements of the output array belong\n         to the structure, i.e., are considered as neighbors of the central\n         element. Elements up to a squared distance of `connectivity` from\n         the center are considered neighbors. `connectivity` may range from 1\n         (no diagonal elements are neighbors) to `rank` (all elements are\n         neighbors).\n    \n    Returns\n    -------\n    output : ndarray of bools\n         Structuring element which may be used for binary morphological\n         operations, with `rank` dimensions and all dimensions equal to 3.\n    \n    See Also\n    --------\n    iterate_structure, binary_dilation, binary_erosion\n    \n    Notes\n    -----\n    `generate_binary_structure` can only create structuring elements with\n    dimensions equal to 3, i.e., minimal dimensions. For larger structuring\n    elements, that are useful e.g., for eroding large objects, one may either\n    use `iterate_structure`, or create directly custom arrays with\n    numpy functions such as `numpy.ones`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> struct = ndimage.generate_binary_structure(2, 1)\n    >>> struct\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> a = np.zeros((5,5))\n    >>> a[2, 2] = 1\n    >>> a\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> b = ndimage.binary_dilation(a, structure=struct).astype(a.dtype)\n    >>> b\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(b, structure=struct).astype(a.dtype)\n    array([[ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 1.,  1.,  1.,  1.,  1.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.]])\n    >>> struct = ndimage.generate_binary_structure(2, 2)\n    >>> struct\n    array([[ True,  True,  True],\n           [ True,  True,  True],\n           [ True,  True,  True]], dtype=bool)\n    >>> struct = ndimage.generate_binary_structure(3, 1)\n    >>> struct # no diagonal elements\n    array([[[False, False, False],\n            [False,  True, False],\n            [False, False, False]],\n           [[False,  True, False],\n            [ True,  True,  True],\n            [False,  True, False]],\n           [[False, False, False],\n            [False,  True, False],\n            [False, False, False]]], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e3a9ebf407f540e3cff2c79907c627097efac7c444878c6e7802c75159b01138",
            "fields": [
                {
                    "id": "od7cw9se",
                    "encoding": "",
                    "name": "rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of dimensions of the array to which the structuring element\nwill be applied, as returned by `np.ndim`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "khpevwlh",
                    "encoding": "",
                    "name": "connectivity",
                    "value": "",
                    "defaultValue": "",
                    "description": "`connectivity` determines which elements of the output array belong\nto the structure, i.e., are considered as neighbors of the central\nelement. Elements up to a squared distance of `connectivity` from\nthe center are considered neighbors. `connectivity` may range from 1\n(no diagonal elements are neighbors) to `rank` (all elements are\nneighbors).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34fu8573",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.generate_binary_structure",
                    "defaultValue": "scipy.ndimage.generate_binary_structure",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbwk67do",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pef71yj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b1tz4c9h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8fhu5ju",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "37dvzt8s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1owfwpi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yjpetazw",
            "name": "ndimage.generic_filter",
            "description": "Calculate a multidimensional filter using the given function.\n    \n    At each element the provided function is called. The input values\n    within the filter footprint at that element are passed to the function\n    as a 1-D array of double values.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    function : {callable, scipy.LowLevelCallable}\n        Function to apply at each element.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size` or `origin` must match the length\n        of `axes`. The ith entry in any of these tuples corresponds to the ith\n        entry in `axes`.\n    \n    Returns\n    -------\n    output : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    vectorized_filter : similar functionality, but optimized for vectorized callables\n    \n    Notes\n    -----\n    This function is ideal for use with instances of `scipy.LowLevelCallable`;\n    for vectorized, pure-Python callables, consider `vectorized_filter` for improved\n    performance.\n    \n    Low-level callback functions must have one of the following signatures:\n    \n    .. code:: c\n    \n       int callback(double *buffer, npy_intp filter_size,\n                    double *return_value, void *user_data)\n       int callback(double *buffer, intptr_t filter_size,\n                    double *return_value, void *user_data)\n    \n    The calling function iterates over the elements of the input and\n    output arrays, calling the callback function at each element. The\n    elements within the footprint of the filter at the current element are\n    passed through the ``buffer`` parameter, and the number of elements\n    within the footprint through ``filter_size``. The calculated value is\n    returned in ``return_value``. ``user_data`` is the data pointer provided\n    to `scipy.LowLevelCallable` as-is.\n    \n    The callback function must return an integer error status that is zero\n    if something went wrong and one otherwise. If an error occurs, you should\n    normally set the python error status with an informative message\n    before returning, otherwise a default error message is set by the\n    calling function.\n    \n    In addition, some other low-level function pointer specifications\n    are accepted, but these are for backward compatibility only and should\n    not be used in new code.\n    \n    Examples\n    --------\n    Import the necessary modules and load the example image used for\n    filtering.\n    \n    >>> import numpy as np\n    >>> from scipy import datasets\n    >>> from scipy.ndimage import zoom, generic_filter\n    >>> import matplotlib.pyplot as plt\n    >>> ascent = zoom(datasets.ascent(), 0.5)\n    \n    Compute a maximum filter with kernel size 5 by passing a simple NumPy\n    aggregation function as argument to `function`.\n    \n    >>> maximum_filter_result = generic_filter(ascent, np.amax, [5, 5])\n    \n    While a maximum filter could also directly be obtained using\n    `maximum_filter`, `generic_filter` allows generic Python function or\n    `scipy.LowLevelCallable` to be used as a filter. Here, we compute the\n    range between maximum and minimum value as an example for a kernel size\n    of 5.\n    \n    >>> def custom_filter(image):\n    ...     return np.amax(image) - np.amin(image)\n    >>> custom_filter_result = generic_filter(ascent, custom_filter, [5, 5])\n    \n    Plot the original and filtered images.\n    \n    >>> fig, axes = plt.subplots(3, 1, figsize=(3, 9))\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> top, middle, bottom = axes\n    >>> for ax in axes:\n    ...     ax.set_axis_off()  # remove coordinate system\n    >>> top.imshow(ascent)\n    >>> top.set_title(\"Original image\")\n    >>> middle.imshow(maximum_filter_result)\n    >>> middle.set_title(\"Maximum filter, Kernel: 5x5\")\n    >>> bottom.imshow(custom_filter_result)\n    >>> bottom.set_title(\"Custom filter, Kernel: 5x5\")\n    >>> fig.tight_layout()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b0e952a621b10f534832db6b3a72e57600ec5254429cab3607e75d4bc451b1a1",
            "fields": [
                {
                    "id": "x71p4tx3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zvzji4h",
                    "encoding": "",
                    "name": "function",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to apply at each element.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxoofmj5",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e7x94dk9",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qnm91kkt",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2xzz45p",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfdir902",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbh8nxlm",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_g3g43ua",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dyd6hmi",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0dd8hp6",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size` or `origin` must match the length\nof `axes`. The ith entry in any of these tuples corresponds to the ith\nentry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xyh10oid",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.generic_filter",
                    "defaultValue": "scipy.ndimage.generic_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9qowpfla",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oj2mhvek",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b14b_0r6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3enxq8j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zr3wc09",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8g_kjxor",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fr3so9r3",
            "name": "ndimage.generic_filter1d",
            "description": "Calculate a 1-D filter along the given axis.\n    \n    `generic_filter1d` iterates over the lines of the array, calling the\n    given function at each line. The arguments of the line are the\n    input line, and the output line. The input and output lines are 1-D\n    double arrays. The input line is extended appropriately according\n    to the filter size and origin. The output line must be modified\n    in-place with the result.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    function : {callable, scipy.LowLevelCallable}\n        Function to apply along given axis.\n    filter_size : scalar\n        Length of the filter.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    \n    Returns\n    -------\n    generic_filter1d : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    This function also accepts low-level callback functions with one of\n    the following signatures and wrapped in `scipy.LowLevelCallable`:\n    \n    .. code:: c\n    \n       int function(double *input_line, npy_intp input_length,\n                    double *output_line, npy_intp output_length,\n                    void *user_data)\n       int function(double *input_line, intptr_t input_length,\n                    double *output_line, intptr_t output_length,\n                    void *user_data)\n    \n    The calling function iterates over the lines of the input and output\n    arrays, calling the callback function at each line. The current line\n    is extended according to the border conditions set by the calling\n    function, and the result is copied into the array that is passed\n    through ``input_line``. The length of the input line (after extension)\n    is passed through ``input_length``. The callback function should apply\n    the filter and store the result in the array passed through\n    ``output_line``. The length of the output line is passed through\n    ``output_length``. ``user_data`` is the data pointer provided\n    to `scipy.LowLevelCallable` as-is.\n    \n    The callback function must return an integer error status that is zero\n    if something went wrong and one otherwise. If an error occurs, you should\n    normally set the python error status with an informative message\n    before returning, otherwise a default error message is set by the\n    calling function.\n    \n    In addition, some other low-level function pointer specifications\n    are accepted, but these are for backward compatibility only and should\n    not be used in new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "76d2f36c7c72fe8a2b2f7d4bbbd7829c7cf3376a0de736819448df81a6d74b49",
            "fields": [
                {
                    "id": "y_5y5yw8",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgm8oex_",
                    "encoding": "",
                    "name": "function",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to apply along given axis.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x8egq6pv",
                    "encoding": "",
                    "name": "filter_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the filter.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5b40ysn",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47_fn_fk",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3yz37av",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "od5ig_1u",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unv5mfmp",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tze8lllv",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "21pa613e",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxdcfokx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.generic_filter1d",
                    "defaultValue": "scipy.ndimage.generic_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b39ub8d8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0jo0rfb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ufybien4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u2d_7_6c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9fifsa09",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szfwmgpk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n76fxq6f",
            "name": "ndimage.generic_gradient_magnitude",
            "description": "Gradient magnitude using a provided gradient function.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    derivative : callable\n        Callable with the following signature::\n    \n            derivative(input, axis, output, mode, cval,\n                       *extra_arguments, **extra_keywords)\n    \n        See `extra_arguments`, `extra_keywords` below.\n        `derivative` can assume that `input` and `output` are ndarrays.\n        Note that the output from `derivative` is modified inplace;\n        be careful to copy important inputs before returning them.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If a `mode` tuple is\n        provided, its length must match the number of axes.\n    \n    Returns\n    -------\n    generic_gradient_magnitude : ndarray\n        Filtered array. Has the same shape as `input`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d1a0ea11005bb6daab37c55eed886d1eb6c0392cc674ef53faaf6ea3fc005f1",
            "fields": [
                {
                    "id": "bv4mibs8",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1997gf3b",
                    "encoding": "",
                    "name": "derivative",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callable with the following signature::\n\n    derivative(input, axis, output, mode, cval,\n               *extra_arguments, **extra_keywords)\n\nSee `extra_arguments`, `extra_keywords` below.\n`derivative` can assume that `input` and `output` are ndarrays.\nNote that the output from `derivative` is modified inplace;\nbe careful to copy important inputs before returning them.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "el4pn49l",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qxkx1ab",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6daaai5",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49t96vrb",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggslzp92",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x4r0hec9",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If a `mode` tuple is\nprovided, its length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1yj4oroc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.generic_gradient_magnitude",
                    "defaultValue": "scipy.ndimage.generic_gradient_magnitude",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6pinf3sb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5j3us70",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sbub_qjr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "30bhvtl2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mtr3t7pl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzb4hghr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wo5cpfr4",
            "name": "ndimage.generic_laplace",
            "description": "N-D Laplace filter using a provided second derivative function.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    derivative2 : callable\n        Callable with the following signature::\n    \n            derivative2(input, axis, output, mode, cval,\n                        *extra_arguments, **extra_keywords)\n    \n        See `extra_arguments`, `extra_keywords` below.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If a `mode` tuple is\n        provided, its length must match the number of axes.\n    \n    Returns\n    -------\n    generic_laplace : ndarray\n        Filtered array. Has the same shape as `input`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7f043f5046a831c4229a353ed6531b4bdb29d6ceff2760b9dbf59e5e4b8daf0c",
            "fields": [
                {
                    "id": "2gb7akxx",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_xhhu9j",
                    "encoding": "",
                    "name": "derivative2",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callable with the following signature::\n\n    derivative2(input, axis, output, mode, cval,\n                *extra_arguments, **extra_keywords)\n\nSee `extra_arguments`, `extra_keywords` below.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1h6d1j3v",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mcwetb1",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ejq9vpiz",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udxygd6h",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "duch0jil",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0_zj66r",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If a `mode` tuple is\nprovided, its length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sncmwhc7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.generic_laplace",
                    "defaultValue": "scipy.ndimage.generic_laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pr_i_zr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d84fosui",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "klg9ev6d",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nsjx8tco",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eim7l8fm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0evuy21",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8ybgihs4",
            "name": "ndimage.geometric_transform",
            "description": "Apply an arbitrary geometric transform.\n    \n    The given mapping function is used to find, for each point in the\n    output, the corresponding coordinates in the input. The value of the\n    input at those coordinates is determined by spline interpolation of\n    the requested order.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    mapping : {callable, scipy.LowLevelCallable}\n        A callable object that accepts a tuple of length equal to the output\n        array rank, and returns the corresponding input coordinates as a tuple\n        of length equal to the input array rank.\n    output_shape : tuple of ints, optional\n        Shape tuple.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    extra_arguments : tuple, optional\n        Extra arguments passed to `mapping`.\n    extra_keywords : dict, optional\n        Extra keywords passed to `mapping`.\n    \n    Returns\n    -------\n    output : ndarray\n        The filtered input.\n    \n    See Also\n    --------\n    map_coordinates, affine_transform, spline_filter1d\n    \n    \n    Notes\n    -----\n    This function also accepts low-level callback functions with one\n    the following signatures and wrapped in `scipy.LowLevelCallable`:\n    \n    .. code:: c\n    \n       int mapping(npy_intp *output_coordinates, double *input_coordinates,\n                   int output_rank, int input_rank, void *user_data)\n       int mapping(intptr_t *output_coordinates, double *input_coordinates,\n                   int output_rank, int input_rank, void *user_data)\n    \n    The calling function iterates over the elements of the output array,\n    calling the callback function at each element. The coordinates of the\n    current output element are passed through ``output_coordinates``. The\n    callback function must return the coordinates at which the input must\n    be interpolated in ``input_coordinates``. The rank of the input and\n    output arrays are given by ``input_rank`` and ``output_rank``\n    respectively. ``user_data`` is the data pointer provided\n    to `scipy.LowLevelCallable` as-is.\n    \n    The callback function must return an integer error status that is zero\n    if something went wrong and one otherwise. If an error occurs, you should\n    normally set the Python error status with an informative message\n    before returning, otherwise a default error message is set by the\n    calling function.\n    \n    In addition, some other low-level function pointer specifications\n    are accepted, but these are for backward compatibility only and should\n    not be used in new code.\n    \n    For complex-valued `input`, this function transforms the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.ndimage import geometric_transform\n    >>> a = np.arange(12.).reshape((4, 3))\n    >>> def shift_func(output_coords):\n    ...     return (output_coords[0] - 0.5, output_coords[1] - 0.5)\n    ...\n    >>> geometric_transform(a, shift_func)\n    array([[ 0.   ,  0.   ,  0.   ],\n           [ 0.   ,  1.362,  2.738],\n           [ 0.   ,  4.812,  6.187],\n           [ 0.   ,  8.263,  9.637]])\n    \n    >>> b = [1, 2, 3, 4, 5]\n    >>> def shift_func(output_coords):\n    ...     return (output_coords[0] - 3,)\n    ...\n    >>> geometric_transform(b, shift_func, mode='constant')\n    array([0, 0, 0, 1, 2])\n    >>> geometric_transform(b, shift_func, mode='nearest')\n    array([1, 1, 1, 1, 2])\n    >>> geometric_transform(b, shift_func, mode='reflect')\n    array([3, 2, 1, 1, 2])\n    >>> geometric_transform(b, shift_func, mode='wrap')\n    array([2, 3, 4, 1, 2])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "71a1e005b63cd8c94b2ab02ff5fa12ed6b90a6a19c6f8ae3c98839a132b54937",
            "fields": [
                {
                    "id": "ugx9my2u",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i53yk_fr",
                    "encoding": "",
                    "name": "mapping",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callable object that accepts a tuple of length equal to the output\narray rank, and returns the corresponding input coordinates as a tuple\nof length equal to the input array rank.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bit85grv",
                    "encoding": "",
                    "name": "output_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape tuple.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5v52ozlu",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8lowo28",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "koaznh72",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r3pbvoa_",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdwwexla",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aistu33i",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to `mapping`.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13oizpdw",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra keywords passed to `mapping`.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9kzalx0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.geometric_transform",
                    "defaultValue": "scipy.ndimage.geometric_transform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "da2v8oh0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2gemfgp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i4etg3px",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hd1uz1p1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e70kopt2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_89xt1hg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pqyzqn0e",
            "name": "ndimage.grey_closing",
            "description": "Multidimensional grayscale closing.\n    \n    A grayscale closing consists in the succession of a grayscale dilation,\n    and a grayscale erosion.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale closing is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        closing. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale closing.\n    structure : array of ints, optional\n        Structuring element used for the grayscale closing. `structure`\n        may be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the closing may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    grey_closing : ndarray\n        Result of the grayscale closing of `input` with `structure`.\n    \n    See Also\n    --------\n    binary_closing, grey_dilation, grey_erosion, grey_opening,\n    generate_binary_structure\n    \n    Notes\n    -----\n    The action of a grayscale closing with a flat structuring element amounts\n    to smoothen deep local minima, whereas binary closing fills small holes.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(36).reshape((6,6))\n    >>> a[3,3] = 0\n    >>> a\n    array([[ 0,  1,  2,  3,  4,  5],\n           [ 6,  7,  8,  9, 10, 11],\n           [12, 13, 14, 15, 16, 17],\n           [18, 19, 20,  0, 22, 23],\n           [24, 25, 26, 27, 28, 29],\n           [30, 31, 32, 33, 34, 35]])\n    >>> ndimage.grey_closing(a, size=(3,3))\n    array([[ 7,  7,  8,  9, 10, 11],\n           [ 7,  7,  8,  9, 10, 11],\n           [13, 13, 14, 15, 16, 17],\n           [19, 19, 20, 20, 22, 23],\n           [25, 25, 26, 27, 28, 29],\n           [31, 31, 32, 33, 34, 35]])\n    >>> # Note that the local minimum a[3,3] has disappeared",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a3193af67ed16551b4bade90395b1c1726d5f35948795620dceb26f1ac0b0b3f",
            "fields": [
                {
                    "id": "qgyvacly",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale closing is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z54ryhq8",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\nclosing. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tys3v0ia",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale closing.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmaf7lq5",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale closing. `structure`\nmay be a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1cbdp9g",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the closing may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqgu30cd",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ttwdizwj",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve8gu0tq",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3cz6ngkh",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0umtgyjt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.grey_closing",
                    "defaultValue": "scipy.ndimage.grey_closing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "87e4agh9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4ygn65f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h2gc9j6b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_641yb3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wc7y1ytg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zyqzs1et",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ci0ywylq",
            "name": "ndimage.grey_dilation",
            "description": "Calculate a greyscale dilation, using either a structuring element,\n    or a footprint corresponding to a flat structuring element.\n    \n    Grayscale dilation is a mathematical morphology operation. For the\n    simple case of a full and flat structuring element, it can be viewed\n    as a maximum filter over a sliding window.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale dilation is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        dilation. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale dilation. Non-zero values give the set of\n        neighbors of the center over which the maximum is chosen.\n    structure : array of ints, optional\n        Structuring element used for the grayscale dilation. `structure`\n        may be a non-flat structuring element. The `structure` array applies an\n        additive offset for each pixel in the neighborhood.\n    output : array, optional\n        An array used for storing the output of the dilation may be provided.\n    mode : {'reflect','constant','nearest','mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    grey_dilation : ndarray\n        Grayscale dilation of `input`.\n    \n    See Also\n    --------\n    binary_dilation, grey_erosion, grey_closing, grey_opening\n    generate_binary_structure, maximum_filter\n    \n    Notes\n    -----\n    The grayscale dilation of an image input by a structuring element s defined\n    over a domain E is given by:\n    \n    (input+s)(x) = max {input(y) + s(x-y), for y in E}\n    \n    In particular, for structuring elements defined as\n    s(y) = 0 for y in E, the grayscale dilation computes the maximum of the\n    input image inside a sliding window defined by E.\n    \n    Grayscale dilation [1]_ is a *mathematical morphology* operation [2]_.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Dilation_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[2:5, 2:5] = 1\n    >>> a[4,4] = 2; a[2,3] = 3\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 3, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_dilation(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_dilation(a, footprint=np.ones((3,3)))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> s = ndimage.generate_binary_structure(2,1)\n    >>> s\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> ndimage.grey_dilation(a, footprint=s)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 3, 1, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 1, 3, 2, 1, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 1, 1, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_dilation(a, size=(3,3), structure=np.ones((3,3)))\n    array([[1, 1, 1, 1, 1, 1, 1],\n           [1, 2, 4, 4, 4, 2, 1],\n           [1, 2, 4, 4, 4, 2, 1],\n           [1, 2, 4, 4, 4, 3, 1],\n           [1, 2, 2, 3, 3, 3, 1],\n           [1, 2, 2, 3, 3, 3, 1],\n           [1, 1, 1, 1, 1, 1, 1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b2d8fbe8d064ca5174cc70736b40f722befc375931063aed392fa5d2e824d3a1",
            "fields": [
                {
                    "id": "i05x3wdm",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale dilation is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8snor1q",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\ndilation. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "91us7vn6",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale dilation. Non-zero values give the set of\nneighbors of the center over which the maximum is chosen.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uhip2yux",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale dilation. `structure`\nmay be a non-flat structuring element. The `structure` array applies an\nadditive offset for each pixel in the neighborhood.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k5asnp10",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the dilation may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3cgrc6t",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hwys33vg",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1y299jn",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sjhkmnuf",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o46yg8fh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.grey_dilation",
                    "defaultValue": "scipy.ndimage.grey_dilation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xp6kzcnh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wtt3ni3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "snexd1x6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p5bp8h9l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xhfsfyao",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wx47xs9a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8y4ugdt_",
            "name": "ndimage.grey_erosion",
            "description": "Calculate a greyscale erosion, using either a structuring element,\n    or a footprint corresponding to a flat structuring element.\n    \n    Grayscale erosion is a mathematical morphology operation. For the\n    simple case of a full and flat structuring element, it can be viewed\n    as a minimum filter over a sliding window.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale erosion is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        erosion. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale erosion. Non-zero values give the set of\n        neighbors of the center over which the minimum is chosen.\n    structure : array of ints, optional\n        Structuring element used for the grayscale erosion. `structure`\n        may be a non-flat structuring element. The `structure` array applies a\n        subtractive offset for each pixel in the neighborhood.\n    output : array, optional\n        An array used for storing the output of the erosion may be provided.\n    mode : {'reflect','constant','nearest','mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    output : ndarray\n        Grayscale erosion of `input`.\n    \n    See Also\n    --------\n    binary_erosion, grey_dilation, grey_opening, grey_closing\n    generate_binary_structure, minimum_filter\n    \n    Notes\n    -----\n    The grayscale erosion of an image input by a structuring element s defined\n    over a domain E is given by:\n    \n    (input+s)(x) = min {input(y) - s(x-y), for y in E}\n    \n    In particular, for structuring elements defined as\n    s(y) = 0 for y in E, the grayscale erosion computes the minimum of the\n    input image inside a sliding window defined by E.\n    \n    Grayscale erosion [1]_ is a *mathematical morphology* operation [2]_.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Erosion_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1:6, 1:6] = 3\n    >>> a[4,4] = 2; a[2,3] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 3, 3, 3, 3, 3, 0],\n           [0, 3, 3, 1, 3, 3, 0],\n           [0, 3, 3, 3, 3, 3, 0],\n           [0, 3, 3, 3, 2, 3, 0],\n           [0, 3, 3, 3, 3, 3, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_erosion(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 3, 2, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> footprint = ndimage.generate_binary_structure(2, 1)\n    >>> footprint\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> # Diagonally-connected elements are not considered neighbors\n    >>> ndimage.grey_erosion(a, footprint=footprint)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 3, 1, 2, 0, 0],\n           [0, 0, 3, 2, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "608a1662e1637dca5e9f60ba7773b7966c5f857837fc4000e6d42852e4575f7b",
            "fields": [
                {
                    "id": "pvb83k74",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale erosion is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d1qi5cwo",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\nerosion. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xns9v9l9",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale erosion. Non-zero values give the set of\nneighbors of the center over which the minimum is chosen.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1591j3c2",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale erosion. `structure`\nmay be a non-flat structuring element. The `structure` array applies a\nsubtractive offset for each pixel in the neighborhood.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k6gx1h0w",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the erosion may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ujfdzxe",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e34atj02",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lprnk1cl",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svf4gool",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bgiznh3f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.grey_erosion",
                    "defaultValue": "scipy.ndimage.grey_erosion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o4y2qlry",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ifynrxfj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xpgb8060",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "irt0yp8v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0jagkau",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_e3dqdzd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4csbkm1l",
            "name": "ndimage.grey_opening",
            "description": "Multidimensional grayscale opening.\n    \n    A grayscale opening consists in the succession of a grayscale erosion,\n    and a grayscale dilation.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale opening is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        opening. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale opening.\n    structure : array of ints, optional\n        Structuring element used for the grayscale opening. `structure`\n        may be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion).\n    output : array, optional\n        An array used for storing the output of the opening may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    grey_opening : ndarray\n        Result of the grayscale opening of `input` with `structure`.\n    \n    See Also\n    --------\n    binary_opening, grey_dilation, grey_erosion, grey_closing\n    generate_binary_structure\n    \n    Notes\n    -----\n    The action of a grayscale opening with a flat structuring element amounts\n    to smoothen high local maxima, whereas binary opening erases small objects.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(36).reshape((6,6))\n    >>> a[3, 3] = 50\n    >>> a\n    array([[ 0,  1,  2,  3,  4,  5],\n           [ 6,  7,  8,  9, 10, 11],\n           [12, 13, 14, 15, 16, 17],\n           [18, 19, 20, 50, 22, 23],\n           [24, 25, 26, 27, 28, 29],\n           [30, 31, 32, 33, 34, 35]])\n    >>> ndimage.grey_opening(a, size=(3,3))\n    array([[ 0,  1,  2,  3,  4,  4],\n           [ 6,  7,  8,  9, 10, 10],\n           [12, 13, 14, 15, 16, 16],\n           [18, 19, 20, 22, 22, 22],\n           [24, 25, 26, 27, 28, 28],\n           [24, 25, 26, 27, 28, 28]])\n    >>> # Note that the local maximum a[3,3] has disappeared",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ec5b90c968bee1bd17693495e444dd330d55f46ce4c4def599f7cc98ad152fcb",
            "fields": [
                {
                    "id": "gkig58lv",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale opening is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3rw8869",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\nopening. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jg_o5ijv",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale opening.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_0dygea4",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale opening. `structure`\nmay be a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion).",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqkg80yj",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the opening may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90qjni71",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nzltgfse",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ykw6r6u",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pe7jjgpa",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98qvo5zr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.grey_opening",
                    "defaultValue": "scipy.ndimage.grey_opening",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wjuzllf2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suaf1fmo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bhy49g00",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbdnzjzc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfo0tw2x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qz0ob9ti",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1g8wz0pn",
            "name": "ndimage.histogram",
            "description": "Calculate the histogram of the values of an array, optionally at labels.\n    \n    Histogram calculates the frequency of values in an array within bins\n    determined by `min`, `max`, and `bins`. The `labels` and `index`\n    keywords can limit the scope of the histogram to specified sub-regions\n    within the array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Data for which to calculate histogram.\n    min, max : int\n        Minimum and maximum values of range of histogram bins.\n    bins : int\n        Number of bins.\n    labels : array_like, optional\n        Labels for objects in `input`.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        Label or labels for which to calculate histogram. If None, all values\n        where label is greater than zero are used\n    \n    Returns\n    -------\n    hist : ndarray\n        Histogram counts.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[ 0.    ,  0.2146,  0.5962,  0.    ],\n    ...               [ 0.    ,  0.7778,  0.    ,  0.    ],\n    ...               [ 0.    ,  0.    ,  0.    ,  0.    ],\n    ...               [ 0.    ,  0.    ,  0.7181,  0.2787],\n    ...               [ 0.    ,  0.    ,  0.6573,  0.3094]])\n    >>> from scipy import ndimage\n    >>> ndimage.histogram(a, 0, 1, 10)\n    array([13,  0,  2,  1,  0,  1,  1,  2,  0,  0])\n    \n    With labels and no indices, non-zero elements are counted:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.histogram(a, 0, 1, 10, lbl)\n    array([0, 0, 2, 1, 0, 1, 1, 2, 0, 0])\n    \n    Indices can be used to count only certain objects:\n    \n    >>> ndimage.histogram(a, 0, 1, 10, lbl, 2)\n    array([0, 0, 1, 1, 0, 0, 1, 1, 0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "466bf717e5517578799b1484c25c5ef9eaa5b67ae8a802512b47e5949af0a711",
            "fields": [
                {
                    "id": "i8ve82jd",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data for which to calculate histogram.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ddym6efs",
                    "encoding": "",
                    "name": "min",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibcvz3df",
                    "encoding": "",
                    "name": "max",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3fm4p12i",
                    "encoding": "",
                    "name": "bins",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of bins.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80_k2225",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels for objects in `input`.\nIf not None, must be same shape as `input`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zny0rk6",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Label or labels for which to calculate histogram. If None, all values\nwhere label is greater than zero are used",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "byap4x__",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.histogram",
                    "defaultValue": "scipy.ndimage.histogram",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k3i_pcme",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vfp_utua",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "391r5ppu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jq_dmkc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "24t2oxh4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reu54io4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "llfu027p",
            "name": "ndimage.iterate_structure",
            "description": "Iterate a structure by dilating it with itself.\n    \n    Parameters\n    ----------\n    structure : array_like\n       Structuring element (an array of bools, for example), to be dilated with\n       itself.\n    iterations : int\n       number of dilations performed on the structure with itself\n    origin : optional\n        If origin is None, only the iterated structure is returned. If\n        not, a tuple of the iterated structure and the modified origin is\n        returned.\n    \n    Returns\n    -------\n    iterate_structure : ndarray of bools\n        A new structuring element obtained by dilating `structure`\n        (`iterations` - 1) times with itself.\n    \n    See Also\n    --------\n    generate_binary_structure\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> struct = ndimage.generate_binary_structure(2, 1)\n    >>> struct.astype(int)\n    array([[0, 1, 0],\n           [1, 1, 1],\n           [0, 1, 0]])\n    >>> ndimage.iterate_structure(struct, 2).astype(int)\n    array([[0, 0, 1, 0, 0],\n           [0, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1],\n           [0, 1, 1, 1, 0],\n           [0, 0, 1, 0, 0]])\n    >>> ndimage.iterate_structure(struct, 3).astype(int)\n    array([[0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1, 1, 1],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fbda2d11d74ee3f190d821946beaefde5268bbb3f4e89200bb60b9b7be9df128",
            "fields": [
                {
                    "id": "l30irbx1",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element (an array of bools, for example), to be dilated with\nitself.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "43gk0hiv",
                    "encoding": "",
                    "name": "iterations",
                    "value": "",
                    "defaultValue": "",
                    "description": "number of dilations performed on the structure with itself",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swxrzv5d",
                    "encoding": "",
                    "name": "origin",
                    "value": "",
                    "defaultValue": "",
                    "description": "If origin is None, only the iterated structure is returned. If\nnot, a tuple of the iterated structure and the modified origin is\nreturned.",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t8juxoto",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.iterate_structure",
                    "defaultValue": "scipy.ndimage.iterate_structure",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fa40krco",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x09x8xze",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "80qst1hh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3r_l27z7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "laywtvhm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccdn7moi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hc0dht10",
            "name": "ndimage.label",
            "description": "Label features in an array.\n    \n    Parameters\n    ----------\n    input : array_like\n        An array-like object to be labeled. Any non-zero values in `input` are\n        counted as features and zero values are considered the background.\n    structure : array_like, optional\n        A structuring element that defines feature connections.\n        `structure` must be centrosymmetric\n        (see Notes).\n        If no structuring element is provided,\n        one is automatically generated with a squared connectivity equal to\n        one.  That is, for a 2-D `input` array, the default structuring element\n        is::\n    \n            [[0,1,0],\n             [1,1,1],\n             [0,1,0]]\n    \n    output : (None, data-type, array_like), optional\n        If `output` is a data type, it specifies the type of the resulting\n        labeled feature array.\n        If `output` is an array-like object, then `output` will be updated\n        with the labeled features from this function.  This function can\n        operate in-place, by passing output=input.\n        Note that the output must be able to store the largest label, or this\n        function will raise an Exception.\n    \n    Returns\n    -------\n    label : ndarray or int\n        An integer ndarray where each unique feature in `input` has a unique\n        label in the returned array.\n    num_features : int\n        How many objects were found.\n    \n        If `output` is None, this function returns a tuple of\n        (`labeled_array`, `num_features`).\n    \n        If `output` is a ndarray, then it will be updated with values in\n        `labeled_array` and only `num_features` will be returned by this\n        function.\n    \n    See Also\n    --------\n    find_objects : generate a list of slices for the labeled features (or\n                   objects); useful for finding features' position or\n                   dimensions\n    \n    Notes\n    -----\n    A centrosymmetric matrix is a matrix that is symmetric about the center.\n    See [1]_ for more information.\n    \n    The `structure` matrix must be centrosymmetric to ensure\n    two-way connections.\n    For instance, if the `structure` matrix is not centrosymmetric\n    and is defined as::\n    \n        [[0,1,0],\n         [1,1,0],\n         [0,0,0]]\n    \n    and the `input` is::\n    \n        [[1,2],\n         [0,3]]\n    \n    then the structure matrix would indicate the\n    entry 2 in the input is connected to 1,\n    but 1 is not connected to 2.\n    \n    References\n    ----------\n    .. [1] James R. Weaver, \"Centrosymmetric (cross-symmetric)\n       matrices, their basic properties, eigenvalues, and\n       eigenvectors.\" The American Mathematical Monthly 92.10\n       (1985): 711-717.\n    \n    Examples\n    --------\n    Create an image with some features, then label it using the default\n    (cross-shaped) structuring element:\n    \n    >>> from scipy.ndimage import label, generate_binary_structure\n    >>> import numpy as np\n    >>> a = np.array([[0,0,1,1,0,0],\n    ...               [0,0,0,1,0,0],\n    ...               [1,1,0,0,1,0],\n    ...               [0,0,0,1,0,0]])\n    >>> labeled_array, num_features = label(a)\n    \n    Each of the 4 features are labeled with a different integer:\n    \n    >>> num_features\n    4\n    >>> labeled_array\n    array([[0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [2, 2, 0, 0, 3, 0],\n           [0, 0, 0, 4, 0, 0]], dtype=int32)\n    \n    Generate a structuring element that will consider features connected even\n    if they touch diagonally:\n    \n    >>> s = generate_binary_structure(2,2)\n    \n    or,\n    \n    >>> s = [[1,1,1],\n    ...      [1,1,1],\n    ...      [1,1,1]]\n    \n    Label the image using the new structuring element:\n    \n    >>> labeled_array, num_features = label(a, structure=s)\n    \n    Show the 2 labeled features (note that features 1, 3, and 4 from above are\n    now considered a single feature):\n    \n    >>> num_features\n    2\n    >>> labeled_array\n    array([[0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [2, 2, 0, 0, 1, 0],\n           [0, 0, 0, 1, 0, 0]], dtype=int32)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "157ae451d327c7c7166884a35007aab3b7fcb78a389bdab42cbe8b3ca540372c",
            "fields": [
                {
                    "id": "l212q4dz",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array-like object to be labeled. Any non-zero values in `input` are\ncounted as features and zero values are considered the background.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qqqh5lf8",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "A structuring element that defines feature connections.\n`structure` must be centrosymmetric\n(see Notes).\nIf no structuring element is provided,\none is automatically generated with a squared connectivity equal to\none.  That is, for a 2-D `input` array, the default structuring element\nis::\n\n    [[0,1,0],\n     [1,1,1],\n     [0,1,0]]",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zajtod3m",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `output` is a data type, it specifies the type of the resulting\nlabeled feature array.\nIf `output` is an array-like object, then `output` will be updated\nwith the labeled features from this function.  This function can\noperate in-place, by passing output=input.\nNote that the output must be able to store the largest label, or this\nfunction will raise an Exception.",
                    "type": "(None, data-type, arraylike)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0wwx36f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.label",
                    "defaultValue": "scipy.ndimage.label",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ik_pu_p1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0eguqmk_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vmqmtnyd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "exvqbayl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "izzmxx0o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5d4mna1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "w2s0lgqj",
            "name": "ndimage.labeled_comprehension",
            "description": "Roughly equivalent to [func(input[labels == i]) for i in index].\n    \n    Sequentially applies an arbitrary function (that works on array_like input)\n    to subsets of an N-D image array specified by `labels` and `index`.\n    The option exists to provide the function with positional parameters as the\n    second argument.\n    \n    Parameters\n    ----------\n    input : array_like\n        Data from which to select `labels` to process.\n    labels : array_like or None\n        Labels to objects in `input`.\n        If not None, array must be same shape as `input`.\n        If None, `func` is applied to raveled `input`.\n    index : int, sequence of ints or None\n        Subset of `labels` to which to apply `func`.\n        If a scalar, a single value is returned.\n        If None, `func` is applied to all non-zero values of `labels`.\n    func : callable\n        Python function to apply to `labels` from `input`.\n    out_dtype : dtype\n        Dtype to use for `result`.\n    default : int, float or None\n        Default return value when a element of `index` does not exist\n        in `labels`.\n    pass_positions : bool, optional\n        If True, pass linear indices to `func` as a second argument.\n        Default is False.\n    \n    Returns\n    -------\n    result : ndarray\n        Result of applying `func` to each of `labels` to `input` in `index`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> lbl, nlbl = ndimage.label(a)\n    >>> lbls = np.arange(1, nlbl+1)\n    >>> ndimage.labeled_comprehension(a, lbl, lbls, np.mean, float, 0)\n    array([ 2.75,  5.5 ,  6.  ])\n    \n    Falling back to `default`:\n    \n    >>> lbls = np.arange(1, nlbl+2)\n    >>> ndimage.labeled_comprehension(a, lbl, lbls, np.mean, float, -1)\n    array([ 2.75,  5.5 ,  6.  , -1.  ])\n    \n    Passing positions:\n    \n    >>> def fn(val, pos):\n    ...     print(\"fn says: %s : %s\" % (val, pos))\n    ...     return (val.sum()) if (pos.sum() % 2 == 0) else (-val.sum())\n    ...\n    >>> ndimage.labeled_comprehension(a, lbl, lbls, fn, float, 0, True)\n    fn says: [1 2 5 3] : [0 1 4 5]\n    fn says: [4 7] : [ 7 11]\n    fn says: [9 3] : [12 13]\n    array([ 11.,  11., -12.,   0.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "27cd3f9cb9a8c06910a3bb2d802446f267e6a82d21f4682deb9b7bc976fa1332",
            "fields": [
                {
                    "id": "5p_2lse4",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data from which to select `labels` to process.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "youuoo1z",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels to objects in `input`.\nIf not None, array must be same shape as `input`.\nIf None, `func` is applied to raveled `input`.",
                    "type": "arraylike or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2k6hgdl",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Subset of `labels` to which to apply `func`.\nIf a scalar, a single value is returned.\nIf None, `func` is applied to all non-zero values of `labels`.",
                    "type": "int, sequence of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3q8e_5ou",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function to apply to `labels` from `input`.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3ka1k3e",
                    "encoding": "",
                    "name": "out_dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Dtype to use for `result`.",
                    "type": "dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0lhv_m7l",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default return value when a element of `index` does not exist\nin `labels`.",
                    "type": "int, float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o94keoy7",
                    "encoding": "",
                    "name": "pass_positions",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, pass linear indices to `func` as a second argument.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlf5arbf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.labeled_comprehension",
                    "defaultValue": "scipy.ndimage.labeled_comprehension",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bk7o_t5p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u4b14jhl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zd5fi8ry",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2szvykp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ry_1w31t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gscnbitx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "k82gyjlp",
            "name": "ndimage.laplace",
            "description": "N-D Laplace filter based on approximate second derivatives.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If a `mode` tuple is\n        provided, its length must match the number of axes.\n    \n    Returns\n    -------\n    laplace : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.laplace(ascent)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d297db8b9bdae2bd6f046cbda85d15b3027c4f239b9820e56d24036599e4363f",
            "fields": [
                {
                    "id": "ytoe3fwd",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "velrinc7",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9evw471",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jpagxnkm",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0zledlb",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If a `mode` tuple is\nprovided, its length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "afe4xcib",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.laplace",
                    "defaultValue": "scipy.ndimage.laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mlkbauc8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rafh6pti",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "klrfv2oq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6iqwlre3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2b99o1m4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c6xdjvg3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jzorqtbs",
            "name": "ndimage.map_coordinates",
            "description": "Map the input array to new coordinates by interpolation.\n    \n    The array of coordinates is used to find, for each point in the output,\n    the corresponding coordinates in the input. The value of the input at\n    those coordinates is determined by spline interpolation of the\n    requested order.\n    \n    The shape of the output is derived from that of the coordinate\n    array by dropping the first axis. The values of the array along\n    the first axis are the coordinates in the input array at which the\n    output value is found.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    coordinates : array_like\n        The coordinates at which `input` is evaluated.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    map_coordinates : ndarray\n        The result of transforming the input. The shape of the output is\n        derived from that of `coordinates` by dropping the first axis.\n    \n    See Also\n    --------\n    spline_filter, geometric_transform, scipy.interpolate\n    \n    Notes\n    -----\n    For complex-valued `input`, this function maps the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(12.).reshape((4, 3))\n    >>> a\n    array([[  0.,   1.,   2.],\n           [  3.,   4.,   5.],\n           [  6.,   7.,   8.],\n           [  9.,  10.,  11.]])\n    >>> ndimage.map_coordinates(a, [[0.5, 2], [0.5, 1]], order=1)\n    array([ 2.,  7.])\n    \n    Above, the interpolated value of a[0.5, 0.5] gives output[0], while\n    a[2, 1] is output[1].\n    \n    >>> inds = np.array([[0.5, 2], [0.5, 4]])\n    >>> ndimage.map_coordinates(a, inds, order=1, cval=-33.3)\n    array([  2. , -33.3])\n    >>> ndimage.map_coordinates(a, inds, order=1, mode='nearest')\n    array([ 2.,  8.])\n    >>> ndimage.map_coordinates(a, inds, order=1, cval=0, output=bool)\n    array([ True, False], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "05ce1f22c445fc78fb7ef3d95a6417825d10e4f1f65c613931d69d41eca482f6",
            "fields": [
                {
                    "id": "8wrdcuqv",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5e3pbn6",
                    "encoding": "",
                    "name": "coordinates",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinates at which `input` is evaluated.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ys66k_b4",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdmry66y",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "69qdx0xf",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pa26y8v",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kck5ftb9",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyd28qbm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.map_coordinates",
                    "defaultValue": "scipy.ndimage.map_coordinates",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8cshebc1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "71fnolip",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "baxfazd1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25tjr5hl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u4bwbhy4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_d7n8zae",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "k4ng6w90",
            "name": "ndimage.maximum",
            "description": "Calculate the maximum of the values of an array over labeled regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values. For each region specified by `labels`, the\n        maximal values of `input` over the region is computed.\n    labels : array_like, optional\n        An array of integers marking different regions over which the\n        maximum value of `input` is to be computed. `labels` must have the\n        same shape as `input`. If `labels` is not specified, the maximum\n        over the whole array is returned.\n    index : array_like, optional\n        A list of region labels that are taken into account for computing the\n        maxima. If index is None, the maximum over all elements where `labels`\n        is non-zero is returned.\n    \n    Returns\n    -------\n    output : a scalar or list of integers or floats based on input type.\n        List of maxima of `input` over the regions determined by `labels` and\n        whose index is in `index`. If `index` or `labels` are not specified, a\n        float is returned: the maximal value of `input` if `labels` is None,\n        and the maximal value of elements where `labels` is greater than zero\n        if `index` is None.\n    \n    See Also\n    --------\n    label, minimum, median, maximum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Notes\n    -----\n    The function returns a Python list and not a NumPy array, use\n    `np.array` to convert the list to an array.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.arange(16).reshape((4,4))\n    >>> a\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n    >>> labels = np.zeros_like(a)\n    >>> labels[:2,:2] = 1\n    >>> labels[2:, 1:3] = 2\n    >>> labels\n    array([[1, 1, 0, 0],\n           [1, 1, 0, 0],\n           [0, 2, 2, 0],\n           [0, 2, 2, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.maximum(a)\n    15\n    >>> ndimage.maximum(a, labels=labels, index=[1,2])\n    [5, 14]\n    >>> ndimage.maximum(a, labels=labels)\n    14\n    \n    >>> b = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> labels, labels_nb = ndimage.label(b)\n    >>> labels\n    array([[1, 1, 0, 0],\n           [1, 1, 0, 2],\n           [0, 0, 0, 2],\n           [3, 3, 0, 0]], dtype=int32)\n    >>> ndimage.maximum(b, labels=labels, index=np.arange(1, labels_nb + 1))\n    [5, 7, 9]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f7a72caf7209247f96e611445983a184ba5a4018e2ed25dab3198572dd62f68d",
            "fields": [
                {
                    "id": "d5y8vh6k",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values. For each region specified by `labels`, the\nmaximal values of `input` over the region is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m2smnwo",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of integers marking different regions over which the\nmaximum value of `input` is to be computed. `labels` must have the\nsame shape as `input`. If `labels` is not specified, the maximum\nover the whole array is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5qg0kxiw",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for computing the\nmaxima. If index is None, the maximum over all elements where `labels`\nis non-zero is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8nqvznj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.maximum",
                    "defaultValue": "scipy.ndimage.maximum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aq_u0uqi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zydyf6y5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r9_fodga",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n94827df",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0pqkbxou",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cudt_soq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "eav_34y2",
            "name": "ndimage.maximum_filter",
            "description": "Calculate a multidimensional maximum filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    maximum_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    A sequence of modes (one per axis) is only supported when the footprint is\n    separable. Otherwise, a single mode string must be provided.\n    \n    The behavior of this function with NaN elements is undefined. To control\n    behavior in the presence of NaNs, consider using `vectorized_filter`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.maximum_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9f0cd68cd4752da4715f1dcbe7e4b790784a443054fa840a38f87430f4656b68",
            "fields": [
                {
                    "id": "3qcdnmtf",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eumae8i9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "it_errkz",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qusgdus2",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0t8q2ic",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9lwnpkl",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5qvkvrx",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yecd004b",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bg2neog7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.maximum_filter",
                    "defaultValue": "scipy.ndimage.maximum_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i5rbh7zd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "seoyvw8n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jkfqusbo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h86yz1pl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qf_fasru",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "045ykpov",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tpk_ndcw",
            "name": "ndimage.maximum_filter1d",
            "description": "Calculate a 1-D maximum filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    maximum filter of given size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int\n        Length along which to calculate the 1-D maximum.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    maximum1d : ndarray, None\n        Maximum-filtered array with same shape as input.\n        None if `output` is not None\n    \n    Notes\n    -----\n    This function implements the MAXLIST algorithm [1]_, as described by\n    Richard Harter [2]_, and has a guaranteed O(n) performance, `n` being\n    the `input` length, regardless of filter size.\n    \n    References\n    ----------\n    .. [1] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.2777\n    .. [2] http://www.richardhartersworld.com/cri/2001/slidingmin.html\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import maximum_filter1d\n    >>> maximum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)\n    array([8, 8, 8, 4, 9, 9, 9, 9])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5ba9ff3e89d16384d5a005a49c0be14e8f2c1a10b7e8cd44b9603a1745a88e67",
            "fields": [
                {
                    "id": "jypctbg7",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7mr26vez",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length along which to calculate the 1-D maximum.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r6b2zobu",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ec6a7xm",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0fwcexn",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b9rp8bq5",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m6o1xe7r",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yu53xxif",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.maximum_filter1d",
                    "defaultValue": "scipy.ndimage.maximum_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pmdinc8i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ava1q_aq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d1zscnzl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9c1ibsk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "taliqspj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nfbnkbt2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lv5025fo",
            "name": "ndimage.maximum_position",
            "description": "Find the positions of the maximums of the values of an array at labels.\n    \n    For each region specified by `labels`, the position of the maximum\n    value of `input` within the region is returned.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values.\n    labels : array_like, optional\n        An array of integers marking different regions over which the\n        position of the maximum value of `input` is to be computed.\n        `labels` must have the same shape as `input`. If `labels` is not\n        specified, the location of the first maximum over the whole\n        array is returned.\n    \n        The `labels` argument only works when `index` is specified.\n    index : array_like, optional\n        A list of region labels that are taken into account for finding the\n        location of the maxima. If `index` is None, the first maximum\n        over all elements where `labels` is non-zero is returned.\n    \n        The `index` argument only works when `labels` is specified.\n    \n    Returns\n    -------\n    output : list of tuples of ints\n        List of tuples of ints that specify the location of maxima of\n        `input` over the regions determined by `labels` and whose index\n        is in `index`.\n    \n        If `index` or `labels` are not specified, a tuple of ints is\n        returned specifying the location of the ``first`` maximal value\n        of `input`.\n    \n    See Also\n    --------\n    label, minimum, median, maximum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> ndimage.maximum_position(a)\n    (3, 0)\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl = np.array([[0, 1, 2, 3],\n    ...                 [0, 1, 2, 3],\n    ...                 [0, 1, 2, 3],\n    ...                 [0, 1, 2, 3]])\n    >>> ndimage.maximum_position(a, lbl, 1)\n    (1, 1)\n    \n    If no index is given, non-zero `labels` are processed:\n    \n    >>> ndimage.maximum_position(a, lbl)\n    (2, 3)\n    \n    If there are no maxima, the position of the first element is returned:\n    \n    >>> ndimage.maximum_position(a, lbl, 2)\n    (0, 2)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c7cf2a2ab9ad4048c8d9dc1bc81fbef8228bd70550fee0f766781bf165c0dff4",
            "fields": [
                {
                    "id": "0w7umu3z",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4y4_hhdp",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of integers marking different regions over which the\nposition of the maximum value of `input` is to be computed.\n`labels` must have the same shape as `input`. If `labels` is not\nspecified, the location of the first maximum over the whole\narray is returned.\n\nThe `labels` argument only works when `index` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c0jqqzrc",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for finding the\nlocation of the maxima. If `index` is None, the first maximum\nover all elements where `labels` is non-zero is returned.\n\nThe `index` argument only works when `labels` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mj1bz9m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.maximum_position",
                    "defaultValue": "scipy.ndimage.maximum_position",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fr3t_une",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5rsg8om",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2r58zlnr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0xs1c11m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "do10n783",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0qs3ixj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0t7hv1zf",
            "name": "ndimage.mean",
            "description": "Calculate the mean of the values of an array at labels.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array on which to compute the mean of elements over distinct\n        regions.\n    labels : array_like, optional\n        Array of labels of same shape, or broadcastable to the same shape as\n        `input`. All elements sharing the same label form one region over\n        which the mean of the elements is computed.\n    index : int or sequence of ints, optional\n        Labels of the objects over which the mean is to be computed.\n        Default is None, in which case the mean for all values where label is\n        greater than 0 is calculated.\n    \n    Returns\n    -------\n    out : list\n        Sequence of same length as `index`, with the mean of the different\n        regions labeled by the labels in `index`.\n    \n    See Also\n    --------\n    variance, standard_deviation, minimum, maximum, sum, label\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(25).reshape((5,5))\n    >>> labels = np.zeros_like(a)\n    >>> labels[3:5,3:5] = 1\n    >>> index = np.unique(labels)\n    >>> labels\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 1],\n           [0, 0, 0, 1, 1]])\n    >>> index\n    array([0, 1])\n    >>> ndimage.mean(a, labels=labels, index=index)\n    [10.285714285714286, 21.0]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b80fb28c2ca4c3c15d52f04b68337c6d25cf32ddd7f6a716aabf6bc0c0ba5f39",
            "fields": [
                {
                    "id": "l1sosu2l",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array on which to compute the mean of elements over distinct\nregions.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l7fnl30y",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of labels of same shape, or broadcastable to the same shape as\n`input`. All elements sharing the same label form one region over\nwhich the mean of the elements is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7w21a8ww",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels of the objects over which the mean is to be computed.\nDefault is None, in which case the mean for all values where label is\ngreater than 0 is calculated.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ftyaxkg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.mean",
                    "defaultValue": "scipy.ndimage.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvb9qhmb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jbmjfxse",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pfquxbp7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ij0kyuvz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6h4qisoh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vux94ppc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ixyp5jy7",
            "name": "ndimage.median",
            "description": "Calculate the median of the values of an array over labeled regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values. For each region specified by `labels`, the\n        median value of `input` over the region is computed.\n    labels : array_like, optional\n        An array_like of integers marking different regions over which the\n        median value of `input` is to be computed. `labels` must have the\n        same shape as `input`. If `labels` is not specified, the median\n        over the whole array is returned.\n    index : array_like, optional\n        A list of region labels that are taken into account for computing the\n        medians. If index is None, the median over all elements where `labels`\n        is non-zero is returned.\n    \n    Returns\n    -------\n    median : float or list of floats\n        List of medians of `input` over the regions determined by `labels` and\n        whose index is in `index`. If `index` or `labels` are not specified, a\n        float is returned: the median value of `input` if `labels` is None,\n        and the median value of elements where `labels` is greater than zero\n        if `index` is None.\n    \n    See Also\n    --------\n    label, minimum, maximum, extrema, sum, mean, variance, standard_deviation\n    \n    Notes\n    -----\n    The function returns a Python list and not a NumPy array, use\n    `np.array` to convert the list to an array.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 1],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> labels, labels_nb = ndimage.label(a)\n    >>> labels\n    array([[1, 1, 0, 2],\n           [1, 1, 0, 2],\n           [0, 0, 0, 2],\n           [3, 3, 0, 0]], dtype=int32)\n    >>> ndimage.median(a, labels=labels, index=np.arange(1, labels_nb + 1))\n    [2.5, 4.0, 6.0]\n    >>> ndimage.median(a)\n    1.0\n    >>> ndimage.median(a, labels=labels)\n    3.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "193711a2eaa7d1017d59d030ee2d713b55ed83f6ea5c08d086f561a02e165cf3",
            "fields": [
                {
                    "id": "uk_oqlwj",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values. For each region specified by `labels`, the\nmedian value of `input` over the region is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dwieai88",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array_like of integers marking different regions over which the\nmedian value of `input` is to be computed. `labels` must have the\nsame shape as `input`. If `labels` is not specified, the median\nover the whole array is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_uit4o9",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for computing the\nmedians. If index is None, the median over all elements where `labels`\nis non-zero is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhcej492",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.median",
                    "defaultValue": "scipy.ndimage.median",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "up9mvt5f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yhrqy6cj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kumhe_gm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0gl0cu44",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_xocoi03",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngu70ayi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_rq8682s",
            "name": "ndimage.median_filter",
            "description": "Calculate a multidimensional median filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    median_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    scipy.signal.medfilt2d\n    \n    Notes\n    -----\n    For 2-dimensional images with ``uint8``, ``float32`` or ``float64`` dtypes\n    the specialised function `scipy.signal.medfilt2d` may be faster. It is\n    however limited to constant mode with ``cval=0``.\n    \n    The filter always returns the argument that would appear at index ``n // 2`` in\n    a sorted array, where ``n`` is the number of elements in the footprint of the\n    filter. Note that this differs from the conventional definition of the median\n    when ``n`` is even. Also, this function does not support the ``float16`` dtype,\n    behavior in the presence of NaNs is undefined, and memory consumption scales with\n    ``n**4``. For ``float16`` support, greater control over the definition of the\n    filter, and to limit memory usage, consider using `vectorized_filter` with\n    NumPy functions `np.median` or `np.nanmedian`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.median_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3352d8b49c5266a84f30df6356456e12d28e8ae43539ee5b80af6b24bedb9404",
            "fields": [
                {
                    "id": "gp26juaq",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjzmga4q",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2aic_b1",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ubumwud",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vkgcshft",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn5hojtd",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h9h75_8s",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "biu18l6v",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hw5gig0m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.median_filter",
                    "defaultValue": "scipy.ndimage.median_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jkr8p9yh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "322xrrec",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "r4j9gb1c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vo95g3st",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_4zyc66u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahdykuub",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4eibqww3",
            "name": "ndimage.minimum",
            "description": "Calculate the minimum of the values of an array over labeled regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values. For each region specified by `labels`, the\n        minimal values of `input` over the region is computed.\n    labels : array_like, optional\n        An array_like of integers marking different regions over which the\n        minimum value of `input` is to be computed. `labels` must have the\n        same shape as `input`. If `labels` is not specified, the minimum\n        over the whole array is returned.\n    index : array_like, optional\n        A list of region labels that are taken into account for computing the\n        minima. If index is None, the minimum over all elements where `labels`\n        is non-zero is returned.\n    \n    Returns\n    -------\n    output : a scalar or list of integers or floats based on input type.\n        List of minima of `input` over the regions determined by `labels` and\n        whose index is in `index`. If `index` or `labels` are not specified, a\n        float is returned: the minimal value of `input` if `labels` is None,\n        and the minimal value of elements where `labels` is greater than zero\n        if `index` is None.\n    \n    See Also\n    --------\n    label, maximum, median, minimum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Notes\n    -----\n    The function returns a Python list and not a NumPy array, use\n    `np.array` to convert the list to an array.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> labels, labels_nb = ndimage.label(a)\n    >>> labels\n    array([[1, 1, 0, 0],\n           [1, 1, 0, 2],\n           [0, 0, 0, 2],\n           [3, 3, 0, 0]], dtype=int32)\n    >>> ndimage.minimum(a, labels=labels, index=np.arange(1, labels_nb + 1))\n    [1, 4, 3]\n    >>> ndimage.minimum(a)\n    0\n    >>> ndimage.minimum(a, labels=labels)\n    1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0702d2fd1cf8a4fa22fee86c754297d67f0e6a95dec4cbdb8c31e7a0cf850eab",
            "fields": [
                {
                    "id": "3_xvo0g6",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values. For each region specified by `labels`, the\nminimal values of `input` over the region is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9_0xkxt",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array_like of integers marking different regions over which the\nminimum value of `input` is to be computed. `labels` must have the\nsame shape as `input`. If `labels` is not specified, the minimum\nover the whole array is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pod5ou7y",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for computing the\nminima. If index is None, the minimum over all elements where `labels`\nis non-zero is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydccfrsu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.minimum",
                    "defaultValue": "scipy.ndimage.minimum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udsb3i6f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_p1qtcdj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w2ma9awa",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1dn4usxj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2a5jt3n1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wx5o8ri3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zikq49da",
            "name": "ndimage.minimum_filter",
            "description": "Calculate a multidimensional minimum filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    minimum_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    A sequence of modes (one per axis) is only supported when the footprint is\n    separable. Otherwise, a single mode string must be provided.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.minimum_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "51532d3d000f010bef6bb80615b057cf52963f8f3b4e86fa4f4c0e34b8d52c83",
            "fields": [
                {
                    "id": "exsgnbz2",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qphcm8fj",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uyxvoxs7",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5ueg6_6",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9amebqzu",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1iv5hoa9",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "66xh66yi",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6s7jl7mq",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ijrgr9nz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.minimum_filter",
                    "defaultValue": "scipy.ndimage.minimum_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6nkebjbo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ig6xn2s3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ianu9xei",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3a_53xh4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bf5r0f1e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js2h_yi4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zzo51h7b",
            "name": "ndimage.minimum_filter1d",
            "description": "Calculate a 1-D minimum filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    minimum filter of given size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int\n        length along which to calculate 1D minimum\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    result : ndarray.\n        Filtered image. Has the same shape as `input`.\n    \n    Notes\n    -----\n    This function implements the MINLIST algorithm [1]_, as described by\n    Richard Harter [2]_, and has a guaranteed O(n) performance, `n` being\n    the `input` length, regardless of filter size.\n    \n    References\n    ----------\n    .. [1] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.2777\n    .. [2] http://www.richardhartersworld.com/cri/2001/slidingmin.html\n    \n    \n    Examples\n    --------\n    >>> from scipy.ndimage import minimum_filter1d\n    >>> minimum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)\n    array([2, 0, 0, 0, 1, 1, 0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "32ec74a14da21824ceefb4190f95572d32169febf55af68f1422cc235bbda039",
            "fields": [
                {
                    "id": "_9jqud6g",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_k6xr099",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "length along which to calculate 1D minimum",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "056kln03",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nrcy2ls",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9qs214e6",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uwjs99lu",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdlqb_e7",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0m34hdk9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.minimum_filter1d",
                    "defaultValue": "scipy.ndimage.minimum_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fb312f2v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7xvote0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aa7scf2p",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b8hsj36e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "df_n_bwb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p17on7el",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ct44hawo",
            "name": "ndimage.minimum_position",
            "description": "Find the positions of the minimums of the values of an array at labels.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values.\n    labels : array_like, optional\n        An array of integers marking different regions over which the\n        position of the minimum value of `input` is to be computed.\n        `labels` must have the same shape as `input`. If `labels` is not\n        specified, the location of the first minimum over the whole\n        array is returned.\n    \n        The `labels` argument only works when `index` is specified.\n    index : array_like, optional\n        A list of region labels that are taken into account for finding the\n        location of the minima. If `index` is None, the ``first`` minimum\n        over all elements where `labels` is non-zero is returned.\n    \n        The `index` argument only works when `labels` is specified.\n    \n    Returns\n    -------\n    output : list of tuples of ints\n        Tuple of ints or list of tuples of ints that specify the location\n        of minima of `input` over the regions determined by `labels` and\n        whose index is in `index`.\n    \n        If `index` or `labels` are not specified, a tuple of ints is\n        returned specifying the location of the first minimal value of `input`.\n    \n    See Also\n    --------\n    label, minimum, median, maximum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[10, 20, 30],\n    ...               [40, 80, 100],\n    ...               [1, 100, 200]])\n    >>> b = np.array([[1, 2, 0, 1],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    \n    >>> from scipy import ndimage\n    \n    >>> ndimage.minimum_position(a)\n    (2, 0)\n    >>> ndimage.minimum_position(b)\n    (0, 2)\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> label, pos = ndimage.label(a)\n    >>> ndimage.minimum_position(a, label, index=np.arange(1, pos+1))\n    [(2, 0)]\n    \n    >>> label, pos = ndimage.label(b)\n    >>> ndimage.minimum_position(b, label, index=np.arange(1, pos+1))\n    [(0, 0), (0, 3), (3, 1)]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3634d5f90fd5a9397ba64637333dea54d0e1e5f1005bb57a5ba58e44ad3beaba",
            "fields": [
                {
                    "id": "mspg7sot",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "215r0uht",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of integers marking different regions over which the\nposition of the minimum value of `input` is to be computed.\n`labels` must have the same shape as `input`. If `labels` is not\nspecified, the location of the first minimum over the whole\narray is returned.\n\nThe `labels` argument only works when `index` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w5csofh8",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for finding the\nlocation of the minima. If `index` is None, the ``first`` minimum\nover all elements where `labels` is non-zero is returned.\n\nThe `index` argument only works when `labels` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2e_jcp8a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.minimum_position",
                    "defaultValue": "scipy.ndimage.minimum_position",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3gmpagq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1460ra8w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xmjzgbe7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ss_es1zr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49qlb_4a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pne2ga__",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bcd5v7n8",
            "name": "ndimage.morphological_gradient",
            "description": "Multidimensional morphological gradient.\n    \n    The morphological gradient is calculated as the difference between a\n    dilation and an erosion of the input with a given structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which to compute the morphlogical gradient.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the mathematical\n        morphology operations. Optional if `footprint` or `structure` is\n        provided. A larger `size` yields a more blurred gradient.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the morphology operations. Larger footprints\n        give a more blurred morphological gradient.\n    structure : array of ints, optional\n        Structuring element used for the morphology operations. `structure` may\n        be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the morphological gradient\n        may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    morphological_gradient : ndarray\n        Morphological gradient of `input`.\n    \n    See Also\n    --------\n    grey_dilation, grey_erosion, gaussian_gradient_magnitude\n    \n    Notes\n    -----\n    For a flat structuring element, the morphological gradient\n    computed at a given point corresponds to the maximal difference\n    between elements of the input among the elements covered by the\n    structuring element centered on the point.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[2:5, 2:5] = 1\n    >>> ndimage.morphological_gradient(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 0, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> # The morphological gradient is computed as the difference\n    >>> # between a dilation and an erosion\n    >>> ndimage.grey_dilation(a, size=(3,3)) -\\\n    ...  ndimage.grey_erosion(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 0, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[2:5, 2:5] = 1\n    >>> a[4,4] = 2; a[2,3] = 3\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 3, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.morphological_gradient(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 2, 3, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "78db580db1de81bfee1009bc705ea49eb6003d7c1c60d46bfd21e78fd2c69617",
            "fields": [
                {
                    "id": "r6wbhnei",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which to compute the morphlogical gradient.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3zd8lni",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the mathematical\nmorphology operations. Optional if `footprint` or `structure` is\nprovided. A larger `size` yields a more blurred gradient.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gz5l6ou3",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the morphology operations. Larger footprints\ngive a more blurred morphological gradient.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1g9vse0u",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the morphology operations. `structure` may\nbe a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_fycy9r",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the morphological gradient\nmay be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt6pa4h6",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dd0wtqob",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek3ws5ir",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1ax1ytg",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3z6qf0s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphological_gradient",
                    "defaultValue": "scipy.ndimage.morphological_gradient",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w0mdaprk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkhjucts",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j0b27kc7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_c64p6ja",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zc0uvopt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qlrg915",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4nlw2x9l",
            "name": "ndimage.morphological_laplace",
            "description": "Multidimensional morphological laplace.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the mathematical\n        morphology operations. Optional if `footprint` or `structure` is\n        provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the morphology operations.\n    structure : array of ints, optional\n        Structuring element used for the morphology operations. `structure` may\n        be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion)\n    output : ndarray, optional\n        An output array can optionally be provided.\n    mode : {'reflect','constant','nearest','mirror', 'wrap'}, optional\n        The mode parameter determines how the array borders are handled.\n        For 'constant' mode, values beyond borders are set to be `cval`.\n        Default is 'reflect'.\n    cval : scalar, optional\n        Value to fill past edges of input if mode is 'constant'.\n        Default is 0.0\n    origin : origin, optional\n        The origin parameter controls the placement of the filter.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    morphological_laplace : ndarray\n        Output",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "764181c26cf0f1099cb8689fbd90b44c1c5f13268ad8b9d3dc17633b701c0f47",
            "fields": [
                {
                    "id": "g5_4i4u6",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gvfv3wd",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the mathematical\nmorphology operations. Optional if `footprint` or `structure` is\nprovided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4hk0vvz4",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the morphology operations.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2jz6zka",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the morphology operations. `structure` may\nbe a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_cba4n3r",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array can optionally be provided.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64cr78e9",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The mode parameter determines how the array borders are handled.\nFor 'constant' mode, values beyond borders are set to be `cval`.\nDefault is 'reflect'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8h9qc96n",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if mode is 'constant'.\nDefault is 0.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4t471tkp",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The origin parameter controls the placement of the filter.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_i_pxr1o",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwqqt20w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphological_laplace",
                    "defaultValue": "scipy.ndimage.morphological_laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2oa1bh_7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w9bothgc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "34122897",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6t43zod",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6yas4xa3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cm2zyjnr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2mzr6ys4",
            "name": "ndimage.percentile_filter",
            "description": "Calculate a multidimensional percentile filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    percentile : scalar\n        The percentile parameter may be less than zero, i.e.,\n        percentile = -20 equals percentile = 80\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    percentile_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.percentile_filter(ascent, percentile=20, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8f45bf05b23337075aea2363d3d24a11d8dd27b673c5fe70551fe90dc6cfa084",
            "fields": [
                {
                    "id": "zcoxljfq",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewdkkxed",
                    "encoding": "",
                    "name": "percentile",
                    "value": "",
                    "defaultValue": "",
                    "description": "The percentile parameter may be less than zero, i.e.,\npercentile = -20 equals percentile = 80",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfbkfgah",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "36vdwwj5",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n11nswg4",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9ggo3kp",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ddy2c11",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ir19gfeb",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n0fmd51l",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_sg1h693",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.percentile_filter",
                    "defaultValue": "scipy.ndimage.percentile_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7sjryw7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_jjbavw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bmuhe1nl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhictgrb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ih6ywft",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4y4c8r4a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e2zgkt7f",
            "name": "ndimage.prewitt",
            "description": "Calculate a Prewitt filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    \n    Returns\n    -------\n    prewitt : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    sobel: Sobel filter\n    \n    Notes\n    -----\n    This function computes the one-dimensional Prewitt filter.\n    Horizontal edges are emphasised with the horizontal transform (axis=0),\n    vertical edges with the vertical transform (axis=1), and so on for higher\n    dimensions. These can be combined to give the magnitude.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> ascent = datasets.ascent()\n    >>> prewitt_h = ndimage.prewitt(ascent, axis=0)\n    >>> prewitt_v = ndimage.prewitt(ascent, axis=1)\n    >>> magnitude = np.sqrt(prewitt_h ** 2 + prewitt_v ** 2)\n    >>> magnitude *= 255 / np.max(magnitude) # Normalization\n    >>> fig, axes = plt.subplots(2, 2, figsize = (8, 8))\n    >>> plt.gray()\n    >>> axes[0, 0].imshow(ascent)\n    >>> axes[0, 1].imshow(prewitt_h)\n    >>> axes[1, 0].imshow(prewitt_v)\n    >>> axes[1, 1].imshow(magnitude)\n    >>> titles = [\"original\", \"horizontal\", \"vertical\", \"magnitude\"]\n    >>> for i, ax in enumerate(axes.ravel()):\n    ...     ax.set_title(titles[i])\n    ...     ax.axis(\"off\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f682d6cb233f35154b892e66b6c4a0dbc2eecfbe797640a770ac6adcccf046d8",
            "fields": [
                {
                    "id": "a0rcea4v",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lqjuixch",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qvvydgmg",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agnvn5rq",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "elyv0kjy",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cn9dn686",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.prewitt",
                    "defaultValue": "scipy.ndimage.prewitt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5eu3n0t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rs_irik7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1cxt1alj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwbxnuhw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3d0qf6ze",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2mgw1ha",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "r92cysan",
            "name": "ndimage.rank_filter",
            "description": "Calculate a multidimensional rank filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    rank : int\n        The rank parameter may be less than zero, i.e., rank = -1\n        indicates the largest element.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    rank_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.rank_filter(ascent, rank=42, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ed9786e973c405b7f32d4e78c67d878c610fea700f6c1d6dc806bbea3a2d6155",
            "fields": [
                {
                    "id": "im9yp8qh",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06gb6eai",
                    "encoding": "",
                    "name": "rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "The rank parameter may be less than zero, i.e., rank = -1\nindicates the largest element.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8jxb0ef",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g8ohjb5s",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8xt3dve",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qqej3bc",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qcwdhjgf",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm0y9b1u",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uw49p98u",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6v57grh0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.rank_filter",
                    "defaultValue": "scipy.ndimage.rank_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yh9ni6ko",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l62ijovt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lwnp_3b3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tw530xsl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "67izobhg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7082i6cx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vxlj1kf8",
            "name": "ndimage.rotate",
            "description": "Rotate an array.\n    \n    The array is rotated in the plane defined by the two axes given by the\n    `axes` parameter using spline interpolation of the requested order.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    angle : float\n        The rotation angle in degrees.\n    axes : tuple of 2 ints, optional\n        The two axes that define the plane of rotation. Default is the first\n        two axes.\n    reshape : bool, optional\n        If `reshape` is true, the output shape is adapted so that the input\n        array is contained completely in the output. Default is True.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    rotate : ndarray\n        The rotated input.\n    \n    Notes\n    -----\n    For complex-valued `input`, this function rotates the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure(figsize=(10, 3))\n    >>> ax1, ax2, ax3 = fig.subplots(1, 3)\n    >>> img = datasets.ascent()\n    >>> img_45 = ndimage.rotate(img, 45, reshape=False)\n    >>> full_img_45 = ndimage.rotate(img, 45, reshape=True)\n    >>> ax1.imshow(img, cmap='gray')\n    >>> ax1.set_axis_off()\n    >>> ax2.imshow(img_45, cmap='gray')\n    >>> ax2.set_axis_off()\n    >>> ax3.imshow(full_img_45, cmap='gray')\n    >>> ax3.set_axis_off()\n    >>> fig.set_layout_engine('tight')\n    >>> plt.show()\n    >>> print(img.shape)\n    (512, 512)\n    >>> print(img_45.shape)\n    (512, 512)\n    >>> print(full_img_45.shape)\n    (724, 724)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f096b40dab46128c48d1f14f9c24a2b426e9e33c728e26565037806007445259",
            "fields": [
                {
                    "id": "ww8el699",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t8grnd5y",
                    "encoding": "",
                    "name": "angle",
                    "value": "",
                    "defaultValue": "",
                    "description": "The rotation angle in degrees.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1oz74k2",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "The two axes that define the plane of rotation. Default is the first\ntwo axes.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "derppq8e",
                    "encoding": "",
                    "name": "reshape",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `reshape` is true, the output shape is adapted so that the input\narray is contained completely in the output. Default is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kpbr54z6",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "egk3cdru",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "00a42a1f",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggzb8q56",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1h9ffhhg",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8vxc76_1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.rotate",
                    "defaultValue": "scipy.ndimage.rotate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "edpom99b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2dxbad7s",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hry4hevy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "452ws5kk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5uixtg9o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "to_sz9n_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n4y_oavd",
            "name": "ndimage.shift",
            "description": "Shift an array.\n    \n    The array is shifted using spline interpolation of the requested order.\n    Points outside the boundaries of the input are filled according to the\n    given mode.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    shift : float or sequence\n        The shift along the axes. If a float, `shift` is the same for each\n        axis. If a sequence, `shift` should contain one value for each axis.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    shift : ndarray\n        The shifted input.\n    \n    See Also\n    --------\n    affine_transform : Affine transformations\n    \n    Notes\n    -----\n    For complex-valued `input`, this function shifts the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    Import the necessary modules and an exemplary image.\n    \n    >>> from scipy.ndimage import shift\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import datasets\n    >>> image = datasets.ascent()\n    \n    Shift the image vertically by 20 pixels.\n    \n    >>> image_shifted_vertically = shift(image, (20, 0))\n    \n    Shift the image vertically by -200 pixels and horizontally by 100 pixels.\n    \n    >>> image_shifted_both_directions = shift(image, (-200, 100))\n    \n    Plot the original and the shifted images.\n    \n    >>> fig, axes = plt.subplots(3, 1, figsize=(4, 12))\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> top, middle, bottom = axes\n    >>> for ax in axes:\n    ...     ax.set_axis_off()  # remove coordinate system\n    >>> top.imshow(image)\n    >>> top.set_title(\"Original image\")\n    >>> middle.imshow(image_shifted_vertically)\n    >>> middle.set_title(\"Vertically shifted image\")\n    >>> bottom.imshow(image_shifted_both_directions)\n    >>> bottom.set_title(\"Image shifted in both directions\")\n    >>> fig.tight_layout()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c3d158972231fe1923b2bb4621ff90747cbc062f731880eaf846f19251b7a52e",
            "fields": [
                {
                    "id": "oan9pip5",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bno9bkd_",
                    "encoding": "",
                    "name": "shift",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shift along the axes. If a float, `shift` is the same for each\naxis. If a sequence, `shift` should contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmthiy0x",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z448a6qb",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ragzc93g",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "obt02z72",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrawjng2",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uw7qwpbg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.shift",
                    "defaultValue": "scipy.ndimage.shift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gyfmfc0b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1z7by0hw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q87qoyik",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uy6h42ft",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfij40qo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vza9z8e3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0rsffgen",
            "name": "ndimage.sobel",
            "description": "Calculate a Sobel filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    \n    Returns\n    -------\n    sobel : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    This function computes the axis-specific Sobel gradient.\n    The horizontal edges can be emphasised with the horizontal transform (axis=0),\n    the vertical edges with the vertical transform (axis=1) and so on for higher\n    dimensions. These can be combined to give the magnitude.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> ascent = datasets.ascent().astype('int32')\n    >>> sobel_h = ndimage.sobel(ascent, 0)  # horizontal gradient\n    >>> sobel_v = ndimage.sobel(ascent, 1)  # vertical gradient\n    >>> magnitude = np.sqrt(sobel_h**2 + sobel_v**2)\n    >>> magnitude *= 255.0 / np.max(magnitude)  # normalization\n    >>> fig, axs = plt.subplots(2, 2, figsize=(8, 8))\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> axs[0, 0].imshow(ascent)\n    >>> axs[0, 1].imshow(sobel_h)\n    >>> axs[1, 0].imshow(sobel_v)\n    >>> axs[1, 1].imshow(magnitude)\n    >>> titles = [\"original\", \"horizontal\", \"vertical\", \"magnitude\"]\n    >>> for i, ax in enumerate(axs.ravel()):\n    ...     ax.set_title(titles[i])\n    ...     ax.axis(\"off\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf865d33707ceee3908166231c2ca4f2bbd790bd887bbea7edcc37db5b86ae08",
            "fields": [
                {
                    "id": "zgwi9wk3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ly1cki8a",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_4zwd2r",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5p4dv9g",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yoy8uedq",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wtpi6n4o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.sobel",
                    "defaultValue": "scipy.ndimage.sobel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6jve7u6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6wzbt23",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lxa05gbd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "usey_ppb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cth39fv_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cf_6rn43",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ttgz1jeh",
            "name": "ndimage.spline_filter",
            "description": "Multidimensional spline filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    order : int, optional\n        The order of the spline, default is 3.\n    output : ndarray or dtype, optional\n        The array in which to place the output, or the dtype of the returned\n        array. Default is ``numpy.float64``.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'mirror'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    \n    Returns\n    -------\n    spline_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    spline_filter1d : Calculate a 1-D spline filter along the given axis.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D spline filters. The intermediate arrays are stored\n    in the same data type as the output. Therefore, for output types\n    with a limited precision, the results may be imprecise because\n    intermediate results may be stored with insufficient precision.\n    \n    For complex-valued `input`, this function processes the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    We can filter an image using multidimensional splines:\n    \n    >>> from scipy.ndimage import spline_filter\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> orig_img = np.eye(20)  # create an image\n    >>> orig_img[10, :] = 1.0\n    >>> sp_filter = spline_filter(orig_img, order=3)\n    >>> f, ax = plt.subplots(1, 2, sharex=True)\n    >>> for ind, data in enumerate([[orig_img, \"original image\"],\n    ...                             [sp_filter, \"spline filter\"]]):\n    ...     ax[ind].imshow(data[0], cmap='gray_r')\n    ...     ax[ind].set_title(data[1])\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6f9f4610f5e176cb9022f7e62b48cc9c7634206f71ca4fc33269c6a6ab2cee07",
            "fields": [
                {
                    "id": "e_j6eyeo",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fcfsvpqz",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline, default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxw33vpz",
                    "encoding": "",
                    "name": "output",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The array in which to place the output, or the dtype of the returned\narray. Default is ``numpy.float64``.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ihp1bq8",
                    "encoding": "",
                    "name": "mode",
                    "value": "mirror",
                    "defaultValue": "mirror",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'mirror'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kyllu7zk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.spline_filter",
                    "defaultValue": "scipy.ndimage.spline_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urxk2do3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3g2z1hi6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qig8yqnd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6bslum_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l7a5dfga",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wmt018_9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0kyhwxpf",
            "name": "ndimage.spline_filter1d",
            "description": "Calculate a 1-D spline filter along the given axis.\n    \n    The lines of the array along the given axis are filtered by a\n    spline filter. The order of the spline must be >= 2 and <= 5.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    order : int, optional\n        The order of the spline, default is 3.\n    axis : int, optional\n        The axis along which the spline filter is applied. Default is the last\n        axis.\n    output : ndarray or dtype, optional\n        The array in which to place the output, or the dtype of the returned\n        array. Default is ``numpy.float64``.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'mirror'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    \n    Returns\n    -------\n    spline_filter1d : ndarray\n        The filtered input.\n    \n    See Also\n    --------\n    spline_filter : Multidimensional spline filter.\n    \n    Notes\n    -----\n    All of the interpolation functions in `ndimage` do spline interpolation of\n    the input image. If using B-splines of `order > 1`, the input image\n    values have to be converted to B-spline coefficients first, which is\n    done by applying this 1-D filter sequentially along all\n    axes of the input. All functions that require B-spline coefficients\n    will automatically filter their inputs, a behavior controllable with\n    the `prefilter` keyword argument. For functions that accept a `mode`\n    parameter, the result will only be correct if it matches the `mode`\n    used when filtering.\n    \n    For complex-valued `input`, this function processes the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    We can filter an image using 1-D spline along the given axis:\n    \n    >>> from scipy.ndimage import spline_filter1d\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> orig_img = np.eye(20)  # create an image\n    >>> orig_img[10, :] = 1.0\n    >>> sp_filter_axis_0 = spline_filter1d(orig_img, axis=0)\n    >>> sp_filter_axis_1 = spline_filter1d(orig_img, axis=1)\n    >>> f, ax = plt.subplots(1, 3, sharex=True)\n    >>> for ind, data in enumerate([[orig_img, \"original image\"],\n    ...             [sp_filter_axis_0, \"spline filter (axis=0)\"],\n    ...             [sp_filter_axis_1, \"spline filter (axis=1)\"]]):\n    ...     ax[ind].imshow(data[0], cmap='gray_r')\n    ...     ax[ind].set_title(data[1])\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f6d41907d3b0706b1315dc74594a94ea3e82901987a59ee947367029cd7ac244",
            "fields": [
                {
                    "id": "ht2jzo37",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olpcj28x",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline, default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8eamhcrq",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis along which the spline filter is applied. Default is the last\naxis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzufe3oe",
                    "encoding": "",
                    "name": "output",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The array in which to place the output, or the dtype of the returned\narray. Default is ``numpy.float64``.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0zdm8xnb",
                    "encoding": "",
                    "name": "mode",
                    "value": "mirror",
                    "defaultValue": "mirror",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'mirror'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "srslt1nf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.spline_filter1d",
                    "defaultValue": "scipy.ndimage.spline_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zfuxvcw8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15awgazd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gd7oiw_o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8tri7qy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dq1lexrh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ue0h_p4x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qx98bllb",
            "name": "ndimage.standard_deviation",
            "description": "Calculate the standard deviation of the values of an N-D image array,\n    optionally at specified sub-regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        N-D image data to process.\n    labels : array_like, optional\n        Labels to identify sub-regions in `input`.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        `labels` to include in output. If None (default), all values where\n        `labels` is non-zero are used.\n    \n    Returns\n    -------\n    standard_deviation : float or ndarray\n        Values of standard deviation, for each sub-region if `labels` and\n        `index` are specified.\n    \n    See Also\n    --------\n    label, variance, maximum, minimum, extrema\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.standard_deviation(a)\n    2.7585095613392387\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.standard_deviation(a, lbl, index=np.arange(1, nlbl+1))\n    array([ 1.479,  1.5  ,  3.   ])\n    \n    If no index is given, non-zero `labels` are processed:\n    \n    >>> ndimage.standard_deviation(a, lbl)\n    2.4874685927665499",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a94af826b41101b896fcfb81664351dcd6f4033a38659ddbcc0df1a86bbe88a1",
            "fields": [
                {
                    "id": "pmebfy58",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D image data to process.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m44c7alp",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels to identify sub-regions in `input`.\nIf not None, must be same shape as `input`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nmwt1jud",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "`labels` to include in output. If None (default), all values where\n`labels` is non-zero are used.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5pz6s8vn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.standard_deviation",
                    "defaultValue": "scipy.ndimage.standard_deviation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ulrb5o61",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5yxeza3n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0irgtda4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hc27d8w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy8fz6m2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6r1q_76w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ba1bwmmf",
            "name": "ndimage.sum",
            "description": "Calculate the sum of the values of the array.\n    \n    Notes\n    -----\n    This is an alias for `ndimage.sum_labels` kept for backwards compatibility\n    reasons, for new code please prefer `sum_labels`.  See the `sum_labels`\n    docstring for more details.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d821aebd793bee600ed6b6be5e33f6d2aedc4da4691b30c5a739b13899faebcc",
            "fields": [
                {
                    "id": "dp3a8491",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4d7g5ol",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_mnn59l",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c171jv2k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.sum",
                    "defaultValue": "scipy.ndimage.sum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9do77otv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hxr_u3r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ylvth5e6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1dm18da",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zkcxrtys",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gtvryfbm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "tbh4fose",
            "name": "ndimage.sum_labels",
            "description": "Calculate the sum of the values of the array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Values of `input` inside the regions defined by `labels`\n        are summed together.\n    labels : array_like of ints, optional\n        Assign labels to the values of the array. Has to have the same shape as\n        `input`.\n    index : array_like, optional\n        A single label number or a sequence of label numbers of\n        the objects to be measured.\n    \n    Returns\n    -------\n    sum : ndarray or scalar\n        An array of the sums of values of `input` inside the regions defined\n        by `labels` with the same shape as `index`. If 'index' is None or scalar,\n        a scalar is returned.\n    \n    See Also\n    --------\n    mean, median\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> input =  [0,1,2,3]\n    >>> labels = [1,1,2,2]\n    >>> ndimage.sum_labels(input, labels, index=[1,2])\n    [1.0, 5.0]\n    >>> ndimage.sum_labels(input, labels, index=1)\n    1\n    >>> ndimage.sum_labels(input, labels)\n    6",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e1b6333d209ecde83cc8fb50b6f42dc26cffa93f57229abcf0e40f03189d05e7",
            "fields": [
                {
                    "id": "tmh1e_cq",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Values of `input` inside the regions defined by `labels`\nare summed together.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xpj89pfi",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Assign labels to the values of the array. Has to have the same shape as\n`input`.",
                    "type": "arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfg7aove",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single label number or a sequence of label numbers of\nthe objects to be measured.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4q4k_u_s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.sum_labels",
                    "defaultValue": "scipy.ndimage.sum_labels",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4l5s27iq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_rftei9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3bus35ks",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6nb9ai8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98_xlhmi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kyec6e58",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "aczw9oki",
            "name": "ndimage.uniform_filter",
            "description": "Multidimensional uniform filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int or sequence of ints, optional\n        The sizes of the uniform filter are given for each axis as a\n        sequence, or as a single number, in which case the size is\n        equal for all axes.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    uniform_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D uniform filters. The intermediate arrays are stored\n    in the same data type as the output. Therefore, for output types\n    with a limited precision, the results may be imprecise because\n    intermediate results may be stored with insufficient precision.\n    \n    The behavior of this function with NaN elements is undefined. To control\n    behavior in the presence of NaNs, consider using `vectorized_filter`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.uniform_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "874ccfaf815129356f7550ace04665eb611422ac2b2b17804dda028f89dae86a",
            "fields": [
                {
                    "id": "_qo1z3bn",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x81adsg2",
                    "encoding": "",
                    "name": "size",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The sizes of the uniform filter are given for each axis as a\nsequence, or as a single number, in which case the size is\nequal for all axes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_sg2rw8",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1ytjf5y",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "23cyow__",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwqs8dmj",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxk0rdo9",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8175gw50",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.uniform_filter",
                    "defaultValue": "scipy.ndimage.uniform_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gzreyqsk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mz0am7rb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s30gc1es",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tha863_y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5b8en4ib",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cf7qabph",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8pflrxrw",
            "name": "ndimage.uniform_filter1d",
            "description": "Calculate a 1-D uniform filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    uniform filter of given size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int\n        length of uniform filter\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    result : ndarray\n        Filtered array. Has same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import uniform_filter1d\n    >>> uniform_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)\n    array([4, 3, 4, 1, 4, 6, 6, 3])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce992363dcadbd859c0f13b54e1a08d99ac4440183ba9ba33c2fdbfa4551fafe",
            "fields": [
                {
                    "id": "_varj6y5",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7gvpq_a",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "length of uniform filter",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1n85a5u1",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a3g7vc5r",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lznxo_k7",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yj9tq9tu",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upsszrw4",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lm8xmqb6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.uniform_filter1d",
                    "defaultValue": "scipy.ndimage.uniform_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1vze6lgc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_46zcldv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0k2fzmcf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9oec546v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mmex2vdi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0l8g0p08",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "171ieebe",
            "name": "ndimage.value_indices",
            "description": "Find indices of each distinct value in given array.\n    \n    Parameters\n    ----------\n    arr : ndarray of ints\n        Array containing integer values.\n    ignore_value : int, optional\n        This value will be ignored in searching the `arr` array. If not\n        given, all values found will be included in output. Default\n        is None.\n    \n    Returns\n    -------\n    indices : dictionary\n        A Python dictionary of array indices for each distinct value. The\n        dictionary is keyed by the distinct values, the entries are array\n        index tuples covering all occurrences of the value within the\n        array.\n    \n        This dictionary can occupy significant memory, usually several times\n        the size of the input array.\n    \n    See Also\n    --------\n    label, maximum, median, minimum_position, extrema, sum, mean, variance,\n    standard_deviation, numpy.where, numpy.unique\n    \n    Notes\n    -----\n    For a small array with few distinct values, one might use\n    `numpy.unique()` to find all possible values, and ``(arr == val)`` to\n    locate each value within that array. However, for large arrays,\n    with many distinct values, this can become extremely inefficient,\n    as locating each value would require a new search through the entire\n    array. Using this function, there is essentially one search, with\n    the indices saved for all distinct values.\n    \n    This is useful when matching a categorical image (e.g. a segmentation\n    or classification) to an associated image of other data, allowing\n    any per-class statistic(s) to then be calculated. Provides a\n    more flexible alternative to functions like ``scipy.ndimage.mean()``\n    and ``scipy.ndimage.variance()``.\n    \n    Some other closely related functionality, with different strengths and\n    weaknesses, can also be found in ``scipy.stats.binned_statistic()`` and\n    the `scikit-image <https://scikit-image.org/>`_ function\n    ``skimage.measure.regionprops()``.\n    \n    Note for IDL users: this provides functionality equivalent to IDL's\n    REVERSE_INDICES option (as per the IDL documentation for the\n    `HISTOGRAM <https://www.l3harrisgeospatial.com/docs/histogram.html>`_\n    function).\n    \n    .. versionadded:: 1.10.0\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import ndimage\n    >>> a = np.zeros((6, 6), dtype=int)\n    >>> a[2:4, 2:4] = 1\n    >>> a[4, 4] = 1\n    >>> a[:2, :3] = 2\n    >>> a[0, 5] = 3\n    >>> a\n    array([[2, 2, 2, 0, 0, 3],\n           [2, 2, 2, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0],\n           [0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> val_indices = ndimage.value_indices(a)\n    \n    The dictionary `val_indices` will have an entry for each distinct\n    value in the input array.\n    \n    >>> val_indices.keys()\n    dict_keys([np.int64(0), np.int64(1), np.int64(2), np.int64(3)])\n    \n    The entry for each value is an index tuple, locating the elements\n    with that value.\n    \n    >>> ndx1 = val_indices[1]\n    >>> ndx1\n    (array([2, 2, 3, 3, 4]), array([2, 3, 2, 3, 4]))\n    \n    This can be used to index into the original array, or any other\n    array with the same shape.\n    \n    >>> a[ndx1]\n    array([1, 1, 1, 1, 1])\n    \n    If the zeros were to be ignored, then the resulting dictionary\n    would no longer have an entry for zero.\n    \n    >>> val_indices = ndimage.value_indices(a, ignore_value=0)\n    >>> val_indices.keys()\n    dict_keys([np.int64(1), np.int64(2), np.int64(3)])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8bbfcd58d5d2e52b7f48f0efebb074a6807309cfa9817084b2a53e583afc2217",
            "fields": [
                {
                    "id": "v0qpzjmv",
                    "encoding": "",
                    "name": "arr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array containing integer values.",
                    "type": "ndarray of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6bs53og",
                    "encoding": "",
                    "name": "ignore_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "This value will be ignored in searching the `arr` array. If not\ngiven, all values found will be included in output. Default\nis None.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iysalvts",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.value_indices",
                    "defaultValue": "scipy.ndimage.value_indices",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8pq224sy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "398oof07",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0o56sk62",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w81xc4ch",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7saxoy_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iq639qh9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "i4385p74",
            "name": "ndimage.variance",
            "description": "Calculate the variance of the values of an N-D image array, optionally at\n    specified sub-regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Nd-image data to process.\n    labels : array_like, optional\n        Labels defining sub-regions in `input`.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        `labels` to include in output.  If None (default), all values where\n        `labels` is non-zero are used.\n    \n    Returns\n    -------\n    variance : float or ndarray\n        Values of variance, for each sub-region if `labels` and `index` are\n        specified.\n    \n    See Also\n    --------\n    label, standard_deviation, maximum, minimum, extrema\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.variance(a)\n    7.609375\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.variance(a, lbl, index=np.arange(1, nlbl+1))\n    array([ 2.1875,  2.25  ,  9.    ])\n    \n    If no index is given, all non-zero `labels` are processed:\n    \n    >>> ndimage.variance(a, lbl)\n    6.1875",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9e661afe1b00ef7a2f04191c6d5f41d63e25398876031fc0e57f2e5c01326778",
            "fields": [
                {
                    "id": "63axyk56",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Nd-image data to process.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nzz7tktl",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels defining sub-regions in `input`.\nIf not None, must be same shape as `input`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xo9aamz",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "`labels` to include in output.  If None (default), all values where\n`labels` is non-zero are used.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h4nzhs_k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.variance",
                    "defaultValue": "scipy.ndimage.variance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yv0yz1gi",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ncu8n0k3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "143gp9y8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9bdd73xo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_x64kgv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zpolzba2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xh48b4h9",
            "name": "ndimage.vectorized_filter",
            "description": "Filter an array with a vectorized Python callable as the kernel\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    function : callable\n        Kernel to apply over a window centered at each element of `input`.\n        Callable must have signature::\n    \n            function(window: ndarray, *, axis: int | tuple) -> scalar\n    \n        where ``axis`` specifies the axis (or axes) of ``window`` along which\n        the filter function is evaluated.\n    size : scalar or tuple, optional\n        See `footprint` below. Ignored if `footprint` is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n, m)`` is equivalent\n        to ``footprint=np.ones((n, m))``.\n        We adjust `size` to the number of dimensions indicated by `axes`.\n        For instance, if `axes` is ``(0, 2, 1)`` and ``n`` is passed for ``size``,\n        then the effective `size` is ``(n, n, n)``.\n    output : array, optional\n        The array in which to place the output. By default, an array of the dtype\n        returned by `function` will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'valid' (`| a b c d |`)\n            The input is not extended; rather, the output shape is reduced depending\n            on the window size according to the following calculation::\n    \n                window_size = np.asarray(size if size is not None else footprint.shape)\n                output_shape = np.asarray(input.shape)\n                output_shape[np.asarray(axes)] -= (window_size - 1)\n    \n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int, optional\n        If None, `input` is filtered along all axes. Otherwise, `input` is filtered\n        along the specified axes. When `axes` is specified, the dimensionality of\n        `footprint` and the length of any tuples used for `size` or `origin` must\n        match the length of `axes`. The ith axis of `footprint` and the ith element\n        in these tuples corresponds to the ith element of `axes`.\n    batch_memory : int, default: 2**30\n        The maximum number of bytes occupied by data in the ``window``\n        array passed to ``function``.\n    \n    Returns\n    -------\n    output : ndarray\n        Filtered array. The dtype is the output dtype of `function`. If `function` is\n        scalar-valued when applied to a single window, the shape of the output is that\n        of `input` (unless ``mode=='valid'``; see `mode` documentation). If `function`\n        is multi-valued when applied to a single window, the placement of the\n        corresponding dimensions within the output shape depends entirely on the\n        behavior of `function`; see Examples.\n    \n    See Also\n    --------\n    scipy.ndimage.generic_filter\n    \n    Notes\n    -----\n    This function works by padding `input` according to `mode`, then calling the\n    provided `function` on chunks of a sliding window view over the padded array.\n    This approach is very simple and flexible, and so the function has many features\n    not offered by some other filter functions (e.g. memory control, ``float16``\n    and complex dtype support, and any NaN-handling features provided by the\n    `function` argument).\n    \n    However, this brute-force approach may perform considerable redundant work.\n    Use a specialized filter (e.g. `minimum_filter` instead of this function with\n    `numpy.min` as the callable; `uniform_filter` instead of this function with\n    `numpy.mean` as the callable) when possible, as it may use a more efficient\n    algorithm.\n    \n    When a specialized filter is not available, this function is ideal when `function`\n    is a vectorized, pure-Python callable. Even better performance may be possible\n    by passing a `scipy.LowLevelCallable` to `generic_filter`. `generic_filter` may\n    also be preferred for expensive callables with large filter footprints and\n    callables that are not vectorized (i.e. those without ``axis`` support).\n    \n    This function does not provide the ``extra_arguments`` or ``extra_keywords``\n    arguments provided by some `ndimage` functions. There are two reasons:\n    \n    - The passthrough functionality can be achieved by the user: simply wrap the\n      original callable in another function that provides the required arguments;\n      e.g., ``function=lambda input, axis: function(input, *extra_arguments, axis=axis, **extra_keywords)``.\n    - There are use cases for `function` to be passed additional *sliding-window data*\n      to `function` besides `input`. This is not yet implemented, but we reserve\n      these argument names for such a feature, which would add capability rather than\n      providing a duplicate interface to existing capability.\n    \n    Examples\n    --------\n    Suppose we wish to perform a median filter with even window size on a ``float16``\n    image. Furthermore, the image has NaNs that we wish to be ignored (and effectively\n    removed by the filter). `median_filter` does not support ``float16`` data, its\n    behavior when NaNs are present is not defined, and for even window sizes, it does\n    not return the usual sample median - the average of the two middle elements. This\n    would be an excellent use case for `vectorized_filter` with\n    ``function=np.nanmedian``, which supports the required interface: it accepts a\n    data array of any shape as the first positional argument, and tuple of axes as\n    keyword argument ``axis``.\n    \n    >>> import numpy as np\n    >>> from scipy import datasets, ndimage\n    >>> from scipy.ndimage import vectorized_filter\n    >>> import matplotlib.pyplot as plt\n    >>> ascent = ndimage.zoom(datasets.ascent(), 0.5).astype(np.float16)\n    >>> ascent[::16, ::16] = np.nan\n    >>> result = vectorized_filter(ascent, function=np.nanmedian, size=4)\n    \n    Plot the original and filtered images.\n    \n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> fig.tight_layout()\n    >>> plt.show()\n    \n    Another need satisfied by `vectorized_filter` is to perform multi-output\n    filters. For instance, suppose we wish to filter an image according to the 25th\n    and 75th percentiles in addition to the median. We could perform the three\n    filters separately.\n    \n    >>> ascent = ndimage.zoom(datasets.ascent(), 0.5)\n    >>> def get_quantile_fun(p):\n    ...     return lambda x, axis: np.quantile(x, p, axis=axis)\n    >>> ref1 = vectorized_filter(ascent, get_quantile_fun(0.25), size=4)\n    >>> ref2 = vectorized_filter(ascent, get_quantile_fun(0.50), size=4)\n    >>> ref3 = vectorized_filter(ascent, get_quantile_fun(0.75), size=4)\n    >>> ref = np.stack([ref1, ref2, ref3])\n    \n    However, `vectorized_filter` also supports filters that return multiple outputs\n    as long as `output` is unspecified and `batch_memory` is sufficiently high to\n    perform the calculation in a single chunk.\n    \n    >>> def quartiles(x, axis):\n    ...     return np.quantile(x, [0.25, 0.50, 0.75], axis=axis)\n    >>> res = vectorized_filter(ascent, quartiles, size=4, batch_memory=np.inf)\n    >>> np.all(np.isclose(res, ref))\n    np.True_\n    \n    The placement of the additional dimension(s) corresponding with multiple outputs\n    is at the discretion of `function`. `quartiles` happens to prepend one dimension\n    corresponding with the three outputs simply because that is the behavior of\n    `np.quantile`:\n    \n    >>> res.shape == (3,) + ascent.shape\n    True\n    \n    If we wished for this dimension to be appended:\n    \n    >>> def quartiles(x, axis):\n    ...     return np.moveaxis(np.quantile(x, [0.25, 0.50, 0.75], axis=axis), 0, -1)\n    >>> res = vectorized_filter(ascent, quartiles, size=4, batch_memory=np.inf)\n    >>> res.shape == ascent.shape + (3,)\n    True\n    \n    Suppose we wish to implment a \"mode\" filter - a filter that selects the most\n    frequently occuring value within the window. A simple (but rather slow)\n    approach is to use `generic_filter` with `scipy.stats.mode`.\n    \n    >>> from scipy import stats\n    >>> rng = np.random.default_rng(3195824598724609246)\n    >>> input = rng.integers(255, size=(50, 50)).astype(np.uint8)\n    >>> def simple_mode(input):\n    ...     return stats.mode(input, axis=None).mode\n    >>> ref = ndimage.generic_filter(input, simple_mode, size=5)\n    \n    If speed is important, `vectorized_filter` can take advantage of the performance\n    benefit of a vectorized callable.\n    \n    >>> def vectorized_mode(x, axis=(-1,)):\n    ...     n_axes = 1 if np.isscalar(axis) else len(axis)\n    ...     x = np.moveaxis(x, axis, tuple(range(-n_axes, 0)))\n    ...     x = np.reshape(x, x.shape[:-n_axes] + (-1,))\n    ...     y = np.sort(x, axis=-1)\n    ...     i = np.concatenate([np.ones(y.shape[:-1] + (1,), dtype=bool),\n    ...                         y[..., :-1] != y[..., 1:]], axis=-1)\n    ...     indices = np.arange(y.size)[i.ravel()]\n    ...     counts = np.diff(indices, append=y.size)\n    ...     counts = np.reshape(np.repeat(counts, counts), y.shape)\n    ...     k = np.argmax(counts, axis=-1, keepdims=True)\n    ...     return np.take_along_axis(y, k, axis=-1)[..., 0]\n    >>> res = vectorized_filter(input, vectorized_mode, size=5)\n    >>> np.all(res == ref)\n    np.True_\n    \n    Depending on the machine, the `vectorized_filter` version may be as much as\n    100x faster.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7a776460bb1b02232d139973b1383efdee793db6cf0aa30dcfabef2f4f6f69c5",
            "fields": [
                {
                    "id": "jjuhm2c0",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zjz33n68",
                    "encoding": "",
                    "name": "function",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel to apply over a window centered at each element of `input`.\nCallable must have signature::\n\n    function(window: ndarray, *, axis: int | tuple) -> scalar\n\nwhere ``axis`` specifies the axis (or axes) of ``window`` along which\nthe filter function is evaluated.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2sono4vz",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See `footprint` below. Ignored if `footprint` is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "470jml0b",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n, m)`` is equivalent\nto ``footprint=np.ones((n, m))``.\nWe adjust `size` to the number of dimensions indicated by `axes`.\nFor instance, if `axes` is ``(0, 2, 1)`` and ``n`` is passed for ``size``,\nthen the effective `size` is ``(n, n, n)``.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og4twj6m",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output. By default, an array of the dtype\nreturned by `function` will be created.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8w2btyz",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'valid' (`| a b c d |`)\n    The input is not extended; rather, the output shape is reduced depending\n    on the window size according to the following calculation::\n\n        window_size = np.asarray(size if size is not None else footprint.shape)\n        output_shape = np.asarray(input.shape)\n        output_shape[np.asarray(axes)] -= (window_size - 1)",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gkod2wxu",
                    "encoding": "",
                    "name": "cval",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3l15th1q",
                    "encoding": "",
                    "name": "origin",
                    "value": "",
                    "defaultValue": "",
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0bdc356r",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise, `input` is filtered\nalong the specified axes. When `axes` is specified, the dimensionality of\n`footprint` and the length of any tuples used for `size` or `origin` must\nmatch the length of `axes`. The ith axis of `footprint` and the ith element\nin these tuples corresponds to the ith element of `axes`.",
                    "type": "tuple of int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xsp02ny4",
                    "encoding": "",
                    "name": "batch_memory",
                    "value": 1073741824,
                    "defaultValue": 1073741824,
                    "description": "The maximum number of bytes occupied by data in the ``window``\narray passed to ``function``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ibuoo3v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.vectorized_filter",
                    "defaultValue": "scipy.ndimage.vectorized_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jo4cpiec",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "681xhjy2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fs8qw9we",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgtz7ri4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k_e3ugt3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_x5_2aha",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lrnmszkh",
            "name": "ndimage.watershed_ift",
            "description": "Apply watershed from markers using image foresting transform algorithm.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    markers : array_like\n        Markers are points within each watershed that form the beginning\n        of the process. Negative markers are considered background markers\n        which are processed after the other markers.\n    structure : structure element, optional\n        A structuring element defining the connectivity of the object can be\n        provided. If None, an element is generated with a squared\n        connectivity equal to one.\n    output : ndarray, optional\n        An output array can optionally be provided. The same shape as input.\n    \n    Returns\n    -------\n    watershed_ift : ndarray\n        Output.  Same shape as `input`.\n    \n    References\n    ----------\n    .. [1] A.X. Falcao, J. Stolfi and R. de Alencar Lotufo, \"The image\n           foresting transform: theory, algorithms, and applications\",\n           Pattern Analysis and Machine Intelligence, vol. 26, pp. 19-29, 2004.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "506c3eafbc8df3dc9e21edfbacfee69c06902be479ca4a281e3615cd6edac69d",
            "fields": [
                {
                    "id": "g1fun5bf",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t917zb34",
                    "encoding": "",
                    "name": "markers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Markers are points within each watershed that form the beginning\nof the process. Negative markers are considered background markers\nwhich are processed after the other markers.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6w8fiwo",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "A structuring element defining the connectivity of the object can be\nprovided. If None, an element is generated with a squared\nconnectivity equal to one.",
                    "type": "structure element",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nea_lavz",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array can optionally be provided. The same shape as input.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j5h907qm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.watershed_ift",
                    "defaultValue": "scipy.ndimage.watershed_ift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vvv_8lp5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gb8an7cl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m_etgt87",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_5tcnp9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_fajkqc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "92pe9hlb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wvtqzmks",
            "name": "ndimage.white_tophat",
            "description": "Multidimensional white tophat filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the filter.\n        Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of elements of a flat structuring element\n        used for the white tophat filter.\n    structure : array of ints, optional\n        Structuring element used for the filter. `structure` may be a non-flat\n        structuring element. The `structure` array applies offsets to the\n        pixels in a neighborhood (the offset is additive during dilation and\n        subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the filter may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'.\n        Default is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default is 0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    output : ndarray\n        Result of the filter of `input` with `structure`.\n    \n    See Also\n    --------\n    black_tophat\n    \n    Examples\n    --------\n    Subtract gray background from a bright peak.\n    \n    >>> from scipy.ndimage import generate_binary_structure, white_tophat\n    >>> import numpy as np\n    >>> square = generate_binary_structure(rank=2, connectivity=3)\n    >>> bright_on_gray = np.array([[2, 3, 3, 3, 2],\n    ...                            [3, 4, 5, 4, 3],\n    ...                            [3, 5, 9, 5, 3],\n    ...                            [3, 4, 5, 4, 3],\n    ...                            [2, 3, 3, 3, 2]])\n    >>> white_tophat(input=bright_on_gray, structure=square)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 5, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7d6544bdf623802b7c97b2d7d800b53555d2c485e19af67a1e62847b162e5114",
            "fields": [
                {
                    "id": "8lqg7qqb",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3a5s7j1",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the filter.\nOptional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7tdijqb1",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of elements of a flat structuring element\nused for the white tophat filter.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qgfeszzc",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the filter. `structure` may be a non-flat\nstructuring element. The `structure` array applies offsets to the\npixels in a neighborhood (the offset is additive during dilation and\nsubtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrv_fwbj",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the filter may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0i0pdjnn",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nf6yha8",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'.\nDefault is 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2hho411_",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_e5wkdb",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3m8htua",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.white_tophat",
                    "defaultValue": "scipy.ndimage.white_tophat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_yw19cr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4cc8ofdi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "aa07j05z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2hv548e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61oyjvh7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7b4ly_xj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "u86blbvc",
            "name": "ndimage.zoom",
            "description": "Zoom an array.\n    \n    The array is zoomed using spline interpolation of the requested order.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    zoom : float or sequence\n        The zoom factor along the axes. If a float, `zoom` is the same for each\n        axis. If a sequence, `zoom` should contain one value for each axis.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    grid_mode : bool, optional\n        If False, the distance from the pixel centers is zoomed. Otherwise, the\n        distance including the full pixel extent is used. For example, a 1d\n        signal of length 5 is considered to have length 4 when `grid_mode` is\n        False, but length 5 when `grid_mode` is True. See the following\n        visual illustration:\n    \n        .. code-block:: text\n    \n                | pixel 1 | pixel 2 | pixel 3 | pixel 4 | pixel 5 |\n                     |<-------------------------------------->|\n                                        vs.\n                |<----------------------------------------------->|\n    \n        The starting point of the arrow in the diagram above corresponds to\n        coordinate location 0 in each mode.\n    \n    Returns\n    -------\n    zoom : ndarray\n        The zoomed input.\n    \n    Notes\n    -----\n    For complex-valued `input`, this function zooms the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    \n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.zoom(ascent, 3.0)\n    >>> ax1.imshow(ascent, vmin=0, vmax=255)\n    >>> ax2.imshow(result, vmin=0, vmax=255)\n    >>> plt.show()\n    \n    >>> print(ascent.shape)\n    (512, 512)\n    \n    >>> print(result.shape)\n    (1536, 1536)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7f110cfd44d1a78cb9e467f46a87a14423fcb13e13b3b08f4d08eb929f143cd0",
            "fields": [
                {
                    "id": "6gq05yji",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4x0xk8u",
                    "encoding": "",
                    "name": "zoom",
                    "value": "",
                    "defaultValue": "",
                    "description": "The zoom factor along the axes. If a float, `zoom` is the same for each\naxis. If a sequence, `zoom` should contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n77_5z54",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rx4lagj8",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "istg7y4n",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iypupx6n",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgcrq1cz",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqphnrbz",
                    "encoding": "",
                    "name": "grid_mode",
                    "value": false,
                    "defaultValue": false,
                    "description": "If False, the distance from the pixel centers is zoomed. Otherwise, the\ndistance including the full pixel extent is used. For example, a 1d\nsignal of length 5 is considered to have length 4 when `grid_mode` is\nFalse, but length 5 when `grid_mode` is True. See the following\nvisual illustration:\n\n.. code-block:: text\n\n        | pixel 1 | pixel 2 | pixel 3 | pixel 4 | pixel 5 |\n             |<-------------------------------------->|\n                                vs.\n        |<----------------------------------------------->|\n\nThe starting point of the arrow in the diagram above corresponds to\ncoordinate location 0 in each mode.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tqce38gi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.zoom",
                    "defaultValue": "scipy.ndimage.zoom",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kr8sirxj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mg_7909u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1avh73d7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qu8s028z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage",
                    "defaultValue": "scipy.ndimage",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aj5vsh7j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghw10yep",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ikzrcza2",
            "name": "filters.convolve",
            "description": "Multidimensional convolution.\n    \n    The array is convolved with the given kernel.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : array_like\n        Array of weights, same number of dimensions as input\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the right, and negative ones\n        to the left. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `mode` or `origin` must match the length\n        of `axes`. The ith entry in any of these tuples corresponds to the ith\n        entry in `axes`.\n    \n    Returns\n    -------\n    result : ndarray\n        The result of convolution of `input` with `weights`.\n    \n    See Also\n    --------\n    correlate : Correlate an image with a kernel.\n    \n    Notes\n    -----\n    Each value in result is :math:`C_i = \\sum_j{I_{i+k-j} W_j}`, where\n    W is the `weights` kernel,\n    j is the N-D spatial index over :math:`W`,\n    I is the `input` and k is the coordinate of the center of\n    W, specified by `origin` in the input parameters.\n    \n    Examples\n    --------\n    Perhaps the simplest case to understand is ``mode='constant', cval=0.0``,\n    because in this case borders (i.e., where the `weights` kernel, centered\n    on any one value, extends beyond an edge of `input`) are treated as zeros.\n    \n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> k = np.array([[1,1,1],[1,1,0],[1,0,0]])\n    >>> from scipy import ndimage\n    >>> ndimage.convolve(a, k, mode='constant', cval=0.0)\n    array([[11, 10,  7,  4],\n           [10,  3, 11, 11],\n           [15, 12, 14,  7],\n           [12,  3,  7,  0]])\n    \n    Setting ``cval=1.0`` is equivalent to padding the outer edge of `input`\n    with 1.0's (and then extracting only the original region of the result).\n    \n    >>> ndimage.convolve(a, k, mode='constant', cval=1.0)\n    array([[13, 11,  8,  7],\n           [11,  3, 11, 14],\n           [16, 12, 14, 10],\n           [15,  6, 10,  5]])\n    \n    With ``mode='reflect'`` (the default), outer values are reflected at the\n    edge of `input` to fill in missing values.\n    \n    >>> b = np.array([[2, 0, 0],\n    ...               [1, 0, 0],\n    ...               [0, 0, 0]])\n    >>> k = np.array([[0,1,0], [0,1,0], [0,1,0]])\n    >>> ndimage.convolve(b, k, mode='reflect')\n    array([[5, 0, 0],\n           [3, 0, 0],\n           [1, 0, 0]])\n    \n    This includes diagonally at the corners.\n    \n    >>> k = np.array([[1,0,0],[0,1,0],[0,0,1]])\n    >>> ndimage.convolve(b, k)\n    array([[4, 2, 0],\n           [3, 2, 0],\n           [1, 1, 0]])\n    \n    With ``mode='nearest'``, the single nearest value in to an edge in\n    `input` is repeated as many times as needed to match the overlapping\n    `weights`.\n    \n    >>> c = np.array([[2, 0, 1],\n    ...               [1, 0, 0],\n    ...               [0, 0, 0]])\n    >>> k = np.array([[0, 1, 0],\n    ...               [0, 1, 0],\n    ...               [0, 1, 0],\n    ...               [0, 1, 0],\n    ...               [0, 1, 0]])\n    >>> ndimage.convolve(c, k, mode='nearest')\n    array([[7, 0, 3],\n           [5, 0, 2],\n           [3, 0, 1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d7c4c73c465e73c1b7b8e6c3c9c438a0eec18ddb5f8ba0f43598c27e8f0212b2",
            "fields": [
                {
                    "id": "g3t6yduw",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xttsf0z",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of weights, same number of dimensions as input",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_wjzyz8t",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4r0d__yv",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ishur6tb",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imsm3lkb",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the right, and negative ones\nto the left. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qr82ca0t",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `mode` or `origin` must match the length\nof `axes`. The ith entry in any of these tuples corresponds to the ith\nentry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "igrfzgmt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.convolve",
                    "defaultValue": "scipy.ndimage.filters.convolve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yd1kezdl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2w1eba79",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1xqb2ojn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41hi0_l7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aahzi3pe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xif53b23",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "k5las7tv",
            "name": "filters.convolve1d",
            "description": "Calculate a 1-D convolution along the given axis.\n    \n    The lines of the array along the given axis are convolved with the\n    given weights.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : ndarray\n        1-D sequence of numbers.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    convolve1d : ndarray\n        Convolved array with same shape as input\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import convolve1d\n    >>> convolve1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3])\n    array([14, 24,  4, 13, 12, 36, 27,  0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e492f771ed13efc1b7f3dd5648d46ad37cf8a84e1ba9cd2aeace509e5162e454",
            "fields": [
                {
                    "id": "n0vey44d",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81vf5c8y",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D sequence of numbers.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymomjdz2",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h7q7cxoz",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w7nse9w7",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wr5at5m",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9mij4tqk",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "or1lrmly",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.convolve1d",
                    "defaultValue": "scipy.ndimage.filters.convolve1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckbe3559",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n9l63bkq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h5ixrjwr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "19bksurd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fd77bpa9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unbt595o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "advn6f9i",
            "name": "filters.correlate",
            "description": "Multidimensional correlation.\n    \n    The array is correlated with the given kernel.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : ndarray\n        array of weights, same number of dimensions as input\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `mode` or `origin` must match the length\n        of `axes`. The ith entry in any of these tuples corresponds to the ith\n        entry in `axes`.\n    \n    Returns\n    -------\n    result : ndarray\n        The result of correlation of `input` with `weights`.\n    \n    See Also\n    --------\n    convolve : Convolve an image with a kernel.\n    \n    Examples\n    --------\n    Correlation is the process of moving a filter mask often referred to\n    as kernel over the image and computing the sum of products at each location.\n    \n    >>> from scipy.ndimage import correlate\n    >>> import numpy as np\n    >>> input_img = np.arange(25).reshape(5,5)\n    >>> print(input_img)\n    [[ 0  1  2  3  4]\n    [ 5  6  7  8  9]\n    [10 11 12 13 14]\n    [15 16 17 18 19]\n    [20 21 22 23 24]]\n    \n    Define a kernel (weights) for correlation. In this example, it is for sum of\n    center and up, down, left and right next elements.\n    \n    >>> weights = [[0, 1, 0],\n    ...            [1, 1, 1],\n    ...            [0, 1, 0]]\n    \n    We can calculate a correlation result:\n    For example, element ``[2,2]`` is ``7 + 11 + 12 + 13 + 17 = 60``.\n    \n    >>> correlate(input_img, weights)\n    array([[  6,  10,  15,  20,  24],\n        [ 26,  30,  35,  40,  44],\n        [ 51,  55,  60,  65,  69],\n        [ 76,  80,  85,  90,  94],\n        [ 96, 100, 105, 110, 114]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "576f256946af842e6a745c853fedd4dfa65d3ce92da8e5d63c2244e2e360c49f",
            "fields": [
                {
                    "id": "an6r7_pt",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kg_6teu1",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "array of weights, same number of dimensions as input",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ha1p33mq",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7q5d6vk0",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "succlh9t",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t326mb9u",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ynwchvnh",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `mode` or `origin` must match the length\nof `axes`. The ith entry in any of these tuples corresponds to the ith\nentry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zi41e29m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.correlate",
                    "defaultValue": "scipy.ndimage.filters.correlate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dtmzjt44",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ie4hxkil",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5u_n7al4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2o7l8g39",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "indb9jy4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2vw2aruw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ue6dtrn_",
            "name": "filters.correlate1d",
            "description": "Calculate a 1-D correlation along the given axis.\n    \n    The lines of the array along the given axis are correlated with the\n    given weights.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    weights : array\n        1-D sequence of numbers.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    result : ndarray\n        Correlation result. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import correlate1d\n    >>> correlate1d([2, 8, 0, 4, 1, 9, 9, 0], weights=[1, 3])\n    array([ 8, 26,  8, 12,  7, 28, 36,  9])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0fcdb6f37bdb4eea241b4bc70414e0a3dc13e28618688b6cdc9bd900ca174fd2",
            "fields": [
                {
                    "id": "0dnnicxu",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3seglov",
                    "encoding": "",
                    "name": "weights",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D sequence of numbers.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8kwmo1o",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33l2frha",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pg5hdlpe",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mcox3bg8",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwm6w8vj",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41wtynhh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.correlate1d",
                    "defaultValue": "scipy.ndimage.filters.correlate1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sl2iih5w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yxndo5g4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5dbm3xvr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_ri84tl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o4r27c_0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1_58zrd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3njwyox9",
            "name": "filters.gaussian_filter",
            "description": "Multidimensional Gaussian filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar or sequence of scalars\n        Standard deviation for Gaussian kernel. The standard\n        deviations of the Gaussian filter are given for each axis as a\n        sequence, or as a single number, in which case it is equal for\n        all axes.\n    order : int or sequence of ints, optional\n        The order of the filter along each axis is given as a sequence\n        of integers, or as a single number. An order of 0 corresponds\n        to convolution with a Gaussian kernel. A positive order\n        corresponds to convolution with that derivative of a Gaussian.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    truncate : float, optional\n        Truncate the filter at this many standard deviations.\n        Default is 4.0.\n    radius : None or int or sequence of ints, optional\n        Radius of the Gaussian kernel. The radius are given for each axis\n        as a sequence, or as a single number, in which case it is equal\n        for all axes. If specified, the size of the kernel along each axis\n        will be ``2*radius + 1``, and `truncate` is ignored.\n        Default is None.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `sigma`, `order`, `mode` and/or `radius`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    gaussian_filter : ndarray\n        Returned array of same shape as `input`.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D convolution filters. The intermediate arrays are\n    stored in the same data type as the output. Therefore, for output\n    types with a limited precision, the results may be imprecise\n    because intermediate results may be stored with insufficient\n    precision.\n    \n    The Gaussian kernel will have size ``2*radius + 1`` along each axis. If\n    `radius` is None, the default ``radius = round(truncate * sigma)`` will be\n    used.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import gaussian_filter\n    >>> import numpy as np\n    >>> a = np.arange(50, step=2).reshape((5,5))\n    >>> a\n    array([[ 0,  2,  4,  6,  8],\n           [10, 12, 14, 16, 18],\n           [20, 22, 24, 26, 28],\n           [30, 32, 34, 36, 38],\n           [40, 42, 44, 46, 48]])\n    >>> gaussian_filter(a, sigma=1)\n    array([[ 4,  6,  8,  9, 11],\n           [10, 12, 14, 15, 17],\n           [20, 22, 24, 25, 27],\n           [29, 31, 33, 34, 36],\n           [35, 37, 39, 40, 42]])\n    \n    >>> from scipy import datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = gaussian_filter(ascent, sigma=5)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "86f5ab0e810343941defba6055b50c41f999eae8a92c85a1ae795a0c96b46bf2",
            "fields": [
                {
                    "id": "tjy2dhl7",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hdfbfy2g",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation for Gaussian kernel. The standard\ndeviations of the Gaussian filter are given for each axis as a\nsequence, or as a single number, in which case it is equal for\nall axes.",
                    "type": "scalar or sequence of scalars",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "chuyozwd",
                    "encoding": "",
                    "name": "order",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The order of the filter along each axis is given as a sequence\nof integers, or as a single number. An order of 0 corresponds\nto convolution with a Gaussian kernel. A positive order\ncorresponds to convolution with that derivative of a Gaussian.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qkl2fi30",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1r9kwzu8",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "juthwe9c",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fu_xxna_",
                    "encoding": "",
                    "name": "truncate",
                    "value": 4.0,
                    "defaultValue": 4.0,
                    "description": "Truncate the filter at this many standard deviations.\nDefault is 4.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2elykf58",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "Radius of the Gaussian kernel. The radius are given for each axis\nas a sequence, or as a single number, in which case it is equal\nfor all axes. If specified, the size of the kernel along each axis\nwill be ``2*radius + 1``, and `truncate` is ignored.\nDefault is None.",
                    "type": "None or int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2r7j2e9x",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `sigma`, `order`, `mode` and/or `radius`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nlhhdwr5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.gaussian_filter",
                    "defaultValue": "scipy.ndimage.filters.gaussian_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2r4m1j71",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1qj69c6b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "iqwf28kx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjnl_gg0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uceh9ck9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reuz7w07",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hdi74p5q",
            "name": "filters.gaussian_filter1d",
            "description": "1-D Gaussian filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar\n        standard deviation for Gaussian kernel\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    order : int, optional\n        An order of 0 corresponds to convolution with a Gaussian\n        kernel. A positive order corresponds to convolution with\n        that derivative of a Gaussian.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    truncate : float, optional\n        Truncate the filter at this many standard deviations.\n        Default is 4.0.\n    radius : None or int, optional\n        Radius of the Gaussian kernel. If specified, the size of\n        the kernel will be ``2*radius + 1``, and `truncate` is ignored.\n        Default is None.\n    \n    Returns\n    -------\n    gaussian_filter1d : ndarray\n    \n    Notes\n    -----\n    The Gaussian kernel will have size ``2*radius + 1`` along each axis. If\n    `radius` is None, a default ``radius = round(truncate * sigma)`` will be\n    used.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import gaussian_filter1d\n    >>> import numpy as np\n    >>> gaussian_filter1d([1.0, 2.0, 3.0, 4.0, 5.0], 1)\n    array([ 1.42704095,  2.06782203,  3.        ,  3.93217797,  4.57295905])\n    >>> gaussian_filter1d([1.0, 2.0, 3.0, 4.0, 5.0], 4)\n    array([ 2.91948343,  2.95023502,  3.        ,  3.04976498,  3.08051657])\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = rng.standard_normal(101).cumsum()\n    >>> y3 = gaussian_filter1d(x, 3)\n    >>> y6 = gaussian_filter1d(x, 6)\n    >>> plt.plot(x, 'k', label='original data')\n    >>> plt.plot(y3, '--', label='filtered, sigma=3')\n    >>> plt.plot(y6, ':', label='filtered, sigma=6')\n    >>> plt.legend()\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0ce1d88df7ba811b5e8b0080f02aa35624244ec679cd7569375f963ec9929ca",
            "fields": [
                {
                    "id": "w1b4gl5c",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0g1ii7c",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "standard deviation for Gaussian kernel",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cr8g93a2",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tcpss7dt",
                    "encoding": "",
                    "name": "order",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "An order of 0 corresponds to convolution with a Gaussian\nkernel. A positive order corresponds to convolution with\nthat derivative of a Gaussian.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6q7ubrwk",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhw_k4ga",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8s9u8sv",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m5l0yisv",
                    "encoding": "",
                    "name": "truncate",
                    "value": 4.0,
                    "defaultValue": 4.0,
                    "description": "Truncate the filter at this many standard deviations.\nDefault is 4.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9t9u68j6",
                    "encoding": "",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "Radius of the Gaussian kernel. If specified, the size of\nthe kernel will be ``2*radius + 1``, and `truncate` is ignored.\nDefault is None.",
                    "type": "None or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_92z35kj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.gaussian_filter1d",
                    "defaultValue": "scipy.ndimage.filters.gaussian_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qow_g8fh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dp_vzl7e",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lzvf6v1s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "phxssdqx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_li1ee2r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "faulflzb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1_j2xkkk",
            "name": "filters.gaussian_gradient_magnitude",
            "description": "Multidimensional gradient magnitude using Gaussian derivatives.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar or sequence of scalars\n        The standard deviations of the Gaussian filter are given for\n        each axis as a sequence, or as a single number, in which case\n        it is equal for all axes.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If `sigma` or `mode` tuples\n        are provided, their length must match the number of axes.\n    Extra keyword arguments will be passed to gaussian_filter().\n    \n    Returns\n    -------\n    gaussian_gradient_magnitude : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.gaussian_gradient_magnitude(ascent, sigma=5)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "883616aa88e153e8e120bfb1ece73709cc3687f1814f8ec4a52f5bc47a740bd3",
            "fields": [
                {
                    "id": "rz7ex4z_",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99sdur_n",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "The standard deviations of the Gaussian filter are given for\neach axis as a sequence, or as a single number, in which case\nit is equal for all axes.",
                    "type": "scalar or sequence of scalars",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7xqzdng",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qw3u60yw",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nllpcun",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "682np_mt",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If `sigma` or `mode` tuples\nare provided, their length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0b_g2k9j",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5n2o6_fn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.gaussian_gradient_magnitude",
                    "defaultValue": "scipy.ndimage.filters.gaussian_gradient_magnitude",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4z31o81",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ddtzc5p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "roih6s0o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4gpartwe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fuk0jm5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acyc0apt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "n8peg93k",
            "name": "filters.gaussian_laplace",
            "description": "Multidimensional Laplace filter using Gaussian second derivatives.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : scalar or sequence of scalars\n        The standard deviations of the Gaussian filter are given for\n        each axis as a sequence, or as a single number, in which case\n        it is equal for all axes.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If `sigma` or `mode` tuples\n        are provided, their length must match the number of axes.\n    Extra keyword arguments will be passed to gaussian_filter().\n    \n    Returns\n    -------\n    gaussian_laplace : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> ascent = datasets.ascent()\n    \n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    \n    >>> result = ndimage.gaussian_laplace(ascent, sigma=1)\n    >>> ax1.imshow(result)\n    \n    >>> result = ndimage.gaussian_laplace(ascent, sigma=3)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ba61a25f53a6e966641520bb108ba6706b27fe7caf4a71461423ebd115c64b72",
            "fields": [
                {
                    "id": "uo34lkgt",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7qw2en8",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "The standard deviations of the Gaussian filter are given for\neach axis as a sequence, or as a single number, in which case\nit is equal for all axes.",
                    "type": "scalar or sequence of scalars",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nf8f95up",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x_sdimwd",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2_d_s3q",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uw4smfki",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If `sigma` or `mode` tuples\nare provided, their length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c33ij5c4",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xisao510",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.gaussian_laplace",
                    "defaultValue": "scipy.ndimage.filters.gaussian_laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p86cr0wm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxoxuaki",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9vs3colm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eh_ltolp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sn4ayfqg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y6_i39ph",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "paight3u",
            "name": "filters.generic_filter",
            "description": "Calculate a multidimensional filter using the given function.\n    \n    At each element the provided function is called. The input values\n    within the filter footprint at that element are passed to the function\n    as a 1-D array of double values.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    function : {callable, scipy.LowLevelCallable}\n        Function to apply at each element.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size` or `origin` must match the length\n        of `axes`. The ith entry in any of these tuples corresponds to the ith\n        entry in `axes`.\n    \n    Returns\n    -------\n    output : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    vectorized_filter : similar functionality, but optimized for vectorized callables\n    \n    Notes\n    -----\n    This function is ideal for use with instances of `scipy.LowLevelCallable`;\n    for vectorized, pure-Python callables, consider `vectorized_filter` for improved\n    performance.\n    \n    Low-level callback functions must have one of the following signatures:\n    \n    .. code:: c\n    \n       int callback(double *buffer, npy_intp filter_size,\n                    double *return_value, void *user_data)\n       int callback(double *buffer, intptr_t filter_size,\n                    double *return_value, void *user_data)\n    \n    The calling function iterates over the elements of the input and\n    output arrays, calling the callback function at each element. The\n    elements within the footprint of the filter at the current element are\n    passed through the ``buffer`` parameter, and the number of elements\n    within the footprint through ``filter_size``. The calculated value is\n    returned in ``return_value``. ``user_data`` is the data pointer provided\n    to `scipy.LowLevelCallable` as-is.\n    \n    The callback function must return an integer error status that is zero\n    if something went wrong and one otherwise. If an error occurs, you should\n    normally set the python error status with an informative message\n    before returning, otherwise a default error message is set by the\n    calling function.\n    \n    In addition, some other low-level function pointer specifications\n    are accepted, but these are for backward compatibility only and should\n    not be used in new code.\n    \n    Examples\n    --------\n    Import the necessary modules and load the example image used for\n    filtering.\n    \n    >>> import numpy as np\n    >>> from scipy import datasets\n    >>> from scipy.ndimage import zoom, generic_filter\n    >>> import matplotlib.pyplot as plt\n    >>> ascent = zoom(datasets.ascent(), 0.5)\n    \n    Compute a maximum filter with kernel size 5 by passing a simple NumPy\n    aggregation function as argument to `function`.\n    \n    >>> maximum_filter_result = generic_filter(ascent, np.amax, [5, 5])\n    \n    While a maximum filter could also directly be obtained using\n    `maximum_filter`, `generic_filter` allows generic Python function or\n    `scipy.LowLevelCallable` to be used as a filter. Here, we compute the\n    range between maximum and minimum value as an example for a kernel size\n    of 5.\n    \n    >>> def custom_filter(image):\n    ...     return np.amax(image) - np.amin(image)\n    >>> custom_filter_result = generic_filter(ascent, custom_filter, [5, 5])\n    \n    Plot the original and filtered images.\n    \n    >>> fig, axes = plt.subplots(3, 1, figsize=(3, 9))\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> top, middle, bottom = axes\n    >>> for ax in axes:\n    ...     ax.set_axis_off()  # remove coordinate system\n    >>> top.imshow(ascent)\n    >>> top.set_title(\"Original image\")\n    >>> middle.imshow(maximum_filter_result)\n    >>> middle.set_title(\"Maximum filter, Kernel: 5x5\")\n    >>> bottom.imshow(custom_filter_result)\n    >>> bottom.set_title(\"Custom filter, Kernel: 5x5\")\n    >>> fig.tight_layout()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "58543336d45de467e382b0119c7d5937ffe7428c4cdf05165f9bf83194c568f9",
            "fields": [
                {
                    "id": "ttg1ombq",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5__gkod5",
                    "encoding": "",
                    "name": "function",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to apply at each element.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "679yzq1i",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zjvwyhmv",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mmlelnh",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2fbmkb9d",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gmkvwg_r",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gnq991jh",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gilvfrch",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "siiww8d5",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sj9pmuhu",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size` or `origin` must match the length\nof `axes`. The ith entry in any of these tuples corresponds to the ith\nentry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqn4ivz3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.generic_filter",
                    "defaultValue": "scipy.ndimage.filters.generic_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkbg53uw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8nqudwm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mmo31cho",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qzubt1o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bajnccdu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "em0ijmb4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_2wp9tyh",
            "name": "filters.generic_filter1d",
            "description": "Calculate a 1-D filter along the given axis.\n    \n    `generic_filter1d` iterates over the lines of the array, calling the\n    given function at each line. The arguments of the line are the\n    input line, and the output line. The input and output lines are 1-D\n    double arrays. The input line is extended appropriately according\n    to the filter size and origin. The output line must be modified\n    in-place with the result.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    function : {callable, scipy.LowLevelCallable}\n        Function to apply along given axis.\n    filter_size : scalar\n        Length of the filter.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    \n    Returns\n    -------\n    generic_filter1d : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    This function also accepts low-level callback functions with one of\n    the following signatures and wrapped in `scipy.LowLevelCallable`:\n    \n    .. code:: c\n    \n       int function(double *input_line, npy_intp input_length,\n                    double *output_line, npy_intp output_length,\n                    void *user_data)\n       int function(double *input_line, intptr_t input_length,\n                    double *output_line, intptr_t output_length,\n                    void *user_data)\n    \n    The calling function iterates over the lines of the input and output\n    arrays, calling the callback function at each line. The current line\n    is extended according to the border conditions set by the calling\n    function, and the result is copied into the array that is passed\n    through ``input_line``. The length of the input line (after extension)\n    is passed through ``input_length``. The callback function should apply\n    the filter and store the result in the array passed through\n    ``output_line``. The length of the output line is passed through\n    ``output_length``. ``user_data`` is the data pointer provided\n    to `scipy.LowLevelCallable` as-is.\n    \n    The callback function must return an integer error status that is zero\n    if something went wrong and one otherwise. If an error occurs, you should\n    normally set the python error status with an informative message\n    before returning, otherwise a default error message is set by the\n    calling function.\n    \n    In addition, some other low-level function pointer specifications\n    are accepted, but these are for backward compatibility only and should\n    not be used in new code.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d92075a974bf2a885e8417a0fd12f40c8836d6f4e6d3f769d05f40b5c08729a5",
            "fields": [
                {
                    "id": "ve7qwuh_",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jvs8d3om",
                    "encoding": "",
                    "name": "function",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to apply along given axis.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w0nut58d",
                    "encoding": "",
                    "name": "filter_size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the filter.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e8931m4a",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ubgowoc",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7y2yc7z5",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgpt3ta3",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gy3si1xc",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "az8z_iv5",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qeitv01v",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gtyrpehi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.generic_filter1d",
                    "defaultValue": "scipy.ndimage.filters.generic_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azoimxqx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "137jygbv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0u0j0tav",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqojf12s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "czdvwz8o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep5t6ip9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jwm0u90w",
            "name": "filters.generic_gradient_magnitude",
            "description": "Gradient magnitude using a provided gradient function.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    derivative : callable\n        Callable with the following signature::\n    \n            derivative(input, axis, output, mode, cval,\n                       *extra_arguments, **extra_keywords)\n    \n        See `extra_arguments`, `extra_keywords` below.\n        `derivative` can assume that `input` and `output` are ndarrays.\n        Note that the output from `derivative` is modified inplace;\n        be careful to copy important inputs before returning them.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If a `mode` tuple is\n        provided, its length must match the number of axes.\n    \n    Returns\n    -------\n    generic_gradient_magnitude : ndarray\n        Filtered array. Has the same shape as `input`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "78ef07d179c99fabab3e2f6c9919f983661feabdd953fdf3f9bf6f7aef8d15f0",
            "fields": [
                {
                    "id": "6yhcgq7a",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_g553i4",
                    "encoding": "",
                    "name": "derivative",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callable with the following signature::\n\n    derivative(input, axis, output, mode, cval,\n               *extra_arguments, **extra_keywords)\n\nSee `extra_arguments`, `extra_keywords` below.\n`derivative` can assume that `input` and `output` are ndarrays.\nNote that the output from `derivative` is modified inplace;\nbe careful to copy important inputs before returning them.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gi6vp7se",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hr3ha7dq",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qetxaxz5",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2lztqzn",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5emhul4f",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7huuihvm",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If a `mode` tuple is\nprovided, its length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mrbxota",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.generic_gradient_magnitude",
                    "defaultValue": "scipy.ndimage.filters.generic_gradient_magnitude",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x7_its2_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6da160n4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "78cavqh8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sxe3kfk7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k2upvf8w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ela0l3c_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2s_0dd4s",
            "name": "filters.generic_laplace",
            "description": "N-D Laplace filter using a provided second derivative function.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    derivative2 : callable\n        Callable with the following signature::\n    \n            derivative2(input, axis, output, mode, cval,\n                        *extra_arguments, **extra_keywords)\n    \n        See `extra_arguments`, `extra_keywords` below.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    extra_keywords : dict, optional\n        dict of extra keyword arguments to pass to passed function.\n    extra_arguments : sequence, optional\n        Sequence of extra positional arguments to pass to passed function.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If a `mode` tuple is\n        provided, its length must match the number of axes.\n    \n    Returns\n    -------\n    generic_laplace : ndarray\n        Filtered array. Has the same shape as `input`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c344134df4ac7e0d9575e4c65ea3cbe4c40766a75d5f90bd42f06770cc65b1c8",
            "fields": [
                {
                    "id": "ddyk6110",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r7_zwmxa",
                    "encoding": "",
                    "name": "derivative2",
                    "value": "",
                    "defaultValue": "",
                    "description": "Callable with the following signature::\n\n    derivative2(input, axis, output, mode, cval,\n                *extra_arguments, **extra_keywords)\n\nSee `extra_arguments`, `extra_keywords` below.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szz8631a",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7m1zh5qb",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88kr90vj",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy0shldl",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Sequence of extra positional arguments to pass to passed function.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0w0iy_tz",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "dict of extra keyword arguments to pass to passed function.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nsbl26wg",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If a `mode` tuple is\nprovided, its length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3flvxok4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.generic_laplace",
                    "defaultValue": "scipy.ndimage.filters.generic_laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_29tco5x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b0ecojf_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3vdy32xj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7aw78wh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61d24ug8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ze83d7os",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "85c3qoot",
            "name": "filters.laplace",
            "description": "N-D Laplace filter based on approximate second derivatives.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If a `mode` tuple is\n        provided, its length must match the number of axes.\n    \n    Returns\n    -------\n    laplace : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.laplace(ascent)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "315f0abaefdd08b1d77969fc14f305c078d69f5f0b3489af7b59fd1ef092e254",
            "fields": [
                {
                    "id": "c0lrteh8",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hq6_nyx",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "troif2m7",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfbkikcm",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frqxe3xa",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If a `mode` tuple is\nprovided, its length must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y6jpzuz9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.laplace",
                    "defaultValue": "scipy.ndimage.filters.laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cl8sqezf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0xc382m3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8ae6p4ns",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kln6fudi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_rii6aj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88w9kos2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dondmkxo",
            "name": "filters.maximum_filter",
            "description": "Calculate a multidimensional maximum filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    maximum_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    A sequence of modes (one per axis) is only supported when the footprint is\n    separable. Otherwise, a single mode string must be provided.\n    \n    The behavior of this function with NaN elements is undefined. To control\n    behavior in the presence of NaNs, consider using `vectorized_filter`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.maximum_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3865422cbf93e2111beb26dfa121545de70a2a32c090d5b0494a890463d833da",
            "fields": [
                {
                    "id": "3r4ele0w",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bttxafuf",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0rhb7q07",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ti_3nl1g",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "crhczh47",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpcr_w_f",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "extl0_o3",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bydtvgcd",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntwiwgub",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.maximum_filter",
                    "defaultValue": "scipy.ndimage.filters.maximum_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbjro43o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zn_42dhk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yrya5gje",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0aqptdb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nf09y4_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gltt82_j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ur791956",
            "name": "filters.maximum_filter1d",
            "description": "Calculate a 1-D maximum filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    maximum filter of given size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int\n        Length along which to calculate the 1-D maximum.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    maximum1d : ndarray, None\n        Maximum-filtered array with same shape as input.\n        None if `output` is not None\n    \n    Notes\n    -----\n    This function implements the MAXLIST algorithm [1]_, as described by\n    Richard Harter [2]_, and has a guaranteed O(n) performance, `n` being\n    the `input` length, regardless of filter size.\n    \n    References\n    ----------\n    .. [1] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.2777\n    .. [2] http://www.richardhartersworld.com/cri/2001/slidingmin.html\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import maximum_filter1d\n    >>> maximum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)\n    array([8, 8, 8, 4, 9, 9, 9, 9])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "87891837f9a5806c6236af137490cb8016911c46e1637afb2ebc051e6f6835c2",
            "fields": [
                {
                    "id": "jcacb8ts",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m7nggd8_",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length along which to calculate the 1-D maximum.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hvujmg7l",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qsn7b_4d",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yqdj3mb3",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qaaa91a2",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csi0772j",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dxe8_tn7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.maximum_filter1d",
                    "defaultValue": "scipy.ndimage.filters.maximum_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n51n7ild",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bd75viku",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dpaxu1dp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e324a5y2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "peuwvf9h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sa4ry4pz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nuillfj9",
            "name": "filters.median_filter",
            "description": "Calculate a multidimensional median filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    median_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    scipy.signal.medfilt2d\n    \n    Notes\n    -----\n    For 2-dimensional images with ``uint8``, ``float32`` or ``float64`` dtypes\n    the specialised function `scipy.signal.medfilt2d` may be faster. It is\n    however limited to constant mode with ``cval=0``.\n    \n    The filter always returns the argument that would appear at index ``n // 2`` in\n    a sorted array, where ``n`` is the number of elements in the footprint of the\n    filter. Note that this differs from the conventional definition of the median\n    when ``n`` is even. Also, this function does not support the ``float16`` dtype,\n    behavior in the presence of NaNs is undefined, and memory consumption scales with\n    ``n**4``. For ``float16`` support, greater control over the definition of the\n    filter, and to limit memory usage, consider using `vectorized_filter` with\n    NumPy functions `np.median` or `np.nanmedian`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.median_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5b833e11be11378c8677db538a2e67d59216a188bb8fe8eb4cd1fdf9d7151eb6",
            "fields": [
                {
                    "id": "2lc_kslh",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4ue5383",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jx8ustii",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uz0kq4jp",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ovoi5wo",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "10jjb9wx",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_cn92twc",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7go_8g8m",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "inz1m1c0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.median_filter",
                    "defaultValue": "scipy.ndimage.filters.median_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l648nuzv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yhy97on3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rzsk4osj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o821qq0a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_63d32xa",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1dc9tygm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2nxgi5up",
            "name": "filters.minimum_filter",
            "description": "Calculate a multidimensional minimum filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    minimum_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    A sequence of modes (one per axis) is only supported when the footprint is\n    separable. Otherwise, a single mode string must be provided.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.minimum_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ccb1e24d69e2e6ac72568f564435115a71d54b0e42bff8e0b06381f717b50021",
            "fields": [
                {
                    "id": "g7s0z3nl",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2odk9yu",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1efwx8cu",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b68b554x",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhxtiak8",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3t3j6kud",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sa07tv8l",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nec1h9rt",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mulpbxqc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.minimum_filter",
                    "defaultValue": "scipy.ndimage.filters.minimum_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ysiif4w4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kh8wr5ba",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "altys_i_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x90f5vnv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c1mwpca0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "26cb2k7p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "83obshlc",
            "name": "filters.minimum_filter1d",
            "description": "Calculate a 1-D minimum filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    minimum filter of given size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int\n        length along which to calculate 1D minimum\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    result : ndarray.\n        Filtered image. Has the same shape as `input`.\n    \n    Notes\n    -----\n    This function implements the MINLIST algorithm [1]_, as described by\n    Richard Harter [2]_, and has a guaranteed O(n) performance, `n` being\n    the `input` length, regardless of filter size.\n    \n    References\n    ----------\n    .. [1] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.42.2777\n    .. [2] http://www.richardhartersworld.com/cri/2001/slidingmin.html\n    \n    \n    Examples\n    --------\n    >>> from scipy.ndimage import minimum_filter1d\n    >>> minimum_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)\n    array([2, 0, 0, 0, 1, 1, 0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "83b6dc87eb255b125a1ef3c1a2bcd1205891dc6135c74bbc06f88282532b4252",
            "fields": [
                {
                    "id": "kvpw8cz_",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxhnvb4j",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "length along which to calculate 1D minimum",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5c3sejk",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8y8g8fu3",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "91n15ege",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_bilwv0",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ioul_l1",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o22u2pps",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.minimum_filter1d",
                    "defaultValue": "scipy.ndimage.filters.minimum_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v02dxg8l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vb8djmcc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "exisliag",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ilcs438u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u24tb3no",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jtx0rpn3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "06u78cvk",
            "name": "filters.percentile_filter",
            "description": "Calculate a multidimensional percentile filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    percentile : scalar\n        The percentile parameter may be less than zero, i.e.,\n        percentile = -20 equals percentile = 80\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    percentile_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.percentile_filter(ascent, percentile=20, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3d8493554e4759fc4be992b5851d86dd3a1d72b8e4e334b5e9387d7249cec64a",
            "fields": [
                {
                    "id": "nqze4_h0",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w14zqtau",
                    "encoding": "",
                    "name": "percentile",
                    "value": "",
                    "defaultValue": "",
                    "description": "The percentile parameter may be less than zero, i.e.,\npercentile = -20 equals percentile = 80",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2hbkpu3",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5x_a3gdx",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "480k7p9a",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cd_4izh4",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rov418k5",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xokx4yat",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "62_tvpp1",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b__scnc4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.percentile_filter",
                    "defaultValue": "scipy.ndimage.filters.percentile_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3oz02_z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2lvlcvaa",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uitlj3ud",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2f6w56d8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lgwzisr6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urd_sktq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7us3lulr",
            "name": "filters.prewitt",
            "description": "Calculate a Prewitt filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    \n    Returns\n    -------\n    prewitt : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    sobel: Sobel filter\n    \n    Notes\n    -----\n    This function computes the one-dimensional Prewitt filter.\n    Horizontal edges are emphasised with the horizontal transform (axis=0),\n    vertical edges with the vertical transform (axis=1), and so on for higher\n    dimensions. These can be combined to give the magnitude.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> ascent = datasets.ascent()\n    >>> prewitt_h = ndimage.prewitt(ascent, axis=0)\n    >>> prewitt_v = ndimage.prewitt(ascent, axis=1)\n    >>> magnitude = np.sqrt(prewitt_h ** 2 + prewitt_v ** 2)\n    >>> magnitude *= 255 / np.max(magnitude) # Normalization\n    >>> fig, axes = plt.subplots(2, 2, figsize = (8, 8))\n    >>> plt.gray()\n    >>> axes[0, 0].imshow(ascent)\n    >>> axes[0, 1].imshow(prewitt_h)\n    >>> axes[1, 0].imshow(prewitt_v)\n    >>> axes[1, 1].imshow(magnitude)\n    >>> titles = [\"original\", \"horizontal\", \"vertical\", \"magnitude\"]\n    >>> for i, ax in enumerate(axes.ravel()):\n    ...     ax.set_title(titles[i])\n    ...     ax.axis(\"off\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12871ce443d11ff1512c4a99927701149aeaae3173c8c77a3a192eb19bf2a89d",
            "fields": [
                {
                    "id": "3kqse4c3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ew5gqwn",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8eniit1",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33u86dx3",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ryiecybr",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "abryj2jo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.prewitt",
                    "defaultValue": "scipy.ndimage.filters.prewitt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6nblab26",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acxsmnrk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "69y9q6qq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ox4xapnd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8641_gtc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1cxyyzld",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bhx45ja7",
            "name": "filters.rank_filter",
            "description": "Calculate a multidimensional rank filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    rank : int\n        The rank parameter may be less than zero, i.e., rank = -1\n        indicates the largest element.\n    size : scalar or tuple, optional\n        See footprint, below. Ignored if footprint is given.\n    footprint : array, optional\n        Either `size` or `footprint` must be defined. `size` gives\n        the shape that is taken from the input array, at every element\n        position, to define the input to the filter function.\n        `footprint` is a boolean array that specifies (implicitly) a\n        shape, but also which of the elements within this shape will get\n        passed to the filter function. Thus ``size=(n,m)`` is equivalent\n        to ``footprint=np.ones((n,m))``.  We adjust `size` to the number\n        of dimensions of the input array, so that, if the input array is\n        shape (10,10,10), and `size` is 2, then the actual size used is\n        (2,2,2). When `footprint` is given, `size` is ignored.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    rank_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.rank_filter(ascent, rank=42, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "25e79c302d2cfaeb2d63dfc82d69e2644786f84e2598d94db10ce69a1893fbfa",
            "fields": [
                {
                    "id": "a4539d19",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js5veing",
                    "encoding": "",
                    "name": "rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "The rank parameter may be less than zero, i.e., rank = -1\nindicates the largest element.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3evo337",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "See footprint, below. Ignored if footprint is given.",
                    "type": "scalar or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2pev2km",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Either `size` or `footprint` must be defined. `size` gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n`footprint` is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus ``size=(n,m)`` is equivalent\nto ``footprint=np.ones((n,m))``.  We adjust `size` to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and `size` is 2, then the actual size used is\n(2,2,2). When `footprint` is given, `size` is ignored.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ge4zlidp",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dqnljb5a",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fsmm_gvs",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n19jh0i_",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suuk4e7l",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cuh2zd07",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.rank_filter",
                    "defaultValue": "scipy.ndimage.filters.rank_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af6ehant",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w45kwdjn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4xlj9yya",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f9z5lyiy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "92l7mzv4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ymzefn_i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wmlo4_kx",
            "name": "filters.sobel",
            "description": "Calculate a Sobel filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    \n    Returns\n    -------\n    sobel : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    This function computes the axis-specific Sobel gradient.\n    The horizontal edges can be emphasised with the horizontal transform (axis=0),\n    the vertical edges with the vertical transform (axis=1) and so on for higher\n    dimensions. These can be combined to give the magnitude.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> ascent = datasets.ascent().astype('int32')\n    >>> sobel_h = ndimage.sobel(ascent, 0)  # horizontal gradient\n    >>> sobel_v = ndimage.sobel(ascent, 1)  # vertical gradient\n    >>> magnitude = np.sqrt(sobel_h**2 + sobel_v**2)\n    >>> magnitude *= 255.0 / np.max(magnitude)  # normalization\n    >>> fig, axs = plt.subplots(2, 2, figsize=(8, 8))\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> axs[0, 0].imshow(ascent)\n    >>> axs[0, 1].imshow(sobel_h)\n    >>> axs[1, 0].imshow(sobel_v)\n    >>> axs[1, 1].imshow(magnitude)\n    >>> titles = [\"original\", \"horizontal\", \"vertical\", \"magnitude\"]\n    >>> for i, ax in enumerate(axs.ravel()):\n    ...     ax.set_title(titles[i])\n    ...     ax.axis(\"off\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "30b0ba1bbf90660661e44d183eb95388b12b5d4df0a36241fb5f7294326573bc",
            "fields": [
                {
                    "id": "bgvajks3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7x6l3z7",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2q_rsblv",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_pkkhcx",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "897s3cti",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ygiov8aa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.sobel",
                    "defaultValue": "scipy.ndimage.filters.sobel",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ux6epagc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4m576tp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bb79apwl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ewles0iv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4cit9mz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6r14hstb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "d7e3vqh1",
            "name": "filters.uniform_filter",
            "description": "Multidimensional uniform filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int or sequence of ints, optional\n        The sizes of the uniform filter are given for each axis as a\n        sequence, or as a single number, in which case the size is\n        equal for all axes.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : str or sequence, optional\n        The `mode` parameter determines how the input array is extended\n        when the filter overlaps a border. By passing a sequence of modes\n        with length equal to the number of dimensions of the input array,\n        different modes can be specified along each axis. Default value is\n        'reflect'. The valid values and their behavior is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int or sequence, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right. By passing a sequence of origins with length equal to\n        the number of dimensions of the input array, different shifts can\n        be specified along each axis.\n    axes : tuple of int or None, optional\n        If None, `input` is filtered along all axes. Otherwise,\n        `input` is filtered along the specified axes. When `axes` is\n        specified, any tuples used for `size`, `origin`, and/or `mode`\n        must match the length of `axes`. The ith entry in any of these tuples\n        corresponds to the ith entry in `axes`.\n    \n    Returns\n    -------\n    uniform_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D uniform filters. The intermediate arrays are stored\n    in the same data type as the output. Therefore, for output types\n    with a limited precision, the results may be imprecise because\n    intermediate results may be stored with insufficient precision.\n    \n    The behavior of this function with NaN elements is undefined. To control\n    behavior in the presence of NaNs, consider using `vectorized_filter`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.uniform_filter(ascent, size=20)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "73ad86ab9e9da1b626754bcbc02d2608609653e72b84d4d0499b9fa2367e7524",
            "fields": [
                {
                    "id": "w385_t8t",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "blo2ycl3",
                    "encoding": "",
                    "name": "size",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The sizes of the uniform filter are given for each axis as a\nsequence, or as a single number, in which case the size is\nequal for all axes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmksej78",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njga1uzx",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nwhen the filter overlaps a border. By passing a sequence of modes\nwith length equal to the number of dimensions of the input array,\ndifferent modes can be specified along each axis. Default value is\n'reflect'. The valid values and their behavior is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4819u28m",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhjg94da",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zp__2vjg",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "If None, `input` is filtered along all axes. Otherwise,\n`input` is filtered along the specified axes. When `axes` is\nspecified, any tuples used for `size`, `origin`, and/or `mode`\nmust match the length of `axes`. The ith entry in any of these tuples\ncorresponds to the ith entry in `axes`.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3ket913",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.uniform_filter",
                    "defaultValue": "scipy.ndimage.filters.uniform_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1mbq8qsy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1l8owzcc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lbpciyrb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2yr9glt",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0sy79tk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kxh15av",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "v4fogsvm",
            "name": "filters.uniform_filter1d",
            "description": "Calculate a 1-D uniform filter along the given axis.\n    \n    The lines of the array along the given axis are filtered with a\n    uniform filter of given size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : int\n        length of uniform filter\n    axis : int, optional\n        The axis of `input` along which to calculate. Default is -1.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'reflect'. Behavior for each valid\n        value is as follows:\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        For consistency with the interpolation functions, the following mode\n        names can also be used:\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'grid-constant'\n            This is a synonym for 'constant'.\n    \n        'grid-wrap'\n            This is a synonym for 'wrap'.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : int, optional\n        Controls the placement of the filter on the input array's pixels.\n        A value of 0 (the default) centers the filter over the pixel, with\n        positive values shifting the filter to the left, and negative ones\n        to the right.\n    \n    Returns\n    -------\n    result : ndarray\n        Filtered array. Has same shape as `input`.\n    \n    Examples\n    --------\n    >>> from scipy.ndimage import uniform_filter1d\n    >>> uniform_filter1d([2, 8, 0, 4, 1, 9, 9, 0], size=3)\n    array([4, 3, 4, 1, 4, 6, 6, 3])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e0dbee05fd48c1f93f12ceba7944e4f7d8d0af0aee17d3d490c8ed3836c2d41b",
            "fields": [
                {
                    "id": "o15p78pc",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ov185k_g",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "length of uniform filter",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxr427v_",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of `input` along which to calculate. Default is -1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nou9zsb4",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33c7zaku",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'reflect'. Behavior for each valid\nvalue is as follows:\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\nFor consistency with the interpolation functions, the following mode\nnames can also be used:\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'grid-constant'\n    This is a synonym for 'constant'.\n\n'grid-wrap'\n    This is a synonym for 'wrap'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brurrd13",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ykpao2di",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the placement of the filter on the input array's pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nk0z7hwh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.filters.uniform_filter1d",
                    "defaultValue": "scipy.ndimage.filters.uniform_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tkqn1gn3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lz4jeelc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hof7zovk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kdwwgaf4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.filters",
                    "defaultValue": "scipy.ndimage.filters",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_l_p69s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6gx627pu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gqo_cknf",
            "name": "fourier.fourier_ellipsoid",
            "description": "Multidimensional ellipsoid Fourier filter.\n    \n    The array is multiplied with the fourier transform of an ellipsoid of\n    given sizes.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : float or sequence\n        The size of the box used for filtering.\n        If a float, `size` is the same for all axes. If a sequence, `size` has\n        to contain one value for each axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of filtering the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_ellipsoid : ndarray\n        The filtered input.\n    \n    Notes\n    -----\n    This function is implemented for arrays of rank 1, 2, or 3.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import numpy.fft\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_ellipsoid(input_, size=20)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a0f75f5fab74acd25f88cc01a4633e92387d1e0a8e3e2c2b27ef406c2316d016",
            "fields": [
                {
                    "id": "42g4t1c2",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pvsju1fx",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the box used for filtering.\nIf a float, `size` is the same for all axes. If a sequence, `size` has\nto contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p18tnj1z",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j76hogps",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljn81v_7",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of filtering the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8bz0g9q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier.fourier_ellipsoid",
                    "defaultValue": "scipy.ndimage.fourier.fourier_ellipsoid",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a4v0_ra9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fb4j6byg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dkc2kgia",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "74nz25gm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.fourier",
                    "defaultValue": "scipy.ndimage.fourier",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozizssdu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "58lcgcd4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5lhigbu8",
            "name": "fourier.fourier_gaussian",
            "description": "Multidimensional Gaussian fourier filter.\n    \n    The array is multiplied with the fourier transform of a Gaussian\n    kernel.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    sigma : float or sequence\n        The sigma of the Gaussian kernel. If a float, `sigma` is the same for\n        all axes. If a sequence, `sigma` has to contain one value for each\n        axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of filtering the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_gaussian : ndarray\n        The filtered input.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import numpy.fft\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_gaussian(input_, sigma=4)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6cd85a732cebf3cd9f3945fc4d32fc4b0b1c3c0d67ca15b60b6f9199c1f04bb7",
            "fields": [
                {
                    "id": "moosc5q3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xl5f5j7",
                    "encoding": "",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "The sigma of the Gaussian kernel. If a float, `sigma` is the same for\nall axes. If a sequence, `sigma` has to contain one value for each\naxis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6eezwzj4",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v01j5hta",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "krey8t6v",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of filtering the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0qny3ke",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier.fourier_gaussian",
                    "defaultValue": "scipy.ndimage.fourier.fourier_gaussian",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mf__k7j0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_sf7lys2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xvdfx560",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46u1gcqr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.fourier",
                    "defaultValue": "scipy.ndimage.fourier",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jz8hxl1h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_lylx2gz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mzvoyy3q",
            "name": "fourier.fourier_shift",
            "description": "Multidimensional Fourier shift filter.\n    \n    The array is multiplied with the Fourier transform of a shift operation.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    shift : float or sequence\n        The size of the box used for filtering.\n        If a float, `shift` is the same for all axes. If a sequence, `shift`\n        has to contain one value for each axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of shifting the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_shift : ndarray\n        The shifted input.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> import numpy.fft\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_shift(input_, shift=200)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f391c82c08710c55a610b13d996253dc4b1c34970af9bc9a3552233c9c070cf7",
            "fields": [
                {
                    "id": "0tuc2d6q",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lb54vnd8",
                    "encoding": "",
                    "name": "shift",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the box used for filtering.\nIf a float, `shift` is the same for all axes. If a sequence, `shift`\nhas to contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xcwqixk5",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "shnkf1px",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "axq9t1ao",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of shifting the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lyz2q78j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier.fourier_shift",
                    "defaultValue": "scipy.ndimage.fourier.fourier_shift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nxlfu5j9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nq4t3ntt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u7gz1osf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6oqwmht",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.fourier",
                    "defaultValue": "scipy.ndimage.fourier",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfixbdnh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0__3ovmo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "j5kuo6bv",
            "name": "fourier.fourier_uniform",
            "description": "Multidimensional uniform fourier filter.\n    \n    The array is multiplied with the Fourier transform of a box of given\n    size.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    size : float or sequence\n        The size of the box used for filtering.\n        If a float, `size` is the same for all axes. If a sequence, `size` has\n        to contain one value for each axis.\n    n : int, optional\n        If `n` is negative (default), then the input is assumed to be the\n        result of a complex fft.\n        If `n` is larger than or equal to zero, the input is assumed to be the\n        result of a real fft, and `n` gives the length of the array before\n        transformation along the real transform direction.\n    axis : int, optional\n        The axis of the real transform.\n    output : ndarray, optional\n        If given, the result of filtering the input is placed in this array.\n    \n    Returns\n    -------\n    fourier_uniform : ndarray\n        The filtered input.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import numpy.fft\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2)\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> ascent = datasets.ascent()\n    >>> input_ = numpy.fft.fft2(ascent)\n    >>> result = ndimage.fourier_uniform(input_, size=20)\n    >>> result = numpy.fft.ifft2(result)\n    >>> ax1.imshow(ascent)\n    >>> ax2.imshow(result.real)  # the imaginary part is an artifact\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bc4db70b4342c0bdb140a3e5a12950526fa01b74c03c8d39e58f6fb3d92a4889",
            "fields": [
                {
                    "id": "0qgqoc8o",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jbrkmrz1",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "The size of the box used for filtering.\nIf a float, `size` is the same for all axes. If a sequence, `size` has\nto contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8mnji4e",
                    "encoding": "",
                    "name": "n",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "If `n` is negative (default), then the input is assumed to be the\nresult of a complex fft.\nIf `n` is larger than or equal to zero, the input is assumed to be the\nresult of a real fft, and `n` gives the length of the array before\ntransformation along the real transform direction.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0_ywu4w",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis of the real transform.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azynlov6",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the result of filtering the input is placed in this array.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t47p1jkd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.fourier.fourier_uniform",
                    "defaultValue": "scipy.ndimage.fourier.fourier_uniform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1796kud",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wy07_v6n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "172e7vgx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cj6r4mz5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.fourier",
                    "defaultValue": "scipy.ndimage.fourier",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b_wypfmr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0j623jkl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f0xucxj_",
            "name": "interpolation.affine_transform",
            "description": "Apply an affine transformation.\n    \n    Given an output image pixel index vector ``o``, the pixel value\n    is determined from the input image at position\n    ``np.dot(matrix, o) + offset``.\n    \n    This does 'pull' (or 'backward') resampling, transforming the output space\n    to the input to locate data. Affine transformations are often described in\n    the 'push' (or 'forward') direction, transforming input to output. If you\n    have a matrix for the 'push' transformation, use its inverse\n    (:func:`numpy.linalg.inv`) in this function.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    matrix : ndarray\n        The inverse coordinate transformation matrix, mapping output\n        coordinates to input coordinates. If ``ndim`` is the number of\n        dimensions of ``input``, the given matrix must have one of the\n        following shapes:\n    \n            - ``(ndim, ndim)``: the linear transformation matrix for each\n              output coordinate.\n            - ``(ndim,)``: assume that the 2-D transformation matrix is\n              diagonal, with the diagonal specified by the given value. A more\n              efficient algorithm is then used that exploits the separability\n              of the problem.\n            - ``(ndim + 1, ndim + 1)``: assume that the transformation is\n              specified using homogeneous coordinates [1]_. In this case, any\n              value passed to ``offset`` is ignored.\n            - ``(ndim, ndim + 1)``: as above, but the bottom row of a\n              homogeneous transformation matrix is always ``[0, 0, ..., 1]``,\n              and may be omitted.\n    \n    offset : float or sequence, optional\n        The offset into the array where the transform is applied. If a float,\n        `offset` is the same for each axis. If a sequence, `offset` should\n        contain one value for each axis.\n    output_shape : tuple of ints, optional\n        Shape tuple.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    affine_transform : ndarray\n        The transformed input.\n    \n    Examples\n    --------\n    Use `affine_transform` to stretch an image::\n    \n    >>> from scipy.ndimage import affine_transform\n    >>> from scipy.datasets import face\n    >>> from matplotlib import pyplot as plt\n    >>> import numpy as np\n    >>> im = face(gray=True)\n    >>> matrix = (0.5, 2)\n    >>> im2 = affine_transform(im, matrix)\n    >>> plt.imshow(im2)\n    >>> plt.show()\n    \n    Rotate an image by 90 degrees and project it onto an expanded canvas::\n    \n    >>> matrix = ((0, 1), (1, 0))\n    >>> im3 = affine_transform(im, matrix, output_shape=(1024, 1024))\n    >>> plt.imshow(im3)\n    >>> plt.show()\n    \n    Offset the rotation so that the image is centred::\n    \n    >>> output_shape = (1200, 1200)\n    >>> offset = (np.array(im.shape) - output_shape) / 2\n    >>> im4 = affine_transform(im, matrix, offset=offset, output_shape=output_shape)\n    >>> plt.imshow(im4)\n    >>> plt.show()\n    \n    Notes\n    -----\n    The given matrix and offset are used to find for each point in the\n    output the corresponding coordinates in the input by an affine\n    transformation. The value of the input at those coordinates is\n    determined by spline interpolation of the requested order. Points\n    outside the boundaries of the input are filled according to the given\n    mode.\n    \n    .. versionchanged:: 0.18.0\n        Previously, the exact interpretation of the affine transformation\n        depended on whether the matrix was supplied as a 1-D or a\n        2-D array. If a 1-D array was supplied\n        to the matrix parameter, the output pixel value at index ``o``\n        was determined from the input image at position\n        ``matrix * (o + offset)``.\n    \n    For complex-valued `input`, this function transforms the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Homogeneous_coordinates",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e29c23c338cc48760ef1c631ee9e36d21e20518f6f6d7ceb45cd863d616cac7b",
            "fields": [
                {
                    "id": "wgli62p3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "enps4fdg",
                    "encoding": "",
                    "name": "matrix",
                    "value": "",
                    "defaultValue": "",
                    "description": "The inverse coordinate transformation matrix, mapping output\ncoordinates to input coordinates. If ``ndim`` is the number of\ndimensions of ``input``, the given matrix must have one of the\nfollowing shapes:\n\n    - ``(ndim, ndim)``: the linear transformation matrix for each\n      output coordinate.\n    - ``(ndim,)``: assume that the 2-D transformation matrix is\n      diagonal, with the diagonal specified by the given value. A more\n      efficient algorithm is then used that exploits the separability\n      of the problem.\n    - ``(ndim + 1, ndim + 1)``: assume that the transformation is\n      specified using homogeneous coordinates [1]_. In this case, any\n      value passed to ``offset`` is ignored.\n    - ``(ndim, ndim + 1)``: as above, but the bottom row of a\n      homogeneous transformation matrix is always ``[0, 0, ..., 1]``,\n      and may be omitted.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46irxty2",
                    "encoding": "",
                    "name": "offset",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The offset into the array where the transform is applied. If a float,\n`offset` is the same for each axis. If a sequence, `offset` should\ncontain one value for each axis.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5y7erwkg",
                    "encoding": "",
                    "name": "output_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape tuple.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0x940pqp",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ittejop_",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ye5vgd97",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "go4j0ofm",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0354hjch",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "371o4s6c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.affine_transform",
                    "defaultValue": "scipy.ndimage.interpolation.affine_transform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4pqfhcha",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8gr_byir",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "grs66nd0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_p7ls2d",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_u6522ze",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3akht_d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0lljt0gs",
            "name": "interpolation.geometric_transform",
            "description": "Apply an arbitrary geometric transform.\n    \n    The given mapping function is used to find, for each point in the\n    output, the corresponding coordinates in the input. The value of the\n    input at those coordinates is determined by spline interpolation of\n    the requested order.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    mapping : {callable, scipy.LowLevelCallable}\n        A callable object that accepts a tuple of length equal to the output\n        array rank, and returns the corresponding input coordinates as a tuple\n        of length equal to the input array rank.\n    output_shape : tuple of ints, optional\n        Shape tuple.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    extra_arguments : tuple, optional\n        Extra arguments passed to `mapping`.\n    extra_keywords : dict, optional\n        Extra keywords passed to `mapping`.\n    \n    Returns\n    -------\n    output : ndarray\n        The filtered input.\n    \n    See Also\n    --------\n    map_coordinates, affine_transform, spline_filter1d\n    \n    \n    Notes\n    -----\n    This function also accepts low-level callback functions with one\n    the following signatures and wrapped in `scipy.LowLevelCallable`:\n    \n    .. code:: c\n    \n       int mapping(npy_intp *output_coordinates, double *input_coordinates,\n                   int output_rank, int input_rank, void *user_data)\n       int mapping(intptr_t *output_coordinates, double *input_coordinates,\n                   int output_rank, int input_rank, void *user_data)\n    \n    The calling function iterates over the elements of the output array,\n    calling the callback function at each element. The coordinates of the\n    current output element are passed through ``output_coordinates``. The\n    callback function must return the coordinates at which the input must\n    be interpolated in ``input_coordinates``. The rank of the input and\n    output arrays are given by ``input_rank`` and ``output_rank``\n    respectively. ``user_data`` is the data pointer provided\n    to `scipy.LowLevelCallable` as-is.\n    \n    The callback function must return an integer error status that is zero\n    if something went wrong and one otherwise. If an error occurs, you should\n    normally set the Python error status with an informative message\n    before returning, otherwise a default error message is set by the\n    calling function.\n    \n    In addition, some other low-level function pointer specifications\n    are accepted, but these are for backward compatibility only and should\n    not be used in new code.\n    \n    For complex-valued `input`, this function transforms the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.ndimage import geometric_transform\n    >>> a = np.arange(12.).reshape((4, 3))\n    >>> def shift_func(output_coords):\n    ...     return (output_coords[0] - 0.5, output_coords[1] - 0.5)\n    ...\n    >>> geometric_transform(a, shift_func)\n    array([[ 0.   ,  0.   ,  0.   ],\n           [ 0.   ,  1.362,  2.738],\n           [ 0.   ,  4.812,  6.187],\n           [ 0.   ,  8.263,  9.637]])\n    \n    >>> b = [1, 2, 3, 4, 5]\n    >>> def shift_func(output_coords):\n    ...     return (output_coords[0] - 3,)\n    ...\n    >>> geometric_transform(b, shift_func, mode='constant')\n    array([0, 0, 0, 1, 2])\n    >>> geometric_transform(b, shift_func, mode='nearest')\n    array([1, 1, 1, 1, 2])\n    >>> geometric_transform(b, shift_func, mode='reflect')\n    array([3, 2, 1, 1, 2])\n    >>> geometric_transform(b, shift_func, mode='wrap')\n    array([2, 3, 4, 1, 2])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d1b098d4386fc65baa566d65a2f6a15846a59bc7f6efa2fb1ea3870cf9edf66c",
            "fields": [
                {
                    "id": "40gwh5_7",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2y0jctp7",
                    "encoding": "",
                    "name": "mapping",
                    "value": "",
                    "defaultValue": "",
                    "description": "A callable object that accepts a tuple of length equal to the output\narray rank, and returns the corresponding input coordinates as a tuple\nof length equal to the input array rank.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m4mjhdcc",
                    "encoding": "",
                    "name": "output_shape",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape tuple.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frbkynpx",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xype68p9",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b1latujv",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyut3exi",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5id_3or",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u2l8xoka",
                    "encoding": "",
                    "name": "extra_arguments",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments passed to `mapping`.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nd0m7wv",
                    "encoding": "",
                    "name": "extra_keywords",
                    "value": "",
                    "defaultValue": "",
                    "description": "Extra keywords passed to `mapping`.",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrysw1qh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.geometric_transform",
                    "defaultValue": "scipy.ndimage.interpolation.geometric_transform",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "irflqlah",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wvn65s2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fp1qps2t",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urylba8s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_c9wdqm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqh0xs7h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_pudt87u",
            "name": "interpolation.map_coordinates",
            "description": "Map the input array to new coordinates by interpolation.\n    \n    The array of coordinates is used to find, for each point in the output,\n    the corresponding coordinates in the input. The value of the input at\n    those coordinates is determined by spline interpolation of the\n    requested order.\n    \n    The shape of the output is derived from that of the coordinate\n    array by dropping the first axis. The values of the array along\n    the first axis are the coordinates in the input array at which the\n    output value is found.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    coordinates : array_like\n        The coordinates at which `input` is evaluated.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    map_coordinates : ndarray\n        The result of transforming the input. The shape of the output is\n        derived from that of `coordinates` by dropping the first axis.\n    \n    See Also\n    --------\n    spline_filter, geometric_transform, scipy.interpolate\n    \n    Notes\n    -----\n    For complex-valued `input`, this function maps the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(12.).reshape((4, 3))\n    >>> a\n    array([[  0.,   1.,   2.],\n           [  3.,   4.,   5.],\n           [  6.,   7.,   8.],\n           [  9.,  10.,  11.]])\n    >>> ndimage.map_coordinates(a, [[0.5, 2], [0.5, 1]], order=1)\n    array([ 2.,  7.])\n    \n    Above, the interpolated value of a[0.5, 0.5] gives output[0], while\n    a[2, 1] is output[1].\n    \n    >>> inds = np.array([[0.5, 2], [0.5, 4]])\n    >>> ndimage.map_coordinates(a, inds, order=1, cval=-33.3)\n    array([  2. , -33.3])\n    >>> ndimage.map_coordinates(a, inds, order=1, mode='nearest')\n    array([ 2.,  8.])\n    >>> ndimage.map_coordinates(a, inds, order=1, cval=0, output=bool)\n    array([ True, False], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "537dc38b1e260e706241d2101d25438c58ca9ed1fb55568147d91691728fc66b",
            "fields": [
                {
                    "id": "nk02j9jp",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_h2aw691",
                    "encoding": "",
                    "name": "coordinates",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinates at which `input` is evaluated.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5wewjtud",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vxpi1rdz",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "339fio5i",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_vi_jtx",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gmbh_ma6",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgrykx8m",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.map_coordinates",
                    "defaultValue": "scipy.ndimage.interpolation.map_coordinates",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ky_hyu3o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ex5y6qq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n5ohlo9x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlxw6h_1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3e8h9_95",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ow7j0jrc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "937ifnmg",
            "name": "interpolation.rotate",
            "description": "Rotate an array.\n    \n    The array is rotated in the plane defined by the two axes given by the\n    `axes` parameter using spline interpolation of the requested order.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    angle : float\n        The rotation angle in degrees.\n    axes : tuple of 2 ints, optional\n        The two axes that define the plane of rotation. Default is the first\n        two axes.\n    reshape : bool, optional\n        If `reshape` is true, the output shape is adapted so that the input\n        array is contained completely in the output. Default is True.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    rotate : ndarray\n        The rotated input.\n    \n    Notes\n    -----\n    For complex-valued `input`, this function rotates the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure(figsize=(10, 3))\n    >>> ax1, ax2, ax3 = fig.subplots(1, 3)\n    >>> img = datasets.ascent()\n    >>> img_45 = ndimage.rotate(img, 45, reshape=False)\n    >>> full_img_45 = ndimage.rotate(img, 45, reshape=True)\n    >>> ax1.imshow(img, cmap='gray')\n    >>> ax1.set_axis_off()\n    >>> ax2.imshow(img_45, cmap='gray')\n    >>> ax2.set_axis_off()\n    >>> ax3.imshow(full_img_45, cmap='gray')\n    >>> ax3.set_axis_off()\n    >>> fig.set_layout_engine('tight')\n    >>> plt.show()\n    >>> print(img.shape)\n    (512, 512)\n    >>> print(img_45.shape)\n    (512, 512)\n    >>> print(full_img_45.shape)\n    (724, 724)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01ad7e1256307a5b722cdd968b7439e08f607cc50e8aea2ca242e62c314fe321",
            "fields": [
                {
                    "id": "bq_9kjmg",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "480sy51s",
                    "encoding": "",
                    "name": "angle",
                    "value": "",
                    "defaultValue": "",
                    "description": "The rotation angle in degrees.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwm6gq5w",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "The two axes that define the plane of rotation. Default is the first\ntwo axes.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3tr9ehz4",
                    "encoding": "",
                    "name": "reshape",
                    "value": true,
                    "defaultValue": true,
                    "description": "If `reshape` is true, the output shape is adapted so that the input\narray is contained completely in the output. Default is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tvt4i3rn",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9z93sls",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4pdovlm",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8sef29sr",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j8vy036z",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "poajxj9l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.rotate",
                    "defaultValue": "scipy.ndimage.interpolation.rotate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3p3v5kbr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "luthh4m8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ioo3dcmr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4ryc6s0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qccumbyb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du9djrzb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hfq49z_r",
            "name": "interpolation.shift",
            "description": "Shift an array.\n    \n    The array is shifted using spline interpolation of the requested order.\n    Points outside the boundaries of the input are filled according to the\n    given mode.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    shift : float or sequence\n        The shift along the axes. If a float, `shift` is the same for each\n        axis. If a sequence, `shift` should contain one value for each axis.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    \n    Returns\n    -------\n    shift : ndarray\n        The shifted input.\n    \n    See Also\n    --------\n    affine_transform : Affine transformations\n    \n    Notes\n    -----\n    For complex-valued `input`, this function shifts the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    Import the necessary modules and an exemplary image.\n    \n    >>> from scipy.ndimage import shift\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import datasets\n    >>> image = datasets.ascent()\n    \n    Shift the image vertically by 20 pixels.\n    \n    >>> image_shifted_vertically = shift(image, (20, 0))\n    \n    Shift the image vertically by -200 pixels and horizontally by 100 pixels.\n    \n    >>> image_shifted_both_directions = shift(image, (-200, 100))\n    \n    Plot the original and the shifted images.\n    \n    >>> fig, axes = plt.subplots(3, 1, figsize=(4, 12))\n    >>> plt.gray()  # show the filtered result in grayscale\n    >>> top, middle, bottom = axes\n    >>> for ax in axes:\n    ...     ax.set_axis_off()  # remove coordinate system\n    >>> top.imshow(image)\n    >>> top.set_title(\"Original image\")\n    >>> middle.imshow(image_shifted_vertically)\n    >>> middle.set_title(\"Vertically shifted image\")\n    >>> bottom.imshow(image_shifted_both_directions)\n    >>> bottom.set_title(\"Image shifted in both directions\")\n    >>> fig.tight_layout()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e75524ba39dd34f104fc328cb020c4d94d868f7fe0745fa080b595f9a5a17c71",
            "fields": [
                {
                    "id": "cbf027ma",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7x96mx4a",
                    "encoding": "",
                    "name": "shift",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shift along the axes. If a float, `shift` is the same for each\naxis. If a sequence, `shift` should contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2i7pxxhu",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p14j7usk",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbfxy13p",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zh5r7a7",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p49ql9o5",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "afasax54",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.shift",
                    "defaultValue": "scipy.ndimage.interpolation.shift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tejkat1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbxz08m3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_evhatdq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_99y20q",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9i82eoul",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "trjz581u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8d00r9fb",
            "name": "interpolation.spline_filter",
            "description": "Multidimensional spline filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    order : int, optional\n        The order of the spline, default is 3.\n    output : ndarray or dtype, optional\n        The array in which to place the output, or the dtype of the returned\n        array. Default is ``numpy.float64``.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'mirror'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    \n    Returns\n    -------\n    spline_filter : ndarray\n        Filtered array. Has the same shape as `input`.\n    \n    See Also\n    --------\n    spline_filter1d : Calculate a 1-D spline filter along the given axis.\n    \n    Notes\n    -----\n    The multidimensional filter is implemented as a sequence of\n    1-D spline filters. The intermediate arrays are stored\n    in the same data type as the output. Therefore, for output types\n    with a limited precision, the results may be imprecise because\n    intermediate results may be stored with insufficient precision.\n    \n    For complex-valued `input`, this function processes the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    We can filter an image using multidimensional splines:\n    \n    >>> from scipy.ndimage import spline_filter\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> orig_img = np.eye(20)  # create an image\n    >>> orig_img[10, :] = 1.0\n    >>> sp_filter = spline_filter(orig_img, order=3)\n    >>> f, ax = plt.subplots(1, 2, sharex=True)\n    >>> for ind, data in enumerate([[orig_img, \"original image\"],\n    ...                             [sp_filter, \"spline filter\"]]):\n    ...     ax[ind].imshow(data[0], cmap='gray_r')\n    ...     ax[ind].set_title(data[1])\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5af6aac7e4dd1b50c5eebb59f28b43cd3c288f540c76e1b6b5821b15a4fc180b",
            "fields": [
                {
                    "id": "jkpg8yha",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ivomttto",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline, default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngdwcs_2",
                    "encoding": "",
                    "name": "output",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The array in which to place the output, or the dtype of the returned\narray. Default is ``numpy.float64``.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2nibinp",
                    "encoding": "",
                    "name": "mode",
                    "value": "mirror",
                    "defaultValue": "mirror",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'mirror'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yey20ukd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.spline_filter",
                    "defaultValue": "scipy.ndimage.interpolation.spline_filter",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dj04t4h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fdhze2sn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "72rx2o4h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0tdlwy2w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9735rw8k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnbwywvi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f3t9h73n",
            "name": "interpolation.spline_filter1d",
            "description": "Calculate a 1-D spline filter along the given axis.\n    \n    The lines of the array along the given axis are filtered by a\n    spline filter. The order of the spline must be >= 2 and <= 5.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    order : int, optional\n        The order of the spline, default is 3.\n    axis : int, optional\n        The axis along which the spline filter is applied. Default is the last\n        axis.\n    output : ndarray or dtype, optional\n        The array in which to place the output, or the dtype of the returned\n        array. Default is ``numpy.float64``.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'mirror'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    \n    Returns\n    -------\n    spline_filter1d : ndarray\n        The filtered input.\n    \n    See Also\n    --------\n    spline_filter : Multidimensional spline filter.\n    \n    Notes\n    -----\n    All of the interpolation functions in `ndimage` do spline interpolation of\n    the input image. If using B-splines of `order > 1`, the input image\n    values have to be converted to B-spline coefficients first, which is\n    done by applying this 1-D filter sequentially along all\n    axes of the input. All functions that require B-spline coefficients\n    will automatically filter their inputs, a behavior controllable with\n    the `prefilter` keyword argument. For functions that accept a `mode`\n    parameter, the result will only be correct if it matches the `mode`\n    used when filtering.\n    \n    For complex-valued `input`, this function processes the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    We can filter an image using 1-D spline along the given axis:\n    \n    >>> from scipy.ndimage import spline_filter1d\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> orig_img = np.eye(20)  # create an image\n    >>> orig_img[10, :] = 1.0\n    >>> sp_filter_axis_0 = spline_filter1d(orig_img, axis=0)\n    >>> sp_filter_axis_1 = spline_filter1d(orig_img, axis=1)\n    >>> f, ax = plt.subplots(1, 3, sharex=True)\n    >>> for ind, data in enumerate([[orig_img, \"original image\"],\n    ...             [sp_filter_axis_0, \"spline filter (axis=0)\"],\n    ...             [sp_filter_axis_1, \"spline filter (axis=1)\"]]):\n    ...     ax[ind].imshow(data[0], cmap='gray_r')\n    ...     ax[ind].set_title(data[1])\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b46eb8047242bdc598573acf96b57275761361de1d6742b1fb8e28a28fda1e5d",
            "fields": [
                {
                    "id": "ovur0x5i",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7d7kyhy4",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline, default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n83lalaw",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis along which the spline filter is applied. Default is the last\naxis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3dsrx1q",
                    "encoding": "",
                    "name": "output",
                    "value": "builtins.type",
                    "defaultValue": "builtins.type",
                    "description": "The array in which to place the output, or the dtype of the returned\narray. Default is ``numpy.float64``.",
                    "type": "builtins.type",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pdoxporf",
                    "encoding": "",
                    "name": "mode",
                    "value": "mirror",
                    "defaultValue": "mirror",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'mirror'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "24mamjuz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.spline_filter1d",
                    "defaultValue": "scipy.ndimage.interpolation.spline_filter1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3e8hq88i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tr7vq0gz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3xqg8riz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_tjmhm5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9jxdtywb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "selrnr5v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7v5g63d1",
            "name": "interpolation.zoom",
            "description": "Zoom an array.\n    \n    The array is zoomed using spline interpolation of the requested order.\n    \n    Parameters\n    ----------\n    input : array_like\n        The input array.\n    zoom : float or sequence\n        The zoom factor along the axes. If a float, `zoom` is the same for each\n        axis. If a sequence, `zoom` should contain one value for each axis.\n    output : array or dtype, optional\n        The array in which to place the output, or the dtype of the\n        returned array. By default an array of the same dtype as input\n        will be created.\n    order : int, optional\n        The order of the spline interpolation, default is 3.\n        The order has to be in the range 0-5.\n    mode : {'reflect', 'grid-mirror', 'constant', 'grid-constant', 'nearest', 'mirror', 'grid-wrap', 'wrap'}, optional\n        The `mode` parameter determines how the input array is extended\n        beyond its boundaries. Default is 'constant'. Behavior for each valid\n        value is as follows (see additional plots and details on\n        :ref:`boundary modes <ndimage-interpolation-modes>`):\n    \n        'reflect' (`d c b a | a b c d | d c b a`)\n            The input is extended by reflecting about the edge of the last\n            pixel. This mode is also sometimes referred to as half-sample\n            symmetric.\n    \n        'grid-mirror'\n            This is a synonym for 'reflect'.\n    \n        'constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. No\n            interpolation is performed beyond the edges of the input.\n    \n        'grid-constant' (`k k k k | a b c d | k k k k`)\n            The input is extended by filling all values beyond the edge with\n            the same constant value, defined by the `cval` parameter. Interpolation\n            occurs for samples outside the input's extent  as well.\n    \n        'nearest' (`a a a a | a b c d | d d d d`)\n            The input is extended by replicating the last pixel.\n    \n        'mirror' (`d c b | a b c d | c b a`)\n            The input is extended by reflecting about the center of the last\n            pixel. This mode is also sometimes referred to as whole-sample\n            symmetric.\n    \n        'grid-wrap' (`a b c d | a b c d | a b c d`)\n            The input is extended by wrapping around to the opposite edge.\n    \n        'wrap' (`d b c d | a b c d | b c a b`)\n            The input is extended by wrapping around to the opposite edge, but in a\n            way such that the last point and initial point exactly overlap. In this\n            case it is not well defined which sample will be chosen at the point of\n            overlap.\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    prefilter : bool, optional\n        Determines if the input array is prefiltered with `spline_filter`\n        before interpolation. The default is True, which will create a\n        temporary `float64` array of filtered values if ``order > 1``. If\n        setting this to False, the output will be slightly blurred if\n        ``order > 1``, unless the input is prefiltered, i.e. it is the result\n        of calling `spline_filter` on the original input.\n    grid_mode : bool, optional\n        If False, the distance from the pixel centers is zoomed. Otherwise, the\n        distance including the full pixel extent is used. For example, a 1d\n        signal of length 5 is considered to have length 4 when `grid_mode` is\n        False, but length 5 when `grid_mode` is True. See the following\n        visual illustration:\n    \n        .. code-block:: text\n    \n                | pixel 1 | pixel 2 | pixel 3 | pixel 4 | pixel 5 |\n                     |<-------------------------------------->|\n                                        vs.\n                |<----------------------------------------------->|\n    \n        The starting point of the arrow in the diagram above corresponds to\n        coordinate location 0 in each mode.\n    \n    Returns\n    -------\n    zoom : ndarray\n        The zoomed input.\n    \n    Notes\n    -----\n    For complex-valued `input`, this function zooms the real and imaginary\n    components independently.\n    \n    .. versionadded:: 1.6.0\n        Complex-valued support added.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage, datasets\n    >>> import matplotlib.pyplot as plt\n    \n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(121)  # left side\n    >>> ax2 = fig.add_subplot(122)  # right side\n    >>> ascent = datasets.ascent()\n    >>> result = ndimage.zoom(ascent, 3.0)\n    >>> ax1.imshow(ascent, vmin=0, vmax=255)\n    >>> ax2.imshow(result, vmin=0, vmax=255)\n    >>> plt.show()\n    \n    >>> print(ascent.shape)\n    (512, 512)\n    \n    >>> print(result.shape)\n    (1536, 1536)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a170f36cb920e31caf76e1c679b25b480e90a25162b22d790bc188d2c45acff",
            "fields": [
                {
                    "id": "4nrm9jt9",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u00liocn",
                    "encoding": "",
                    "name": "zoom",
                    "value": "",
                    "defaultValue": "",
                    "description": "The zoom factor along the axes. If a float, `zoom` is the same for each\naxis. If a sequence, `zoom` should contain one value for each axis.",
                    "type": "float or sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8c5buyw4",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.",
                    "type": "array or dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrgagfr1",
                    "encoding": "",
                    "name": "order",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qd0xmlqf",
                    "encoding": "",
                    "name": "mode",
                    "value": "constant",
                    "defaultValue": "constant",
                    "description": "The `mode` parameter determines how the input array is extended\nbeyond its boundaries. Default is 'constant'. Behavior for each valid\nvalue is as follows (see additional plots and details on\n:ref:`boundary modes <ndimage-interpolation-modes>`):\n\n'reflect' (`d c b a | a b c d | d c b a`)\n    The input is extended by reflecting about the edge of the last\n    pixel. This mode is also sometimes referred to as half-sample\n    symmetric.\n\n'grid-mirror'\n    This is a synonym for 'reflect'.\n\n'constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. No\n    interpolation is performed beyond the edges of the input.\n\n'grid-constant' (`k k k k | a b c d | k k k k`)\n    The input is extended by filling all values beyond the edge with\n    the same constant value, defined by the `cval` parameter. Interpolation\n    occurs for samples outside the input's extent  as well.\n\n'nearest' (`a a a a | a b c d | d d d d`)\n    The input is extended by replicating the last pixel.\n\n'mirror' (`d c b | a b c d | c b a`)\n    The input is extended by reflecting about the center of the last\n    pixel. This mode is also sometimes referred to as whole-sample\n    symmetric.\n\n'grid-wrap' (`a b c d | a b c d | a b c d`)\n    The input is extended by wrapping around to the opposite edge.\n\n'wrap' (`d b c d | a b c d | b c a b`)\n    The input is extended by wrapping around to the opposite edge, but in a\n    way such that the last point and initial point exactly overlap. In this\n    case it is not well defined which sample will be chosen at the point of\n    overlap.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbe_vovb",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uygjpt_n",
                    "encoding": "",
                    "name": "prefilter",
                    "value": true,
                    "defaultValue": true,
                    "description": "Determines if the input array is prefiltered with `spline_filter`\nbefore interpolation. The default is True, which will create a\ntemporary `float64` array of filtered values if ``order > 1``. If\nsetting this to False, the output will be slightly blurred if\n``order > 1``, unless the input is prefiltered, i.e. it is the result\nof calling `spline_filter` on the original input.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "595_5kip",
                    "encoding": "",
                    "name": "grid_mode",
                    "value": false,
                    "defaultValue": false,
                    "description": "If False, the distance from the pixel centers is zoomed. Otherwise, the\ndistance including the full pixel extent is used. For example, a 1d\nsignal of length 5 is considered to have length 4 when `grid_mode` is\nFalse, but length 5 when `grid_mode` is True. See the following\nvisual illustration:\n\n.. code-block:: text\n\n        | pixel 1 | pixel 2 | pixel 3 | pixel 4 | pixel 5 |\n             |<-------------------------------------->|\n                                vs.\n        |<----------------------------------------------->|\n\nThe starting point of the arrow in the diagram above corresponds to\ncoordinate location 0 in each mode.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxkh3dnr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.interpolation.zoom",
                    "defaultValue": "scipy.ndimage.interpolation.zoom",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wi9esp5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbcyvup8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fqp5gn_i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8uw4212s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.interpolation",
                    "defaultValue": "scipy.ndimage.interpolation",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3wjosz0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a2_clm1m",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xn4368zc",
            "name": "measurements.center_of_mass",
            "description": "Calculate the center of mass of the values of an array at labels.\n    \n    Parameters\n    ----------\n    input : ndarray\n        Data from which to calculate center-of-mass. The masses can either\n        be positive or negative.\n    labels : ndarray, optional\n        Labels for objects in `input`, as generated by `ndimage.label`.\n        Only used with `index`. Dimensions must be the same as `input`.\n    index : int or sequence of ints, optional\n        Labels for which to calculate centers-of-mass. If not specified,\n        the combined center of mass of all labels greater than zero\n        will be calculated. Only used with `labels`.\n    \n    Returns\n    -------\n    center_of_mass : tuple, or list of tuples\n        Coordinates of centers-of-mass.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array(([0,0,0,0],\n    ...               [0,1,1,0],\n    ...               [0,1,1,0],\n    ...               [0,1,1,0]))\n    >>> from scipy import ndimage\n    >>> ndimage.center_of_mass(a)\n    (2.0, 1.5)\n    \n    Calculation of multiple objects in an image\n    \n    >>> b = np.array(([0,1,1,0],\n    ...               [0,1,0,0],\n    ...               [0,0,0,0],\n    ...               [0,0,1,1],\n    ...               [0,0,1,1]))\n    >>> lbl = ndimage.label(b)[0]\n    >>> ndimage.center_of_mass(b, lbl, [1,2])\n    [(0.33333333333333331, 1.3333333333333333), (3.5, 2.5)]\n    \n    Negative masses are also accepted, which can occur for example when\n    bias is removed from measured data due to random noise.\n    \n    >>> c = np.array(([-1,0,0,0],\n    ...               [0,-1,-1,0],\n    ...               [0,1,-1,0],\n    ...               [0,1,1,0]))\n    >>> ndimage.center_of_mass(c)\n    (-4.0, 1.0)\n    \n    If there are division by zero issues, the function does not raise an\n    error but rather issues a RuntimeWarning before returning inf and/or NaN.\n    \n    >>> d = np.array([-1, 1])\n    >>> ndimage.center_of_mass(d)\n    (inf,)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a0033bbc50bb56874de7c952837915484df8657f70b46b00305ee4a8ee76d6b1",
            "fields": [
                {
                    "id": "q2ldyngu",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data from which to calculate center-of-mass. The masses can either\nbe positive or negative.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eihd47gw",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels for objects in `input`, as generated by `ndimage.label`.\nOnly used with `index`. Dimensions must be the same as `input`.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "khmodid5",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels for which to calculate centers-of-mass. If not specified,\nthe combined center of mass of all labels greater than zero\nwill be calculated. Only used with `labels`.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "blespc_h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.center_of_mass",
                    "defaultValue": "scipy.ndimage.measurements.center_of_mass",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uv91qwfs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6y65j79",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j3_m37ek",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jhdodzzp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tk8n1ubj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_vu0b5ao",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s0ziidsn",
            "name": "measurements.extrema",
            "description": "Calculate the minimums and maximums of the values of an array\n    at labels, along with their positions.\n    \n    Parameters\n    ----------\n    input : ndarray\n        N-D image data to process.\n    labels : ndarray, optional\n        Labels of features in input.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        Labels to include in output.  If None (default), all values where\n        non-zero `labels` are used.\n    \n    Returns\n    -------\n    minimums, maximums : int or ndarray\n        Values of minimums and maximums in each feature.\n    min_positions, max_positions : tuple or list of tuples\n        Each tuple gives the N-D coordinates of the corresponding minimum\n        or maximum.\n    \n    See Also\n    --------\n    maximum, minimum, maximum_position, minimum_position, center_of_mass\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.extrema(a)\n    (0, 9, (0, 2), (3, 0))\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.extrema(a, lbl, index=np.arange(1, nlbl+1))\n    (array([1, 4, 3]),\n     array([5, 7, 9]),\n     [(0, 0), (1, 3), (3, 1)],\n     [(1, 0), (2, 3), (3, 0)])\n    \n    If no index is given, non-zero `labels` are processed:\n    \n    >>> ndimage.extrema(a, lbl)\n    (1, 9, (0, 0), (3, 0))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a9b32a64dbcbaecbf109d9543a810990f593ba09bde49c3b5e0575f74fe82ee9",
            "fields": [
                {
                    "id": "7uj0sa9v",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D image data to process.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zr66tlw2",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels of features in input.\nIf not None, must be same shape as `input`.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkjwc4sc",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels to include in output.  If None (default), all values where\nnon-zero `labels` are used.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sb_13gj5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.extrema",
                    "defaultValue": "scipy.ndimage.measurements.extrema",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "llee4fsb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5a9gbnqy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "62q007ws",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6k1rn79_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12wms0kq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9nkkmkcn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "92_pkp1s",
            "name": "measurements.find_objects",
            "description": "Find objects in a labeled array.\n    \n    Parameters\n    ----------\n    input : ndarray of ints\n        Array containing objects defined by different labels. Labels with\n        value 0 are ignored.\n    max_label : int, optional\n        Maximum label to be searched for in `input`. If max_label is not\n        given, the positions of all objects are returned.\n    \n    Returns\n    -------\n    object_slices : list of tuples\n        A list of tuples, with each tuple containing N slices (with N the\n        dimension of the input array). Slices correspond to the minimal\n        parallelepiped that contains the object. If a number is missing,\n        None is returned instead of a slice. The label ``l`` corresponds to\n        the index ``l-1`` in the returned list.\n    \n    See Also\n    --------\n    label, center_of_mass\n    \n    Notes\n    -----\n    This function is very useful for isolating a volume of interest inside\n    a 3-D array, that cannot be \"seen through\".\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((6,6), dtype=int)\n    >>> a[2:4, 2:4] = 1\n    >>> a[4, 4] = 1\n    >>> a[:2, :3] = 2\n    >>> a[0, 5] = 3\n    >>> a\n    array([[2, 2, 2, 0, 0, 3],\n           [2, 2, 2, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0],\n           [0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> ndimage.find_objects(a)\n    [(slice(2, 5, None), slice(2, 5, None)),\n     (slice(0, 2, None), slice(0, 3, None)),\n     (slice(0, 1, None), slice(5, 6, None))]\n    >>> ndimage.find_objects(a, max_label=2)\n    [(slice(2, 5, None), slice(2, 5, None)), (slice(0, 2, None), slice(0, 3, None))]\n    >>> ndimage.find_objects(a == 1, max_label=2)\n    [(slice(2, 5, None), slice(2, 5, None)), None]\n    \n    >>> loc = ndimage.find_objects(a)[0]\n    >>> a[loc]\n    array([[1, 1, 0],\n           [1, 1, 0],\n           [0, 0, 1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cd82f170cd95adf022a3ed6f2b33a0af6d1851c6982514b16582c7c03fd4ef68",
            "fields": [
                {
                    "id": "vhd7uld3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array containing objects defined by different labels. Labels with\nvalue 0 are ignored.",
                    "type": "ndarray of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qlq5lfhs",
                    "encoding": "",
                    "name": "max_label",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum label to be searched for in `input`. If max_label is not\ngiven, the positions of all objects are returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mofqnsrv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.find_objects",
                    "defaultValue": "scipy.ndimage.measurements.find_objects",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4zgbh119",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3r5xc6qb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8i4qevo5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_vwz5k4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wbic185w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4ppx978",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "66irf65l",
            "name": "measurements.histogram",
            "description": "Calculate the histogram of the values of an array, optionally at labels.\n    \n    Histogram calculates the frequency of values in an array within bins\n    determined by `min`, `max`, and `bins`. The `labels` and `index`\n    keywords can limit the scope of the histogram to specified sub-regions\n    within the array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Data for which to calculate histogram.\n    min, max : int\n        Minimum and maximum values of range of histogram bins.\n    bins : int\n        Number of bins.\n    labels : array_like, optional\n        Labels for objects in `input`.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        Label or labels for which to calculate histogram. If None, all values\n        where label is greater than zero are used\n    \n    Returns\n    -------\n    hist : ndarray\n        Histogram counts.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[ 0.    ,  0.2146,  0.5962,  0.    ],\n    ...               [ 0.    ,  0.7778,  0.    ,  0.    ],\n    ...               [ 0.    ,  0.    ,  0.    ,  0.    ],\n    ...               [ 0.    ,  0.    ,  0.7181,  0.2787],\n    ...               [ 0.    ,  0.    ,  0.6573,  0.3094]])\n    >>> from scipy import ndimage\n    >>> ndimage.histogram(a, 0, 1, 10)\n    array([13,  0,  2,  1,  0,  1,  1,  2,  0,  0])\n    \n    With labels and no indices, non-zero elements are counted:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.histogram(a, 0, 1, 10, lbl)\n    array([0, 0, 2, 1, 0, 1, 1, 2, 0, 0])\n    \n    Indices can be used to count only certain objects:\n    \n    >>> ndimage.histogram(a, 0, 1, 10, lbl, 2)\n    array([0, 0, 1, 1, 0, 0, 1, 1, 0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a3b1ce94e1f408cc4622846c1ebcfe1b7d7d6ac9edd2a07e584d61ee179541dd",
            "fields": [
                {
                    "id": "71f65grr",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data for which to calculate histogram.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zi89wkw8",
                    "encoding": "",
                    "name": "min",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvpfulrb",
                    "encoding": "",
                    "name": "max",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "deral9uj",
                    "encoding": "",
                    "name": "bins",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of bins.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6iusjqdo",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels for objects in `input`.\nIf not None, must be same shape as `input`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4z4rp3g",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Label or labels for which to calculate histogram. If None, all values\nwhere label is greater than zero are used",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nxo6t3w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.histogram",
                    "defaultValue": "scipy.ndimage.measurements.histogram",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xy6rdytr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "izawkoj2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6r3qsdec",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4adu2vq9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ya2oea95",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xf544j1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "eg27gp6g",
            "name": "measurements.label",
            "description": "Label features in an array.\n    \n    Parameters\n    ----------\n    input : array_like\n        An array-like object to be labeled. Any non-zero values in `input` are\n        counted as features and zero values are considered the background.\n    structure : array_like, optional\n        A structuring element that defines feature connections.\n        `structure` must be centrosymmetric\n        (see Notes).\n        If no structuring element is provided,\n        one is automatically generated with a squared connectivity equal to\n        one.  That is, for a 2-D `input` array, the default structuring element\n        is::\n    \n            [[0,1,0],\n             [1,1,1],\n             [0,1,0]]\n    \n    output : (None, data-type, array_like), optional\n        If `output` is a data type, it specifies the type of the resulting\n        labeled feature array.\n        If `output` is an array-like object, then `output` will be updated\n        with the labeled features from this function.  This function can\n        operate in-place, by passing output=input.\n        Note that the output must be able to store the largest label, or this\n        function will raise an Exception.\n    \n    Returns\n    -------\n    label : ndarray or int\n        An integer ndarray where each unique feature in `input` has a unique\n        label in the returned array.\n    num_features : int\n        How many objects were found.\n    \n        If `output` is None, this function returns a tuple of\n        (`labeled_array`, `num_features`).\n    \n        If `output` is a ndarray, then it will be updated with values in\n        `labeled_array` and only `num_features` will be returned by this\n        function.\n    \n    See Also\n    --------\n    find_objects : generate a list of slices for the labeled features (or\n                   objects); useful for finding features' position or\n                   dimensions\n    \n    Notes\n    -----\n    A centrosymmetric matrix is a matrix that is symmetric about the center.\n    See [1]_ for more information.\n    \n    The `structure` matrix must be centrosymmetric to ensure\n    two-way connections.\n    For instance, if the `structure` matrix is not centrosymmetric\n    and is defined as::\n    \n        [[0,1,0],\n         [1,1,0],\n         [0,0,0]]\n    \n    and the `input` is::\n    \n        [[1,2],\n         [0,3]]\n    \n    then the structure matrix would indicate the\n    entry 2 in the input is connected to 1,\n    but 1 is not connected to 2.\n    \n    References\n    ----------\n    .. [1] James R. Weaver, \"Centrosymmetric (cross-symmetric)\n       matrices, their basic properties, eigenvalues, and\n       eigenvectors.\" The American Mathematical Monthly 92.10\n       (1985): 711-717.\n    \n    Examples\n    --------\n    Create an image with some features, then label it using the default\n    (cross-shaped) structuring element:\n    \n    >>> from scipy.ndimage import label, generate_binary_structure\n    >>> import numpy as np\n    >>> a = np.array([[0,0,1,1,0,0],\n    ...               [0,0,0,1,0,0],\n    ...               [1,1,0,0,1,0],\n    ...               [0,0,0,1,0,0]])\n    >>> labeled_array, num_features = label(a)\n    \n    Each of the 4 features are labeled with a different integer:\n    \n    >>> num_features\n    4\n    >>> labeled_array\n    array([[0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [2, 2, 0, 0, 3, 0],\n           [0, 0, 0, 4, 0, 0]], dtype=int32)\n    \n    Generate a structuring element that will consider features connected even\n    if they touch diagonally:\n    \n    >>> s = generate_binary_structure(2,2)\n    \n    or,\n    \n    >>> s = [[1,1,1],\n    ...      [1,1,1],\n    ...      [1,1,1]]\n    \n    Label the image using the new structuring element:\n    \n    >>> labeled_array, num_features = label(a, structure=s)\n    \n    Show the 2 labeled features (note that features 1, 3, and 4 from above are\n    now considered a single feature):\n    \n    >>> num_features\n    2\n    >>> labeled_array\n    array([[0, 0, 1, 1, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [2, 2, 0, 0, 1, 0],\n           [0, 0, 0, 1, 0, 0]], dtype=int32)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "81b5bc35f5380918d784a2d1e2a7d5e3025d10d651d12443a35ace3f6533f0fa",
            "fields": [
                {
                    "id": "kpn1km2c",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array-like object to be labeled. Any non-zero values in `input` are\ncounted as features and zero values are considered the background.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1yk71pdb",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "A structuring element that defines feature connections.\n`structure` must be centrosymmetric\n(see Notes).\nIf no structuring element is provided,\none is automatically generated with a squared connectivity equal to\none.  That is, for a 2-D `input` array, the default structuring element\nis::\n\n    [[0,1,0],\n     [1,1,1],\n     [0,1,0]]",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hnibi2ze",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `output` is a data type, it specifies the type of the resulting\nlabeled feature array.\nIf `output` is an array-like object, then `output` will be updated\nwith the labeled features from this function.  This function can\noperate in-place, by passing output=input.\nNote that the output must be able to store the largest label, or this\nfunction will raise an Exception.",
                    "type": "(None, data-type, arraylike)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ro8ksse0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.label",
                    "defaultValue": "scipy.ndimage.measurements.label",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v4x1s2nx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ly_e01yf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n1plherc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhddyhvr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04sua90g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1f6o73x2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9na_2wue",
            "name": "measurements.labeled_comprehension",
            "description": "Roughly equivalent to [func(input[labels == i]) for i in index].\n    \n    Sequentially applies an arbitrary function (that works on array_like input)\n    to subsets of an N-D image array specified by `labels` and `index`.\n    The option exists to provide the function with positional parameters as the\n    second argument.\n    \n    Parameters\n    ----------\n    input : array_like\n        Data from which to select `labels` to process.\n    labels : array_like or None\n        Labels to objects in `input`.\n        If not None, array must be same shape as `input`.\n        If None, `func` is applied to raveled `input`.\n    index : int, sequence of ints or None\n        Subset of `labels` to which to apply `func`.\n        If a scalar, a single value is returned.\n        If None, `func` is applied to all non-zero values of `labels`.\n    func : callable\n        Python function to apply to `labels` from `input`.\n    out_dtype : dtype\n        Dtype to use for `result`.\n    default : int, float or None\n        Default return value when a element of `index` does not exist\n        in `labels`.\n    pass_positions : bool, optional\n        If True, pass linear indices to `func` as a second argument.\n        Default is False.\n    \n    Returns\n    -------\n    result : ndarray\n        Result of applying `func` to each of `labels` to `input` in `index`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> lbl, nlbl = ndimage.label(a)\n    >>> lbls = np.arange(1, nlbl+1)\n    >>> ndimage.labeled_comprehension(a, lbl, lbls, np.mean, float, 0)\n    array([ 2.75,  5.5 ,  6.  ])\n    \n    Falling back to `default`:\n    \n    >>> lbls = np.arange(1, nlbl+2)\n    >>> ndimage.labeled_comprehension(a, lbl, lbls, np.mean, float, -1)\n    array([ 2.75,  5.5 ,  6.  , -1.  ])\n    \n    Passing positions:\n    \n    >>> def fn(val, pos):\n    ...     print(\"fn says: %s : %s\" % (val, pos))\n    ...     return (val.sum()) if (pos.sum() % 2 == 0) else (-val.sum())\n    ...\n    >>> ndimage.labeled_comprehension(a, lbl, lbls, fn, float, 0, True)\n    fn says: [1 2 5 3] : [0 1 4 5]\n    fn says: [4 7] : [ 7 11]\n    fn says: [9 3] : [12 13]\n    array([ 11.,  11., -12.,   0.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "448f45179ed19ca7fbc7cfe97f96aa55f0aebb35e67d4ce3c4da8ce6e48a64a4",
            "fields": [
                {
                    "id": "ho01n0gh",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data from which to select `labels` to process.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jnsh7c2",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels to objects in `input`.\nIf not None, array must be same shape as `input`.\nIf None, `func` is applied to raveled `input`.",
                    "type": "arraylike or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t24fuz89",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Subset of `labels` to which to apply `func`.\nIf a scalar, a single value is returned.\nIf None, `func` is applied to all non-zero values of `labels`.",
                    "type": "int, sequence of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6su5xvi6",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Python function to apply to `labels` from `input`.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "58j2ygtm",
                    "encoding": "",
                    "name": "out_dtype",
                    "value": "",
                    "defaultValue": "",
                    "description": "Dtype to use for `result`.",
                    "type": "dtype",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o65ev92o",
                    "encoding": "",
                    "name": "default",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default return value when a element of `index` does not exist\nin `labels`.",
                    "type": "int, float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdr354om",
                    "encoding": "",
                    "name": "pass_positions",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, pass linear indices to `func` as a second argument.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_kus5bti",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.labeled_comprehension",
                    "defaultValue": "scipy.ndimage.measurements.labeled_comprehension",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q7v8c15o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4zh4qve",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "61ywojpi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ga5odxla",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybnl6_v5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cx120cxp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_wkqejsz",
            "name": "measurements.maximum",
            "description": "Calculate the maximum of the values of an array over labeled regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values. For each region specified by `labels`, the\n        maximal values of `input` over the region is computed.\n    labels : array_like, optional\n        An array of integers marking different regions over which the\n        maximum value of `input` is to be computed. `labels` must have the\n        same shape as `input`. If `labels` is not specified, the maximum\n        over the whole array is returned.\n    index : array_like, optional\n        A list of region labels that are taken into account for computing the\n        maxima. If index is None, the maximum over all elements where `labels`\n        is non-zero is returned.\n    \n    Returns\n    -------\n    output : a scalar or list of integers or floats based on input type.\n        List of maxima of `input` over the regions determined by `labels` and\n        whose index is in `index`. If `index` or `labels` are not specified, a\n        float is returned: the maximal value of `input` if `labels` is None,\n        and the maximal value of elements where `labels` is greater than zero\n        if `index` is None.\n    \n    See Also\n    --------\n    label, minimum, median, maximum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Notes\n    -----\n    The function returns a Python list and not a NumPy array, use\n    `np.array` to convert the list to an array.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.arange(16).reshape((4,4))\n    >>> a\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n    >>> labels = np.zeros_like(a)\n    >>> labels[:2,:2] = 1\n    >>> labels[2:, 1:3] = 2\n    >>> labels\n    array([[1, 1, 0, 0],\n           [1, 1, 0, 0],\n           [0, 2, 2, 0],\n           [0, 2, 2, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.maximum(a)\n    15\n    >>> ndimage.maximum(a, labels=labels, index=[1,2])\n    [5, 14]\n    >>> ndimage.maximum(a, labels=labels)\n    14\n    \n    >>> b = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> labels, labels_nb = ndimage.label(b)\n    >>> labels\n    array([[1, 1, 0, 0],\n           [1, 1, 0, 2],\n           [0, 0, 0, 2],\n           [3, 3, 0, 0]], dtype=int32)\n    >>> ndimage.maximum(b, labels=labels, index=np.arange(1, labels_nb + 1))\n    [5, 7, 9]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d91f59e21b24afeeb916831c8f76b060c570a4bb9f60a314f5d19a8e27330072",
            "fields": [
                {
                    "id": "0ekgl3xa",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values. For each region specified by `labels`, the\nmaximal values of `input` over the region is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5jdz3e1c",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of integers marking different regions over which the\nmaximum value of `input` is to be computed. `labels` must have the\nsame shape as `input`. If `labels` is not specified, the maximum\nover the whole array is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dakxr26x",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for computing the\nmaxima. If index is None, the maximum over all elements where `labels`\nis non-zero is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3j2yr8xg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.maximum",
                    "defaultValue": "scipy.ndimage.measurements.maximum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_ptf117",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "655boezz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8ltjk5l8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hb6c5zxk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjcfzkgc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zwdyf3xq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lxo39u2s",
            "name": "measurements.maximum_position",
            "description": "Find the positions of the maximums of the values of an array at labels.\n    \n    For each region specified by `labels`, the position of the maximum\n    value of `input` within the region is returned.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values.\n    labels : array_like, optional\n        An array of integers marking different regions over which the\n        position of the maximum value of `input` is to be computed.\n        `labels` must have the same shape as `input`. If `labels` is not\n        specified, the location of the first maximum over the whole\n        array is returned.\n    \n        The `labels` argument only works when `index` is specified.\n    index : array_like, optional\n        A list of region labels that are taken into account for finding the\n        location of the maxima. If `index` is None, the first maximum\n        over all elements where `labels` is non-zero is returned.\n    \n        The `index` argument only works when `labels` is specified.\n    \n    Returns\n    -------\n    output : list of tuples of ints\n        List of tuples of ints that specify the location of maxima of\n        `input` over the regions determined by `labels` and whose index\n        is in `index`.\n    \n        If `index` or `labels` are not specified, a tuple of ints is\n        returned specifying the location of the ``first`` maximal value\n        of `input`.\n    \n    See Also\n    --------\n    label, minimum, median, maximum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> ndimage.maximum_position(a)\n    (3, 0)\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl = np.array([[0, 1, 2, 3],\n    ...                 [0, 1, 2, 3],\n    ...                 [0, 1, 2, 3],\n    ...                 [0, 1, 2, 3]])\n    >>> ndimage.maximum_position(a, lbl, 1)\n    (1, 1)\n    \n    If no index is given, non-zero `labels` are processed:\n    \n    >>> ndimage.maximum_position(a, lbl)\n    (2, 3)\n    \n    If there are no maxima, the position of the first element is returned:\n    \n    >>> ndimage.maximum_position(a, lbl, 2)\n    (0, 2)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fc37cfe568a7631886860e3ef7f3714bc7e31e8e18038bafaabacbc4294e3a17",
            "fields": [
                {
                    "id": "h77fo4u4",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7k2_y181",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of integers marking different regions over which the\nposition of the maximum value of `input` is to be computed.\n`labels` must have the same shape as `input`. If `labels` is not\nspecified, the location of the first maximum over the whole\narray is returned.\n\nThe `labels` argument only works when `index` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7eo5q0d",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for finding the\nlocation of the maxima. If `index` is None, the first maximum\nover all elements where `labels` is non-zero is returned.\n\nThe `index` argument only works when `labels` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tyy8aun",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.maximum_position",
                    "defaultValue": "scipy.ndimage.measurements.maximum_position",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sasp2n08",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ylfq111",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "popobnw4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2mp8pqi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wleo44ly",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7thpcne",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "m6xl9p8q",
            "name": "measurements.mean",
            "description": "Calculate the mean of the values of an array at labels.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array on which to compute the mean of elements over distinct\n        regions.\n    labels : array_like, optional\n        Array of labels of same shape, or broadcastable to the same shape as\n        `input`. All elements sharing the same label form one region over\n        which the mean of the elements is computed.\n    index : int or sequence of ints, optional\n        Labels of the objects over which the mean is to be computed.\n        Default is None, in which case the mean for all values where label is\n        greater than 0 is calculated.\n    \n    Returns\n    -------\n    out : list\n        Sequence of same length as `index`, with the mean of the different\n        regions labeled by the labels in `index`.\n    \n    See Also\n    --------\n    variance, standard_deviation, minimum, maximum, sum, label\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(25).reshape((5,5))\n    >>> labels = np.zeros_like(a)\n    >>> labels[3:5,3:5] = 1\n    >>> index = np.unique(labels)\n    >>> labels\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 1],\n           [0, 0, 0, 1, 1]])\n    >>> index\n    array([0, 1])\n    >>> ndimage.mean(a, labels=labels, index=index)\n    [10.285714285714286, 21.0]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d1de79a664c6842290a379332fdaa7162352f97852681c14471e4a64cc941d8d",
            "fields": [
                {
                    "id": "gta8w2fd",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array on which to compute the mean of elements over distinct\nregions.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ftqt4mq",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of labels of same shape, or broadcastable to the same shape as\n`input`. All elements sharing the same label form one region over\nwhich the mean of the elements is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "673m0jiu",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels of the objects over which the mean is to be computed.\nDefault is None, in which case the mean for all values where label is\ngreater than 0 is calculated.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1oeu3avq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.mean",
                    "defaultValue": "scipy.ndimage.measurements.mean",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4udzyel6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x_i_x4sn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xdm_lldq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y33kjmlv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3h3oh4l2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f7empo46",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "440edj0z",
            "name": "measurements.median",
            "description": "Calculate the median of the values of an array over labeled regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values. For each region specified by `labels`, the\n        median value of `input` over the region is computed.\n    labels : array_like, optional\n        An array_like of integers marking different regions over which the\n        median value of `input` is to be computed. `labels` must have the\n        same shape as `input`. If `labels` is not specified, the median\n        over the whole array is returned.\n    index : array_like, optional\n        A list of region labels that are taken into account for computing the\n        medians. If index is None, the median over all elements where `labels`\n        is non-zero is returned.\n    \n    Returns\n    -------\n    median : float or list of floats\n        List of medians of `input` over the regions determined by `labels` and\n        whose index is in `index`. If `index` or `labels` are not specified, a\n        float is returned: the median value of `input` if `labels` is None,\n        and the median value of elements where `labels` is greater than zero\n        if `index` is None.\n    \n    See Also\n    --------\n    label, minimum, maximum, extrema, sum, mean, variance, standard_deviation\n    \n    Notes\n    -----\n    The function returns a Python list and not a NumPy array, use\n    `np.array` to convert the list to an array.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 1],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> labels, labels_nb = ndimage.label(a)\n    >>> labels\n    array([[1, 1, 0, 2],\n           [1, 1, 0, 2],\n           [0, 0, 0, 2],\n           [3, 3, 0, 0]], dtype=int32)\n    >>> ndimage.median(a, labels=labels, index=np.arange(1, labels_nb + 1))\n    [2.5, 4.0, 6.0]\n    >>> ndimage.median(a)\n    1.0\n    >>> ndimage.median(a, labels=labels)\n    3.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ca22c5c7dde7e16a6b0e7a1a1427cf941905f9381d2b451b0f0c2ece25b094eb",
            "fields": [
                {
                    "id": "1t5z1y4i",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values. For each region specified by `labels`, the\nmedian value of `input` over the region is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h7ymkr3s",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array_like of integers marking different regions over which the\nmedian value of `input` is to be computed. `labels` must have the\nsame shape as `input`. If `labels` is not specified, the median\nover the whole array is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffe8vfjb",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for computing the\nmedians. If index is None, the median over all elements where `labels`\nis non-zero is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aphp7kxa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.median",
                    "defaultValue": "scipy.ndimage.measurements.median",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6ch59lr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "us0ur8hl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uo5h2_d9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1hjbb5e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jw932at",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "52iy6dqh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f6xz8fa6",
            "name": "measurements.minimum",
            "description": "Calculate the minimum of the values of an array over labeled regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values. For each region specified by `labels`, the\n        minimal values of `input` over the region is computed.\n    labels : array_like, optional\n        An array_like of integers marking different regions over which the\n        minimum value of `input` is to be computed. `labels` must have the\n        same shape as `input`. If `labels` is not specified, the minimum\n        over the whole array is returned.\n    index : array_like, optional\n        A list of region labels that are taken into account for computing the\n        minima. If index is None, the minimum over all elements where `labels`\n        is non-zero is returned.\n    \n    Returns\n    -------\n    output : a scalar or list of integers or floats based on input type.\n        List of minima of `input` over the regions determined by `labels` and\n        whose index is in `index`. If `index` or `labels` are not specified, a\n        float is returned: the minimal value of `input` if `labels` is None,\n        and the minimal value of elements where `labels` is greater than zero\n        if `index` is None.\n    \n    See Also\n    --------\n    label, maximum, median, minimum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Notes\n    -----\n    The function returns a Python list and not a NumPy array, use\n    `np.array` to convert the list to an array.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> labels, labels_nb = ndimage.label(a)\n    >>> labels\n    array([[1, 1, 0, 0],\n           [1, 1, 0, 2],\n           [0, 0, 0, 2],\n           [3, 3, 0, 0]], dtype=int32)\n    >>> ndimage.minimum(a, labels=labels, index=np.arange(1, labels_nb + 1))\n    [1, 4, 3]\n    >>> ndimage.minimum(a)\n    0\n    >>> ndimage.minimum(a, labels=labels)\n    1",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "74854cd72b7a5c61b8e3cc57a2fc2ef42e0dcce5cff10f092877820fcec5c743",
            "fields": [
                {
                    "id": "0tk_4d9u",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values. For each region specified by `labels`, the\nminimal values of `input` over the region is computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "74_szkv0",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array_like of integers marking different regions over which the\nminimum value of `input` is to be computed. `labels` must have the\nsame shape as `input`. If `labels` is not specified, the minimum\nover the whole array is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w29l_m__",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for computing the\nminima. If index is None, the minimum over all elements where `labels`\nis non-zero is returned.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "plhrsxwj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.minimum",
                    "defaultValue": "scipy.ndimage.measurements.minimum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4xuv91v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qiwqt5c2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v2qlea_3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wi5mga5x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qs3sgx2u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gjiwnw45",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "zz7mbhui",
            "name": "measurements.minimum_position",
            "description": "Find the positions of the minimums of the values of an array at labels.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array_like of values.\n    labels : array_like, optional\n        An array of integers marking different regions over which the\n        position of the minimum value of `input` is to be computed.\n        `labels` must have the same shape as `input`. If `labels` is not\n        specified, the location of the first minimum over the whole\n        array is returned.\n    \n        The `labels` argument only works when `index` is specified.\n    index : array_like, optional\n        A list of region labels that are taken into account for finding the\n        location of the minima. If `index` is None, the ``first`` minimum\n        over all elements where `labels` is non-zero is returned.\n    \n        The `index` argument only works when `labels` is specified.\n    \n    Returns\n    -------\n    output : list of tuples of ints\n        Tuple of ints or list of tuples of ints that specify the location\n        of minima of `input` over the regions determined by `labels` and\n        whose index is in `index`.\n    \n        If `index` or `labels` are not specified, a tuple of ints is\n        returned specifying the location of the first minimal value of `input`.\n    \n    See Also\n    --------\n    label, minimum, median, maximum_position, extrema, sum, mean, variance,\n    standard_deviation\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[10, 20, 30],\n    ...               [40, 80, 100],\n    ...               [1, 100, 200]])\n    >>> b = np.array([[1, 2, 0, 1],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    \n    >>> from scipy import ndimage\n    \n    >>> ndimage.minimum_position(a)\n    (2, 0)\n    >>> ndimage.minimum_position(b)\n    (0, 2)\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> label, pos = ndimage.label(a)\n    >>> ndimage.minimum_position(a, label, index=np.arange(1, pos+1))\n    [(2, 0)]\n    \n    >>> label, pos = ndimage.label(b)\n    >>> ndimage.minimum_position(b, label, index=np.arange(1, pos+1))\n    [(0, 0), (0, 3), (3, 1)]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1efaa918f7b5d08e5acf068629feb3bcfc95823a1a8e2e1389e1803160e0c343",
            "fields": [
                {
                    "id": "87vfny7m",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array_like of values.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sm627bwp",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of integers marking different regions over which the\nposition of the minimum value of `input` is to be computed.\n`labels` must have the same shape as `input`. If `labels` is not\nspecified, the location of the first minimum over the whole\narray is returned.\n\nThe `labels` argument only works when `index` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8tgi959d",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of region labels that are taken into account for finding the\nlocation of the minima. If `index` is None, the ``first`` minimum\nover all elements where `labels` is non-zero is returned.\n\nThe `index` argument only works when `labels` is specified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xrcd4ue",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.minimum_position",
                    "defaultValue": "scipy.ndimage.measurements.minimum_position",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0gnvf4c_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wukc7xt7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2so23efp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "poopcfnc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rfg_1fag",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g4r4fimr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "36a7s1af",
            "name": "measurements.standard_deviation",
            "description": "Calculate the standard deviation of the values of an N-D image array,\n    optionally at specified sub-regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        N-D image data to process.\n    labels : array_like, optional\n        Labels to identify sub-regions in `input`.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        `labels` to include in output. If None (default), all values where\n        `labels` is non-zero are used.\n    \n    Returns\n    -------\n    standard_deviation : float or ndarray\n        Values of standard deviation, for each sub-region if `labels` and\n        `index` are specified.\n    \n    See Also\n    --------\n    label, variance, maximum, minimum, extrema\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.standard_deviation(a)\n    2.7585095613392387\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.standard_deviation(a, lbl, index=np.arange(1, nlbl+1))\n    array([ 1.479,  1.5  ,  3.   ])\n    \n    If no index is given, non-zero `labels` are processed:\n    \n    >>> ndimage.standard_deviation(a, lbl)\n    2.4874685927665499",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bfe264592dc4a883c14505f8e64c15271bd31f38da703d76919c374ac733b63d",
            "fields": [
                {
                    "id": "8pegcm3c",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D image data to process.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbxgz98z",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels to identify sub-regions in `input`.\nIf not None, must be same shape as `input`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q698gik3",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "`labels` to include in output. If None (default), all values where\n`labels` is non-zero are used.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20ps5uu0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.standard_deviation",
                    "defaultValue": "scipy.ndimage.measurements.standard_deviation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "up97hu3_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1silbgz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ksx_rqb3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w7ipf2d8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "he5di_xc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3mxkh3t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "807vdnnu",
            "name": "measurements.sum",
            "description": "Calculate the sum of the values of the array.\n    \n    Notes\n    -----\n    This is an alias for `ndimage.sum_labels` kept for backwards compatibility\n    reasons, for new code please prefer `sum_labels`.  See the `sum_labels`\n    docstring for more details.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "601e9b0d5901d25b5cbadbc7e549b6207d852764426548ad39674b2338e69583",
            "fields": [
                {
                    "id": "r_4tce5j",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cg8jy5yo",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v030zjic",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h8h9tewb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.sum",
                    "defaultValue": "scipy.ndimage.measurements.sum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uax3uxo4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2mv2tmq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zrulmivb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xo5s3q2v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1v1ckmy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4v7i11o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vwaa6rfx",
            "name": "measurements.sum_labels",
            "description": "Calculate the sum of the values of the array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Values of `input` inside the regions defined by `labels`\n        are summed together.\n    labels : array_like of ints, optional\n        Assign labels to the values of the array. Has to have the same shape as\n        `input`.\n    index : array_like, optional\n        A single label number or a sequence of label numbers of\n        the objects to be measured.\n    \n    Returns\n    -------\n    sum : ndarray or scalar\n        An array of the sums of values of `input` inside the regions defined\n        by `labels` with the same shape as `index`. If 'index' is None or scalar,\n        a scalar is returned.\n    \n    See Also\n    --------\n    mean, median\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> input =  [0,1,2,3]\n    >>> labels = [1,1,2,2]\n    >>> ndimage.sum_labels(input, labels, index=[1,2])\n    [1.0, 5.0]\n    >>> ndimage.sum_labels(input, labels, index=1)\n    1\n    >>> ndimage.sum_labels(input, labels)\n    6",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5b097ba69d897e541f73c1a498ee8d9c9e8b91fcbe8ce3e00b5c8a2d9698d381",
            "fields": [
                {
                    "id": "qp8gngi7",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Values of `input` inside the regions defined by `labels`\nare summed together.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sp_yj4fx",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Assign labels to the values of the array. Has to have the same shape as\n`input`.",
                    "type": "arraylike of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_afq_mhw",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "A single label number or a sequence of label numbers of\nthe objects to be measured.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wfrug5ll",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.sum_labels",
                    "defaultValue": "scipy.ndimage.measurements.sum_labels",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0e_9tv_t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3gbfjz34",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "as92frk7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pk7yen00",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8aodjj44",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t6hu7qhx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vtztbezh",
            "name": "measurements.variance",
            "description": "Calculate the variance of the values of an N-D image array, optionally at\n    specified sub-regions.\n    \n    Parameters\n    ----------\n    input : array_like\n        Nd-image data to process.\n    labels : array_like, optional\n        Labels defining sub-regions in `input`.\n        If not None, must be same shape as `input`.\n    index : int or sequence of ints, optional\n        `labels` to include in output.  If None (default), all values where\n        `labels` is non-zero are used.\n    \n    Returns\n    -------\n    variance : float or ndarray\n        Values of variance, for each sub-region if `labels` and `index` are\n        specified.\n    \n    See Also\n    --------\n    label, standard_deviation, maximum, minimum, extrema\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.array([[1, 2, 0, 0],\n    ...               [5, 3, 0, 4],\n    ...               [0, 0, 0, 7],\n    ...               [9, 3, 0, 0]])\n    >>> from scipy import ndimage\n    >>> ndimage.variance(a)\n    7.609375\n    \n    Features to process can be specified using `labels` and `index`:\n    \n    >>> lbl, nlbl = ndimage.label(a)\n    >>> ndimage.variance(a, lbl, index=np.arange(1, nlbl+1))\n    array([ 2.1875,  2.25  ,  9.    ])\n    \n    If no index is given, all non-zero `labels` are processed:\n    \n    >>> ndimage.variance(a, lbl)\n    6.1875",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c5c4019a4bd470ada53e1f2a6f69b8876336258423f2ca325b6571939c7f058e",
            "fields": [
                {
                    "id": "dox35ja0",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Nd-image data to process.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_apa2kn",
                    "encoding": "",
                    "name": "labels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Labels defining sub-regions in `input`.\nIf not None, must be same shape as `input`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpappokf",
                    "encoding": "",
                    "name": "index",
                    "value": "",
                    "defaultValue": "",
                    "description": "`labels` to include in output.  If None (default), all values where\n`labels` is non-zero are used.",
                    "type": "int or sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7plzstcn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.variance",
                    "defaultValue": "scipy.ndimage.measurements.variance",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_tb8erx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ni5wqpel",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "531ehsyo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0f0paf5p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1q1m2y4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9mafhtk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e02bdh2w",
            "name": "measurements.watershed_ift",
            "description": "Apply watershed from markers using image foresting transform algorithm.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    markers : array_like\n        Markers are points within each watershed that form the beginning\n        of the process. Negative markers are considered background markers\n        which are processed after the other markers.\n    structure : structure element, optional\n        A structuring element defining the connectivity of the object can be\n        provided. If None, an element is generated with a squared\n        connectivity equal to one.\n    output : ndarray, optional\n        An output array can optionally be provided. The same shape as input.\n    \n    Returns\n    -------\n    watershed_ift : ndarray\n        Output.  Same shape as `input`.\n    \n    References\n    ----------\n    .. [1] A.X. Falcao, J. Stolfi and R. de Alencar Lotufo, \"The image\n           foresting transform: theory, algorithms, and applications\",\n           Pattern Analysis and Machine Intelligence, vol. 26, pp. 19-29, 2004.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ac7f62dfa2719c493636348bf8309ba54a9cef34773f0361c27a33f184601418",
            "fields": [
                {
                    "id": "zm313u3l",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5t2f2pv",
                    "encoding": "",
                    "name": "markers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Markers are points within each watershed that form the beginning\nof the process. Negative markers are considered background markers\nwhich are processed after the other markers.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wbhuvs79",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "A structuring element defining the connectivity of the object can be\nprovided. If None, an element is generated with a squared\nconnectivity equal to one.",
                    "type": "structure element",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r_ysdt4j",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array can optionally be provided. The same shape as input.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "auxivv76",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.measurements.watershed_ift",
                    "defaultValue": "scipy.ndimage.measurements.watershed_ift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zbqjylpw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_vo30bc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_yqyriwm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u12_4qpl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.measurements",
                    "defaultValue": "scipy.ndimage.measurements",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qynqnvm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "277q3iis",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0ukywjlk",
            "name": "morphology.binary_closing",
            "description": "Multidimensional binary closing with the given structuring element.\n    \n    The *closing* of an input image by a structuring element is the\n    *erosion* of the *dilation* of the image by the structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary array_like to be closed. Non-zero (True) elements form\n        the subset to be closed.\n    structure : array_like, optional\n        Structuring element used for the closing. Non-zero elements are\n        considered True. If no structuring element is provided an element\n        is generated with a square connectivity equal to one (i.e., only\n        nearest neighbors are connected to the center, diagonally-connected\n        elements are not considered neighbors).\n    iterations : int, optional\n        The dilation step of the closing, then the erosion step are each\n        repeated `iterations` times (one, by default). If iterations is\n        less than 1, each operations is repeated until the result does\n        not change anymore. Only an integer of iterations is accepted.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    \n        .. versionadded:: 1.1.0\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    \n        .. versionadded:: 1.1.0\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated in the\n        current iteration; if true al pixels are considered as candidates for\n        update, regardless of what happened in the previous iteration.\n        False by default.\n    \n        .. versionadded:: 1.1.0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_closing : ndarray of bools\n        Closing of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_closing, binary_opening, binary_dilation, binary_erosion,\n    generate_binary_structure\n    \n    Notes\n    -----\n    *Closing* [1]_ is a mathematical morphology operation [2]_ that\n    consists in the succession of a dilation and an erosion of the\n    input with the same structuring element. Closing therefore fills\n    holes smaller than the structuring element.\n    \n    Together with *opening* (`binary_opening`), closing can be used for\n    noise removal.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Closing_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5,5), dtype=int)\n    >>> a[1:-1, 1:-1] = 1; a[2,2] = 0\n    >>> a\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Closing removes small holes\n    >>> ndimage.binary_closing(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Closing is the erosion of the dilation of the input\n    >>> ndimage.binary_dilation(a).astype(int)\n    array([[0, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1],\n           [1, 1, 1, 1, 1],\n           [1, 1, 1, 1, 1],\n           [0, 1, 1, 1, 0]])\n    >>> ndimage.binary_erosion(ndimage.binary_dilation(a)).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    \n    \n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1:6, 2:5] = 1; a[1:3,3] = 0\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 1, 0, 0],\n           [0, 0, 1, 0, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> # In addition to removing holes, closing can also\n    >>> # coarsen boundaries with fine hollows.\n    >>> ndimage.binary_closing(a).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_closing(a, structure=np.ones((2,2))).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1d1b7bf29c7f7f7519885f08bd0161930474eb5581c7c07656e0083df11ad1cc",
            "fields": [
                {
                    "id": "boar8wn0",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary array_like to be closed. Non-zero (True) elements form\nthe subset to be closed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i5ulsv91",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the closing. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one (i.e., only\nnearest neighbors are connected to the center, diagonally-connected\nelements are not considered neighbors).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80tu5eig",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The dilation step of the closing, then the erosion step are each\nrepeated `iterations` times (one, by default). If iterations is\nless than 1, each operations is repeated until the result does\nnot change anymore. Only an integer of iterations is accepted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zx86xr_0",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "se9keala",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9wr76emh",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.\n\n.. versionadded:: 1.1.0",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nz51zgj1",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.\n\n.. versionadded:: 1.1.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzeizy82",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated in the\ncurrent iteration; if true al pixels are considered as candidates for\nupdate, regardless of what happened in the previous iteration.\nFalse by default.\n\n.. versionadded:: 1.1.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4u6gd79t",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zs9s_784",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_closing",
                    "defaultValue": "scipy.ndimage.morphology.binary_closing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83xdp68m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h8t78nnp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xyqegiaw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jetrr0p_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q92d5uqd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49pr9fd9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0ar3skpa",
            "name": "morphology.binary_dilation",
            "description": "Multidimensional binary dilation with the given structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary array_like to be dilated. Non-zero (True) elements form\n        the subset to be dilated.\n    structure : array_like, optional\n        Structuring element used for the dilation. Non-zero elements are\n        considered True. If no structuring element is provided an element\n        is generated with a square connectivity equal to one.\n    iterations : int, optional\n        The dilation is repeated `iterations` times (one, by default).\n        If iterations is less than 1, the dilation is repeated until the\n        result does not change anymore. Only an integer of iterations is\n        accepted.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated (dilated)\n        in the current iteration; if True all pixels are considered as\n        candidates for dilation, regardless of what happened in the previous\n        iteration. False by default.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_dilation : ndarray of bools\n        Dilation of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_dilation, binary_erosion, binary_closing, binary_opening,\n    generate_binary_structure\n    \n    Notes\n    -----\n    Dilation [1]_ is a mathematical morphology operation [2]_ that uses a\n    structuring element for expanding the shapes in an image. The binary\n    dilation of an image by a structuring element is the locus of the points\n    covered by the structuring element, when its center lies within the\n    non-zero points of the image.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Dilation_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5, 5))\n    >>> a[2, 2] = 1\n    >>> a\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(a)\n    array([[False, False, False, False, False],\n           [False, False,  True, False, False],\n           [False,  True,  True,  True, False],\n           [False, False,  True, False, False],\n           [False, False, False, False, False]], dtype=bool)\n    >>> ndimage.binary_dilation(a).astype(a.dtype)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> # 3x3 structuring element with connectivity 1, used by default\n    >>> struct1 = ndimage.generate_binary_structure(2, 1)\n    >>> struct1\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> # 3x3 structuring element with connectivity 2\n    >>> struct2 = ndimage.generate_binary_structure(2, 2)\n    >>> struct2\n    array([[ True,  True,  True],\n           [ True,  True,  True],\n           [ True,  True,  True]], dtype=bool)\n    >>> ndimage.binary_dilation(a, structure=struct1).astype(a.dtype)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(a, structure=struct2).astype(a.dtype)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(a, structure=struct1,\\\n    ... iterations=2).astype(a.dtype)\n    array([[ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 1.,  1.,  1.,  1.,  1.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d72c996880e542815223af3808c6dbd65aa301f91bd1f4ae51a89097fb46b520",
            "fields": [
                {
                    "id": "thmhd0w3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary array_like to be dilated. Non-zero (True) elements form\nthe subset to be dilated.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9fzth5wh",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the dilation. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lck2uwb6",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The dilation is repeated `iterations` times (one, by default).\nIf iterations is less than 1, the dilation is repeated until the\nresult does not change anymore. Only an integer of iterations is\naccepted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sif94lht",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1i5gdkz",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pludk77a",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5bnexjty",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x16meiih",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (dilated)\nin the current iteration; if True all pixels are considered as\ncandidates for dilation, regardless of what happened in the previous\niteration. False by default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8e3dh1c",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5o5bda1o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_dilation",
                    "defaultValue": "scipy.ndimage.morphology.binary_dilation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5awi898r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0tej2wol",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o8ihmnmb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6gyms8f4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_zonqckz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8y_9jge1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fsy4mdyk",
            "name": "morphology.binary_erosion",
            "description": "Multidimensional binary erosion with a given structuring element.\n    \n    Binary erosion is a mathematical morphology operation used for image\n    processing.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary image to be eroded. Non-zero (True) elements form\n        the subset to be eroded.\n    structure : array_like, optional\n        Structuring element used for the erosion. Non-zero elements are\n        considered True. If no structuring element is provided, an element\n        is generated with a square connectivity equal to one.\n    iterations : int, optional\n        The erosion is repeated `iterations` times (one, by default).\n        If iterations is less than 1, the erosion is repeated until the\n        result does not change anymore.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated (eroded) in\n        the current iteration; if True all pixels are considered as candidates\n        for erosion, regardless of what happened in the previous iteration.\n        False by default.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_erosion : ndarray of bools\n        Erosion of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_erosion, binary_dilation, binary_closing, binary_opening,\n    generate_binary_structure\n    \n    Notes\n    -----\n    Erosion [1]_ is a mathematical morphology operation [2]_ that uses a\n    structuring element for shrinking the shapes in an image. The binary\n    erosion of an image by a structuring element is the locus of the points\n    where a superimposition of the structuring element centered on the point\n    is entirely contained in the set of non-zero elements of the image.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Erosion_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1:6, 2:5] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_erosion(a).astype(a.dtype)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> #Erosion removes objects smaller than the structure\n    >>> ndimage.binary_erosion(a, structure=np.ones((5,5))).astype(a.dtype)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "543e3cf18fba58e53607a285d4fae11630ff738a8123b396b1bdb903e1ec354e",
            "fields": [
                {
                    "id": "h5li8zeg",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary image to be eroded. Non-zero (True) elements form\nthe subset to be eroded.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jkfb1yxn",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the erosion. Non-zero elements are\nconsidered True. If no structuring element is provided, an element\nis generated with a square connectivity equal to one.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z76_nh8b",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The erosion is repeated `iterations` times (one, by default).\nIf iterations is less than 1, the erosion is repeated until the\nresult does not change anymore.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0l7040s6",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tcqsd4r",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q0aloddq",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fdiarei1",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1uu92xe",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (eroded) in\nthe current iteration; if True all pixels are considered as candidates\nfor erosion, regardless of what happened in the previous iteration.\nFalse by default.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlodunjj",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4zz0jd0h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_erosion",
                    "defaultValue": "scipy.ndimage.morphology.binary_erosion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ppnzb4dc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nkv93wk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zajz07u7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "czlb7iy5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7c24l3wq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31ga_0v4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8h2lp7sq",
            "name": "morphology.binary_fill_holes",
            "description": "Fill the holes in binary objects.\n    \n    \n    Parameters\n    ----------\n    input : array_like\n        N-D binary array with holes to be filled\n    structure : array_like, optional\n        Structuring element used in the computation; large-size elements\n        make computations faster but may miss holes separated from the\n        background by thin regions. The default element (with a square\n        connectivity equal to one) yields the intuitive result where all\n        holes in the input have been filled.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin : int, tuple of ints, optional\n        Position of the structuring element.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    out : ndarray\n        Transformation of the initial image `input` where holes have been\n        filled.\n    \n    See Also\n    --------\n    binary_dilation, binary_propagation, label\n    \n    Notes\n    -----\n    The algorithm used in this function consists in invading the complementary\n    of the shapes in `input` from the outer boundary of the image,\n    using binary dilations. Holes are not connected to the boundary and are\n    therefore not invaded. The result is the complementary subset of the\n    invaded region.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5, 5), dtype=int)\n    >>> a[1:4, 1:4] = 1\n    >>> a[2,2] = 0\n    >>> a\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> ndimage.binary_fill_holes(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Too big structuring element\n    >>> ndimage.binary_fill_holes(a, structure=np.ones((5,5))).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 0, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "272962f5f9dcdc7af1e054dae04ddf306ad6c1dce33e32c74c45f4b82ce8c57d",
            "fields": [
                {
                    "id": "nsf388iw",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D binary array with holes to be filled",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9v1ciga",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used in the computation; large-size elements\nmake computations faster but may miss holes separated from the\nbackground by thin regions. The default element (with a square\nconnectivity equal to one) yields the intuitive result where all\nholes in the input have been filled.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uo87n8fh",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9da212q",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Position of the structuring element.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nfs4n38g",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dvqz78e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_fill_holes",
                    "defaultValue": "scipy.ndimage.morphology.binary_fill_holes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nr4oj6jc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6_dx2ow",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zcxepk_k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cvtly45v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xgtywm1n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjcdjggk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "uksz8f06",
            "name": "morphology.binary_hit_or_miss",
            "description": "Multidimensional binary hit-or-miss transform.\n    \n    The hit-or-miss transform finds the locations of a given pattern\n    inside the input image.\n    \n    Parameters\n    ----------\n    input : array_like (cast to booleans)\n        Binary image where a pattern is to be detected.\n    structure1 : array_like (cast to booleans), optional\n        Part of the structuring element to be fitted to the foreground\n        (non-zero elements) of `input`. If no value is provided, a\n        structure of square connectivity 1 is chosen.\n    structure2 : array_like (cast to booleans), optional\n        Second part of the structuring element that has to miss completely\n        the foreground. If no value is provided, the complementary of\n        `structure1` is taken.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin1 : int or tuple of ints, optional\n        Placement of the first part of the structuring element `structure1`,\n        by default 0 for a centered structure.\n    origin2 : int or tuple of ints, optional\n        Placement of the second part of the structuring element `structure2`,\n        by default 0 for a centered structure. If a value is provided for\n        `origin1` and not for `origin2`, then `origin2` is set to `origin1`.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If `origin1` or `origin2` tuples are provided, their\n        length must match the number of axes.\n    \n    Returns\n    -------\n    binary_hit_or_miss : ndarray\n        Hit-or-miss transform of `input` with the given structuring\n        element (`structure1`, `structure2`).\n    \n    See Also\n    --------\n    binary_erosion\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Hit-or-miss_transform\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1, 1] = 1; a[2:4, 2:4] = 1; a[4:6, 4:6] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0, 0],\n           [0, 0, 1, 1, 0, 0, 0],\n           [0, 0, 0, 0, 1, 1, 0],\n           [0, 0, 0, 0, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> structure1 = np.array([[1, 0, 0], [0, 1, 1], [0, 1, 1]])\n    >>> structure1\n    array([[1, 0, 0],\n           [0, 1, 1],\n           [0, 1, 1]])\n    >>> # Find the matches of structure1 in the array a\n    >>> ndimage.binary_hit_or_miss(a, structure1=structure1).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> # Change the origin of the filter\n    >>> # origin1=1 is equivalent to origin1=(1,1) here\n    >>> ndimage.binary_hit_or_miss(a, structure1=structure1,\\\n    ... origin1=1).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "126943554fe72de9b491ef4e524879b8fa9ea97b6814d4c7d9788d8ecbe25a98",
            "fields": [
                {
                    "id": "yo8es4ps",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary image where a pattern is to be detected.",
                    "type": "arraylike (cast to booleans)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ykrjfjif",
                    "encoding": "",
                    "name": "structure1",
                    "value": "",
                    "defaultValue": "",
                    "description": "Part of the structuring element to be fitted to the foreground\n(non-zero elements) of `input`. If no value is provided, a\nstructure of square connectivity 1 is chosen.",
                    "type": "arraylike (cast to booleans)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fs9_vq5y",
                    "encoding": "",
                    "name": "structure2",
                    "value": "",
                    "defaultValue": "",
                    "description": "Second part of the structuring element that has to miss completely\nthe foreground. If no value is provided, the complementary of\n`structure1` is taken.",
                    "type": "arraylike (cast to booleans)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9qe_51bc",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5xaml5rb",
                    "encoding": "",
                    "name": "origin1",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the first part of the structuring element `structure1`,\nby default 0 for a centered structure.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c_xe9ad",
                    "encoding": "",
                    "name": "origin2",
                    "value": "",
                    "defaultValue": "",
                    "description": "Placement of the second part of the structuring element `structure2`,\nby default 0 for a centered structure. If a value is provided for\n`origin1` and not for `origin2`, then `origin2` is set to `origin1`.",
                    "type": "int or tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tyih7x82",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If `origin1` or `origin2` tuples are provided, their\nlength must match the number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptop1jxu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_hit_or_miss",
                    "defaultValue": "scipy.ndimage.morphology.binary_hit_or_miss",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwhiiqd_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gir3yjl2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "g74tebuv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c8me1dek",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lkgnpbi8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oi34tkh1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "h4eg3kc8",
            "name": "morphology.binary_opening",
            "description": "Multidimensional binary opening with the given structuring element.\n    \n    The *opening* of an input image by a structuring element is the\n    *dilation* of the *erosion* of the image by the structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary array_like to be opened. Non-zero (True) elements form\n        the subset to be opened.\n    structure : array_like, optional\n        Structuring element used for the opening. Non-zero elements are\n        considered True. If no structuring element is provided an element\n        is generated with a square connectivity equal to one (i.e., only\n        nearest neighbors are connected to the center, diagonally-connected\n        elements are not considered neighbors).\n    iterations : int, optional\n        The erosion step of the opening, then the dilation step are each\n        repeated `iterations` times (one, by default). If `iterations` is\n        less than 1, each operation is repeated until the result does\n        not change anymore. Only an integer of iterations is accepted.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    mask : array_like, optional\n        If a mask is given, only those elements with a True value at\n        the corresponding mask element are modified at each iteration.\n    \n        .. versionadded:: 1.1.0\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    \n        .. versionadded:: 1.1.0\n    brute_force : boolean, optional\n        Memory condition: if False, only the pixels whose value was changed in\n        the last iteration are tracked as candidates to be updated in the\n        current iteration; if true all pixels are considered as candidates for\n        update, regardless of what happened in the previous iteration.\n        False by default.\n    \n        .. versionadded:: 1.1.0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_opening : ndarray of bools\n        Opening of the input by the structuring element.\n    \n    See Also\n    --------\n    grey_opening, binary_closing, binary_erosion, binary_dilation,\n    generate_binary_structure\n    \n    Notes\n    -----\n    *Opening* [1]_ is a mathematical morphology operation [2]_ that\n    consists in the succession of an erosion and a dilation of the\n    input with the same structuring element. Opening, therefore, removes\n    objects smaller than the structuring element.\n    \n    Together with *closing* (`binary_closing`), opening can be used for\n    noise removal.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Opening_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((5,5), dtype=int)\n    >>> a[1:4, 1:4] = 1; a[4, 4] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 1]])\n    >>> # Opening removes small objects\n    >>> ndimage.binary_opening(a, structure=np.ones((3,3))).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Opening can also smooth corners\n    >>> ndimage.binary_opening(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])\n    >>> # Opening is the dilation of the erosion of the input\n    >>> ndimage.binary_erosion(a).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0]])\n    >>> ndimage.binary_dilation(ndimage.binary_erosion(a)).astype(int)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 1, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dafc164528d65353d10fb4e0ab28d2343dc1dd04f2b34081c8daa2ca8312b087",
            "fields": [
                {
                    "id": "iel9dqc3",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary array_like to be opened. Non-zero (True) elements form\nthe subset to be opened.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nerbzkfy",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the opening. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one (i.e., only\nnearest neighbors are connected to the center, diagonally-connected\nelements are not considered neighbors).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0s83qp2d",
                    "encoding": "",
                    "name": "iterations",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The erosion step of the opening, then the dilation step are each\nrepeated `iterations` times (one, by default). If `iterations` is\nless than 1, each operation is repeated until the result does\nnot change anymore. Only an integer of iterations is accepted.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1h37trpe",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eao21slq",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cw3bau34",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.\n\n.. versionadded:: 1.1.0",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__l73awv",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.\n\n.. versionadded:: 1.1.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9rs713g",
                    "encoding": "",
                    "name": "brute_force",
                    "value": false,
                    "defaultValue": false,
                    "description": "Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated in the\ncurrent iteration; if true all pixels are considered as candidates for\nupdate, regardless of what happened in the previous iteration.\nFalse by default.\n\n.. versionadded:: 1.1.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cm11f2s1",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m032nkne",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_opening",
                    "defaultValue": "scipy.ndimage.morphology.binary_opening",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mtni_uy4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdvvchzs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w13r2u0k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9iftx2mj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jey_gr8c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7b829z8p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1s_jrpot",
            "name": "morphology.binary_propagation",
            "description": "Multidimensional binary propagation with the given structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Binary image to be propagated inside `mask`.\n    structure : array_like, optional\n        Structuring element used in the successive dilations. The output\n        may depend on the structuring element, especially if `mask` has\n        several connex components. If no structuring element is\n        provided, an element is generated with a squared connectivity equal\n        to one.\n    mask : array_like, optional\n        Binary mask defining the region into which `input` is allowed to\n        propagate.\n    output : ndarray, optional\n        Array of the same shape as input, into which the output is placed.\n        By default, a new array is created.\n    border_value : int (cast to 0 or 1), optional\n        Value at the border in the output array.\n    origin : int or tuple of ints, optional\n        Placement of the filter, by default 0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    binary_propagation : ndarray\n        Binary propagation of `input` inside `mask`.\n    \n    Notes\n    -----\n    This function is functionally equivalent to calling binary_dilation\n    with the number of iterations less than one: iterative dilation until\n    the result does not change anymore.\n    \n    The succession of an erosion and propagation inside the original image\n    can be used instead of an *opening* for deleting small objects while\n    keeping the contours of larger objects untouched.\n    \n    References\n    ----------\n    .. [1] http://cmm.ensmp.fr/~serra/cours/pdf/en/ch6en.pdf, slide 15.\n    .. [2] I.T. Young, J.J. Gerbrands, and L.J. van Vliet, \"Fundamentals of\n        image processing\", 1998\n        ftp://qiftp.tudelft.nl/DIPimage/docs/FIP2.3.pdf\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> input = np.zeros((8, 8), dtype=int)\n    >>> input[2, 2] = 1\n    >>> mask = np.zeros((8, 8), dtype=int)\n    >>> mask[1:4, 1:4] = mask[4, 4]  = mask[6:8, 6:8] = 1\n    >>> input\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0]])\n    >>> mask\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 1, 1],\n           [0, 0, 0, 0, 0, 0, 1, 1]])\n    >>> ndimage.binary_propagation(input, mask=mask).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_propagation(input, mask=mask,\\\n    ... structure=np.ones((3,3))).astype(int)\n    array([[0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 1, 1, 1, 0, 0, 0, 0],\n           [0, 0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0, 0]])\n    \n    >>> # Comparison between opening and erosion+propagation\n    >>> a = np.zeros((6,6), dtype=int)\n    >>> a[2:5, 2:5] = 1; a[0, 0] = 1; a[5, 5] = 1\n    >>> a\n    array([[1, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 1]])\n    >>> ndimage.binary_opening(a).astype(int)\n    array([[0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> b = ndimage.binary_erosion(a)\n    >>> b.astype(int)\n    array([[0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0]])\n    >>> ndimage.binary_propagation(b, mask=a).astype(int)\n    array([[0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5750e76f1fffc31779bf3d497e43c4f1478f8716ce8c8f62948a314b5d549e8f",
            "fields": [
                {
                    "id": "i1koce58",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary image to be propagated inside `mask`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vl1vvcca",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used in the successive dilations. The output\nmay depend on the structuring element, especially if `mask` has\nseveral connex components. If no structuring element is\nprovided, an element is generated with a squared connectivity equal\nto one.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31if3hs4",
                    "encoding": "",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Binary mask defining the region into which `input` is allowed to\npropagate.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yx1ndah4",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ktlbzt5p",
                    "encoding": "",
                    "name": "border_value",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Value at the border in the output array.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "az3d04pe",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Placement of the filter, by default 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7fba8m3d",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "19kjkzfh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.binary_propagation",
                    "defaultValue": "scipy.ndimage.morphology.binary_propagation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_0g18df",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnpqugk8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1e01eluz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udrgt1h4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gqwhx21",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_z92n6x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4d0n8an3",
            "name": "morphology.black_tophat",
            "description": "Multidimensional black tophat filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    size : tuple of ints, optional\n        Shape of a flat and full structuring element used for the filter.\n        Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the black tophat filter.\n    structure : array of ints, optional\n        Structuring element used for the filter. `structure` may be a non-flat\n        structuring element. The `structure` array applies offsets to the\n        pixels in a neighborhood (the offset is additive during dilation and\n        subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the filter may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    black_tophat : ndarray\n        Result of the filter of `input` with `structure`.\n    \n    See Also\n    --------\n    white_tophat, grey_opening, grey_closing\n    \n    Examples\n    --------\n    Change dark peak to bright peak and subtract background.\n    \n    >>> from scipy.ndimage import generate_binary_structure, black_tophat\n    >>> import numpy as np\n    >>> square = generate_binary_structure(rank=2, connectivity=3)\n    >>> dark_on_gray = np.array([[7, 6, 6, 6, 7],\n    ...                          [6, 5, 4, 5, 6],\n    ...                          [6, 4, 0, 4, 6],\n    ...                          [6, 5, 4, 5, 6],\n    ...                          [7, 6, 6, 6, 7]])\n    >>> black_tophat(input=dark_on_gray, structure=square)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 5, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "66e70e979ac7ecad382960c366b4a610d3befa02ba8c9232006651013cebb1a7",
            "fields": [
                {
                    "id": "uwtilp8i",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ezgg53li",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the filter.\nOptional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5y9fvz32",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the black tophat filter.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w50cikeu",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the filter. `structure` may be a non-flat\nstructuring element. The `structure` array applies offsets to the\npixels in a neighborhood (the offset is additive during dilation and\nsubtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "92rztoaf",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the filter may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sk62wtr",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ls8b3tq7",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vh1s_4wn",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pidfbv8d",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqsrl5ni",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.black_tophat",
                    "defaultValue": "scipy.ndimage.morphology.black_tophat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ea4h1iek",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ay0nxtmp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5l1os9_m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u2lifxad",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5qbef343",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qne60k0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xyvmy6wx",
            "name": "morphology.distance_transform_bf",
            "description": "Distance transform function by a brute force algorithm.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input\n    metric : {'euclidean', 'taxicab', 'chessboard'}, optional\n        'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\n        The default is 'euclidean'.\n    sampling : float, or sequence of float, optional\n        This parameter is only used when `metric` is 'euclidean'.\n        Spacing of elements along each dimension. If a sequence, must be of\n        length equal to the input rank; if a single number, this is used for\n        all axes. If not specified, a grid spacing of unity is implied.\n    return_distances : bool, optional\n        Whether to calculate the distance transform.\n        Default is True.\n    return_indices : bool, optional\n        Whether to calculate the feature transform.\n        Default is False.\n    distances : ndarray, optional\n        An output array to store the calculated distance transform, instead of\n        returning it.\n        `return_distances` must be True.\n        It must be the same shape as `input`, and of type float64 if `metric`\n        is 'euclidean', uint32 otherwise.\n    indices : int32 ndarray, optional\n        An output array to store the calculated feature transform, instead of\n        returning it.\n        `return_indicies` must be True.\n        Its shape must be ``(input.ndim,) + input.shape``.\n    \n    Returns\n    -------\n    distances : ndarray, optional\n        The calculated distance transform. Returned only when\n        `return_distances` is True and `distances` is not supplied.\n        It will have the same shape as the input array.\n    indices : int32 ndarray, optional\n        The calculated feature transform. It has an input-shaped array for each\n        dimension of the input. See distance_transform_edt documentation for an\n        example.\n        Returned only when `return_indices` is True and `indices` is not\n        supplied.\n    \n    See Also\n    --------\n    distance_transform_cdt : Faster distance transform for taxicab and\n                             chessboard metrics\n    distance_transform_edt : Faster distance transform for euclidean metric\n    \n    Notes\n    -----\n    This function employs a slow brute force algorithm. See also the\n    function `distance_transform_cdt` for more efficient taxicab [1]_ and\n    chessboard algorithms [2]_.\n    \n    References\n    ----------\n    .. [1] Taxicab distance. Wikipedia, 2023.\n           https://en.wikipedia.org/wiki/Taxicab_geometry\n    .. [2] Chessboard distance. Wikipedia, 2023.\n           https://en.wikipedia.org/wiki/Chebyshev_distance\n    \n    Examples\n    --------\n    Import the necessary modules.\n    \n    >>> import numpy as np\n    >>> from scipy.ndimage import distance_transform_bf\n    >>> import matplotlib.pyplot as plt\n    >>> from mpl_toolkits.axes_grid1 import ImageGrid\n    \n    First, we create a toy binary image.\n    \n    >>> def add_circle(center_x, center_y, radius, image, fillvalue=1):\n    ...     # fill circular area with 1\n    ...     xx, yy = np.mgrid[:image.shape[0], :image.shape[1]]\n    ...     circle = (xx - center_x) ** 2 + (yy - center_y) ** 2\n    ...     circle_shape = np.sqrt(circle) < radius\n    ...     image[circle_shape] = fillvalue\n    ...     return image\n    >>> image = np.zeros((100, 100), dtype=np.uint8)\n    >>> image[35:65, 20:80] = 1\n    >>> image = add_circle(28, 65, 10, image)\n    >>> image = add_circle(37, 30, 10, image)\n    >>> image = add_circle(70, 45, 20, image)\n    >>> image = add_circle(45, 80, 10, image)\n    \n    Next, we set up the figure.\n    \n    >>> fig = plt.figure(figsize=(8, 8))  # set up the figure structure\n    >>> grid = ImageGrid(fig, 111, nrows_ncols=(2, 2), axes_pad=(0.4, 0.3),\n    ...                  label_mode=\"1\", share_all=True,\n    ...                  cbar_location=\"right\", cbar_mode=\"each\",\n    ...                  cbar_size=\"7%\", cbar_pad=\"2%\")\n    >>> for ax in grid:\n    ...     ax.axis('off')  # remove axes from images\n    \n    The top left image is the original binary image.\n    \n    >>> binary_image = grid[0].imshow(image, cmap='gray')\n    >>> cbar_binary_image = grid.cbar_axes[0].colorbar(binary_image)\n    >>> cbar_binary_image.set_ticks([0, 1])\n    >>> grid[0].set_title(\"Binary image: foreground in white\")\n    \n    The distance transform calculates the distance between foreground pixels\n    and the image background according to a distance metric. Available metrics\n    in `distance_transform_bf` are: ``euclidean`` (default), ``taxicab``\n    and ``chessboard``. The top right image contains the distance transform\n    based on the ``euclidean`` metric.\n    \n    >>> distance_transform_euclidean = distance_transform_bf(image)\n    >>> euclidean_transform = grid[1].imshow(distance_transform_euclidean,\n    ...                                      cmap='gray')\n    >>> cbar_euclidean = grid.cbar_axes[1].colorbar(euclidean_transform)\n    >>> colorbar_ticks = [0, 10, 20]\n    >>> cbar_euclidean.set_ticks(colorbar_ticks)\n    >>> grid[1].set_title(\"Euclidean distance\")\n    \n    The lower left image contains the distance transform using the ``taxicab``\n    metric.\n    \n    >>> distance_transform_taxicab = distance_transform_bf(image,\n    ...                                                    metric='taxicab')\n    >>> taxicab_transformation = grid[2].imshow(distance_transform_taxicab,\n    ...                                         cmap='gray')\n    >>> cbar_taxicab = grid.cbar_axes[2].colorbar(taxicab_transformation)\n    >>> cbar_taxicab.set_ticks(colorbar_ticks)\n    >>> grid[2].set_title(\"Taxicab distance\")\n    \n    Finally, the lower right image contains the distance transform using the\n    ``chessboard`` metric.\n    \n    >>> distance_transform_cb = distance_transform_bf(image,\n    ...                                               metric='chessboard')\n    >>> chessboard_transformation = grid[3].imshow(distance_transform_cb,\n    ...                                            cmap='gray')\n    >>> cbar_taxicab = grid.cbar_axes[3].colorbar(chessboard_transformation)\n    >>> cbar_taxicab.set_ticks(colorbar_ticks)\n    >>> grid[3].set_title(\"Chessboard distance\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a5d4025a050199706848a2773167b49157b294f127342e19422cd4c640ec2462",
            "fields": [
                {
                    "id": "iplw8_47",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzv5ghg8",
                    "encoding": "",
                    "name": "metric",
                    "value": "euclidean",
                    "defaultValue": "euclidean",
                    "description": "'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\nThe default is 'euclidean'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ki0u4b_k",
                    "encoding": "",
                    "name": "sampling",
                    "value": "",
                    "defaultValue": "",
                    "description": "This parameter is only used when `metric` is 'euclidean'.\nSpacing of elements along each dimension. If a sequence, must be of\nlength equal to the input rank; if a single number, this is used for\nall axes. If not specified, a grid spacing of unity is implied.",
                    "type": "float, or sequence of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ashc029",
                    "encoding": "",
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate the distance transform.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "toqbo03d",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate the feature transform.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8lnxak23",
                    "encoding": "",
                    "name": "distances",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated distance transform, instead of\nreturning it.\n`return_distances` must be True.\nIt must be the same shape as `input`, and of type float64 if `metric`\nis 'euclidean', uint32 otherwise.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nk03f3ld",
                    "encoding": "",
                    "name": "indices",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated feature transform, instead of\nreturning it.\n`return_indicies` must be True.\nIts shape must be ``(input.ndim,) + input.shape``.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unocfuw8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.distance_transform_bf",
                    "defaultValue": "scipy.ndimage.morphology.distance_transform_bf",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y145hgoy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6m23wf2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ig0az32f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cs9ir8d4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m57hzwov",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4hdao5rb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g5djzzqv",
            "name": "morphology.distance_transform_cdt",
            "description": "Distance transform for chamfer type of transforms.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input. Values of 0 are treated as background.\n    metric : {'chessboard', 'taxicab'} or array_like, optional\n        The `metric` determines the type of chamfering that is done. If the\n        `metric` is equal to 'taxicab' a structure is generated using\n        `generate_binary_structure` with a squared distance equal to 1. If\n        the `metric` is equal to 'chessboard', a `metric` is generated\n        using `generate_binary_structure` with a squared distance equal to\n        the dimensionality of the array. These choices correspond to the\n        common interpretations of the 'taxicab' and the 'chessboard'\n        distance metrics in two dimensions.\n        A custom metric may be provided, in the form of a matrix where\n        each dimension has a length of three.\n        'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\n        The default is 'chessboard'.\n    return_distances : bool, optional\n        Whether to calculate the distance transform.\n        Default is True.\n    return_indices : bool, optional\n        Whether to calculate the feature transform.\n        Default is False.\n    distances : int32 ndarray, optional\n        An output array to store the calculated distance transform, instead of\n        returning it.\n        `return_distances` must be True.\n        It must be the same shape as `input`.\n    indices : int32 ndarray, optional\n        An output array to store the calculated feature transform, instead of\n        returning it.\n        `return_indicies` must be True.\n        Its shape must be ``(input.ndim,) + input.shape``.\n    \n    Returns\n    -------\n    distances : int32 ndarray, optional\n        The calculated distance transform. Returned only when\n        `return_distances` is True, and `distances` is not supplied.\n        It will have the same shape as the input array.\n    indices : int32 ndarray, optional\n        The calculated feature transform. It has an input-shaped array for each\n        dimension of the input. See distance_transform_edt documentation for an\n        example.\n        Returned only when `return_indices` is True, and `indices` is not\n        supplied.\n    \n    See Also\n    --------\n    distance_transform_edt : Fast distance transform for euclidean metric\n    distance_transform_bf : Distance transform for different metrics using\n                            a slower brute force algorithm\n    \n    Examples\n    --------\n    Import the necessary modules.\n    \n    >>> import numpy as np\n    >>> from scipy.ndimage import distance_transform_cdt\n    >>> import matplotlib.pyplot as plt\n    >>> from mpl_toolkits.axes_grid1 import ImageGrid\n    \n    First, we create a toy binary image.\n    \n    >>> def add_circle(center_x, center_y, radius, image, fillvalue=1):\n    ...     # fill circular area with 1\n    ...     xx, yy = np.mgrid[:image.shape[0], :image.shape[1]]\n    ...     circle = (xx - center_x) ** 2 + (yy - center_y) ** 2\n    ...     circle_shape = np.sqrt(circle) < radius\n    ...     image[circle_shape] = fillvalue\n    ...     return image\n    >>> image = np.zeros((100, 100), dtype=np.uint8)\n    >>> image[35:65, 20:80] = 1\n    >>> image = add_circle(28, 65, 10, image)\n    >>> image = add_circle(37, 30, 10, image)\n    >>> image = add_circle(70, 45, 20, image)\n    >>> image = add_circle(45, 80, 10, image)\n    \n    Next, we set up the figure.\n    \n    >>> fig = plt.figure(figsize=(5, 15))\n    >>> grid = ImageGrid(fig, 111, nrows_ncols=(3, 1), axes_pad=(0.5, 0.3),\n    ...                  label_mode=\"1\", share_all=True,\n    ...                  cbar_location=\"right\", cbar_mode=\"each\",\n    ...                  cbar_size=\"7%\", cbar_pad=\"2%\")\n    >>> for ax in grid:\n    ...     ax.axis('off')\n    >>> top, middle, bottom = grid\n    >>> colorbar_ticks = [0, 10, 20]\n    \n    The top image contains the original binary image.\n    \n    >>> binary_image = top.imshow(image, cmap='gray')\n    >>> cbar_binary_image = top.cax.colorbar(binary_image)\n    >>> cbar_binary_image.set_ticks([0, 1])\n    >>> top.set_title(\"Binary image: foreground in white\")\n    \n    The middle image contains the distance transform using the ``taxicab``\n    metric.\n    \n    >>> distance_taxicab = distance_transform_cdt(image, metric=\"taxicab\")\n    >>> taxicab_transform = middle.imshow(distance_taxicab, cmap='gray')\n    >>> cbar_taxicab = middle.cax.colorbar(taxicab_transform)\n    >>> cbar_taxicab.set_ticks(colorbar_ticks)\n    >>> middle.set_title(\"Taxicab metric\")\n    \n    The bottom image contains the distance transform using the ``chessboard``\n    metric.\n    \n    >>> distance_chessboard = distance_transform_cdt(image,\n    ...                                              metric=\"chessboard\")\n    >>> chessboard_transform = bottom.imshow(distance_chessboard, cmap='gray')\n    >>> cbar_chessboard = bottom.cax.colorbar(chessboard_transform)\n    >>> cbar_chessboard.set_ticks(colorbar_ticks)\n    >>> bottom.set_title(\"Chessboard metric\")\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ab264d94420b460913e660da1099b2c26b9aea0348a5fbc96a027e010cf48b78",
            "fields": [
                {
                    "id": "6yieu1g8",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input. Values of 0 are treated as background.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smzza4h9",
                    "encoding": "",
                    "name": "metric",
                    "value": "chessboard",
                    "defaultValue": "chessboard",
                    "description": "The `metric` determines the type of chamfering that is done. If the\n`metric` is equal to 'taxicab' a structure is generated using\n`generate_binary_structure` with a squared distance equal to 1. If\nthe `metric` is equal to 'chessboard', a `metric` is generated\nusing `generate_binary_structure` with a squared distance equal to\nthe dimensionality of the array. These choices correspond to the\ncommon interpretations of the 'taxicab' and the 'chessboard'\ndistance metrics in two dimensions.\nA custom metric may be provided, in the form of a matrix where\neach dimension has a length of three.\n'cityblock' and 'manhattan' are also valid, and map to 'taxicab'.\nThe default is 'chessboard'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rfvg7qdi",
                    "encoding": "",
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate the distance transform.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lmp92m0x",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate the feature transform.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zy5t2p8d",
                    "encoding": "",
                    "name": "distances",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated distance transform, instead of\nreturning it.\n`return_distances` must be True.\nIt must be the same shape as `input`.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uf7gts54",
                    "encoding": "",
                    "name": "indices",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated feature transform, instead of\nreturning it.\n`return_indicies` must be True.\nIts shape must be ``(input.ndim,) + input.shape``.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pkb1t92s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.distance_transform_cdt",
                    "defaultValue": "scipy.ndimage.morphology.distance_transform_cdt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7196461c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b087m535",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jzcfg6gj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tfr6f69",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o1uv4ytz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_34cxhuz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jmkmhnzw",
            "name": "morphology.distance_transform_edt",
            "description": "Exact Euclidean distance transform.\n    \n    This function calculates the distance transform of the `input`, by\n    replacing each foreground (non-zero) element, with its\n    shortest distance to the background (any zero-valued element).\n    \n    In addition to the distance transform, the feature transform can\n    be calculated. In this case the index of the closest background\n    element to each foreground element is returned in a separate array.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input data to transform. Can be any type but will be converted\n        into binary: 1 wherever input equates to True, 0 elsewhere.\n    sampling : float, or sequence of float, optional\n        Spacing of elements along each dimension. If a sequence, must be of\n        length equal to the input rank; if a single number, this is used for\n        all axes. If not specified, a grid spacing of unity is implied.\n    return_distances : bool, optional\n        Whether to calculate the distance transform.\n        Default is True.\n    return_indices : bool, optional\n        Whether to calculate the feature transform.\n        Default is False.\n    distances : float64 ndarray, optional\n        An output array to store the calculated distance transform, instead of\n        returning it.\n        `return_distances` must be True.\n        It must be the same shape as `input`.\n    indices : int32 ndarray, optional\n        An output array to store the calculated feature transform, instead of\n        returning it.\n        `return_indicies` must be True.\n        Its shape must be ``(input.ndim,) + input.shape``.\n    \n    Returns\n    -------\n    distances : float64 ndarray, optional\n        The calculated distance transform. Returned only when\n        `return_distances` is True and `distances` is not supplied.\n        It will have the same shape as the input array.\n    indices : int32 ndarray, optional\n        The calculated feature transform. It has an input-shaped array for each\n        dimension of the input. See example below.\n        Returned only when `return_indices` is True and `indices` is not\n        supplied.\n    \n    Notes\n    -----\n    The Euclidean distance transform gives values of the Euclidean\n    distance::\n    \n                    n\n      y_i = sqrt(sum (x[i]-b[i])**2)\n                    i\n    \n    where b[i] is the background point (value 0) with the smallest\n    Euclidean distance to input points x[i], and n is the\n    number of dimensions.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.array(([0,1,1,1,1],\n    ...               [0,0,1,1,1],\n    ...               [0,1,1,1,1],\n    ...               [0,1,1,1,0],\n    ...               [0,1,1,0,0]))\n    >>> ndimage.distance_transform_edt(a)\n    array([[ 0.    ,  1.    ,  1.4142,  2.2361,  3.    ],\n           [ 0.    ,  0.    ,  1.    ,  2.    ,  2.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.4142,  1.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.    ,  0.    ],\n           [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])\n    \n    With a sampling of 2 units along x, 1 along y:\n    \n    >>> ndimage.distance_transform_edt(a, sampling=[2,1])\n    array([[ 0.    ,  1.    ,  2.    ,  2.8284,  3.6056],\n           [ 0.    ,  0.    ,  1.    ,  2.    ,  3.    ],\n           [ 0.    ,  1.    ,  2.    ,  2.2361,  2.    ],\n           [ 0.    ,  1.    ,  2.    ,  1.    ,  0.    ],\n           [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])\n    \n    Asking for indices as well:\n    \n    >>> edt, inds = ndimage.distance_transform_edt(a, return_indices=True)\n    >>> inds\n    array([[[0, 0, 1, 1, 3],\n            [1, 1, 1, 1, 3],\n            [2, 2, 1, 3, 3],\n            [3, 3, 4, 4, 3],\n            [4, 4, 4, 4, 4]],\n           [[0, 0, 1, 1, 4],\n            [0, 1, 1, 1, 4],\n            [0, 0, 1, 4, 4],\n            [0, 0, 3, 3, 4],\n            [0, 0, 3, 3, 4]]], dtype=int32)\n    \n    With arrays provided for inplace outputs:\n    \n    >>> indices = np.zeros(((np.ndim(a),) + a.shape), dtype=np.int32)\n    >>> ndimage.distance_transform_edt(a, return_indices=True, indices=indices)\n    array([[ 0.    ,  1.    ,  1.4142,  2.2361,  3.    ],\n           [ 0.    ,  0.    ,  1.    ,  2.    ,  2.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.4142,  1.    ],\n           [ 0.    ,  1.    ,  1.4142,  1.    ,  0.    ],\n           [ 0.    ,  1.    ,  1.    ,  0.    ,  0.    ]])\n    >>> indices\n    array([[[0, 0, 1, 1, 3],\n            [1, 1, 1, 1, 3],\n            [2, 2, 1, 3, 3],\n            [3, 3, 4, 4, 3],\n            [4, 4, 4, 4, 4]],\n           [[0, 0, 1, 1, 4],\n            [0, 1, 1, 1, 4],\n            [0, 0, 1, 4, 4],\n            [0, 0, 3, 3, 4],\n            [0, 0, 3, 3, 4]]], dtype=int32)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "260454a87a8c0d8b3c34a5cb62ff14a1e0c4efcc93b18ee9517ae1d688fc578b",
            "fields": [
                {
                    "id": "8ywxk_aq",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input data to transform. Can be any type but will be converted\ninto binary: 1 wherever input equates to True, 0 elsewhere.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tg2gigw3",
                    "encoding": "",
                    "name": "sampling",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spacing of elements along each dimension. If a sequence, must be of\nlength equal to the input rank; if a single number, this is used for\nall axes. If not specified, a grid spacing of unity is implied.",
                    "type": "float, or sequence of float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w0ejctik",
                    "encoding": "",
                    "name": "return_distances",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to calculate the distance transform.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7wqq6k7m",
                    "encoding": "",
                    "name": "return_indices",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to calculate the feature transform.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ijvehs7",
                    "encoding": "",
                    "name": "distances",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated distance transform, instead of\nreturning it.\n`return_distances` must be True.\nIt must be the same shape as `input`.",
                    "type": "float64 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hsuof6n",
                    "encoding": "",
                    "name": "indices",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array to store the calculated feature transform, instead of\nreturning it.\n`return_indicies` must be True.\nIts shape must be ``(input.ndim,) + input.shape``.",
                    "type": "int32 ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06q59t6e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.distance_transform_edt",
                    "defaultValue": "scipy.ndimage.morphology.distance_transform_edt",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wi8tiqpc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4vv2b7m5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vvvflppc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp_3aj8_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s5wds6_0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p5mb31sn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jlwf7yl3",
            "name": "morphology.generate_binary_structure",
            "description": "Generate a binary structure for binary morphological operations.\n    \n    Parameters\n    ----------\n    rank : int\n         Number of dimensions of the array to which the structuring element\n         will be applied, as returned by `np.ndim`.\n    connectivity : int\n         `connectivity` determines which elements of the output array belong\n         to the structure, i.e., are considered as neighbors of the central\n         element. Elements up to a squared distance of `connectivity` from\n         the center are considered neighbors. `connectivity` may range from 1\n         (no diagonal elements are neighbors) to `rank` (all elements are\n         neighbors).\n    \n    Returns\n    -------\n    output : ndarray of bools\n         Structuring element which may be used for binary morphological\n         operations, with `rank` dimensions and all dimensions equal to 3.\n    \n    See Also\n    --------\n    iterate_structure, binary_dilation, binary_erosion\n    \n    Notes\n    -----\n    `generate_binary_structure` can only create structuring elements with\n    dimensions equal to 3, i.e., minimal dimensions. For larger structuring\n    elements, that are useful e.g., for eroding large objects, one may either\n    use `iterate_structure`, or create directly custom arrays with\n    numpy functions such as `numpy.ones`.\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> struct = ndimage.generate_binary_structure(2, 1)\n    >>> struct\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> a = np.zeros((5,5))\n    >>> a[2, 2] = 1\n    >>> a\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> b = ndimage.binary_dilation(a, structure=struct).astype(a.dtype)\n    >>> b\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  0.,  0.,  0.,  0.]])\n    >>> ndimage.binary_dilation(b, structure=struct).astype(a.dtype)\n    array([[ 0.,  0.,  1.,  0.,  0.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 1.,  1.,  1.,  1.,  1.],\n           [ 0.,  1.,  1.,  1.,  0.],\n           [ 0.,  0.,  1.,  0.,  0.]])\n    >>> struct = ndimage.generate_binary_structure(2, 2)\n    >>> struct\n    array([[ True,  True,  True],\n           [ True,  True,  True],\n           [ True,  True,  True]], dtype=bool)\n    >>> struct = ndimage.generate_binary_structure(3, 1)\n    >>> struct # no diagonal elements\n    array([[[False, False, False],\n            [False,  True, False],\n            [False, False, False]],\n           [[False,  True, False],\n            [ True,  True,  True],\n            [False,  True, False]],\n           [[False, False, False],\n            [False,  True, False],\n            [False, False, False]]], dtype=bool)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a19a7f6f803c97a119d9732feb3aace6e4bd48d2bf245b957d98dd9ecbf974e",
            "fields": [
                {
                    "id": "15cmsuu1",
                    "encoding": "",
                    "name": "rank",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of dimensions of the array to which the structuring element\nwill be applied, as returned by `np.ndim`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "561120wq",
                    "encoding": "",
                    "name": "connectivity",
                    "value": "",
                    "defaultValue": "",
                    "description": "`connectivity` determines which elements of the output array belong\nto the structure, i.e., are considered as neighbors of the central\nelement. Elements up to a squared distance of `connectivity` from\nthe center are considered neighbors. `connectivity` may range from 1\n(no diagonal elements are neighbors) to `rank` (all elements are\nneighbors).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tksa78cs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.generate_binary_structure",
                    "defaultValue": "scipy.ndimage.morphology.generate_binary_structure",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08l2m8wf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyr2zbl1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gsi3s5wm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3_zrcth",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgmg30fy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l30r5c5o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "336uix9o",
            "name": "morphology.grey_closing",
            "description": "Multidimensional grayscale closing.\n    \n    A grayscale closing consists in the succession of a grayscale dilation,\n    and a grayscale erosion.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale closing is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        closing. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale closing.\n    structure : array of ints, optional\n        Structuring element used for the grayscale closing. `structure`\n        may be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the closing may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    grey_closing : ndarray\n        Result of the grayscale closing of `input` with `structure`.\n    \n    See Also\n    --------\n    binary_closing, grey_dilation, grey_erosion, grey_opening,\n    generate_binary_structure\n    \n    Notes\n    -----\n    The action of a grayscale closing with a flat structuring element amounts\n    to smoothen deep local minima, whereas binary closing fills small holes.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(36).reshape((6,6))\n    >>> a[3,3] = 0\n    >>> a\n    array([[ 0,  1,  2,  3,  4,  5],\n           [ 6,  7,  8,  9, 10, 11],\n           [12, 13, 14, 15, 16, 17],\n           [18, 19, 20,  0, 22, 23],\n           [24, 25, 26, 27, 28, 29],\n           [30, 31, 32, 33, 34, 35]])\n    >>> ndimage.grey_closing(a, size=(3,3))\n    array([[ 7,  7,  8,  9, 10, 11],\n           [ 7,  7,  8,  9, 10, 11],\n           [13, 13, 14, 15, 16, 17],\n           [19, 19, 20, 20, 22, 23],\n           [25, 25, 26, 27, 28, 29],\n           [31, 31, 32, 33, 34, 35]])\n    >>> # Note that the local minimum a[3,3] has disappeared",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6049bc3515d1f032f9f8cb5a6a45b20852d901de2db35ba4c8b06ee4fb5c1c8c",
            "fields": [
                {
                    "id": "wxrqr147",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale closing is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjdznvw1",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\nclosing. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwwsc_8h",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale closing.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t217sp9k",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale closing. `structure`\nmay be a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gqo_vjtw",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the closing may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t452m1ea",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9yikff_u",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_02ysq2v",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0tqbauv",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r724g_08",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.grey_closing",
                    "defaultValue": "scipy.ndimage.morphology.grey_closing",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt45ulox",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kk8omzjl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3edq8pv4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rwr7tn0s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jn7kyxe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g10lzi3u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2gj82odv",
            "name": "morphology.grey_dilation",
            "description": "Calculate a greyscale dilation, using either a structuring element,\n    or a footprint corresponding to a flat structuring element.\n    \n    Grayscale dilation is a mathematical morphology operation. For the\n    simple case of a full and flat structuring element, it can be viewed\n    as a maximum filter over a sliding window.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale dilation is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        dilation. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale dilation. Non-zero values give the set of\n        neighbors of the center over which the maximum is chosen.\n    structure : array of ints, optional\n        Structuring element used for the grayscale dilation. `structure`\n        may be a non-flat structuring element. The `structure` array applies an\n        additive offset for each pixel in the neighborhood.\n    output : array, optional\n        An array used for storing the output of the dilation may be provided.\n    mode : {'reflect','constant','nearest','mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    grey_dilation : ndarray\n        Grayscale dilation of `input`.\n    \n    See Also\n    --------\n    binary_dilation, grey_erosion, grey_closing, grey_opening\n    generate_binary_structure, maximum_filter\n    \n    Notes\n    -----\n    The grayscale dilation of an image input by a structuring element s defined\n    over a domain E is given by:\n    \n    (input+s)(x) = max {input(y) + s(x-y), for y in E}\n    \n    In particular, for structuring elements defined as\n    s(y) = 0 for y in E, the grayscale dilation computes the maximum of the\n    input image inside a sliding window defined by E.\n    \n    Grayscale dilation [1]_ is a *mathematical morphology* operation [2]_.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Dilation_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[2:5, 2:5] = 1\n    >>> a[4,4] = 2; a[2,3] = 3\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 3, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_dilation(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_dilation(a, footprint=np.ones((3,3)))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> s = ndimage.generate_binary_structure(2,1)\n    >>> s\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> ndimage.grey_dilation(a, footprint=s)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 3, 1, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 1, 3, 2, 1, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 1, 1, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_dilation(a, size=(3,3), structure=np.ones((3,3)))\n    array([[1, 1, 1, 1, 1, 1, 1],\n           [1, 2, 4, 4, 4, 2, 1],\n           [1, 2, 4, 4, 4, 2, 1],\n           [1, 2, 4, 4, 4, 3, 1],\n           [1, 2, 2, 3, 3, 3, 1],\n           [1, 2, 2, 3, 3, 3, 1],\n           [1, 1, 1, 1, 1, 1, 1]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8ef2093729cdc7062efc1a2a98997dcb9172e23b97eb2d3c1154f8b10f752cee",
            "fields": [
                {
                    "id": "xoct1kl6",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale dilation is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lx3vxsaf",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\ndilation. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k8dwt1ck",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale dilation. Non-zero values give the set of\nneighbors of the center over which the maximum is chosen.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jri17xgd",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale dilation. `structure`\nmay be a non-flat structuring element. The `structure` array applies an\nadditive offset for each pixel in the neighborhood.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cf7fx3sc",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the dilation may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2bupobv",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "psra0mx0",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wtb7z5d",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9r8r8dfs",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qwk_6je",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.grey_dilation",
                    "defaultValue": "scipy.ndimage.morphology.grey_dilation",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pose6q44",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "85eucrwp",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3eopo00e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tey8r0g9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5w6zgzcl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "scwto0iq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lawbsekt",
            "name": "morphology.grey_erosion",
            "description": "Calculate a greyscale erosion, using either a structuring element,\n    or a footprint corresponding to a flat structuring element.\n    \n    Grayscale erosion is a mathematical morphology operation. For the\n    simple case of a full and flat structuring element, it can be viewed\n    as a minimum filter over a sliding window.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale erosion is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        erosion. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale erosion. Non-zero values give the set of\n        neighbors of the center over which the minimum is chosen.\n    structure : array of ints, optional\n        Structuring element used for the grayscale erosion. `structure`\n        may be a non-flat structuring element. The `structure` array applies a\n        subtractive offset for each pixel in the neighborhood.\n    output : array, optional\n        An array used for storing the output of the erosion may be provided.\n    mode : {'reflect','constant','nearest','mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    output : ndarray\n        Grayscale erosion of `input`.\n    \n    See Also\n    --------\n    binary_erosion, grey_dilation, grey_opening, grey_closing\n    generate_binary_structure, minimum_filter\n    \n    Notes\n    -----\n    The grayscale erosion of an image input by a structuring element s defined\n    over a domain E is given by:\n    \n    (input+s)(x) = min {input(y) - s(x-y), for y in E}\n    \n    In particular, for structuring elements defined as\n    s(y) = 0 for y in E, the grayscale erosion computes the minimum of the\n    input image inside a sliding window defined by E.\n    \n    Grayscale erosion [1]_ is a *mathematical morphology* operation [2]_.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Erosion_%28morphology%29\n    .. [2] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[1:6, 1:6] = 3\n    >>> a[4,4] = 2; a[2,3] = 1\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 3, 3, 3, 3, 3, 0],\n           [0, 3, 3, 1, 3, 3, 0],\n           [0, 3, 3, 3, 3, 3, 0],\n           [0, 3, 3, 3, 2, 3, 0],\n           [0, 3, 3, 3, 3, 3, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.grey_erosion(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 3, 2, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> footprint = ndimage.generate_binary_structure(2, 1)\n    >>> footprint\n    array([[False,  True, False],\n           [ True,  True,  True],\n           [False,  True, False]], dtype=bool)\n    >>> # Diagonally-connected elements are not considered neighbors\n    >>> ndimage.grey_erosion(a, footprint=footprint)\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 3, 1, 2, 0, 0],\n           [0, 0, 3, 2, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9abccdbe29c0426c4325e7794d0f1063fee88d09f58c8bf9751bd87787fe3e88",
            "fields": [
                {
                    "id": "m8vbvnuc",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale erosion is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_ew8tvy",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\nerosion. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7huwhhm0",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale erosion. Non-zero values give the set of\nneighbors of the center over which the minimum is chosen.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1m5eh5s9",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale erosion. `structure`\nmay be a non-flat structuring element. The `structure` array applies a\nsubtractive offset for each pixel in the neighborhood.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "513r_pyd",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the erosion may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8g8ufdhx",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6p6jphmv",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "25m19pz7",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xpk60vy",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2f5590a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.grey_erosion",
                    "defaultValue": "scipy.ndimage.morphology.grey_erosion",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rn_nfe69",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "314h00do",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qvmtsgwv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d096fkq3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aa1b4qec",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufql2pci",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p4citcz5",
            "name": "morphology.grey_opening",
            "description": "Multidimensional grayscale opening.\n    \n    A grayscale opening consists in the succession of a grayscale erosion,\n    and a grayscale dilation.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which the grayscale opening is to be computed.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the grayscale\n        opening. Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the grayscale opening.\n    structure : array of ints, optional\n        Structuring element used for the grayscale opening. `structure`\n        may be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion).\n    output : array, optional\n        An array used for storing the output of the opening may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    grey_opening : ndarray\n        Result of the grayscale opening of `input` with `structure`.\n    \n    See Also\n    --------\n    binary_opening, grey_dilation, grey_erosion, grey_closing\n    generate_binary_structure\n    \n    Notes\n    -----\n    The action of a grayscale opening with a flat structuring element amounts\n    to smoothen high local maxima, whereas binary opening erases small objects.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.arange(36).reshape((6,6))\n    >>> a[3, 3] = 50\n    >>> a\n    array([[ 0,  1,  2,  3,  4,  5],\n           [ 6,  7,  8,  9, 10, 11],\n           [12, 13, 14, 15, 16, 17],\n           [18, 19, 20, 50, 22, 23],\n           [24, 25, 26, 27, 28, 29],\n           [30, 31, 32, 33, 34, 35]])\n    >>> ndimage.grey_opening(a, size=(3,3))\n    array([[ 0,  1,  2,  3,  4,  4],\n           [ 6,  7,  8,  9, 10, 10],\n           [12, 13, 14, 15, 16, 16],\n           [18, 19, 20, 22, 22, 22],\n           [24, 25, 26, 27, 28, 28],\n           [24, 25, 26, 27, 28, 28]])\n    >>> # Note that the local maximum a[3,3] has disappeared",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5f13fd2fab8907cddf627efda5bf6a92fc9aa17555a1e5efd0bd3fc0609cfecd",
            "fields": [
                {
                    "id": "8efs08x9",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which the grayscale opening is to be computed.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "23c6e1xg",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the grayscale\nopening. Optional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ltssbzdo",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the grayscale opening.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tv8dp4de",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the grayscale opening. `structure`\nmay be a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion).",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_3ef9u9",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the opening may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ev1bgmnu",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "deianeae",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhfho3at",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6esdaf8k",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q48rbjtk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.grey_opening",
                    "defaultValue": "scipy.ndimage.morphology.grey_opening",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x84qso48",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dw88u9xw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "450pog_0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ps8b2lur",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "js8nlpmv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "edddlnax",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "teupfaqi",
            "name": "morphology.iterate_structure",
            "description": "Iterate a structure by dilating it with itself.\n    \n    Parameters\n    ----------\n    structure : array_like\n       Structuring element (an array of bools, for example), to be dilated with\n       itself.\n    iterations : int\n       number of dilations performed on the structure with itself\n    origin : optional\n        If origin is None, only the iterated structure is returned. If\n        not, a tuple of the iterated structure and the modified origin is\n        returned.\n    \n    Returns\n    -------\n    iterate_structure : ndarray of bools\n        A new structuring element obtained by dilating `structure`\n        (`iterations` - 1) times with itself.\n    \n    See Also\n    --------\n    generate_binary_structure\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> struct = ndimage.generate_binary_structure(2, 1)\n    >>> struct.astype(int)\n    array([[0, 1, 0],\n           [1, 1, 1],\n           [0, 1, 0]])\n    >>> ndimage.iterate_structure(struct, 2).astype(int)\n    array([[0, 0, 1, 0, 0],\n           [0, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1],\n           [0, 1, 1, 1, 0],\n           [0, 0, 1, 0, 0]])\n    >>> ndimage.iterate_structure(struct, 3).astype(int)\n    array([[0, 0, 0, 1, 0, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1, 1, 1],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 0, 1, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ede4ed83da0d60f311334ac81fd775c9481ccec3acfc36cc58b31a6269fe6683",
            "fields": [
                {
                    "id": "e1uu4ikv",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element (an array of bools, for example), to be dilated with\nitself.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9ft5u2r",
                    "encoding": "",
                    "name": "iterations",
                    "value": "",
                    "defaultValue": "",
                    "description": "number of dilations performed on the structure with itself",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w0upfrh3",
                    "encoding": "",
                    "name": "origin",
                    "value": "",
                    "defaultValue": "",
                    "description": "If origin is None, only the iterated structure is returned. If\nnot, a tuple of the iterated structure and the modified origin is\nreturned.",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "trczq_ru",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.iterate_structure",
                    "defaultValue": "scipy.ndimage.morphology.iterate_structure",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_26huts",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eos4opo2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ufehsuor",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1yaasej3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5yk56df4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4r9m_cb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1yw95x5_",
            "name": "morphology.morphological_gradient",
            "description": "Multidimensional morphological gradient.\n    \n    The morphological gradient is calculated as the difference between a\n    dilation and an erosion of the input with a given structuring element.\n    \n    Parameters\n    ----------\n    input : array_like\n        Array over which to compute the morphlogical gradient.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the mathematical\n        morphology operations. Optional if `footprint` or `structure` is\n        provided. A larger `size` yields a more blurred gradient.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the morphology operations. Larger footprints\n        give a more blurred morphological gradient.\n    structure : array of ints, optional\n        Structuring element used for the morphology operations. `structure` may\n        be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the morphological gradient\n        may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'. Default\n        is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default 0\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    morphological_gradient : ndarray\n        Morphological gradient of `input`.\n    \n    See Also\n    --------\n    grey_dilation, grey_erosion, gaussian_gradient_magnitude\n    \n    Notes\n    -----\n    For a flat structuring element, the morphological gradient\n    computed at a given point corresponds to the maximal difference\n    between elements of the input among the elements covered by the\n    structuring element centered on the point.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Mathematical_morphology\n    \n    Examples\n    --------\n    >>> from scipy import ndimage\n    >>> import numpy as np\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[2:5, 2:5] = 1\n    >>> ndimage.morphological_gradient(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 0, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> # The morphological gradient is computed as the difference\n    >>> # between a dilation and an erosion\n    >>> ndimage.grey_dilation(a, size=(3,3)) -\\\n    ...  ndimage.grey_erosion(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 0, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 1, 1, 1, 1, 1, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> a = np.zeros((7,7), dtype=int)\n    >>> a[2:5, 2:5] = 1\n    >>> a[4,4] = 2; a[2,3] = 3\n    >>> a\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 1, 3, 1, 0, 0],\n           [0, 0, 1, 1, 1, 0, 0],\n           [0, 0, 1, 1, 2, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0],\n           [0, 0, 0, 0, 0, 0, 0]])\n    >>> ndimage.morphological_gradient(a, size=(3,3))\n    array([[0, 0, 0, 0, 0, 0, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 3, 3, 1, 0],\n           [0, 1, 3, 2, 3, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 1, 1, 2, 2, 2, 0],\n           [0, 0, 0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6e54dc927fed4518274021ad58d365625c26387806f262bef2f1d3595e430c4a",
            "fields": [
                {
                    "id": "c8lg64lo",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array over which to compute the morphlogical gradient.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0m22n5mg",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the mathematical\nmorphology operations. Optional if `footprint` or `structure` is\nprovided. A larger `size` yields a more blurred gradient.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33jgti5u",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the morphology operations. Larger footprints\ngive a more blurred morphological gradient.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5jf2x4ze",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the morphology operations. `structure` may\nbe a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z01o9h_w",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the morphological gradient\nmay be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8cun8p_",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83idtqo1",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'. Default\nis 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yihnalw7",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault 0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxpl37sj",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_b6sd794",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.morphological_gradient",
                    "defaultValue": "scipy.ndimage.morphology.morphological_gradient",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ng_u12w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tj9vdrw3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y5s08cdl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13y4483a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1ze8y_m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u55nipmv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "geresi75",
            "name": "morphology.morphological_laplace",
            "description": "Multidimensional morphological laplace.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the mathematical\n        morphology operations. Optional if `footprint` or `structure` is\n        provided.\n    footprint : array of ints, optional\n        Positions of non-infinite elements of a flat structuring element\n        used for the morphology operations.\n    structure : array of ints, optional\n        Structuring element used for the morphology operations. `structure` may\n        be a non-flat structuring element. The `structure` array applies\n        offsets to the pixels in a neighborhood (the offset is additive during\n        dilation and subtractive during erosion)\n    output : ndarray, optional\n        An output array can optionally be provided.\n    mode : {'reflect','constant','nearest','mirror', 'wrap'}, optional\n        The mode parameter determines how the array borders are handled.\n        For 'constant' mode, values beyond borders are set to be `cval`.\n        Default is 'reflect'.\n    cval : scalar, optional\n        Value to fill past edges of input if mode is 'constant'.\n        Default is 0.0\n    origin : origin, optional\n        The origin parameter controls the placement of the filter.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    morphological_laplace : ndarray\n        Output",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6b363061f0b503c0bc2cd773fc22d164ab5c42924b4d387c26dfe85cd853e970",
            "fields": [
                {
                    "id": "tdsnl_pl",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eyf6uarb",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the mathematical\nmorphology operations. Optional if `footprint` or `structure` is\nprovided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_o10hdjs",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of non-infinite elements of a flat structuring element\nused for the morphology operations.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eus1btvc",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the morphology operations. `structure` may\nbe a non-flat structuring element. The `structure` array applies\noffsets to the pixels in a neighborhood (the offset is additive during\ndilation and subtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckftu9fq",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An output array can optionally be provided.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22igaoo1",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The mode parameter determines how the array borders are handled.\nFor 'constant' mode, values beyond borders are set to be `cval`.\nDefault is 'reflect'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c29owpin",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if mode is 'constant'.\nDefault is 0.0",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dv5dqenu",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The origin parameter controls the placement of the filter.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81_vbagx",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5u_1q8d1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.morphological_laplace",
                    "defaultValue": "scipy.ndimage.morphology.morphological_laplace",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kclrptan",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mo0yxt_4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "efp5lj26",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i4flt3ba",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_o6bt23c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4d_eccb0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "omoi5f55",
            "name": "morphology.white_tophat",
            "description": "Multidimensional white tophat filter.\n    \n    Parameters\n    ----------\n    input : array_like\n        Input.\n    size : tuple of ints\n        Shape of a flat and full structuring element used for the filter.\n        Optional if `footprint` or `structure` is provided.\n    footprint : array of ints, optional\n        Positions of elements of a flat structuring element\n        used for the white tophat filter.\n    structure : array of ints, optional\n        Structuring element used for the filter. `structure` may be a non-flat\n        structuring element. The `structure` array applies offsets to the\n        pixels in a neighborhood (the offset is additive during dilation and\n        subtractive during erosion)\n    output : array, optional\n        An array used for storing the output of the filter may be provided.\n    mode : {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}, optional\n        The `mode` parameter determines how the array borders are\n        handled, where `cval` is the value when mode is equal to\n        'constant'. Default is 'reflect'\n    cval : scalar, optional\n        Value to fill past edges of input if `mode` is 'constant'.\n        Default is 0.0.\n    origin : scalar, optional\n        The `origin` parameter controls the placement of the filter.\n        Default is 0.\n    axes : tuple of int or None\n        The axes over which to apply the filter. If None, `input` is filtered\n        along all axes. If an `origin` tuple is provided, its length must match\n        the number of axes.\n    \n    Returns\n    -------\n    output : ndarray\n        Result of the filter of `input` with `structure`.\n    \n    See Also\n    --------\n    black_tophat\n    \n    Examples\n    --------\n    Subtract gray background from a bright peak.\n    \n    >>> from scipy.ndimage import generate_binary_structure, white_tophat\n    >>> import numpy as np\n    >>> square = generate_binary_structure(rank=2, connectivity=3)\n    >>> bright_on_gray = np.array([[2, 3, 3, 3, 2],\n    ...                            [3, 4, 5, 4, 3],\n    ...                            [3, 5, 9, 5, 3],\n    ...                            [3, 4, 5, 4, 3],\n    ...                            [2, 3, 3, 3, 2]])\n    >>> white_tophat(input=bright_on_gray, structure=square)\n    array([[0, 0, 0, 0, 0],\n           [0, 0, 1, 0, 0],\n           [0, 1, 5, 1, 0],\n           [0, 0, 1, 0, 0],\n           [0, 0, 0, 0, 0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2aacbe7ea08c2bc01a02d20560bbfafb162aba9a7036ad1eba7d20f6704aaa7d",
            "fields": [
                {
                    "id": "mta2wyp4",
                    "encoding": "",
                    "name": "input",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suevacs9",
                    "encoding": "",
                    "name": "size",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of a flat and full structuring element used for the filter.\nOptional if `footprint` or `structure` is provided.",
                    "type": "tuple of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2l_rjue",
                    "encoding": "",
                    "name": "footprint",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positions of elements of a flat structuring element\nused for the white tophat filter.",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "10jd5636",
                    "encoding": "",
                    "name": "structure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Structuring element used for the filter. `structure` may be a non-flat\nstructuring element. The `structure` array applies offsets to the\npixels in a neighborhood (the offset is additive during dilation and\nsubtractive during erosion)",
                    "type": "array of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w8plgi8h",
                    "encoding": "",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array used for storing the output of the filter may be provided.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kzj3lnni",
                    "encoding": "",
                    "name": "mode",
                    "value": "reflect",
                    "defaultValue": "reflect",
                    "description": "The `mode` parameter determines how the array borders are\nhandled, where `cval` is the value when mode is equal to\n'constant'. Default is 'reflect'",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2mk82j6",
                    "encoding": "",
                    "name": "cval",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Value to fill past edges of input if `mode` is 'constant'.\nDefault is 0.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "on332lqa",
                    "encoding": "",
                    "name": "origin",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The `origin` parameter controls the placement of the filter.\nDefault is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bntx85pr",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "The axes over which to apply the filter. If None, `input` is filtered\nalong all axes. If an `origin` tuple is provided, its length must match\nthe number of axes.",
                    "type": "tuple of int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zagj4a8s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.ndimage.morphology.white_tophat",
                    "defaultValue": "scipy.ndimage.morphology.white_tophat",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o5wek_bl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wdne70y4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gl82616f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_de_c7e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.ndimage.morphology",
                    "defaultValue": "scipy.ndimage.morphology",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0b03wz4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ic0_u6ez",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}