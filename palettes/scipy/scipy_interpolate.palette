{
    "modelData": {
        "filePath": "scipy_interpolate.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "========================================\nInterpolation (:mod:`scipy.interpolate`)\n========================================\n\n.. currentmodule:: scipy.interpolate\n\nSub-package for functions and objects used in interpolation.\n\nSee the :ref:`user guide <tutorial-interpolate>` for recommendations on choosing a\nroutine, and other usage details.\n\n\nUnivariate interpolation\n========================\n\n.. autosummary::\n   :toctree: generated/\n\n   make_interp_spline\n   CubicSpline\n   PchipInterpolator\n   Akima1DInterpolator\n   FloaterHormannInterpolator\n   BarycentricInterpolator\n   KroghInterpolator\n   CubicHermiteSpline\n\n**Low-level data structures for univariate interpolation:**\n\n.. autosummary::\n   :toctree: generated/\n\n   PPoly\n   BPoly\n   BSpline\n\n\nMultivariate interpolation\n==========================\n\n**Unstructured data**\n\n.. autosummary::\n   :toctree: generated/\n\n   LinearNDInterpolator\n   NearestNDInterpolator\n   CloughTocher2DInterpolator\n   RBFInterpolator\n\n**For data on a grid:**\n\n.. autosummary::\n   :toctree: generated/\n\n   RegularGridInterpolator\n\n.. seealso::\n\n    `scipy.ndimage.map_coordinates`,\n    :ref:`An example wrapper for map_coordinates <tutorial-interpolate_cartesian-grids>`\n\n\n**Low-level data structures for tensor product polynomials and splines:**\n\n\n.. autosummary::\n   :toctree: generated/\n\n   NdPPoly\n   NdBSpline\n\n\n1-D spline smoothing and approximation\n======================================\n\n.. autosummary::\n   :toctree: generated/\n\n   make_lsq_spline\n   make_smoothing_spline\n   make_splrep\n   make_splprep\n   generate_knots\n\nRational Approximation\n======================\n\n.. autosummary::\n   :toctree: generated/\n\n   AAA\n\n\nInterfaces to FITPACK routines for 1D and 2D spline fitting\n===========================================================\n\nThis section lists wrappers for `FITPACK <http://www.netlib.org/dierckx/>`__\nfunctionality for 1D and 2D smoothing splines. In most cases, users are better off\nusing higher-level routines listed in previous sections.\n\n\n1D FITPACK splines\n------------------\n\nThis package provides two sets of functionally equivalent wrappers: object-oriented and\nfunctional.\n\n**Functional FITPACK interface:**\n\n\n.. autosummary::\n   :toctree: generated/\n\n   splrep\n   splprep\n   splev\n   splint\n   sproot\n   spalde\n   splder\n   splantider\n   insert\n\n**Object-oriented FITPACK interface:**\n\n.. autosummary::\n   :toctree: generated/\n\n   UnivariateSpline\n   InterpolatedUnivariateSpline\n   LSQUnivariateSpline\n\n\n2D FITPACK splines\n------------------\n\n**For data on a grid:**\n\n.. autosummary::\n   :toctree: generated/\n\n   RectBivariateSpline\n   RectSphereBivariateSpline\n\n**For unstructured data (OOP interface):**\n\n.. autosummary::\n   :toctree: generated/\n\n   BivariateSpline\n   SmoothBivariateSpline\n   SmoothSphereBivariateSpline\n   LSQBivariateSpline\n   LSQSphereBivariateSpline\n\n**For unstructured data (functional interface):**\n\n.. autosummary::\n   :toctree: generated/\n\n   bisplrep\n   bisplev\n\n\nAdditional tools\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   lagrange\n   approximate_taylor_polynomial\n   pade\n\n   interpn\n   griddata\n   barycentric_interpolate\n   krogh_interpolate\n   pchip_interpolate\n   Rbf\n   interp1d\n   interp2d\n\n.. seealso::\n\n   `scipy.ndimage.map_coordinates`,\n   `scipy.ndimage.spline_filter`,",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "696492aa034afba846743a5f60ff421cd0211e0a254678d3f928a8346b812101",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100436.53801,
        "numLGNodes": 223
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bfo628vi",
            "name": "AAA.__init__",
            "description": "\nAAA real or complex rational approximation.\n    \n    As described in [1]_, the AAA algorithm is a greedy algorithm for approximation by\n    rational functions on a real or complex set of points. The rational approximation is\n    represented in a barycentric form from which the roots (zeros), poles, and residues\n    can be computed.\n    \n    Parameters\n    ----------\n    x : 1D array_like, shape (n,)\n        1-D array containing values of the independent variable. Values may be real or\n        complex but must be finite.\n    y : 1D array_like, shape (n,)\n        Function values ``f(x)``. Infinite and NaN values of `values` and\n        corresponding values of `points` will be discarded.\n    rtol : float, optional\n        Relative tolerance, defaults to ``eps**0.75``. If a small subset of the entries\n        in `values` are much larger than the rest the default tolerance may be too\n        loose. If the tolerance is too tight then the approximation may contain\n        Froissart doublets or the algorithm may fail to converge entirely.\n    max_terms : int, optional\n        Maximum number of terms in the barycentric representation, defaults to ``100``.\n        Must be greater than or equal to one.\n    clean_up : bool, optional\n        Automatic removal of Froissart doublets, defaults to ``True``. See notes for\n        more details.\n    clean_up_tol : float, optional\n        Poles with residues less than this number times the geometric mean\n        of `values` times the minimum distance to `points` are deemed spurious by the\n        cleanup procedure, defaults to 1e-13. See notes for more details.\n    \n    Attributes\n    ----------\n    support_points : array\n        Support points of the approximation. These are a subset of the provided `x` at\n        which the approximation strictly interpolates `y`.\n        See notes for more details.\n    support_values : array\n        Value of the approximation at the `support_points`.\n    weights : array\n        Weights of the barycentric approximation.\n    errors : array\n        Error :math:`|f(z) - r(z)|_\\infty` over `points` in the successive iterations\n        of AAA.\n    \n    Warns\n    -----\n    RuntimeWarning\n        If `rtol` is not achieved in `max_terms` iterations.\n    \n    See Also\n    --------\n    FloaterHormannInterpolator : Floater-Hormann barycentric rational interpolation.\n    pade : Pad\u00e9 approximation.\n    \n    Notes\n    -----\n    At iteration :math:`m` (at which point there are :math:`m` terms in the both the\n    numerator and denominator of the approximation), the\n    rational approximation in the AAA algorithm takes the barycentric form\n    \n    .. math::\n    \n        r(z) = n(z)/d(z) =\n        \\frac{\\sum_{j=1}^m\\ w_j f_j / (z - z_j)}{\\sum_{j=1}^m w_j / (z - z_j)},\n    \n    where :math:`z_1,\\dots,z_m` are real or complex support points selected from\n    `x`, :math:`f_1,\\dots,f_m` are the corresponding real or complex data values\n    from `y`, and :math:`w_1,\\dots,w_m` are real or complex weights.\n    \n    Each iteration of the algorithm has two parts: the greedy selection the next support\n    point and the computation of the weights. The first part of each iteration is to\n    select the next support point to be added :math:`z_{m+1}` from the remaining\n    unselected `x`, such that the nonlinear residual\n    :math:`|f(z_{m+1}) - n(z_{m+1})/d(z_{m+1})|` is maximised. The algorithm terminates\n    when this maximum is less than ``rtol * np.linalg.norm(f, ord=np.inf)``. This means\n    the interpolation property is only satisfied up to a tolerance, except at the\n    support points where approximation exactly interpolates the supplied data.\n    \n    In the second part of each iteration, the weights :math:`w_j` are selected to solve\n    the least-squares problem\n    \n    .. math::\n    \n        \\text{minimise}_{w_j}|fd - n| \\quad \\text{subject to} \\quad\n        \\sum_{j=1}^{m+1} w_j = 1,\n    \n    over the unselected elements of `x`.\n    \n    One of the challenges with working with rational approximations is the presence of\n    Froissart doublets, which are either poles with vanishingly small residues or\n    pole-zero pairs that are close enough together to nearly cancel, see [2]_. The\n    greedy nature of the AAA algorithm means Froissart doublets are rare. However, if\n    `rtol` is set too tight then the approximation will stagnate and many Froissart\n    doublets will appear. Froissart doublets can usually be removed by removing support\n    points and then resolving the least squares problem. The support point :math:`z_j`,\n    which is the closest support point to the pole :math:`a` with residue\n    :math:`\\alpha`, is removed if the following is satisfied\n    \n    .. math::\n    \n        |\\alpha| / |z_j - a| < \\verb|clean_up_tol| \\cdot \\tilde{f},\n    \n    where :math:`\\tilde{f}` is the geometric mean of `support_values`.\n    \n    \n    References\n    ----------\n    .. [1] Y. Nakatsukasa, O. Sete, and L. N. Trefethen, \"The AAA algorithm for\n            rational approximation\", SIAM J. Sci. Comp. 40 (2018), A1494-A1522.\n            :doi:`10.1137/16M1106122`\n    .. [2] J. Gilewicz and M. Pindor, Pade approximants and noise: rational functions,\n           J. Comp. Appl. Math. 105 (1999), pp. 285-297.\n           :doi:`10.1016/S0377-0427(02)00674-X`\n    \n    Examples\n    --------\n    \n    Here we reproduce a number of the numerical examples from [1]_ as a demonstration\n    of the functionality offered by this method.\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import AAA\n    >>> import warnings\n    \n    For the first example we approximate the gamma function on ``[-3.5, 4.5]`` by\n    extrapolating from 100 samples in ``[-1.5, 1.5]``.\n    \n    >>> from scipy.special import gamma\n    >>> sample_points = np.linspace(-1.5, 1.5, num=100)\n    >>> r = AAA(sample_points, gamma(sample_points))\n    >>> z = np.linspace(-3.5, 4.5, num=1000)\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(z, gamma(z), label=\"Gamma\")\n    >>> ax.plot(sample_points, gamma(sample_points), label=\"Sample points\")\n    >>> ax.plot(z, r(z).real, '--', label=\"AAA approximation\")\n    >>> ax.set(xlabel=\"z\", ylabel=\"r(z)\", ylim=[-8, 8], xlim=[-3.5, 4.5])\n    >>> ax.legend()\n    >>> plt.show()\n    \n    We can also view the poles of the rational approximation and their residues:\n    \n    >>> order = np.argsort(r.poles())\n    >>> r.poles()[order]\n    array([-3.81591039e+00+0.j        , -3.00269049e+00+0.j        ,\n           -1.99999988e+00+0.j        , -1.00000000e+00+0.j        ,\n            5.85842812e-17+0.j        ,  4.77485458e+00-3.06919376j,\n            4.77485458e+00+3.06919376j,  5.29095868e+00-0.97373072j,\n            5.29095868e+00+0.97373072j])\n    >>> r.residues()[order]\n    array([ 0.03658074 +0.j        , -0.16915426 -0.j        ,\n            0.49999915 +0.j        , -1.         +0.j        ,\n            1.         +0.j        , -0.81132013 -2.30193429j,\n           -0.81132013 +2.30193429j,  0.87326839+10.70148546j,\n            0.87326839-10.70148546j])\n    \n    For the second example, we call `AAA` with a spiral of 1000 points that wind 7.5\n    times around the origin in the complex plane.\n    \n    >>> z = np.exp(np.linspace(-0.5, 0.5 + 15j*np.pi, 1000))\n    >>> r = AAA(z, np.tan(np.pi*z/2), rtol=1e-13)\n    \n    We see that AAA takes 12 steps to converge with the following errors:\n    \n    >>> r.errors.size\n    12\n    >>> r.errors\n    array([2.49261500e+01, 4.28045609e+01, 1.71346935e+01, 8.65055336e-02,\n           1.27106444e-02, 9.90889874e-04, 5.86910543e-05, 1.28735561e-06,\n           3.57007424e-08, 6.37007837e-10, 1.67103357e-11, 1.17112299e-13])\n    \n    We can also plot the computed poles:\n    \n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(z.real, z.imag, '.', markersize=2, label=\"Sample points\")\n    >>> ax.plot(r.poles().real, r.poles().imag, '.', markersize=5,\n    ...         label=\"Computed poles\")\n    >>> ax.set(xlim=[-3.5, 3.5], ylim=[-3.5, 3.5], aspect=\"equal\")\n    >>> ax.legend()\n    >>> plt.show()\n    \n    We now demonstrate the removal of Froissart doublets using the `clean_up` method\n    using an example from [1]_. Here we approximate the function\n    :math:`f(z)=\\log(2 + z^4)/(1 + 16z^4)` by sampling it at 1000 roots of unity. The\n    algorithm is run with ``rtol=0`` and ``clean_up=False`` to deliberately cause\n    Froissart doublets to appear.\n    \n    >>> z = np.exp(1j*2*np.pi*np.linspace(0,1, num=1000))\n    >>> def f(z):\n    ...     return np.log(2 + z**4)/(1 - 16*z**4)\n    >>> with warnings.catch_warnings():  # filter convergence warning due to rtol=0\n    ...     warnings.simplefilter('ignore', RuntimeWarning)\n    ...     r = AAA(z, f(z), rtol=0, max_terms=50, clean_up=False)\n    >>> mask = np.abs(r.residues()) < 1e-13\n    >>> fig, axs = plt.subplots(ncols=2)\n    >>> axs[0].plot(r.poles().real[~mask], r.poles().imag[~mask], '.')\n    >>> axs[0].plot(r.poles().real[mask], r.poles().imag[mask], 'r.')\n    \n    Now we call the `clean_up` method to remove Froissart doublets.\n    \n    >>> with warnings.catch_warnings():\n    ...     warnings.simplefilter('ignore', RuntimeWarning)\n    ...     r.clean_up()\n    4  # may vary\n    >>> mask = np.abs(r.residues()) < 1e-13\n    >>> axs[1].plot(r.poles().real[~mask], r.poles().imag[~mask], '.')\n    >>> axs[1].plot(r.poles().real[mask], r.poles().imag[mask], 'r.')\n    >>> plt.show()\n    \n    The left image shows the poles prior of the approximation ``clean_up=False`` with\n    poles with residue less than ``10^-13`` in absolute value shown in red. The right\n    image then shows the poles after the `clean_up` method has been called.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0daf70587c7ba990c8e297d5663b30f947631ae4befc4f492f8cf5d0db6b822f",
            "fields": [
                {
                    "id": "wxl99nev",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to AAA object",
                    "type": "Object:scipy.interpolate._bary_rational.AAA",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zg5m7s1k",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array containing values of the independent variable. Values may be real or\ncomplex but must be finite.",
                    "type": "1D arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7vt64xv",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function values ``f(x)``. Infinite and NaN values of `values` and\ncorresponding values of `points` will be discarded.",
                    "type": "1D arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rikh1ykz",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Relative tolerance, defaults to ``eps**0.75``. If a small subset of the entries\nin `values` are much larger than the rest the default tolerance may be too\nloose. If the tolerance is too tight then the approximation may contain\nFroissart doublets or the algorithm may fail to converge entirely.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iaxd07mi",
                    "encoding": "",
                    "name": "max_terms",
                    "value": 100,
                    "defaultValue": 100,
                    "description": "Maximum number of terms in the barycentric representation, defaults to ``100``.\nMust be greater than or equal to one.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjnjkk67",
                    "encoding": "",
                    "name": "clean_up",
                    "value": true,
                    "defaultValue": true,
                    "description": "Automatic removal of Froissart doublets, defaults to ``True``. See notes for\nmore details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05v0dbx7",
                    "encoding": "",
                    "name": "clean_up_tol",
                    "value": 1e-13,
                    "defaultValue": 1e-13,
                    "description": "Poles with residues less than this number times the geometric mean\nof `values` times the minimum distance to `points` are deemed spurious by the\ncleanup procedure, defaults to 1e-13. See notes for more details.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "adjsui31",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.AAA.__init__",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m5tcjt5q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_43vdjwl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "azwdqmp_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bmv4b9zy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.AAA",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_loggjd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nd4uaiw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3_1g3rbe",
            "name": "AAA.clean_up",
            "description": "Automatic removal of Froissart doublets.\n    \n    Parameters\n    ----------\n    cleanup_tol : float, optional\n        Poles with residues less than this number times the geometric mean\n        of `values` times the minimum distance to `points` are deemed spurious by\n        the cleanup procedure, defaults to 1e-13.\n    \n    Returns\n    -------\n    int\n        Number of Froissart doublets detected",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1acaf493a3c852c2a40f9244767bae29730287dc2c54b6d66704d86dd6e75a25",
            "fields": [
                {
                    "id": "lkqidnyt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.AAA.clean_up object",
                    "type": "Object:scipy.interpolate._bary_rational.AAA",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mts1gcu5",
                    "encoding": "",
                    "name": "cleanup_tol",
                    "value": 1e-13,
                    "defaultValue": 1e-13,
                    "description": "Poles with residues less than this number times the geometric mean\nof `values` times the minimum distance to `points` are deemed spurious by\nthe cleanup procedure, defaults to 1e-13.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3z8euv5b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.AAA.clean_up",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA.clean_up",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xnsmbu3f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kmf5ubgf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zfrkw357",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pp8_d8yk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.AAA",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7r0bxfj6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7oznn91y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gzs8188n",
            "name": "AAA.poles",
            "description": "Compute the poles of the rational approximation.\n    \n    Returns\n    -------\n    poles : array\n        Poles of the AAA approximation, repeated according to their multiplicity\n        but not in any specific order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d3f86a5ab44775f10216b6aea53e9662b14cce5dbe90c28ea26a74efe741d538",
            "fields": [
                {
                    "id": "cfx9ctwh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.AAA.poles object",
                    "type": "Object:scipy.interpolate._bary_rational.AAA",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fv3m9ft4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.AAA.poles",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA.poles",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwiuo1lc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wss0ubji",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l3vtd4hk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9y_p2u6c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.AAA",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3fzkp7x7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0d0hief3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3ppk7gw4",
            "name": "AAA.residues",
            "description": "Compute the residues of the poles of the approximation.\n    \n    Returns\n    -------\n    residues : array\n        Residues associated with the `poles` of the approximation",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "27fc208316091b3eb4ed3373073ef29e3ac8a044b5b265ef22054ff8000ec96d",
            "fields": [
                {
                    "id": "3me7gi0e",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.AAA.residues object",
                    "type": "Object:scipy.interpolate._bary_rational.AAA",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04r3cvf4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.AAA.residues",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA.residues",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e7hpsksd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "puyh9e7w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wem7ifua",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "668doxyw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.AAA",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5a5z_5qx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7g98_3to",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "if1vlcx3",
            "name": "AAA.roots",
            "description": "Compute the zeros of the rational approximation.\n    \n    Returns\n    -------\n    zeros : array\n        Zeros of the AAA approximation, repeated according to their multiplicity\n        but not in any specific order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9d535fd208431763d6f3e42c77819584f8d5e750435a719408ede6a5114dab1c",
            "fields": [
                {
                    "id": "_zis19v6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.AAA.roots object",
                    "type": "Object:scipy.interpolate._bary_rational.AAA",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ivpdy4dd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.AAA.roots",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqdikta5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_u9p0f8c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4_xqvh15",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1v0g0voi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.AAA",
                    "defaultValue": "scipy.interpolate._bary_rational.AAA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdkctwxt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "575v_2b8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2nyf2y1j",
            "name": "Akima1DInterpolator.__init__",
            "description": "\nAkima \"visually pleasing\" interpolator (C1 smooth).\n    \n    Fit piecewise cubic polynomials, given vectors x and y. The interpolation\n    method by Akima uses a continuously differentiable sub-spline built from\n    piecewise cubic polynomials. The resultant curve passes through the given\n    data points and will appear smooth and natural.\n    \n    Parameters\n    ----------\n    x : ndarray, shape (npoints, )\n        1-D array of monotonically increasing real values.\n    y : ndarray, shape (..., npoints, ...)\n        N-D array of real values. The length of ``y`` along the interpolation axis\n        must be equal to the length of ``x``. Use the ``axis`` parameter to\n        select the interpolation axis.\n    axis : int, optional\n        Axis in the ``y`` array corresponding to the x-coordinate values. Defaults\n        to ``axis=0``.\n    method : {'akima', 'makima'}, optional\n        If ``\"makima\"``, use the modified Akima interpolation [2]_.\n        Defaults to ``\"akima\"``, use the Akima interpolation [1]_.\n    \n        .. versionadded:: 1.13.0\n    \n    extrapolate : {bool, None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs. If None,\n        ``extrapolate`` is set to False.\n    \n    Methods\n    -------\n    __call__\n    derivative\n    antiderivative\n    integrate\n    solve\n    roots\n    \n    See Also\n    --------\n    PchipInterpolator : PCHIP 1-D monotonic cubic interpolator.\n    CubicSpline : Cubic spline data interpolator.\n    PPoly : Piecewise polynomial in terms of coefficients and breakpoints\n    \n    Notes\n    -----\n    .. versionadded:: 0.14\n    \n    Use only for precise data, as the fitted curve passes through the given\n    points exactly. This routine is useful for plotting a pleasingly smooth\n    curve through a few given points for purposes of plotting.\n    \n    Let :math:`\\delta_i = (y_{i+1} - y_i) / (x_{i+1} - x_i)` be the slopes of\n    the interval :math:`\\left[x_i, x_{i+1}\\right)`. Akima's derivative at\n    :math:`x_i` is defined as:\n    \n    .. math::\n    \n        d_i = \\frac{w_1}{w_1 + w_2}\\delta_{i-1} + \\frac{w_2}{w_1 + w_2}\\delta_i\n    \n    In the Akima interpolation [1]_ (``method=\"akima\"``), the weights are:\n    \n    .. math::\n    \n        \\begin{aligned}\n        w_1 &= |\\delta_{i+1} - \\delta_i| \\\\\n        w_2 &= |\\delta_{i-1} - \\delta_{i-2}|\n        \\end{aligned}\n    \n    In the modified Akima interpolation [2]_ (``method=\"makima\"``),\n    to eliminate overshoot and avoid edge cases of both numerator and\n    denominator being equal to 0, the weights are modified as follows:\n    \n    .. math::\n    \n        \\begin{align*}\n        w_1 &= |\\delta_{i+1} - \\delta_i| + |\\delta_{i+1} + \\delta_i| / 2 \\\\\n        w_2 &= |\\delta_{i-1} - \\delta_{i-2}| + |\\delta_{i-1} + \\delta_{i-2}| / 2\n        \\end{align*}\n    \n    Examples\n    --------\n    Comparison of ``method=\"akima\"`` and ``method=\"makima\"``:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import Akima1DInterpolator\n    >>> import matplotlib.pyplot as plt\n    >>> x = np.linspace(1, 7, 7)\n    >>> y = np.array([-1, -1, -1, 0, 1, 1, 1])\n    >>> xs = np.linspace(min(x), max(x), num=100)\n    >>> y_akima = Akima1DInterpolator(x, y, method=\"akima\")(xs)\n    >>> y_makima = Akima1DInterpolator(x, y, method=\"makima\")(xs)\n    \n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(x, y, \"o\", label=\"data\")\n    >>> ax.plot(xs, y_akima, label=\"akima\")\n    >>> ax.plot(xs, y_makima, label=\"makima\")\n    >>> ax.legend()\n    >>> fig.show()\n    \n    The overshoot that occurred in ``\"akima\"`` has been avoided in ``\"makima\"``.\n    \n    References\n    ----------\n    .. [1] A new method of interpolation and smooth curve fitting based\n           on local procedures. Hiroshi Akima, J. ACM, October 1970, 17(4),\n           589-602. :doi:`10.1145/321607.321609`\n    .. [2] Makima Piecewise Cubic Interpolation. Cleve Moler and Cosmin Ionita, 2019.\n           https://blogs.mathworks.com/cleve/2019/04/29/makima-piecewise-cubic-interpolation/",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "adff41878eeeaec2d0b65746b4bd4b92f90d79e774efffb23e8e4093d9bcc578",
            "fields": [
                {
                    "id": "ojvy1rls",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Akima1DInterpolator object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sje91epv",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of monotonically increasing real values.",
                    "type": "ndarray, shape (npoints, )",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dm4a4l3_",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D array of real values. The length of ``y`` along the interpolation axis\nmust be equal to the length of ``x``. Use the ``axis`` parameter to\nselect the interpolation axis.",
                    "type": "ndarray, shape (..., npoints, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_z3dnsj",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the ``y`` array corresponding to the x-coordinate values. Defaults\nto ``axis=0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5yag783b",
                    "encoding": "",
                    "name": "method",
                    "value": "akima",
                    "defaultValue": "akima",
                    "description": "If ``\"makima\"``, use the modified Akima interpolation [2]_.\nDefaults to ``\"akima\"``, use the Akima interpolation [1]_.\n\n.. versionadded:: 1.13.0",
                    "type": "typing.Literal",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nq7qtx2o",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs. If None,\n``extrapolate`` is set to False.",
                    "type": "types.bool | None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lse9xui_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1gpbqv2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40ehyfnd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "61pm5np3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjt9ixxm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "py72l6_f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0rc2t32o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "59ah0jjx",
            "name": "Akima1DInterpolator.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Antiderivative is also the indefinite integral of the function,\n    and derivative is its inverse operation.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of antiderivative to evaluate. Default is 1, i.e., compute\n        the first integral. If negative, the derivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k + n representing\n        the antiderivative of this polynomial.\n    \n    Notes\n    -----\n    The antiderivative returned by this function is continuous and\n    continuously differentiable to order n-1, up to floating point\n    rounding error.\n    \n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "72690f4e23044b70b5f3ae02423bdd30d70d049c22713b940e51dd5026479cff",
            "fields": [
                {
                    "id": "wvt_znl1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.Akima1DInterpolator.antiderivative object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odgl7obm",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default is 1, i.e., compute\nthe first integral. If negative, the derivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5ywol8v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.antiderivative",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxkd0j0p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4kjghja",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9bwc5ep_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1fgqt7si",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__9ehad1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ggb54ix",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "neptg4cr",
            "name": "Akima1DInterpolator.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type. The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0244e5f15d72b1f9820dd56bcd0480f7c71d4a3d1e29d798282a6bb3e48ec184",
            "fields": [
                {
                    "id": "qw6itnjo",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svdhesb3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_u_btvy",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "npt5a3ye",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1whdhn6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.construct_fast",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "grzjy5tw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7z4051n0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "604xwrll",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "llqa9leb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "asbg7bo3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5twltye2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "46e8xfob",
            "name": "Akima1DInterpolator.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of derivative to evaluate. Default is 1, i.e., compute the\n        first derivative. If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k - n representing the derivative\n        of this polynomial.\n    \n    Notes\n    -----\n    Derivatives are evaluated piecewise for each polynomial\n    segment, even if the polynomial is not differentiable at the\n    breakpoints. The polynomial intervals are considered half-open,\n    ``[a, b)``, except for the last interval which is closed\n    ``[a, b]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a1a40766455288a3d975035d9b84003e082bf08486a6ed3a6bb6b4566a5d61b8",
            "fields": [
                {
                    "id": "cwg7z7rt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.Akima1DInterpolator.derivative object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_46_jh1",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default is 1, i.e., compute the\nfirst derivative. If negative, the antiderivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "stqecb9_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.derivative",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sv3kk8z5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xfiqr7ml",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "56yawg39",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48urit21",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vh2sct_r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c2m7e6i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cipaspu6",
            "name": "Akima1DInterpolator.extend",
            "description": "Add additional breakpoints and coefficients to the polynomial.\n    \n    Parameters\n    ----------\n    c : ndarray, size (k, m, ...)\n        Additional coefficients for polynomials in intervals. Note that\n        the first additional interval will be formed using one of the\n        ``self.x`` end points.\n    x : ndarray, size (m,)\n        Additional breakpoints. Must be sorted in the same order as\n        ``self.x`` and either to the right or to the left of the current\n        breakpoints.\n    \n    Notes\n    -----\n    This method is not thread safe and must not be executed concurrently\n    with other methods available in this class. Doing so may cause\n    unexpected errors or numerical output mismatches.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ae4515bdbf0db8a9079a9aa372cf8217a53d745a44cbe34891940446155b7bb4",
            "fields": [
                {
                    "id": "n99kt8rl",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.Akima1DInterpolator.extend object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whcag89r",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional coefficients for polynomials in intervals. Note that\nthe first additional interval will be formed using one of the\n``self.x`` end points.",
                    "type": "ndarray, size (k, m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qvqjij7d",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional breakpoints. Must be sorted in the same order as\n``self.x`` and either to the right or to the left of the current\nbreakpoints.",
                    "type": "ndarray, size (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0s9kyi95",
                    "encoding": "",
                    "name": "right",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9gbfnc3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.extend",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.extend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntjn4rh9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9svndhrh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sqf5rgwq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "37x1ory6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ttuqfl_m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jnyuuww",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "w1lunwnt",
            "name": "Akima1DInterpolator.from_bernstein_basis",
            "description": "Construct a piecewise polynomial in the power basis\n    from a polynomial in Bernstein basis.\n    \n    Parameters\n    ----------\n    bp : BPoly\n        A Bernstein basis polynomial, as created by BPoly\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63bb9cbaa01da42bd8dea539fd698d26bf3421c01dde894c2d18b5208fed3fa6",
            "fields": [
                {
                    "id": "0rnk4y_w",
                    "encoding": "",
                    "name": "bp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Bernstein basis polynomial, as created by BPoly",
                    "type": "BPoly",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imozayyg",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l87d93j7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.from_bernstein_basis",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.from_bernstein_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2l7_wjey",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "56vdomt6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "05x7fxgv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "as2f90rq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x54spbs4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrev6hc0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gi2g1g9y",
            "name": "Akima1DInterpolator.from_spline",
            "description": "Construct a piecewise polynomial from a spline\n    \n    Parameters\n    ----------\n    tck\n        A spline, as returned by `splrep` or a BSpline object.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.\n    \n    Examples\n    --------\n    Construct an interpolating spline and convert it to a `PPoly` instance\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import splrep, PPoly\n    >>> x = np.linspace(0, 1, 11)\n    >>> y = np.sin(2*np.pi*x)\n    >>> tck = splrep(x, y, s=0)\n    >>> p = PPoly.from_spline(tck)\n    >>> isinstance(p, PPoly)\n    True\n    \n    Note that this function only supports 1D splines out of the box.\n    \n    If the ``tck`` object represents a parametric spline (e.g. constructed\n    by `splprep` or a `BSpline` with ``c.ndim > 1``), you will need to loop\n    over the dimensions manually.\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> t = np.linspace(0, 1, 11)\n    >>> x = np.sin(2*np.pi*t)\n    >>> y = np.cos(2*np.pi*t)\n    >>> (t, c, k), u = splprep([x, y], s=0)\n    \n    Note that ``c`` is a list of two arrays of length 11.\n    \n    >>> unew = np.arange(0, 1.01, 0.01)\n    >>> out = splev(unew, (t, c, k))\n    \n    To convert this spline to the power basis, we convert each\n    component of the list of b-spline coefficients, ``c``, into the\n    corresponding cubic polynomial.\n    \n    >>> polys = [PPoly.from_spline((t, cj, k)) for cj in c]\n    >>> polys[0].c.shape\n    (4, 14)\n    \n    Note that the coefficients of the polynomials `polys` are in the\n    power basis and their dimensions reflect just that: here 4 is the order\n    (degree+1), and 14 is the number of intervals---which is nothing but\n    the length of the knot array of the original `tck` minus one.\n    \n    Optionally, we can stack the components into a single `PPoly` along\n    the third dimension:\n    \n    >>> cc = np.dstack([p.c for p in polys])    # has shape = (4, 14, 2)\n    >>> poly = PPoly(cc, polys[0].x)\n    >>> np.allclose(poly(unew).T,     # note the transpose to match `splev`\n    ...             out, atol=1e-15)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01cc6087ae3ed2a74efce4bc2b7613b2c2dc4f91fca276d2dc9ff957b277c5eb",
            "fields": [
                {
                    "id": "vlgdkhiw",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A spline, as returned by `splrep` or a BSpline object.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ligyzeo7",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dj6793ao",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.from_spline",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.from_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bsoa6ylu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iq0dcx0_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ccx7gg7k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jw0gijy1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wu4w3yqi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y4sil83y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "r1h_5j7u",
            "name": "Akima1DInterpolator.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    a : float\n        Lower integration bound\n    b : float\n        Upper integration bound\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used.\n        If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    ig : array_like\n        Definite integral of the piecewise polynomial over [a, b]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6b12e3281a27ef8663145f82456e8598abe0ce716fcca4e8be2b88dabe5ce70c",
            "fields": [
                {
                    "id": "4pyqp0nc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.Akima1DInterpolator.integrate object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v9hd38fi",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tz585udq",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "appd_a_k",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used.\nIf None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0v08tcm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.integrate",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8yl23u6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "okc_9exu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ko4tihti",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdtv6zwj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzkhh8ql",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4_5bjsd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "llgm0kvh",
            "name": "Akima1DInterpolator.roots",
            "description": "Find real roots of the piecewise polynomial.\n    \n    Parameters\n    ----------\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    See Also\n    --------\n    PPoly.solve",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2442e2c15ed3aae4a7a0217fb1291822d380d9a35b07bcec76d5b78f2b393019",
            "fields": [
                {
                    "id": "y7m1s_3v",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.Akima1DInterpolator.roots object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u3v7moc8",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9y7yqvk",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8x7_yxgp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.roots",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jr_w_o0p",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8tyjgnxx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cfvj54ro",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0n0jpm3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pgr35mcj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0fuxjvs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vgalxrpw",
            "name": "Akima1DInterpolator.solve",
            "description": "Find real solutions of the equation ``pp(x) == y``.\n    \n    Parameters\n    ----------\n    y : float, optional\n        Right-hand side. Default is zero.\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    Notes\n    -----\n    This routine works only on real-valued polynomials.\n    \n    If the piecewise polynomial contains sections that are\n    identically zero, the root list will contain the start point\n    of the corresponding interval, followed by a ``nan`` value.\n    \n    If the polynomial is discontinuous across a breakpoint, and\n    there is a sign change across the breakpoint, this is reported\n    if the `discont` parameter is True.\n    \n    Examples\n    --------\n    \n    Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals\n    ``[-2, 1], [1, 2]``:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import PPoly\n    >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])\n    >>> pp.solve()\n    array([-1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "09733a27dadb7dedbb4613416850e8ecc662de0886b10fa36ee02b98ef224525",
            "fields": [
                {
                    "id": "ll8vpj35",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.Akima1DInterpolator.solve object",
                    "type": "Object:scipy.interpolate._cubic.Akima1DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7p9ocp5",
                    "encoding": "",
                    "name": "y",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Right-hand side. Default is zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tkvtxfia",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y669edg7",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pbiqkoq5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator.solve",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwxxm9c1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "legrzcsk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ot7c55ko",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8rjbjw38",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.Akima1DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2x1h27pk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_75z3n0n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wdjcfc7j",
            "name": "BPoly.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of antiderivative to evaluate. Default is 1, i.e., compute\n        the first integral. If negative, the derivative is returned.\n    \n    Returns\n    -------\n    bp : BPoly\n        Piecewise polynomial of order k + nu representing the\n        antiderivative of this polynomial.\n    \n    Notes\n    -----\n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a0554563bfbec225ab3fd7ef3be27227cb5bb7089963517b914daf0705d2534",
            "fields": [
                {
                    "id": "jvlzn9wi",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.BPoly.antiderivative object",
                    "type": "Object:scipy.interpolate._interpolate.BPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5twpzuj8",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default is 1, i.e., compute\nthe first integral. If negative, the derivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4kylare",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.antiderivative",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yz8r06yo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e530xaq3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "77blxeto",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80urwd8_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29q6oe7w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5da_tquf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1b0evo2v",
            "name": "BPoly.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type. The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c3d877e2dc22f740f159a4167c9c9ae943672fbb389ffeee40581862acc47429",
            "fields": [
                {
                    "id": "5q8abkph",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dinxl_w7",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rtb6js4o",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ku0krlei",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jzasavt6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.construct_fast",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k7yrvbxu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0ryf77h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "84cv6ze2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fvshzmf5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mgiybfmc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohnpvoyx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ck9vu5i_",
            "name": "BPoly.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of derivative to evaluate. Default is 1, i.e., compute the\n        first derivative. If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    bp : BPoly\n        Piecewise polynomial of order k - nu representing the derivative of\n        this polynomial.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce521427fea229bb9c3f590eea3b43775e33ea8507b66a470c18b19c4014b3f4",
            "fields": [
                {
                    "id": "xix20xqs",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.BPoly.derivative object",
                    "type": "Object:scipy.interpolate._interpolate.BPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qg_28nk5",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default is 1, i.e., compute the\nfirst derivative. If negative, the antiderivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1offfj_s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.derivative",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f30jyrms",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61wqyum5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8hb5d_ow",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wepuw11y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2guv5f5d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6cngw861",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pk66f4_m",
            "name": "BPoly.extend",
            "description": "Add additional breakpoints and coefficients to the polynomial.\n    \n    Parameters\n    ----------\n    c : ndarray, size (k, m, ...)\n        Additional coefficients for polynomials in intervals. Note that\n        the first additional interval will be formed using one of the\n        ``self.x`` end points.\n    x : ndarray, size (m,)\n        Additional breakpoints. Must be sorted in the same order as\n        ``self.x`` and either to the right or to the left of the current\n        breakpoints.\n    \n    Notes\n    -----\n    This method is not thread safe and must not be executed concurrently\n    with other methods available in this class. Doing so may cause\n    unexpected errors or numerical output mismatches.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d7df1a0dd5015460cde252e23951dac7e5e62eeeaab538bccaead7ae17f31acd",
            "fields": [
                {
                    "id": "po8ijyah",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.BPoly.extend object",
                    "type": "Object:scipy.interpolate._interpolate.BPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxon3oai",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional coefficients for polynomials in intervals. Note that\nthe first additional interval will be formed using one of the\n``self.x`` end points.",
                    "type": "ndarray, size (k, m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy2hcwva",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional breakpoints. Must be sorted in the same order as\n``self.x`` and either to the right or to the left of the current\nbreakpoints.",
                    "type": "ndarray, size (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ex2ays8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.extend",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.extend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_r2m15bz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xbnqyyq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xm6cvpk4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mm61yaxe",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_hdnjds",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4u822qua",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rau8wwiq",
            "name": "BPoly.from_derivatives",
            "description": "Construct a piecewise polynomial in the Bernstein basis,\n    compatible with the specified values and derivatives at breakpoints.\n    \n    Parameters\n    ----------\n    xi : array_like\n        sorted 1-D array of x-coordinates\n    yi : array_like or list of array_likes\n        ``yi[i][j]`` is the ``j``\\ th derivative known at ``xi[i]``\n    orders : None or int or array_like of ints. Default: None.\n        Specifies the degree of local polynomials. If not None, some\n        derivatives are ignored.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.\n    \n    Notes\n    -----\n    If ``k`` derivatives are specified at a breakpoint ``x``, the\n    constructed polynomial is exactly ``k`` times continuously\n    differentiable at ``x``, unless the ``order`` is provided explicitly.\n    In the latter case, the smoothness of the polynomial at\n    the breakpoint is controlled by the ``order``.\n    \n    Deduces the number of derivatives to match at each end\n    from ``order`` and the number of derivatives available. If\n    possible it uses the same number of derivatives from\n    each end; if the number is odd it tries to take the\n    extra one from y2. In any case if not enough derivatives\n    are available at one end or another it draws enough to\n    make up the total from the other end.\n    \n    If the order is too high and not enough derivatives are available,\n    an exception is raised.\n    \n    Examples\n    --------\n    \n    >>> from scipy.interpolate import BPoly\n    >>> BPoly.from_derivatives([0, 1], [[1, 2], [3, 4]])\n    \n    Creates a polynomial `f(x)` of degree 3, defined on ``[0, 1]``\n    such that `f(0) = 1, df/dx(0) = 2, f(1) = 3, df/dx(1) = 4`\n    \n    >>> BPoly.from_derivatives([0, 1, 2], [[0, 1], [0], [2]])\n    \n    Creates a piecewise polynomial `f(x)`, such that\n    `f(0) = f(1) = 0`, `f(2) = 2`, and `df/dx(0) = 1`.\n    Based on the number of derivatives provided, the order of the\n    local polynomials is 2 on ``[0, 1]`` and 1 on ``[1, 2]``.\n    Notice that no restriction is imposed on the derivatives at\n    ``x = 1`` and ``x = 2``.\n    \n    Indeed, the explicit form of the polynomial is::\n    \n        f(x) = | x * (1 - x),  0 <= x < 1\n               | 2 * (x - 1),  1 <= x <= 2\n    \n    So that f'(1-0) = -1 and f'(1+0) = 2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3816c8b8bdcd4b8f859405df8e2011f67af446185e21fd1a098fce3fc373573b",
            "fields": [
                {
                    "id": "5grywiga",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "sorted 1-D array of x-coordinates",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o0n9jcf8",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "``yi[i][j]`` is the ``j``\\ th derivative known at ``xi[i]``",
                    "type": "arraylike or list of arraylikes",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bnyr6vhl",
                    "encoding": "",
                    "name": "orders",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specifies the degree of local polynomials. If not None, some\nderivatives are ignored.",
                    "type": "None or int or arraylike of ints. Default: None.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_udgcbc7",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pvs5th41",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.from_derivatives",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.from_derivatives",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lyzrxov6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5o3lpq2b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nrte8e9s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "84elpxfj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5f4cfy8b",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mwv634aw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "auop6zmc",
            "name": "BPoly.from_power_basis",
            "description": "Construct a piecewise polynomial in Bernstein basis\n    from a power basis polynomial.\n    \n    Parameters\n    ----------\n    pp : PPoly\n        A piecewise polynomial in the power basis\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "976b78b363be3c4c5e650b12fb0ee895f8a183671495729e3124dfda086ec288",
            "fields": [
                {
                    "id": "u4qp1da8",
                    "encoding": "",
                    "name": "pp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A piecewise polynomial in the power basis",
                    "type": "PPoly",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "onkgoj_h",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_wa_i47",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.from_power_basis",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.from_power_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "44pineoa",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "atba9le7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n1soaptv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yj5i0agi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e5zquvld",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r0s9e9eh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lpf5v36g",
            "name": "BPoly.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    a : float\n        Lower integration bound\n    b : float\n        Upper integration bound\n    extrapolate : {bool, 'periodic', None}, optional\n        Whether to extrapolate to out-of-bounds points based on first\n        and last intervals, or to return NaNs. If 'periodic', periodic\n        extrapolation is used. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    array_like\n        Definite integral of the piecewise polynomial over [a, b]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "19c0312c8ce4808df6ebeece1807a21c00061f9ce8088d94ea47a7165cccd000",
            "fields": [
                {
                    "id": "huwe20e_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.BPoly.integrate object",
                    "type": "Object:scipy.interpolate._interpolate.BPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "npwjb515",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6agf8ac2",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eyyu2ymc",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to extrapolate to out-of-bounds points based on first\nand last intervals, or to return NaNs. If 'periodic', periodic\nextrapolation is used. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_zj6m4b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.BPoly.integrate",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3g5r7bp1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r7qhdgjx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qygagzo3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tv4n4s3f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.BPoly",
                    "defaultValue": "scipy.interpolate._interpolate.BPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s4onkr9s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_u5kpeqi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nn81i603",
            "name": "BSpline.__init__",
            "description": "\nUnivariate spline in the B-spline basis.\n    \n    .. math::\n    \n        S(x) = \\sum_{j=0}^{n-1} c_j  B_{j, k; t}(x)\n    \n    where :math:`B_{j, k; t}` are B-spline basis functions of degree `k`\n    and knots `t`.\n    \n    Parameters\n    ----------\n    t : ndarray, shape (n+k+1,)\n        knots\n    c : ndarray, shape (>=n, ...)\n        spline coefficients\n    k : int\n        B-spline degree\n    extrapolate : bool or 'periodic', optional\n        whether to extrapolate beyond the base interval, ``t[k] .. t[n]``,\n        or to return nans.\n        If True, extrapolates the first and last polynomial pieces of b-spline\n        functions active on the base interval.\n        If 'periodic', periodic extrapolation is used.\n        Default is True.\n    axis : int, optional\n        Interpolation axis. Default is zero.\n    \n    Attributes\n    ----------\n    t : ndarray\n        knot vector\n    c : ndarray\n        spline coefficients\n    k : int\n        spline degree\n    extrapolate : bool\n        If True, extrapolates the first and last polynomial pieces of b-spline\n        functions active on the base interval.\n    axis : int\n        Interpolation axis.\n    tck : tuple\n        A read-only equivalent of ``(self.t, self.c, self.k)``\n    \n    Methods\n    -------\n    __call__\n    basis_element\n    derivative\n    antiderivative\n    integrate\n    insert_knot\n    construct_fast\n    design_matrix\n    from_power_basis\n    \n    Notes\n    -----\n    B-spline basis elements are defined via\n    \n    .. math::\n    \n        B_{i, 0}(x) = 1, \\textrm{if $t_i \\le x < t_{i+1}$, otherwise $0$,}\n    \n        B_{i, k}(x) = \\frac{x - t_i}{t_{i+k} - t_i} B_{i, k-1}(x)\n                 + \\frac{t_{i+k+1} - x}{t_{i+k+1} - t_{i+1}} B_{i+1, k-1}(x)\n    \n    **Implementation details**\n    \n    - At least ``k+1`` coefficients are required for a spline of degree `k`,\n      so that ``n >= k+1``. Additional coefficients, ``c[j]`` with\n      ``j > n``, are ignored.\n    \n    - B-spline basis elements of degree `k` form a partition of unity on the\n      *base interval*, ``t[k] <= x <= t[n]``.\n    \n    \n    Examples\n    --------\n    \n    Translating the recursive definition of B-splines into Python code, we have:\n    \n    >>> def B(x, k, i, t):\n    ...    if k == 0:\n    ...       return 1.0 if t[i] <= x < t[i+1] else 0.0\n    ...    if t[i+k] == t[i]:\n    ...       c1 = 0.0\n    ...    else:\n    ...       c1 = (x - t[i])/(t[i+k] - t[i]) * B(x, k-1, i, t)\n    ...    if t[i+k+1] == t[i+1]:\n    ...       c2 = 0.0\n    ...    else:\n    ...       c2 = (t[i+k+1] - x)/(t[i+k+1] - t[i+1]) * B(x, k-1, i+1, t)\n    ...    return c1 + c2\n    \n    >>> def bspline(x, t, c, k):\n    ...    n = len(t) - k - 1\n    ...    assert (n >= k+1) and (len(c) >= n)\n    ...    return sum(c[i] * B(x, k, i, t) for i in range(n))\n    \n    Note that this is an inefficient (if straightforward) way to\n    evaluate B-splines --- this spline class does it in an equivalent,\n    but much more efficient way.\n    \n    Here we construct a quadratic spline function on the base interval\n    ``2 <= x <= 4`` and compare with the naive way of evaluating the spline:\n    \n    >>> from scipy.interpolate import BSpline\n    >>> k = 2\n    >>> t = [0, 1, 2, 3, 4, 5, 6]\n    >>> c = [-1, 2, 0, -1]\n    >>> spl = BSpline(t, c, k)\n    >>> spl(2.5)\n    array(1.375)\n    >>> bspline(2.5, t, c, k)\n    1.375\n    \n    Note that outside of the base interval results differ. This is because\n    `BSpline` extrapolates the first and last polynomial pieces of B-spline\n    functions active on the base interval.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> fig, ax = plt.subplots()\n    >>> xx = np.linspace(1.5, 4.5, 50)\n    >>> ax.plot(xx, [bspline(x, t, c ,k) for x in xx], 'r-', lw=3, label='naive')\n    >>> ax.plot(xx, spl(xx), 'b-', lw=4, alpha=0.7, label='BSpline')\n    >>> ax.grid(True)\n    >>> ax.legend(loc='best')\n    >>> plt.show()\n    \n    \n    References\n    ----------\n    .. [1] Tom Lyche and Knut Morken, Spline methods,\n        http://www.uio.no/studier/emner/matnat/ifi/INF-MAT5340/v05/undervisningsmateriale/\n    .. [2] Carl de Boor, A practical guide to splines, Springer, 2001.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ece0776c0bb4ba77046bd04c8f063abb0e37872a17312a02f7f0a95df3b70540",
            "fields": [
                {
                    "id": "5k0asjy3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BSpline object",
                    "type": "Object:scipy.interpolate._bsplines.BSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "va3x6ra7",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "knot vector",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csxr9do1",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "spline coefficients",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ljk1kbm",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "spline degree",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "62f59_t0",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, extrapolates the first and last polynomial pieces of b-spline\nfunctions active on the base interval.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fsydsnzh",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Interpolation axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46hwewqr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.__init__",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1zvous0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdll3759",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wfy1klw9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3g6iyixs",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c0fl6j1l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2v8bnk7q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ey89t641",
            "name": "BSpline.antiderivative",
            "description": "Return a B-spline representing the antiderivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Antiderivative order. Default is 1.\n    \n    Returns\n    -------\n    b : `BSpline` object\n        A new instance representing the antiderivative.\n    \n    Notes\n    -----\n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.\n    \n    See Also\n    --------\n    splder, splantider",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e030f6a7c2513bd04766a6427872cc450453dda581ace52f3b970b38a199133a",
            "fields": [
                {
                    "id": "6orzt1pd",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bsplines.BSpline.antiderivative object",
                    "type": "Object:scipy.interpolate._bsplines.BSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "td0uddfz",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Antiderivative order. Default is 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrm9llh0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.antiderivative",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k2x5zgu0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2_ejnkm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8l39ulzw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhvff5_h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28vbc58k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yy2qjjye",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "eyop5b7k",
            "name": "BSpline.basis_element",
            "description": "Return a B-spline basis element ``B(x | t[0], ..., t[k+1])``.\n    \n    Parameters\n    ----------\n    t : ndarray, shape (k+2,)\n        internal knots\n    extrapolate : bool or 'periodic', optional\n        whether to extrapolate beyond the base interval, ``t[0] .. t[k+1]``,\n        or to return nans.\n        If 'periodic', periodic extrapolation is used.\n        Default is True.\n    \n    Returns\n    -------\n    basis_element : callable\n        A callable representing a B-spline basis element for the knot\n        vector `t`.\n    \n    Notes\n    -----\n    The degree of the B-spline, `k`, is inferred from the length of `t` as\n    ``len(t)-2``. The knot vector is constructed by appending and prepending\n    ``k+1`` elements to internal knots `t`.\n    \n    Examples\n    --------\n    \n    Construct a cubic B-spline:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import BSpline\n    >>> b = BSpline.basis_element([0, 1, 2, 3, 4])\n    >>> k = b.k\n    >>> b.t[k:-k]\n    array([ 0.,  1.,  2.,  3.,  4.])\n    >>> k\n    3\n    \n    Construct a quadratic B-spline on ``[0, 1, 1, 2]``, and compare\n    to its explicit form:\n    \n    >>> t = [0, 1, 1, 2]\n    >>> b = BSpline.basis_element(t)\n    >>> def f(x):\n    ...     return np.where(x < 1, x*x, (2. - x)**2)\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig, ax = plt.subplots()\n    >>> x = np.linspace(0, 2, 51)\n    >>> ax.plot(x, b(x), 'g', lw=3)\n    >>> ax.plot(x, f(x), 'r', lw=8, alpha=0.4)\n    >>> ax.grid(True)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "32dcd8edd93bb7e2f9c5ec5799deebc051f9af396d0792ba3330461c1bb44e3b",
            "fields": [
                {
                    "id": "kxeoeb1l",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "internal knots",
                    "type": "ndarray, shape (k+2,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q83c0rt3",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": true,
                    "defaultValue": true,
                    "description": "whether to extrapolate beyond the base interval, ``t[0] .. t[k+1]``,\nor to return nans.\nIf 'periodic', periodic extrapolation is used.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0yrandlr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.basis_element",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.basis_element",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrzs1uw8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svbz9lbg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p2dkm1iu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1n2k9sst",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jj_1haj8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ser9tgqw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vflquih9",
            "name": "BSpline.construct_fast",
            "description": "Construct a spline without making checks.\n    \n    Accepts same parameters as the regular constructor. Input arrays\n    `t` and `c` must of correct shape and dtype.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7c2ec0b451e1c26038862ba0df554f8a07549254ecc34d147fdb982ed0fdcf28",
            "fields": [
                {
                    "id": "yj942mf1",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "or86q0_f",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtri2zsn",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1hrd3gu",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ubp2sd0r",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_snxj0uu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.construct_fast",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_k4tfzyq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whwavv5u",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ex1zmp_4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olyj_cnq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2i_q738d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gng0a_6i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rk7mtukf",
            "name": "BSpline.derivative",
            "description": "Return a B-spline representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Derivative order.\n        Default is 1.\n    \n    Returns\n    -------\n    b : `BSpline` object\n        A new instance representing the derivative.\n    \n    See Also\n    --------\n    splder, splantider",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ed187c82793a27d60fc3659870d41ec02c2497d36e27d196102a70572d8f8ccc",
            "fields": [
                {
                    "id": "eo8we20n",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bsplines.BSpline.derivative object",
                    "type": "Object:scipy.interpolate._bsplines.BSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzsthij9",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Derivative order.\nDefault is 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8cs9ojd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.derivative",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "36z7qt45",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dyoeg4uq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hp44sqvk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eawo7d2y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5x9aigv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qso3372t",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3id4xx07",
            "name": "BSpline.design_matrix",
            "description": "Returns a design matrix as a CSR format sparse array.\n    \n    Parameters\n    ----------\n    x : array_like, shape (n,)\n        Points to evaluate the spline at.\n    t : array_like, shape (nt,)\n        Sorted 1D array of knots.\n    k : int\n        B-spline degree.\n    extrapolate : bool or 'periodic', optional\n        Whether to extrapolate based on the first and last intervals\n        or raise an error. If 'periodic', periodic extrapolation is used.\n        Default is False.\n    \n        .. versionadded:: 1.10.0\n    \n    Returns\n    -------\n    design_matrix : `csr_array` object\n        Sparse matrix in CSR format where each row contains all the basis\n        elements of the input row (first row = basis elements of x[0],\n        ..., last row = basis elements x[-1]).\n    \n    Examples\n    --------\n    Construct a design matrix for a B-spline\n    \n    >>> from scipy.interpolate import make_interp_spline, BSpline\n    >>> import numpy as np\n    >>> x = np.linspace(0, np.pi * 2, 4)\n    >>> y = np.sin(x)\n    >>> k = 3\n    >>> bspl = make_interp_spline(x, y, k=k)\n    >>> design_matrix = bspl.design_matrix(x, bspl.t, k)\n    >>> design_matrix.toarray()\n    [[1.        , 0.        , 0.        , 0.        ],\n    [0.2962963 , 0.44444444, 0.22222222, 0.03703704],\n    [0.03703704, 0.22222222, 0.44444444, 0.2962963 ],\n    [0.        , 0.        , 0.        , 1.        ]]\n    \n    Construct a design matrix for some vector of knots\n    \n    >>> k = 2\n    >>> t = [-1, 0, 1, 2, 3, 4, 5, 6]\n    >>> x = [1, 2, 3, 4]\n    >>> design_matrix = BSpline.design_matrix(x, t, k).toarray()\n    >>> design_matrix\n    [[0.5, 0.5, 0. , 0. , 0. ],\n    [0. , 0.5, 0.5, 0. , 0. ],\n    [0. , 0. , 0.5, 0.5, 0. ],\n    [0. , 0. , 0. , 0.5, 0.5]]\n    \n    This result is equivalent to the one created in the sparse format\n    \n    >>> c = np.eye(len(t) - k - 1)\n    >>> design_matrix_gh = BSpline(t, c, k)(x)\n    >>> np.allclose(design_matrix, design_matrix_gh, atol=1e-14)\n    True\n    \n    Notes\n    -----\n    .. versionadded:: 1.8.0\n    \n    In each row of the design matrix all the basis elements are evaluated\n    at the certain point (first row - x[0], ..., last row - x[-1]).\n    \n    `nt` is a length of the vector of knots: as far as there are\n    `nt - k - 1` basis elements, `nt` should be not less than `2 * k + 2`\n    to have at least `k + 1` basis element.\n    \n    Out of bounds `x` raises a ValueError.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c8982492880f94c7f4f77ea7bb1f8b966e5f56a53972d3fce064aa0c31940add",
            "fields": [
                {
                    "id": "0w55h5vs",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points to evaluate the spline at.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mb3927tf",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Sorted 1D array of knots.",
                    "type": "arraylike, shape (nt,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u5co60e0",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "B-spline degree.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxd248kn",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to extrapolate based on the first and last intervals\nor raise an error. If 'periodic', periodic extrapolation is used.\nDefault is False.\n\n.. versionadded:: 1.10.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6iv3lkm8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.design_matrix",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.design_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lu6hpcl6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "78ql4r33",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9ezq11io",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zfaj95t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1m4yoc83",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pb4dqcm3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pgec8fzb",
            "name": "BSpline.from_power_basis",
            "description": "Construct a polynomial in the B-spline basis\n    from a piecewise polynomial in the power basis.\n    \n    For now, accepts ``CubicSpline`` instances only.\n    \n    Parameters\n    ----------\n    pp : CubicSpline\n        A piecewise polynomial in the power basis, as created\n        by ``CubicSpline``\n    bc_type : string, optional\n        Boundary condition type as in ``CubicSpline``: one of the\n        ``not-a-knot``, ``natural``, ``clamped``, or ``periodic``.\n        Necessary for construction an instance of ``BSpline`` class.\n        Default is ``not-a-knot``.\n    \n    Returns\n    -------\n    b : `BSpline` object\n        A new instance representing the initial polynomial\n        in the B-spline basis.\n    \n    Notes\n    -----\n    .. versionadded:: 1.8.0\n    \n    Accepts only ``CubicSpline`` instances for now.\n    \n    The algorithm follows from differentiation\n    the Marsden's identity [1]: each of coefficients of spline\n    interpolation function in the B-spline basis is computed as follows:\n    \n    .. math::\n    \n        c_j = \\sum_{m=0}^{k} \\frac{(k-m)!}{k!}\n                   c_{m,i} (-1)^{k-m} D^m p_{j,k}(x_i)\n    \n    :math:`c_{m, i}` - a coefficient of CubicSpline,\n    :math:`D^m p_{j, k}(x_i)` - an m-th defivative of a dual polynomial\n    in :math:`x_i`.\n    \n    ``k`` always equals 3 for now.\n    \n    First ``n - 2`` coefficients are computed in :math:`x_i = x_j`, e.g.\n    \n    .. math::\n    \n        c_1 = \\sum_{m=0}^{k} \\frac{(k-1)!}{k!} c_{m,1} D^m p_{j,3}(x_1)\n    \n    Last ``nod + 2`` coefficients are computed in ``x[-2]``,\n    ``nod`` - number of derivatives at the ends.\n    \n    For example, consider :math:`x = [0, 1, 2, 3, 4]`,\n    :math:`y = [1, 1, 1, 1, 1]` and bc_type = ``natural``\n    \n    The coefficients of CubicSpline in the power basis:\n    \n    :math:`[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0], [1, 1, 1, 1, 1]]`\n    \n    The knot vector: :math:`t = [0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4]`\n    \n    In this case\n    \n    .. math::\n    \n        c_j = \\frac{0!}{k!} c_{3, i} k! = c_{3, i} = 1,~j = 0, ..., 6\n    \n    References\n    ----------\n    .. [1] Tom Lyche and Knut Morken, Spline Methods, 2005, Section 3.1.2",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4930e113a4497f2b64e0ed63c6b95cec15d789d3b4dbf3ac1cd3d992bcb17df1",
            "fields": [
                {
                    "id": "7pgm8vef",
                    "encoding": "",
                    "name": "pp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A piecewise polynomial in the power basis, as created\nby ``CubicSpline``",
                    "type": "CubicSpline",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tszpv5le",
                    "encoding": "",
                    "name": "bc_type",
                    "value": "not-a-knot",
                    "defaultValue": "not-a-knot",
                    "description": "Boundary condition type as in ``CubicSpline``: one of the\n``not-a-knot``, ``natural``, ``clamped``, or ``periodic``.\nNecessary for construction an instance of ``BSpline`` class.\nDefault is ``not-a-knot``.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ccc62n2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.from_power_basis",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.from_power_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0e3s7igb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gn4kigpz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wmvmbo3t",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "26vdfrgj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zvhx9kxs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dj2lc1rh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nvj5ogkr",
            "name": "BSpline.insert_knot",
            "description": "Insert a new knot at `x` of multiplicity `m`.\n    \n    Given the knots and coefficients of a B-spline representation, create a\n    new B-spline with a knot inserted `m` times at point `x`.\n    \n    Parameters\n    ----------\n    x : float\n        The position of the new knot\n    m : int, optional\n        The number of times to insert the given knot (its multiplicity).\n        Default is 1.\n    \n    Returns\n    -------\n    spl : `BSpline` object\n        A new `BSpline` object with the new knot inserted.\n    \n    Notes\n    -----\n    Based on algorithms from [1]_ and [2]_.\n    \n    In case of a periodic spline (``self.extrapolate == \"periodic\"``)\n    there must be either at least k interior knots t(j) satisfying\n    ``t(k+1)<t(j)<=x`` or at least k interior knots t(j) satisfying\n    ``x<=t(j)<t(n-k)``.\n    \n    This routine is functionally equivalent to `scipy.interpolate.insert`.\n    \n    .. versionadded:: 1.13\n    \n    References\n    ----------\n    .. [1] W. Boehm, \"Inserting new knots into b-spline curves.\",\n        Computer Aided Design, 12, p.199-201, 1980.\n        :doi:`10.1016/0010-4485(80)90154-2`.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines, Monographs on\n        Numerical Analysis\", Oxford University Press, 1993.\n    \n    See Also\n    --------\n    scipy.interpolate.insert\n    \n    Examples\n    --------\n    You can insert knots into a B-spline:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import BSpline, make_interp_spline\n    >>> x = np.linspace(0, 10, 5)\n    >>> y = np.sin(x)\n    >>> spl = make_interp_spline(x, y, k=3)\n    >>> spl.t\n    array([ 0.,  0.,  0.,  0.,  5., 10., 10., 10., 10.])\n    \n    Insert a single knot\n    \n    >>> spl_1 = spl.insert_knot(3)\n    >>> spl_1.t\n    array([ 0.,  0.,  0.,  0.,  3.,  5., 10., 10., 10., 10.])\n    \n    Insert a multiple knot\n    \n    >>> spl_2 = spl.insert_knot(8, m=3)\n    >>> spl_2.t\n    array([ 0.,  0.,  0.,  0.,  5.,  8.,  8.,  8., 10., 10., 10., 10.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dbafebeaa4a71fe01315465a534d3338566b0a5bd18588ae132c778fbdf0337d",
            "fields": [
                {
                    "id": "nz9lma3k",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bsplines.BSpline.insert_knot object",
                    "type": "Object:scipy.interpolate._bsplines.BSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88lon59u",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position of the new knot",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2jatoi5",
                    "encoding": "",
                    "name": "m",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The number of times to insert the given knot (its multiplicity).\nDefault is 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7065qqkc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.insert_knot",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.insert_knot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ll_8e5fx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3zufeeu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dljaz11z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9govfxm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e42v29pl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ok062ocb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6lx_785l",
            "name": "BSpline.integrate",
            "description": "Compute a definite integral of the spline.\n    \n    Parameters\n    ----------\n    a : float\n        Lower limit of integration.\n    b : float\n        Upper limit of integration.\n    extrapolate : bool or 'periodic', optional\n        whether to extrapolate beyond the base interval,\n        ``t[k] .. t[-k-1]``, or take the spline to be zero outside of the\n        base interval. If 'periodic', periodic extrapolation is used.\n        If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    I : array_like\n        Definite integral of the spline over the interval ``[a, b]``.\n    \n    Examples\n    --------\n    Construct the linear spline ``x if x < 1 else 2 - x`` on the base\n    interval :math:`[0, 2]`, and integrate it\n    \n    >>> from scipy.interpolate import BSpline\n    >>> b = BSpline.basis_element([0, 1, 2])\n    >>> b.integrate(0, 1)\n    array(0.5)\n    \n    If the integration limits are outside of the base interval, the result\n    is controlled by the `extrapolate` parameter\n    \n    >>> b.integrate(-1, 1)\n    array(0.0)\n    >>> b.integrate(-1, 1, extrapolate=False)\n    array(0.5)\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig, ax = plt.subplots()\n    >>> ax.grid(True)\n    >>> ax.axvline(0, c='r', lw=5, alpha=0.5)  # base interval\n    >>> ax.axvline(2, c='r', lw=5, alpha=0.5)\n    >>> xx = [-1, 1, 2]\n    >>> ax.plot(xx, b(xx))\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4df3ae5ebdfa8c6db222239a2d6a7d47094ccef98d0d935339d2c3596cb12d1c",
            "fields": [
                {
                    "id": "fshogmmc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bsplines.BSpline.integrate object",
                    "type": "Object:scipy.interpolate._bsplines.BSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jd1di8zb",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g2jypzjx",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1y6898yw",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "whether to extrapolate beyond the base interval,\n``t[k] .. t[-k-1]``, or take the spline to be zero outside of the\nbase interval. If 'periodic', periodic extrapolation is used.\nIf None (default), use `self.extrapolate`.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7rl4d286",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bsplines.BSpline.integrate",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovm4k94v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhvdd5o0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9e4jw0tp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0__m6nkf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bsplines.BSpline",
                    "defaultValue": "scipy.interpolate._bsplines.BSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwbqgxo7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbo7myfk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "f0vc651x",
            "name": "BarycentricInterpolator.__init__",
            "description": "\nBarycentric (Lagrange with improved stability) interpolator (C\u221e smooth).\n    \n    Constructs a polynomial that passes through a given set of points.\n    Allows evaluation of the polynomial and all its derivatives,\n    efficient changing of the y-values to be interpolated,\n    and updating by adding more x- and y-values. For numerical stability, a barycentric\n    representation is used rather than computing the coefficients of the polynomial\n    directly.\n    \n    \n    Parameters\n    ----------\n    xi : array_like, shape (npoints, )\n        1-D array of x-coordinates of the points the polynomial\n        should pass through\n    yi : array_like, shape (..., npoints, ...), optional\n        N-D array of y-coordinates of the points the polynomial should pass through.\n        If None, the y values will be supplied later via the `set_y` method.\n        The length of `yi` along the interpolation axis must be equal to the length\n        of `xi`. Use the ``axis`` parameter to select correct axis.\n    axis : int, optional\n        Axis in the yi array corresponding to the x-coordinate values. Defaults\n        to ``axis=0``.\n    wi : array_like, optional\n        The barycentric weights for the chosen interpolation points `xi`.\n        If absent or None, the weights will be computed from `xi` (default).\n        This allows for the reuse of the weights `wi` if several interpolants\n        are being calculated using the same nodes `xi`, without re-computation. This\n        also allows for computing the weights explicitly for some choices of\n        `xi` (see notes).\n    rng : {None, int, `numpy.random.Generator`}, optional\n        If `rng` is passed by keyword, types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n        If `rng` is already a ``Generator`` instance, then the provided instance is\n        used. Specify `rng` for repeatable interpolation.\n    \n        If this argument `random_state` is passed by keyword,\n        legacy behavior for the argument `random_state` applies:\n    \n        - If `random_state` is None (or `numpy.random`), the `numpy.random.RandomState`\n          singleton is used.\n        - If `random_state` is an int, a new ``RandomState`` instance is used,\n          seeded with `random_state`.\n        - If `random_state` is already a ``Generator`` or ``RandomState`` instance then\n          that instance is used.\n    \n        .. versionchanged:: 1.15.0\n            As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n            transition from use of `numpy.random.RandomState` to\n            `numpy.random.Generator` this keyword was changed from `random_state` to `rng`.\n            For an interim period, both keywords will continue to work (only specify\n            one of them). After the interim period using the `random_state` keyword will emit\n            warnings. The behavior of the `random_state` and `rng` keywords is outlined above.\n    \n    Notes\n    -----\n    This method is a variant of Lagrange polynomial interpolation [1]_ based on [2]_.\n    Instead of using Lagrange's or Newton's formula, the polynomial is represented by\n    the barycentric formula\n    \n    .. math::\n    \n        p(x) =\n        \\frac{\\sum_{i=1}^m\\ w_i y_i / (x - x_i)}{\\sum_{i=1}^m w_i / (x - x_i)},\n    \n    where :math:`w_i` are the barycentric weights computed with the general formula\n    \n    .. math::\n    \n        w_i = \\left( \\prod_{k \\neq i} x_i - x_k \\right)^{-1}.\n    \n    This is the same barycentric form used by `AAA` and `FloaterHormannInterpolator`.\n    However, in contrast, the weights :math:`w_i` are defined such that\n    :math:`p(x)` is a polynomial rather than a rational function.\n    \n    The barycentric representation avoids many of the problems associated with\n    polynomial interpolation caused by floating-point arithmetic. However, it does not\n    avoid issues that are intrinsic to polynomial interpolation. Namely, if the\n    x-coordinates are equally spaced, then the weights can be computed explicitly using\n    the formula from [2]_\n    \n    .. math::\n    \n        w_i = (-1)^i {n \\choose i},\n    \n    where :math:`n` is the number of x-coordinates. As noted in [2]_, this means that\n    for large :math:`n` the weights vary by exponentially large factors, leading to the\n    Runge phenomenon.\n    \n    To avoid this ill-conditioning, the x-coordinates should be clustered at the\n    endpoints of the interval. An excellent choice of points on the interval\n    :math:`[a,b]` are Chebyshev points of the second kind\n    \n    .. math::\n    \n        x_i = \\frac{a + b}{2} + \\frac{a - b}{2}\\cos(i\\pi/n).\n    \n    in which case the weights can be computed explicitly as\n    \n    .. math::\n    \n        w_i = \\begin{cases}\n                  (-1)^i/2 & i = 0,n \\\\\n                  (-1)^i   & \\text{otherwise}\n              \\end{cases}.\n    \n    See [2]_ for more infomation. Note that for large :math:`n`, computing the weights\n    explicitly (see examples) will be faster than the generic formula.\n    \n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Lagrange_polynomial\n    .. [2] Jean-Paul Berrut and Lloyd N. Trefethen, \"Barycentric Lagrange\n           Interpolation\", SIAM Review 2004 46:3, 501-517\n           :doi:`10.1137/S0036144502417715`\n    \n    Examples\n    --------\n    To produce a quintic barycentric interpolant approximating the function\n    :math:`\\sin x`, and its first four derivatives, using six randomly-spaced\n    nodes in :math:`(0, \\pi/2)`:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import BarycentricInterpolator\n    >>> rng = np.random.default_rng()\n    >>> xi = rng.random(6) * np.pi/2\n    >>> f, f_d1, f_d2, f_d3, f_d4 = np.sin, np.cos, lambda x: -np.sin(x), lambda x: -np.cos(x), np.sin\n    >>> P = BarycentricInterpolator(xi, f(xi), random_state=rng)\n    >>> fig, axs = plt.subplots(5, 1, sharex=True, layout='constrained', figsize=(7,10))\n    >>> x = np.linspace(0, np.pi, 100)\n    >>> axs[0].plot(x, P(x), 'r:', x, f(x), 'k--', xi, f(xi), 'xk')\n    >>> axs[1].plot(x, P.derivative(x), 'r:', x, f_d1(x), 'k--', xi, f_d1(xi), 'xk')\n    >>> axs[2].plot(x, P.derivative(x, 2), 'r:', x, f_d2(x), 'k--', xi, f_d2(xi), 'xk')\n    >>> axs[3].plot(x, P.derivative(x, 3), 'r:', x, f_d3(x), 'k--', xi, f_d3(xi), 'xk')\n    >>> axs[4].plot(x, P.derivative(x, 4), 'r:', x, f_d4(x), 'k--', xi, f_d4(xi), 'xk')\n    >>> axs[0].set_xlim(0, np.pi)\n    >>> axs[4].set_xlabel(r\"$x$\")\n    >>> axs[4].set_xticks([i * np.pi / 4 for i in range(5)],\n    ...                   [\"0\", r\"$\\frac{\\pi}{4}$\", r\"$\\frac{\\pi}{2}$\", r\"$\\frac{3\\pi}{4}$\", r\"$\\pi$\"])\n    >>> for ax, label in zip(axs, (\"$f(x)$\", \"$f'(x)$\", \"$f''(x)$\", \"$f^{(3)}(x)$\", \"$f^{(4)}(x)$\")):\n    ...     ax.set_ylabel(label)\n    >>> labels = ['Interpolation nodes', 'True function $f$', 'Barycentric interpolation']\n    >>> axs[0].legend(axs[0].get_lines()[::-1], labels, bbox_to_anchor=(0., 1.02, 1., .102),\n    ...               loc='lower left', ncols=3, mode=\"expand\", borderaxespad=0., frameon=False)\n    >>> plt.show()\n    \n    Next, we show how using Chebyshev points of the second kind avoids the avoids the\n    Runge phenomenon. In this example, we also compute the weights explicitly.\n    \n    >>> n = 20\n    >>> def f(x): return np.abs(x) + 0.5*x - x**2\n    >>> i = np.arange(n)\n    >>> x_cheb = np.cos(i*np.pi/(n - 1))  # Chebyshev points on [-1, 1]\n    >>> w_i_cheb = (-1.)**i  # Explicit formula for weights of Chebyshev points\n    >>> w_i_cheb[[0, -1]] /= 2\n    >>> p_cheb = BarycentricInterpolator(x_cheb, f(x_cheb), wi=w_i_cheb)\n    >>> x_equi = np.linspace(-1, 1, n)\n    >>> p_equi = BarycentricInterpolator(x_equi, f(x_equi))\n    >>> xx = np.linspace(-1, 1, 1000)\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(xx, f(xx), label=\"Original Function\")\n    >>> ax.plot(xx, p_cheb(xx), \"--\", label=\"Chebshev Points\")\n    >>> ax.plot(xx, p_equi(xx), \"--\", label=\"Equally Spaced Points\")\n    >>> ax.set(xlabel=\"$x$\", ylabel=\"$f(x)$\", xlim=[-1, 1])\n    >>> ax.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dd9ae8db20ad8fb0bd7e15e803f6e97ccda3beb0cd8ca85ad4e9f28f9103a613",
            "fields": [
                {
                    "id": "mqqxg5ca",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BarycentricInterpolator object",
                    "type": "Object:scipy.interpolate._polyint.BarycentricInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v3uu0qcm",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of x-coordinates of the points the polynomial\nshould pass through",
                    "type": "arraylike, shape (npoints, )",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tscyosqf",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D array of y-coordinates of the points the polynomial should pass through.\nIf None, the y values will be supplied later via the `set_y` method.\nThe length of `yi` along the interpolation axis must be equal to the length\nof `xi`. Use the ``axis`` parameter to select correct axis.",
                    "type": "arraylike, shape (..., npoints, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "416zlfdy",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the yi array corresponding to the x-coordinate values. Defaults\nto ``axis=0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ufyrx8n",
                    "encoding": "",
                    "name": "wi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The barycentric weights for the chosen interpolation points `xi`.\nIf absent or None, the weights will be computed from `xi` (default).\nThis allows for the reuse of the weights `wi` if several interpolants\nare being calculated using the same nodes `xi`, without re-computation. This\nalso allows for computing the weights explicitly for some choices of\n`xi` (see notes).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "axi5cgry",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "If `rng` is passed by keyword, types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.\nIf `rng` is already a ``Generator`` instance, then the provided instance is\nused. Specify `rng` for repeatable interpolation.\n\nIf this argument `random_state` is passed by keyword,\nlegacy behavior for the argument `random_state` applies:\n\n- If `random_state` is None (or `numpy.random`), the `numpy.random.RandomState`\n  singleton is used.\n- If `random_state` is an int, a new ``RandomState`` instance is used,\n  seeded with `random_state`.\n- If `random_state` is already a ``Generator`` or ``RandomState`` instance then\n  that instance is used.\n\n.. versionchanged:: 1.15.0\n    As part of the `SPEC-007 <https://scientific-python.org/specs/spec-0007/>`_\n    transition from use of `numpy.random.RandomState` to\n    `numpy.random.Generator` this keyword was changed from `random_state` to `rng`.\n    For an interim period, both keywords will continue to work (only specify\n    one of them). After the interim period using the `random_state` keyword will emit\n    warnings. The behavior of the `random_state` and `rng` keywords is outlined above.",
                    "type": "{None, int, numpy.random.Generator}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uocp0_a1",
                    "encoding": "",
                    "name": "random_state",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i909f8m8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmzgyhw8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pkqy7d4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7goff1fe",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wl7g8nb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ctg2wuap",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0d6xqnq6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cwl40yv0",
            "name": "BarycentricInterpolator.add_xi",
            "description": "Add more x values to the set to be interpolated\n    \n    The barycentric interpolation algorithm allows easy updating by\n    adding more points for the polynomial to pass through.\n    \n    Parameters\n    ----------\n    xi : array_like\n        The x coordinates of the points that the polynomial should pass\n        through.\n    yi : array_like, optional\n        The y coordinates of the points the polynomial should pass through.\n        Should have shape ``(xi.size, R)``; if R > 1 then the polynomial is\n        vector-valued.\n        If `yi` is not given, the y values will be supplied later. `yi`\n        should be given if and only if the interpolator has y values\n        specified.\n    \n    Notes\n    -----\n    The new points added by `add_xi` are not randomly permuted\n    so there is potential for numerical instability,\n    especially for a large number of points. If this\n    happens, please reconstruct interpolation from scratch instead.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ef5eefc75d29fe6770af3bc6fa4b1d37ef80f0c821be47bcd768cf14436a9578",
            "fields": [
                {
                    "id": "7fd7e27g",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._polyint.BarycentricInterpolator.add_xi object",
                    "type": "Object:scipy.interpolate._polyint.BarycentricInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ezt5l7y",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The x coordinates of the points that the polynomial should pass\nthrough.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1dumot7",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The y coordinates of the points the polynomial should pass through.\nShould have shape ``(xi.size, R)``; if R > 1 then the polynomial is\nvector-valued.\nIf `yi` is not given, the y values will be supplied later. `yi`\nshould be given if and only if the interpolator has y values\nspecified.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0i9v2cm0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator.add_xi",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator.add_xi",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_3_59pm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fse02dtq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vp6w5bh9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wxi08jmb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ul5beiga",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m5medls3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4_s0az21",
            "name": "BarycentricInterpolator.derivative",
            "description": "Evaluate a single derivative of the polynomial at the point x.\n    \n    Parameters\n    ----------\n    x : array_like\n        Point or points at which to evaluate the derivatives\n    der : integer, optional\n        Which derivative to evaluate (default: first derivative).\n        This number includes the function value as 0th derivative.\n    \n    Returns\n    -------\n    d : ndarray\n        Derivative interpolated at the x-points. Shape of `d` is\n        determined by replacing the interpolation axis in the\n        original array with the shape of `x`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1fa591f2843acf86cbc5ea10f6dd5ca70bdf429f6a933ed7888a744b68f27a30",
            "fields": [
                {
                    "id": "qwkf2yqh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._polyint.BarycentricInterpolator.derivative object",
                    "type": "Object:scipy.interpolate._polyint.BarycentricInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xspa2v1g",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the derivatives",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_dhu3xrt",
                    "encoding": "",
                    "name": "der",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Which derivative to evaluate (default: first derivative).\nThis number includes the function value as 0th derivative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahrvkrig",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator.derivative",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "07rl18z7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5p7egqdb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "1opb4f7j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pgl5csqg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s142sex4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xrnmycml",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ey1miv6r",
            "name": "BarycentricInterpolator.derivatives",
            "description": "Evaluate several derivatives of the polynomial at the point `x`\n    \n    Produce an array of derivatives evaluated at the point `x`.\n    \n    Parameters\n    ----------\n    x : array_like\n        Point or points at which to evaluate the derivatives\n    der : int or list or None, optional\n        How many derivatives to evaluate, or None for all potentially\n        nonzero derivatives (that is, a number equal to the number\n        of points), or a list of derivatives to evaluate. This number\n        includes the function value as the '0th' derivative.\n    \n    Returns\n    -------\n    d : ndarray\n        Array with derivatives; ``d[j]`` contains the jth derivative.\n        Shape of ``d[j]`` is determined by replacing the interpolation\n        axis in the original array with the shape of `x`.\n    \n    Examples\n    --------\n    >>> from scipy.interpolate import KroghInterpolator\n    >>> KroghInterpolator([0,0,0],[1,2,3]).derivatives(0)\n    array([1.0,2.0,3.0])\n    >>> KroghInterpolator([0,0,0],[1,2,3]).derivatives([0,0])\n    array([[1.0,1.0],\n           [2.0,2.0],\n           [3.0,3.0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7cb496499139205e786b9b97abad8c214dff2312c40dbb83e91b3f86348d0407",
            "fields": [
                {
                    "id": "z257bvxx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._polyint.BarycentricInterpolator.derivatives object",
                    "type": "Object:scipy.interpolate._polyint.BarycentricInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ug2_5epu",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the derivatives",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ysibxcr_",
                    "encoding": "",
                    "name": "der",
                    "value": "",
                    "defaultValue": "",
                    "description": "How many derivatives to evaluate, or None for all potentially\nnonzero derivatives (that is, a number equal to the number\nof points), or a list of derivatives to evaluate. This number\nincludes the function value as the '0th' derivative.",
                    "type": "int or list or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6clgd94",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator.derivatives",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator.derivatives",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ldals0hv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7ikqzxn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pfb19ai7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x8oackdu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x83r4u5t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ucsexywl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nvcevu4g",
            "name": "BarycentricInterpolator.set_yi",
            "description": "Update the y values to be interpolated\n    \n    The barycentric interpolation algorithm requires the calculation\n    of weights, but these depend only on the `xi`. The `yi` can be changed\n    at any time.\n    \n    Parameters\n    ----------\n    yi : array_like\n        The y-coordinates of the points the polynomial will pass through.\n        If None, the y values must be supplied later.\n    axis : int, optional\n        Axis in the `yi` array corresponding to the x-coordinate values.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6f33e8954998e7a5479d8b34d268bef13a7b97249e622d35252ee428692ad93f",
            "fields": [
                {
                    "id": "n_n_9ze_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._polyint.BarycentricInterpolator.set_yi object",
                    "type": "Object:scipy.interpolate._polyint.BarycentricInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m9_7gnio",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The y-coordinates of the points the polynomial will pass through.\nIf None, the y values must be supplied later.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cd48m029",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axis in the `yi` array corresponding to the x-coordinate values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x90l3coj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator.set_yi",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator.set_yi",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suknq2da",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4d2v7x3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yvvp5dsd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97tg1rqu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.BarycentricInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "icnzmbnu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zml543bs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "n4krl5tm",
            "name": "BivariateSpline.__init__",
            "description": "\nBase class for bivariate splines.\n    \n    This describes a spline ``s(x, y)`` of degrees ``kx`` and ``ky`` on\n    the rectangle ``[xb, xe] * [yb, ye]`` calculated from a given set\n    of data points ``(x, y, z)``.\n    \n    This class is meant to be subclassed, not instantiated directly.\n    To construct these splines, call either `SmoothBivariateSpline` or\n    `LSQBivariateSpline` or `RectBivariateSpline`.\n    \n    See Also\n    --------\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh.\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "14b6a6ca3256900d90ce4d4764b16715d3babd5b529359544868f0dfb1b437dc",
            "fields": [
                {
                    "id": "v2e2qqwy",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "id": "1cz_thmk",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2czfdtw",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibq0agfj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6chmcw81",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "09o432z0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "huqw6_t4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "75r2urli",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c9i5pum",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epv2yzkx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cgo1emy7",
            "name": "BivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(xi[i], yi[i]),\n    i=0,...,len(xi)-1``.\n    \n    Parameters\n    ----------\n    xi, yi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        ``np.meshgrid(..., indexing=\"ij\")`` and inconsistent with the\n        default ordering ``np.meshgrid(..., indexing=\"xy\")``.\n    dx : int, optional\n        Order of x-derivative\n    \n        .. versionadded:: 0.14.0\n    dy : int, optional\n        Order of y-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to bilinearly interpolate an exponentially decaying\n    function in 2 dimensions.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectBivariateSpline\n    >>> def f(x, y):\n    ...     return np.exp(-np.sqrt((x / 2) ** 2 + y**2))\n    \n    We sample the function on a coarse grid and set up the interpolator. Note that\n    the default ``indexing=\"xy\"`` of meshgrid would result in an unexpected\n    (transposed) result after interpolation.\n    \n    >>> xarr = np.linspace(-3, 3, 21)\n    >>> yarr = np.linspace(-3, 3, 21)\n    >>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=\"ij\")\n    >>> zdata = f(xgrid, ygrid)\n    >>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)\n    \n    Next we sample the function along a diagonal slice through the coordinate space\n    on a finer grid using interpolation.\n    \n    >>> xinterp = np.linspace(-3, 3, 201)\n    >>> yinterp = np.linspace(3, -3, 201)\n    >>> zinterp = rbs.ev(xinterp, yinterp)\n    \n    And check that the interpolation passes through the function evaluations as a\n    function of the distance from the origin along the slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sqrt(xarr**2 + yarr**2), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sqrt(xinterp**2 + yinterp**2), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf04731c2201b666e46e57927be0d3c5cc89e17bdffac1fb2ff966bd8439dd51",
            "fields": [
                {
                    "id": "mx9m2oqe",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.BivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmtanv3l",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_lnv3s6",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy5kmj59",
                    "encoding": "",
                    "name": "dx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of x-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hgx99544",
                    "encoding": "",
                    "name": "dy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of y-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bh9z8uem",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6tvpgxo2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbz7jgu5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "luava65w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2i3czzj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wmduzd4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "058il8e1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_z2ka_3j",
            "name": "BivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5525c71b56e16d843de5c1519a1655876e8fb9a54e68d6c3e4b4de18c7d185ee",
            "fields": [
                {
                    "id": "x987xfv9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.BivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aiubg0cb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8j9r3_b6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jhwji1by",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "s6wxthxf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eeabnp5p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n4nbm1cp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7epfn80c",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8gsnp_ti",
            "name": "BivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "60fb188c97dd7c1e9d71a96fb4465da69e85a7fc977502e5c109ea38a5d24558",
            "fields": [
                {
                    "id": "pqay5mp0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.BivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfil3h20",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v5nlyese",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_g9_s9nm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p5d32x7g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28jnv7pu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2ylf7ps",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgny2r4g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fu6p8303",
            "name": "BivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "de019dd6a0f2a510842d1181a6a18f4f7e5b2d88de0c22d14338c271a32263e8",
            "fields": [
                {
                    "id": "ill3j58k",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.BivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9p5u_spg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ra59bll7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3zb1_5c",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "omw_bx_u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "miu3bkpr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__dcac0u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ejma7h3g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ksrum005",
            "name": "BivariateSpline.integral",
            "description": "Evaluate the integral of the spline over area [xa,xb] x [ya,yb].\n    \n    Parameters\n    ----------\n    xa, xb : float\n        The end-points of the x integration interval.\n    ya, yb : float\n        The end-points of the y integration interval.\n    \n    Returns\n    -------\n    integ : float\n        The value of the resulting integral.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "acc1807908041e47622a80fe52abdde64446aa106957f42f0e17ed26953f17e8",
            "fields": [
                {
                    "id": "4a0twy1v",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.BivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xeu7qi07",
                    "encoding": "",
                    "name": "xa",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zje4wxhm",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ayd11y3s",
                    "encoding": "",
                    "name": "ya",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjeq035n",
                    "encoding": "",
                    "name": "yb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ibwixonx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpa0dld7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i0b819ik",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2uvtvj0b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qo499id",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jguczldp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17ncewtj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "96qf61k_",
            "name": "BivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b59e6bccad0b290d55dae80aefd64fc0a5463e10f060cbc431b5a40ba212678b",
            "fields": [
                {
                    "id": "pm3pncwl",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.BivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.BivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p_tal3xq",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ed7wv9th",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbpw1gpz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nd07_jpn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fa3h1mw3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fpzil5zb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lyw4tve9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.BivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.BivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_2glrowu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bxbp7bnh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "sseop96u",
            "name": "CloughTocher2DInterpolator.__init__",
            "description": "\nPiecewise cubic, C1 smooth, curvature-minimizing interpolator in N=2 dimensions.\n    \n    .. versionadded:: 0.9\n    \n    Methods\n    -------\n    __call__\n    \n    Parameters\n    ----------\n    points : ndarray of floats, shape (npoints, ndims); or Delaunay\n        2-D array of data point coordinates, or a precomputed Delaunay triangulation.\n    values : ndarray of float or complex, shape (npoints, ...)\n        N-D array of data values at `points`. The length of `values` along the\n        first axis must be equal to the length of `points`. Unlike some\n        interpolators, the interpolation axis cannot be changed.\n    fill_value : float, optional\n        Value used to fill in for requested points outside of the\n        convex hull of the input points.  If not provided, then\n        the default is ``nan``.\n    tol : float, optional\n        Absolute/relative tolerance for gradient estimation.\n    maxiter : int, optional\n        Maximum number of iterations in gradient estimation.\n    rescale : bool, optional\n        Rescale points to unit cube before performing interpolation.\n        This is useful if some of the input dimensions have\n        incommensurable units and differ by many orders of magnitude.\n    \n    Notes\n    -----\n    The interpolant is constructed by triangulating the input data\n    with Qhull [1]_, and constructing a piecewise cubic\n    interpolating Bezier polynomial on each triangle, using a\n    Clough-Tocher scheme [CT]_.  The interpolant is guaranteed to be\n    continuously differentiable.\n    \n    The gradients of the interpolant are chosen so that the curvature\n    of the interpolating surface is approximatively minimized. The\n    gradients necessary for this are estimated using the global\n    algorithm described in [Nielson83]_ and [Renka84]_.\n    \n    .. note:: For data on a regular grid use `interpn` instead.\n    \n    Examples\n    --------\n    We can interpolate values on a 2D plane:\n    \n    >>> from scipy.interpolate import CloughTocher2DInterpolator\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = rng.random(10) - 0.5\n    >>> y = rng.random(10) - 0.5\n    >>> z = np.hypot(x, y)\n    >>> X = np.linspace(min(x), max(x))\n    >>> Y = np.linspace(min(y), max(y))\n    >>> X, Y = np.meshgrid(X, Y)  # 2D grid for interpolation\n    >>> interp = CloughTocher2DInterpolator(list(zip(x, y)), z)\n    >>> Z = interp(X, Y)\n    >>> plt.pcolormesh(X, Y, Z, shading='auto')\n    >>> plt.plot(x, y, \"ok\", label=\"input point\")\n    >>> plt.legend(loc=\"upper right\")\n    >>> plt.colorbar()\n    >>> plt.axis(\"equal\")\n    >>> plt.show()\n    \n    See also\n    --------\n    griddata :\n        Interpolate unstructured D-D data.\n    LinearNDInterpolator :\n        Piecewise linear interpolator in N > 1 dimensions.\n    NearestNDInterpolator :\n        Nearest-neighbor interpolator in N > 1 dimensions.\n    interpn : Interpolation on a regular grid or rectilinear grid.\n    RegularGridInterpolator : Interpolator on a regular or rectilinear grid\n                              in arbitrary dimensions (`interpn` wraps this\n                              class).\n    \n    References\n    ----------\n    .. [1] http://www.qhull.org/\n    \n    .. [CT] See, for example,\n       P. Alfeld,\n       ''A trivariate Clough-Tocher scheme for tetrahedral data''.\n       Computer Aided Geometric Design, 1, 169 (1984);\n       G. Farin,\n       ''Triangular Bernstein-Bezier patches''.\n       Computer Aided Geometric Design, 3, 83 (1986).\n    \n    .. [Nielson83] G. Nielson,\n       ''A method for interpolating scattered data based upon a minimum norm\n       network''.\n       Math. Comp., 40, 253 (1983).\n    \n    .. [Renka84] R. J. Renka and A. K. Cline.\n       ''A Triangle-based C1 interpolation method.'',\n       Rocky Mountain J. Math., 14, 223 (1984).",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "feab5f1e0120a88a8c504e1cc197ab301735d5dee3f92a152477f47f67007007",
            "fields": [
                {
                    "id": "gz2fgdzp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to CloughTocher2DInterpolator object",
                    "type": "Object:scipy.interpolate._interpnd.CloughTocher2DInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cv0azv3w",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array of data point coordinates, or a precomputed Delaunay triangulation.",
                    "type": "ndarray of floats, shape (npoints, ndims); or Delaunay",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_kv3y7i",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D array of data values at `points`. The length of `values` along the\nfirst axis must be equal to the length of `points`. Unlike some\ninterpolators, the interpolation axis cannot be changed.",
                    "type": "ndarray of float or complex, shape (npoints, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1svd7tqi",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value used to fill in for requested points outside of the\nconvex hull of the input points.  If not provided, then\nthe default is ``nan``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ta8w89qx",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "Absolute/relative tolerance for gradient estimation.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ismh2uzf",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 400,
                    "defaultValue": 400,
                    "description": "Maximum number of iterations in gradient estimation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvgxe9y0",
                    "encoding": "",
                    "name": "rescale",
                    "value": false,
                    "defaultValue": false,
                    "description": "Rescale points to unit cube before performing interpolation.\nThis is useful if some of the input dimensions have\nincommensurable units and differ by many orders of magnitude.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zz3uxtkl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpnd.CloughTocher2DInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._interpnd.CloughTocher2DInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7fl52ll",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nc7_kew7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gyz3uj9z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxbh_o78",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpnd.CloughTocher2DInterpolator",
                    "defaultValue": "scipy.interpolate._interpnd.CloughTocher2DInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8lflvplc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6sdeukdg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "p6p655f5",
            "name": "CubicHermiteSpline.__init__",
            "description": "\nPiecewise cubic interpolator to fit values and first derivatives (C1 smooth).\n    \n    The result is represented as a `PPoly` instance.\n    \n    Parameters\n    ----------\n    x : array_like, shape (n,)\n        1-D array containing values of the independent variable.\n        Values must be real, finite and in strictly increasing order.\n    y : array_like\n        Array containing values of the dependent variable. It can have\n        arbitrary number of dimensions, but the length along ``axis``\n        (see below) must match the length of ``x``. Values must be finite.\n    dydx : array_like\n        Array containing derivatives of the dependent variable. It can have\n        arbitrary number of dimensions, but the length along ``axis``\n        (see below) must match the length of ``x``. Values must be finite.\n    axis : int, optional\n        Axis along which `y` is assumed to be varying. Meaning that for\n        ``x[i]`` the corresponding values are ``np.take(y, i, axis=axis)``.\n        Default is 0.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs. If 'periodic',\n        periodic extrapolation is used. If None (default), it is set to True.\n    \n    Attributes\n    ----------\n    x : ndarray, shape (n,)\n        Breakpoints. The same ``x`` which was passed to the constructor.\n    c : ndarray, shape (4, n-1, ...)\n        Coefficients of the polynomials on each segment. The trailing\n        dimensions match the dimensions of `y`, excluding ``axis``.\n        For example, if `y` is 1-D, then ``c[k, i]`` is a coefficient for\n        ``(x-x[i])**(3-k)`` on the segment between ``x[i]`` and ``x[i+1]``.\n    axis : int\n        Interpolation axis. The same axis which was passed to the\n        constructor.\n    \n    Methods\n    -------\n    __call__\n    derivative\n    antiderivative\n    integrate\n    solve\n    roots\n    \n    See Also\n    --------\n    Akima1DInterpolator : Akima 1D interpolator.\n    PchipInterpolator : PCHIP 1-D monotonic cubic interpolator.\n    CubicSpline : Cubic spline data interpolator.\n    PPoly : Piecewise polynomial in terms of coefficients and breakpoints\n    \n    Notes\n    -----\n    If you want to create a higher-order spline matching higher-order\n    derivatives, use `BPoly.from_derivatives`.\n    \n    References\n    ----------\n    .. [1] `Cubic Hermite spline\n            <https://en.wikipedia.org/wiki/Cubic_Hermite_spline>`_\n            on Wikipedia.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf000933277727bd0703bdbdf42033da965227d1989fcf2a808e20919edd0da2",
            "fields": [
                {
                    "id": "fvixzns0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to CubicHermiteSpline object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n16e718v",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Breakpoints. The same ``x`` which was passed to the constructor.",
                    "type": "ndarray, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7uou7edq",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array containing values of the dependent variable. It can have\narbitrary number of dimensions, but the length along ``axis``\n(see below) must match the length of ``x``. Values must be finite.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mi_hwhbx",
                    "encoding": "",
                    "name": "dydx",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array containing derivatives of the dependent variable. It can have\narbitrary number of dimensions, but the length along ``axis``\n(see below) must match the length of ``x``. Values must be finite.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rakkpm5h",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Interpolation axis. The same axis which was passed to the\nconstructor.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4mrpyizj",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs. If 'periodic',\nperiodic extrapolation is used. If None (default), it is set to True.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lp5ivcnv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.__init__",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8v8lyymy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7m4mvkjx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wmgiovav",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s3lr1i8u",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5cdiusgw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qjk9s4o2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rsmjhgic",
            "name": "CubicHermiteSpline.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Antiderivative is also the indefinite integral of the function,\n    and derivative is its inverse operation.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of antiderivative to evaluate. Default is 1, i.e., compute\n        the first integral. If negative, the derivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k + n representing\n        the antiderivative of this polynomial.\n    \n    Notes\n    -----\n    The antiderivative returned by this function is continuous and\n    continuously differentiable to order n-1, up to floating point\n    rounding error.\n    \n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3ece7aaa6cb015034b24e4ae83239f52ea184f867d45a0503b7e04b163a29cce",
            "fields": [
                {
                    "id": "uvhq073v",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicHermiteSpline.antiderivative object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i04f6vzn",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default is 1, i.e., compute\nthe first integral. If negative, the derivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xcyr2yp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.antiderivative",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "966_unk3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jqfpzvd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yc07h4mc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rny0iyrf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1fwkano",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wx_monw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c7n9rjia",
            "name": "CubicHermiteSpline.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type. The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "208a31084d0454e43228ddde20c8bfb77f6c5dd557cab6e7e18c3004c194cebd",
            "fields": [
                {
                    "id": "yjy6elzd",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nsk_eu18",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2wb3f4dg",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hkdt0wuk",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l1l1riiu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.construct_fast",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k6kzxdhl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2mje7v5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b0wgskys",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzvnqhhk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j81opnqp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qkhf_bt3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fdmopckj",
            "name": "CubicHermiteSpline.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of derivative to evaluate. Default is 1, i.e., compute the\n        first derivative. If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k - n representing the derivative\n        of this polynomial.\n    \n    Notes\n    -----\n    Derivatives are evaluated piecewise for each polynomial\n    segment, even if the polynomial is not differentiable at the\n    breakpoints. The polynomial intervals are considered half-open,\n    ``[a, b)``, except for the last interval which is closed\n    ``[a, b]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cea7f99e6f8db1d82ed2d7e5cad376dc84025120a7946696c89844c280bf2fae",
            "fields": [
                {
                    "id": "t4wzw2ou",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicHermiteSpline.derivative object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbq00vo_",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default is 1, i.e., compute the\nfirst derivative. If negative, the antiderivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "824hb2oz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.derivative",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dv2q5gye",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9niuzcx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "50rdq2hg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1fe4vro",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zgqc4l47",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v1cs9u_0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9g1ua_45",
            "name": "CubicHermiteSpline.extend",
            "description": "Add additional breakpoints and coefficients to the polynomial.\n    \n    Parameters\n    ----------\n    c : ndarray, size (k, m, ...)\n        Additional coefficients for polynomials in intervals. Note that\n        the first additional interval will be formed using one of the\n        ``self.x`` end points.\n    x : ndarray, size (m,)\n        Additional breakpoints. Must be sorted in the same order as\n        ``self.x`` and either to the right or to the left of the current\n        breakpoints.\n    \n    Notes\n    -----\n    This method is not thread safe and must not be executed concurrently\n    with other methods available in this class. Doing so may cause\n    unexpected errors or numerical output mismatches.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "346dc37642074a4a2375f580e533bbd46a850105b1e45af8dec5a39fd0a53e1e",
            "fields": [
                {
                    "id": "loqa0v_9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicHermiteSpline.extend object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ehiu7k_a",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional coefficients for polynomials in intervals. Note that\nthe first additional interval will be formed using one of the\n``self.x`` end points.",
                    "type": "ndarray, size (k, m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1kzrtm7n",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional breakpoints. Must be sorted in the same order as\n``self.x`` and either to the right or to the left of the current\nbreakpoints.",
                    "type": "ndarray, size (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "syc5fivb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.extend",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.extend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "esxlaz4i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0q7jz5xy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bv49x__b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_m4z4iol",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y6t1urc7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tiaro7hd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "rvtih07g",
            "name": "CubicHermiteSpline.from_bernstein_basis",
            "description": "Construct a piecewise polynomial in the power basis\n    from a polynomial in Bernstein basis.\n    \n    Parameters\n    ----------\n    bp : BPoly\n        A Bernstein basis polynomial, as created by BPoly\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e25dc98b6c3b9fcd9862f30392fd6b581b84c0f43faa5b0eb9dfff3c5419ade1",
            "fields": [
                {
                    "id": "ceg0q28p",
                    "encoding": "",
                    "name": "bp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Bernstein basis polynomial, as created by BPoly",
                    "type": "BPoly",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "disoim99",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1suonb7w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.from_bernstein_basis",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.from_bernstein_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6k47dmns",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q62vjoc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uvv043j2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e615sia9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5igc89uc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "caczwq9p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "5o720h4u",
            "name": "CubicHermiteSpline.from_spline",
            "description": "Construct a piecewise polynomial from a spline\n    \n    Parameters\n    ----------\n    tck\n        A spline, as returned by `splrep` or a BSpline object.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.\n    \n    Examples\n    --------\n    Construct an interpolating spline and convert it to a `PPoly` instance\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import splrep, PPoly\n    >>> x = np.linspace(0, 1, 11)\n    >>> y = np.sin(2*np.pi*x)\n    >>> tck = splrep(x, y, s=0)\n    >>> p = PPoly.from_spline(tck)\n    >>> isinstance(p, PPoly)\n    True\n    \n    Note that this function only supports 1D splines out of the box.\n    \n    If the ``tck`` object represents a parametric spline (e.g. constructed\n    by `splprep` or a `BSpline` with ``c.ndim > 1``), you will need to loop\n    over the dimensions manually.\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> t = np.linspace(0, 1, 11)\n    >>> x = np.sin(2*np.pi*t)\n    >>> y = np.cos(2*np.pi*t)\n    >>> (t, c, k), u = splprep([x, y], s=0)\n    \n    Note that ``c`` is a list of two arrays of length 11.\n    \n    >>> unew = np.arange(0, 1.01, 0.01)\n    >>> out = splev(unew, (t, c, k))\n    \n    To convert this spline to the power basis, we convert each\n    component of the list of b-spline coefficients, ``c``, into the\n    corresponding cubic polynomial.\n    \n    >>> polys = [PPoly.from_spline((t, cj, k)) for cj in c]\n    >>> polys[0].c.shape\n    (4, 14)\n    \n    Note that the coefficients of the polynomials `polys` are in the\n    power basis and their dimensions reflect just that: here 4 is the order\n    (degree+1), and 14 is the number of intervals---which is nothing but\n    the length of the knot array of the original `tck` minus one.\n    \n    Optionally, we can stack the components into a single `PPoly` along\n    the third dimension:\n    \n    >>> cc = np.dstack([p.c for p in polys])    # has shape = (4, 14, 2)\n    >>> poly = PPoly(cc, polys[0].x)\n    >>> np.allclose(poly(unew).T,     # note the transpose to match `splev`\n    ...             out, atol=1e-15)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f0e56cd8e293ff7bd78d374c880482afc83ef30efbaa466e99f91d25100ae08d",
            "fields": [
                {
                    "id": "fuhcdpel",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A spline, as returned by `splrep` or a BSpline object.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhl4aeix",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3njhiven",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.from_spline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.from_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xoibm60l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tuh60zeo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vazyei8b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kl8wfv_c",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xt_f42w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9uxcb584",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ywi8jkmh",
            "name": "CubicHermiteSpline.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    a : float\n        Lower integration bound\n    b : float\n        Upper integration bound\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used.\n        If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    ig : array_like\n        Definite integral of the piecewise polynomial over [a, b]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e606c214d6f0e275eb459fa98fa70a49fb0716f82c90001809bf98618f885d2b",
            "fields": [
                {
                    "id": "cg9zrw6b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicHermiteSpline.integrate object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "syx6skxx",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bpnyuufi",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5jkkf29f",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used.\nIf None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5vbifhm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.integrate",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pjvrb1wf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nejv4b7f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m0prlhrm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "89nt65y0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "421dlj21",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sa4qkyo6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wuhhxnph",
            "name": "CubicHermiteSpline.roots",
            "description": "Find real roots of the piecewise polynomial.\n    \n    Parameters\n    ----------\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    See Also\n    --------\n    PPoly.solve",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "45516112cfc61817c53a5e4379d44bfb5cbf423a7fa4f634df59b5fa7c9757ca",
            "fields": [
                {
                    "id": "t84_xycj",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicHermiteSpline.roots object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "326pwqhp",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r29iht88",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ij517okb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.roots",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zas4g94z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8bbexdxm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "x0gruo7x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aruweujl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ek2yvyfp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_i32_7tm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "z93o2nkv",
            "name": "CubicHermiteSpline.solve",
            "description": "Find real solutions of the equation ``pp(x) == y``.\n    \n    Parameters\n    ----------\n    y : float, optional\n        Right-hand side. Default is zero.\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    Notes\n    -----\n    This routine works only on real-valued polynomials.\n    \n    If the piecewise polynomial contains sections that are\n    identically zero, the root list will contain the start point\n    of the corresponding interval, followed by a ``nan`` value.\n    \n    If the polynomial is discontinuous across a breakpoint, and\n    there is a sign change across the breakpoint, this is reported\n    if the `discont` parameter is True.\n    \n    Examples\n    --------\n    \n    Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals\n    ``[-2, 1], [1, 2]``:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import PPoly\n    >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])\n    >>> pp.solve()\n    array([-1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eccd97a2a753087a4ff8e9d27d8e5d1d55df5739e7ab4a6bbbc7e50a4dc0feb4",
            "fields": [
                {
                    "id": "ff_q55sk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicHermiteSpline.solve object",
                    "type": "Object:scipy.interpolate._cubic.CubicHermiteSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6wdlqcvf",
                    "encoding": "",
                    "name": "y",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Right-hand side. Default is zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lcqc0h_m",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7rahoo13",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_dxsn6t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline.solve",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e49ipu4q",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lz91v5p4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kp_bpzbb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "beq3dobb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicHermiteSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1tvkcr52",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghsv15o4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yfxo913r",
            "name": "CubicSpline.__init__",
            "description": "\nPiecewise cubic interpolator to fit values (C2 smooth).\n    \n    Interpolate data with a piecewise cubic polynomial which is twice\n    continuously differentiable [1]_. The result is represented as a `PPoly`\n    instance with breakpoints matching the given data.\n    \n    Parameters\n    ----------\n    x : array_like, shape (n,)\n        1-D array containing values of the independent variable.\n        Values must be real, finite and in strictly increasing order.\n    y : array_like\n        Array containing values of the dependent variable. It can have\n        arbitrary number of dimensions, but the length along ``axis``\n        (see below) must match the length of ``x``. Values must be finite.\n    axis : int, optional\n        Axis along which `y` is assumed to be varying. Meaning that for\n        ``x[i]`` the corresponding values are ``np.take(y, i, axis=axis)``.\n        Default is 0.\n    bc_type : string or 2-tuple, optional\n        Boundary condition type. Two additional equations, given by the\n        boundary conditions, are required to determine all coefficients of\n        polynomials on each segment [2]_.\n    \n        If `bc_type` is a string, then the specified condition will be applied\n        at both ends of a spline. Available conditions are:\n    \n        * 'not-a-knot' (default): The first and second segment at a curve end\n          are the same polynomial. It is a good default when there is no\n          information on boundary conditions.\n        * 'periodic': The interpolated functions is assumed to be periodic\n          of period ``x[-1] - x[0]``. The first and last value of `y` must be\n          identical: ``y[0] == y[-1]``. This boundary condition will result in\n          ``y'[0] == y'[-1]`` and ``y''[0] == y''[-1]``.\n        * 'clamped': The first derivative at curves ends are zero. Assuming\n          a 1D `y`, ``bc_type=((1, 0.0), (1, 0.0))`` is the same condition.\n        * 'natural': The second derivative at curve ends are zero. Assuming\n          a 1D `y`, ``bc_type=((2, 0.0), (2, 0.0))`` is the same condition.\n    \n        If `bc_type` is a 2-tuple, the first and the second value will be\n        applied at the curve start and end respectively. The tuple values can\n        be one of the previously mentioned strings (except 'periodic') or a\n        tuple ``(order, deriv_values)`` allowing to specify arbitrary\n        derivatives at curve ends:\n    \n        * `order`: the derivative order, 1 or 2.\n        * `deriv_value`: array_like containing derivative values, shape must\n          be the same as `y`, excluding ``axis`` dimension. For example, if\n          `y` is 1-D, then `deriv_value` must be a scalar. If `y` is 3-D with\n          the shape (n0, n1, n2) and axis=2, then `deriv_value` must be 2-D\n          and have the shape (n0, n1).\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs. If 'periodic',\n        periodic extrapolation is used. If None (default), ``extrapolate`` is\n        set to 'periodic' for ``bc_type='periodic'`` and to True otherwise.\n    \n    Attributes\n    ----------\n    x : ndarray, shape (n,)\n        Breakpoints. The same ``x`` which was passed to the constructor.\n    c : ndarray, shape (4, n-1, ...)\n        Coefficients of the polynomials on each segment. The trailing\n        dimensions match the dimensions of `y`, excluding ``axis``.\n        For example, if `y` is 1-d, then ``c[k, i]`` is a coefficient for\n        ``(x-x[i])**(3-k)`` on the segment between ``x[i]`` and ``x[i+1]``.\n    axis : int\n        Interpolation axis. The same axis which was passed to the\n        constructor.\n    \n    Methods\n    -------\n    __call__\n    derivative\n    antiderivative\n    integrate\n    solve\n    roots\n    \n    See Also\n    --------\n    Akima1DInterpolator : Akima 1D interpolator.\n    PchipInterpolator : PCHIP 1-D monotonic cubic interpolator.\n    PPoly : Piecewise polynomial in terms of coefficients and breakpoints.\n    \n    Notes\n    -----\n    Parameters `bc_type` and ``extrapolate`` work independently, i.e. the\n    former controls only construction of a spline, and the latter only\n    evaluation.\n    \n    When a boundary condition is 'not-a-knot' and n = 2, it is replaced by\n    a condition that the first derivative is equal to the linear interpolant\n    slope. When both boundary conditions are 'not-a-knot' and n = 3, the\n    solution is sought as a parabola passing through given points.\n    \n    When 'not-a-knot' boundary conditions is applied to both ends, the\n    resulting spline will be the same as returned by `splrep` (with ``s=0``)\n    and `InterpolatedUnivariateSpline`, but these two methods use a\n    representation in B-spline basis.\n    \n    .. versionadded:: 0.18.0\n    \n    Examples\n    --------\n    In this example the cubic spline is used to interpolate a sampled sinusoid.\n    You can see that the spline continuity property holds for the first and\n    second derivatives and violates only for the third derivative.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import CubicSpline\n    >>> import matplotlib.pyplot as plt\n    >>> x = np.arange(10)\n    >>> y = np.sin(x)\n    >>> cs = CubicSpline(x, y)\n    >>> xs = np.arange(-0.5, 9.6, 0.1)\n    >>> fig, ax = plt.subplots(figsize=(6.5, 4))\n    >>> ax.plot(x, y, 'o', label='data')\n    >>> ax.plot(xs, np.sin(xs), label='true')\n    >>> ax.plot(xs, cs(xs), label=\"S\")\n    >>> ax.plot(xs, cs(xs, 1), label=\"S'\")\n    >>> ax.plot(xs, cs(xs, 2), label=\"S''\")\n    >>> ax.plot(xs, cs(xs, 3), label=\"S'''\")\n    >>> ax.set_xlim(-0.5, 9.5)\n    >>> ax.legend(loc='lower left', ncol=2)\n    >>> plt.show()\n    \n    In the second example, the unit circle is interpolated with a spline. A\n    periodic boundary condition is used. You can see that the first derivative\n    values, ds/dx=0, ds/dy=1 at the periodic point (1, 0) are correctly\n    computed. Note that a circle cannot be exactly represented by a cubic\n    spline. To increase precision, more breakpoints would be required.\n    \n    >>> theta = 2 * np.pi * np.linspace(0, 1, 5)\n    >>> y = np.c_[np.cos(theta), np.sin(theta)]\n    >>> cs = CubicSpline(theta, y, bc_type='periodic')\n    >>> print(\"ds/dx={:.1f} ds/dy={:.1f}\".format(cs(0, 1)[0], cs(0, 1)[1]))\n    ds/dx=0.0 ds/dy=1.0\n    >>> xs = 2 * np.pi * np.linspace(0, 1, 100)\n    >>> fig, ax = plt.subplots(figsize=(6.5, 4))\n    >>> ax.plot(y[:, 0], y[:, 1], 'o', label='data')\n    >>> ax.plot(np.cos(xs), np.sin(xs), label='true')\n    >>> ax.plot(cs(xs)[:, 0], cs(xs)[:, 1], label='spline')\n    >>> ax.axes.set_aspect('equal')\n    >>> ax.legend(loc='center')\n    >>> plt.show()\n    \n    The third example is the interpolation of a polynomial y = x**3 on the\n    interval 0 <= x<= 1. A cubic spline can represent this function exactly.\n    To achieve that we need to specify values and first derivatives at\n    endpoints of the interval. Note that y' = 3 * x**2 and thus y'(0) = 0 and\n    y'(1) = 3.\n    \n    >>> cs = CubicSpline([0, 1], [0, 1], bc_type=((1, 0), (1, 3)))\n    >>> x = np.linspace(0, 1)\n    >>> np.allclose(x**3, cs(x))\n    True\n    \n    References\n    ----------\n    .. [1] `Cubic Spline Interpolation\n            <https://en.wikiversity.org/wiki/Cubic_Spline_Interpolation>`_\n            on Wikiversity.\n    .. [2] Carl de Boor, \"A Practical Guide to Splines\", Springer-Verlag, 1978.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e1e4a0cffb53a53135efd2fe2af3952b63c2f61987004e06c93c54c9c9a29471",
            "fields": [
                {
                    "id": "un9d1_ts",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to CubicSpline object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sl7dang9",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Breakpoints. The same ``x`` which was passed to the constructor.",
                    "type": "ndarray, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yrhsd7xt",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array containing values of the dependent variable. It can have\narbitrary number of dimensions, but the length along ``axis``\n(see below) must match the length of ``x``. Values must be finite.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3y9sfarv",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Interpolation axis. The same axis which was passed to the\nconstructor.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6aybj97n",
                    "encoding": "",
                    "name": "bc_type",
                    "value": "not-a-knot",
                    "defaultValue": "not-a-knot",
                    "description": "Boundary condition type. Two additional equations, given by the\nboundary conditions, are required to determine all coefficients of\npolynomials on each segment [2]_.\n\nIf `bc_type` is a string, then the specified condition will be applied\nat both ends of a spline. Available conditions are:\n\n* 'not-a-knot' (default): The first and second segment at a curve end\n  are the same polynomial. It is a good default when there is no\n  information on boundary conditions.\n* 'periodic': The interpolated functions is assumed to be periodic\n  of period ``x[-1] - x[0]``. The first and last value of `y` must be\n  identical: ``y[0] == y[-1]``. This boundary condition will result in\n  ``y'[0] == y'[-1]`` and ``y''[0] == y''[-1]``.\n* 'clamped': The first derivative at curves ends are zero. Assuming\n  a 1D `y`, ``bc_type=((1, 0.0), (1, 0.0))`` is the same condition.\n* 'natural': The second derivative at curve ends are zero. Assuming\n  a 1D `y`, ``bc_type=((2, 0.0), (2, 0.0))`` is the same condition.\n\nIf `bc_type` is a 2-tuple, the first and the second value will be\napplied at the curve start and end respectively. The tuple values can\nbe one of the previously mentioned strings (except 'periodic') or a\ntuple ``(order, deriv_values)`` allowing to specify arbitrary\nderivatives at curve ends:\n\n* `order`: the derivative order, 1 or 2.\n* `deriv_value`: array_like containing derivative values, shape must\n  be the same as `y`, excluding ``axis`` dimension. For example, if\n  `y` is 1-D, then `deriv_value` must be a scalar. If `y` is 3-D with\n  the shape (n0, n1, n2) and axis=2, then `deriv_value` must be 2-D\n  and have the shape (n0, n1).",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w1j1h574",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs. If 'periodic',\nperiodic extrapolation is used. If None (default), ``extrapolate`` is\nset to 'periodic' for ``bc_type='periodic'`` and to True otherwise.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7nra89zl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.__init__",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ohj2hly",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jexd0mh2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w6ki85e6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iem7zle3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bk6ihsgk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50uzinxc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6mc6xlr9",
            "name": "CubicSpline.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Antiderivative is also the indefinite integral of the function,\n    and derivative is its inverse operation.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of antiderivative to evaluate. Default is 1, i.e., compute\n        the first integral. If negative, the derivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k + n representing\n        the antiderivative of this polynomial.\n    \n    Notes\n    -----\n    The antiderivative returned by this function is continuous and\n    continuously differentiable to order n-1, up to floating point\n    rounding error.\n    \n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb1ac3bac1f966549d8591d471b94cbd8ddfc4151c4105c646a56c4620da09c9",
            "fields": [
                {
                    "id": "uxjskjuy",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicSpline.antiderivative object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qshni8j",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default is 1, i.e., compute\nthe first integral. If negative, the derivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhqmmvjx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.antiderivative",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3x_v8_pg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "48f3bx3x",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nilubnuh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aw1dpnm3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7_u6ag6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rgksqh_2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "otol_0vs",
            "name": "CubicSpline.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type. The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7dd58234a1ffec7a77beb013b92e1fc888ff3476e3440d8d974ad9d2291a50e9",
            "fields": [
                {
                    "id": "vlhp_vfm",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lyf8lbf9",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqh0nj7y",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nm0etla7",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9v49hx1n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.construct_fast",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dpccm1r1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h4o3vnvm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vgwzc6nu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5j7_0vkd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1ppl2n6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0le7cyi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7gmaq5rj",
            "name": "CubicSpline.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of derivative to evaluate. Default is 1, i.e., compute the\n        first derivative. If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k - n representing the derivative\n        of this polynomial.\n    \n    Notes\n    -----\n    Derivatives are evaluated piecewise for each polynomial\n    segment, even if the polynomial is not differentiable at the\n    breakpoints. The polynomial intervals are considered half-open,\n    ``[a, b)``, except for the last interval which is closed\n    ``[a, b]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "698b03f84d294cd7cc25fad7f8e9c617d1ccf4f5c19205970fc97b38849e5d39",
            "fields": [
                {
                    "id": "8q2p_bzs",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicSpline.derivative object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jax5a4o",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default is 1, i.e., compute the\nfirst derivative. If negative, the antiderivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cz655m3_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.derivative",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4bumax1j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zfe37ric",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t845xg6x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_lw6g4x1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eklr_zcg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cje8ymof",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "e3i8q8oh",
            "name": "CubicSpline.extend",
            "description": "Add additional breakpoints and coefficients to the polynomial.\n    \n    Parameters\n    ----------\n    c : ndarray, size (k, m, ...)\n        Additional coefficients for polynomials in intervals. Note that\n        the first additional interval will be formed using one of the\n        ``self.x`` end points.\n    x : ndarray, size (m,)\n        Additional breakpoints. Must be sorted in the same order as\n        ``self.x`` and either to the right or to the left of the current\n        breakpoints.\n    \n    Notes\n    -----\n    This method is not thread safe and must not be executed concurrently\n    with other methods available in this class. Doing so may cause\n    unexpected errors or numerical output mismatches.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6405a6b1193208d63a5f54b2a4c315fb8855e6a3f2473839c37fdda330f75aeb",
            "fields": [
                {
                    "id": "o82hxnng",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicSpline.extend object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y5102tgp",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional coefficients for polynomials in intervals. Note that\nthe first additional interval will be formed using one of the\n``self.x`` end points.",
                    "type": "ndarray, size (k, m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pqc1sxb",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional breakpoints. Must be sorted in the same order as\n``self.x`` and either to the right or to the left of the current\nbreakpoints.",
                    "type": "ndarray, size (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yx9014gd",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.extend",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.extend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1m1gos29",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jo5qhj84",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9wkekt4_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hek4km4z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l0yw7z13",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rrkyjst6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fd2vux1r",
            "name": "CubicSpline.from_bernstein_basis",
            "description": "Construct a piecewise polynomial in the power basis\n    from a polynomial in Bernstein basis.\n    \n    Parameters\n    ----------\n    bp : BPoly\n        A Bernstein basis polynomial, as created by BPoly\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "150d0245fb5fa74c90516e6bbb545a43ff530bbd90dadda26f3d8f9505758c59",
            "fields": [
                {
                    "id": "o9pc6ppx",
                    "encoding": "",
                    "name": "bp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Bernstein basis polynomial, as created by BPoly",
                    "type": "BPoly",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtv8wix3",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6qowxw8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.from_bernstein_basis",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.from_bernstein_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "trwtz00e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "flpfcbr9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kqk703kt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4w4spb08",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2x8whqyb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqicwvj9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "__l6ylyh",
            "name": "CubicSpline.from_spline",
            "description": "Construct a piecewise polynomial from a spline\n    \n    Parameters\n    ----------\n    tck\n        A spline, as returned by `splrep` or a BSpline object.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.\n    \n    Examples\n    --------\n    Construct an interpolating spline and convert it to a `PPoly` instance\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import splrep, PPoly\n    >>> x = np.linspace(0, 1, 11)\n    >>> y = np.sin(2*np.pi*x)\n    >>> tck = splrep(x, y, s=0)\n    >>> p = PPoly.from_spline(tck)\n    >>> isinstance(p, PPoly)\n    True\n    \n    Note that this function only supports 1D splines out of the box.\n    \n    If the ``tck`` object represents a parametric spline (e.g. constructed\n    by `splprep` or a `BSpline` with ``c.ndim > 1``), you will need to loop\n    over the dimensions manually.\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> t = np.linspace(0, 1, 11)\n    >>> x = np.sin(2*np.pi*t)\n    >>> y = np.cos(2*np.pi*t)\n    >>> (t, c, k), u = splprep([x, y], s=0)\n    \n    Note that ``c`` is a list of two arrays of length 11.\n    \n    >>> unew = np.arange(0, 1.01, 0.01)\n    >>> out = splev(unew, (t, c, k))\n    \n    To convert this spline to the power basis, we convert each\n    component of the list of b-spline coefficients, ``c``, into the\n    corresponding cubic polynomial.\n    \n    >>> polys = [PPoly.from_spline((t, cj, k)) for cj in c]\n    >>> polys[0].c.shape\n    (4, 14)\n    \n    Note that the coefficients of the polynomials `polys` are in the\n    power basis and their dimensions reflect just that: here 4 is the order\n    (degree+1), and 14 is the number of intervals---which is nothing but\n    the length of the knot array of the original `tck` minus one.\n    \n    Optionally, we can stack the components into a single `PPoly` along\n    the third dimension:\n    \n    >>> cc = np.dstack([p.c for p in polys])    # has shape = (4, 14, 2)\n    >>> poly = PPoly(cc, polys[0].x)\n    >>> np.allclose(poly(unew).T,     # note the transpose to match `splev`\n    ...             out, atol=1e-15)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7dab1b6b311ff941335e27a999f153a3a62b309760b5e57a80e7c6a2f5ce77b9",
            "fields": [
                {
                    "id": "27yyel7j",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A spline, as returned by `splrep` or a BSpline object.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ulrfa51d",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ylzqbsko",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.from_spline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.from_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "euy5l37k",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_4_9hjzv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qkqr1466",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wc755de5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "igmhzck9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jehar7nb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qk0q6x3h",
            "name": "CubicSpline.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    a : float\n        Lower integration bound\n    b : float\n        Upper integration bound\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used.\n        If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    ig : array_like\n        Definite integral of the piecewise polynomial over [a, b]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "568df29b5ca01da3498fedee67c077a2c52d38a2e41fa59136b813f001c707ab",
            "fields": [
                {
                    "id": "m6st4uhk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicSpline.integrate object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olmfs43h",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vwntr5z9",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0n6bek2x",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used.\nIf None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xmsp5k5q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.integrate",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ol5g_5v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqcsg87q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h49q3kug",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zis135va",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a88z0tsk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bplzw2eu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "u60ucbh_",
            "name": "CubicSpline.roots",
            "description": "Find real roots of the piecewise polynomial.\n    \n    Parameters\n    ----------\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    See Also\n    --------\n    PPoly.solve",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3c0424be0cee842c111696a6fb5e4bb3907d386d78b78ad04bf44654a9217c71",
            "fields": [
                {
                    "id": "h4kn58po",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicSpline.roots object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3asrz7yk",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pn167ik1",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pu8lw7az",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.roots",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ou9wlyeh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90xa804b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c_ve1_sb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iih4y7ju",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dlb6lgxs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bymc2jyk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dls5945g",
            "name": "CubicSpline.solve",
            "description": "Find real solutions of the equation ``pp(x) == y``.\n    \n    Parameters\n    ----------\n    y : float, optional\n        Right-hand side. Default is zero.\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    Notes\n    -----\n    This routine works only on real-valued polynomials.\n    \n    If the piecewise polynomial contains sections that are\n    identically zero, the root list will contain the start point\n    of the corresponding interval, followed by a ``nan`` value.\n    \n    If the polynomial is discontinuous across a breakpoint, and\n    there is a sign change across the breakpoint, this is reported\n    if the `discont` parameter is True.\n    \n    Examples\n    --------\n    \n    Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals\n    ``[-2, 1], [1, 2]``:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import PPoly\n    >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])\n    >>> pp.solve()\n    array([-1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "68072b670ba590829b712675d256ab4e84c4b0ffc5011b191ec8007b76ed6c63",
            "fields": [
                {
                    "id": "ergfk3wx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.CubicSpline.solve object",
                    "type": "Object:scipy.interpolate._cubic.CubicSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "skxx5meq",
                    "encoding": "",
                    "name": "y",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Right-hand side. Default is zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2cuxtsg_",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tp92r6z8",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qayt8kl",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.CubicSpline.solve",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zkzn5ntz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8sobarx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nepvc6c6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "czakbntx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.CubicSpline",
                    "defaultValue": "scipy.interpolate._cubic.CubicSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0td3zi4c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xemrafk0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_kmj2gxt",
            "name": "FloaterHormannInterpolator.__init__",
            "description": "\nFloater-Hormann barycentric rational interpolator (C\u221e smooth on real axis).\n    \n    As described in [1]_, the method of Floater and Hormann computes weights for a\n    barycentric rational interpolant with no poles on the real axis.\n    \n    Parameters\n    ----------\n    x : 1D array_like, shape (n,)\n        1-D array containing values of the independent variable. Values may be real or\n        complex but must be finite.\n    y : array_like, shape (n, ...)\n        Array containing values of the dependent variable. Infinite and NaN values\n        of `y` and corresponding values of `x` will be discarded.\n    d : int, default: 3\n        Integer satisfying ``0 <= d < n``. Floater-Hormann interpolation blends\n        ``n - d`` polynomials of degree `d` together; for ``d = n - 1``, this is\n        equivalent to polynomial interpolation.\n    \n    Attributes\n    ----------\n    weights : array\n        Weights of the barycentric approximation.\n    \n    See Also\n    --------\n    AAA : Barycentric rational approximation of real and complex functions.\n    pade : Pad\u00e9 approximation.\n    \n    Notes\n    -----\n    The Floater-Hormann interpolant is a rational function that interpolates the data\n    with approximation order :math:`O(h^{d+1})`. The rational function blends ``n - d``\n    polynomials of degree `d` together to produce a rational interpolant that contains\n    no poles on the real axis, unlike `AAA`. The interpolant is given\n    by\n    \n    .. math::\n    \n        r(x) = \\frac{\\sum_{i=0}^{n-d} \\lambda_i(x) p_i(x)}\n        {\\sum_{i=0}^{n-d} \\lambda_i(x)},\n    \n    where :math:`p_i(x)` is an interpolating polynomial of at most degree `d` through\n    the points :math:`(x_i,y_i),\\dots,(x_{i+d},y_{i+d})`, and :math:`\\lambda_i(z)` are\n    blending functions defined by\n    \n    .. math::\n    \n        \\lambda_i(x) = \\frac{(-1)^i}{(x - x_i)\\cdots(x - x_{i+d})}.\n    \n    When ``d = n - 1`` this reduces to polynomial interpolation.\n    \n    Due to its stability, the following barycentric representation of the above equation\n    is used for computation\n    \n    .. math::\n    \n        r(z) = \\frac{\\sum_{k=1}^m\\ w_k f_k / (x - x_k)}{\\sum_{k=1}^m w_k / (x - x_k)},\n    \n    where the weights :math:`w_j` are computed as\n    \n    .. math::\n    \n        w_k &= (-1)^{k - d} \\sum_{i \\in J_k} \\prod_{j = i, j \\neq k}^{i + d}\n        1/|x_k - x_j|, \\\\\n        J_k &= \\{ i \\in I: k - d \\leq i \\leq k\\},\\\\\n        I &= \\{0, 1, \\dots, n - d\\}.\n    \n    References\n    ----------\n    .. [1] M.S. Floater and K. Hormann, \"Barycentric rational interpolation with no\n           poles and high rates of approximation\", Numer. Math. 107, 315 (2007).\n           :doi:`10.1007/s00211-007-0093-y`\n    \n    Examples\n    --------\n    \n    Here we compare the method against polynomial interpolation for an example where\n    the polynomial interpolation fails due to Runge's phenomenon.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import (FloaterHormannInterpolator,\n    ...                                BarycentricInterpolator)\n    >>> def f(x):\n    ...     return 1/(1 + x**2)\n    >>> x = np.linspace(-5, 5, num=15)\n    >>> r = FloaterHormannInterpolator(x, f(x))\n    >>> p = BarycentricInterpolator(x, f(x))\n    >>> xx = np.linspace(-5, 5, num=1000)\n    >>> import matplotlib.pyplot as plt\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(xx, f(xx), label=\"f(x)\")\n    >>> ax.plot(xx, r(xx), \"--\", label=\"Floater-Hormann\")\n    >>> ax.plot(xx, p(xx), \"--\", label=\"Polynomial\")\n    >>> ax.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8418bdf4ce711459c461bb55c01ef5ffe2b5147ac49120b127f9ae9ad9878c25",
            "fields": [
                {
                    "id": "nsea6zv9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to FloaterHormannInterpolator object",
                    "type": "Object:scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "00u0abg0",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2qg3cl4",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vb8pkgce",
                    "encoding": "",
                    "name": "d",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Integer satisfying ``0 <= d < n``. Floater-Hormann interpolation blends\n``n - d`` polynomials of degree `d` together; for ``d = n - 1``, this is\nequivalent to polynomial interpolation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qgayhzoa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghjw_zua",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bm_zue1r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pcuh_wen",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "arzzpikf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qtdivfnf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qx9r4w4v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "emxajqu_",
            "name": "FloaterHormannInterpolator.poles",
            "description": "Compute the poles of the rational approximation.\n    \n    Returns\n    -------\n    poles : array\n        Poles of the AAA approximation, repeated according to their multiplicity\n        but not in any specific order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a216a6eddfcaa9aee3fb3f71b6b89a4982e609c8afa6ed22f186b039d57c4290",
            "fields": [
                {
                    "id": "01dvot1c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.FloaterHormannInterpolator.poles object",
                    "type": "Object:scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsarkvby",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.poles",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.poles",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtyjfo0s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iijy76od",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9drybv1i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vj6v_i6y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "azr2rrbh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nxaa2lf7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g51bwczh",
            "name": "FloaterHormannInterpolator.residues",
            "description": "Compute the residues of the poles of the approximation.\n    \n    Returns\n    -------\n    residues : array\n        Residues associated with the `poles` of the approximation",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8b415de5becec018f966a39f8572c9f83ad3e279a07be0473969632f065c6f51",
            "fields": [
                {
                    "id": "sonmtr_d",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.FloaterHormannInterpolator.residues object",
                    "type": "Object:scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wvqhq_k6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.residues",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.residues",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjy6wec0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_iw6sr1o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7zvjkvkh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5tss7eg1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5rowm0pf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pb2jebl0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wjr93lyc",
            "name": "FloaterHormannInterpolator.roots",
            "description": "Compute the zeros of the rational approximation.\n    \n    Returns\n    -------\n    zeros : array\n        Zeros of the AAA approximation, repeated according to their multiplicity\n        but not in any specific order.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e233be07ce64647e5593ab2d7e284b2fa45ca2364136f689965a6b05d5972580",
            "fields": [
                {
                    "id": "9jp3bhxz",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._bary_rational.FloaterHormannInterpolator.roots object",
                    "type": "Object:scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6h5_zho6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.roots",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eojgz575",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1ubrigf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "375rggyl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q648bvlg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "defaultValue": "scipy.interpolate._bary_rational.FloaterHormannInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cua382sh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z59o0n0s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "394qb2en",
            "name": "InterpolatedUnivariateSpline.__init__",
            "description": "\n1-D interpolating spline for a given set of data points.\n    \n    .. legacy:: class\n    \n        Specifically, we recommend using `make_interp_spline` instead.\n    \n    Fits a spline y = spl(x) of degree `k` to the provided `x`, `y` data.\n    Spline function passes through all provided points. Equivalent to\n    `UnivariateSpline` with  `s` = 0.\n    \n    Parameters\n    ----------\n    x : (N,) array_like\n        Input dimension of data points -- must be strictly increasing\n    y : (N,) array_like\n        input dimension of data points\n    w : (N,) array_like, optional\n        Weights for spline fitting.  Must be positive.  If None (default),\n        weights are all 1.\n    bbox : (2,) array_like, optional\n        2-sequence specifying the boundary of the approximation interval. If\n        None (default), ``bbox=[x[0], x[-1]]``.\n    k : int, optional\n        Degree of the smoothing spline.  Must be ``1 <= k <= 5``. Default is\n        ``k = 3``, a cubic spline.\n    ext : int or str, optional\n        Controls the extrapolation mode for elements\n        not in the interval defined by the knot sequence.\n    \n        * if ext=0 or 'extrapolate', return the extrapolated value.\n        * if ext=1 or 'zeros', return 0\n        * if ext=2 or 'raise', raise a ValueError\n        * if ext=3 of 'const', return the boundary value.\n    \n        The default value is 0.\n    \n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination or non-sensical results) if the inputs\n        do contain infinities or NaNs.\n        Default is False.\n    \n    See Also\n    --------\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    LSQUnivariateSpline :\n        a spline for which knots are user-selected\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    splrep :\n        a function to find the B-spline representation of a 1-D curve\n    splev :\n        a function to evaluate a B-spline or its derivatives\n    sproot :\n        a function to find the roots of a cubic B-spline\n    splint :\n        a function to evaluate the definite integral of a B-spline between two\n        given points\n    spalde :\n        a function to evaluate all derivatives of a B-spline\n    \n    Notes\n    -----\n    The number of data points must be larger than the spline degree `k`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import InterpolatedUnivariateSpline\n    >>> rng = np.random.default_rng()\n    >>> x = np.linspace(-3, 3, 50)\n    >>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(50)\n    >>> spl = InterpolatedUnivariateSpline(x, y)\n    >>> plt.plot(x, y, 'ro', ms=5)\n    >>> xs = np.linspace(-3, 3, 1000)\n    >>> plt.plot(xs, spl(xs), 'g', lw=3, alpha=0.7)\n    >>> plt.show()\n    \n    Notice that the ``spl(x)`` interpolates `y`:\n    \n    >>> spl.get_residual()\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8a31cf0f2b768125ae9b5aaaf57c2e50a933b9b3ea98eec8e7149d1d46c7bd72",
            "fields": [
                {
                    "id": "cvfqmiha",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to InterpolatedUnivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4xrzh16a",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input dimension of data points -- must be strictly increasing",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qkfi053j",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "input dimension of data points",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vr2jhh2y",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights for spline fitting.  Must be positive.  If None (default),\nweights are all 1.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lcxhx872",
                    "encoding": "",
                    "name": "bbox",
                    "value": [
                        null,
                        null
                    ],
                    "defaultValue": [
                        null,
                        null
                    ],
                    "description": "2-sequence specifying the boundary of the approximation interval. If\nNone (default), ``bbox=[x[0], x[-1]]``.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yry5sq1y",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Degree of the smoothing spline.  Must be ``1 <= k <= 5``. Default is\n``k = 3``, a cubic spline.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wfawc68",
                    "encoding": "",
                    "name": "ext",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the extrapolation mode for elements\nnot in the interval defined by the knot sequence.\n\n* if ext=0 or 'extrapolate', return the extrapolated value.\n* if ext=1 or 'zeros', return 0\n* if ext=2 or 'raise', raise a ValueError\n* if ext=3 of 'const', return the boundary value.\n\nThe default value is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qltvugmr",
                    "encoding": "",
                    "name": "check_finite",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination or non-sensical results) if the inputs\ndo contain infinities or NaNs.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwukojmm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8aaz34ak",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u87zmdca",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_61ffeeu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9g3ul8z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vevk3x6x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccf3bher",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "1jzzu1hb",
            "name": "InterpolatedUnivariateSpline.antiderivative",
            "description": "Construct a new spline representing the antiderivative of this spline.\n    \n    Parameters\n    ----------\n    n : int, optional\n        Order of antiderivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    spline : UnivariateSpline\n        Spline of order k2=k+n representing the antiderivative of this\n        spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    See Also\n    --------\n    splantider, derivative\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, np.pi/2, 70)\n    >>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)\n    >>> spl = UnivariateSpline(x, y, s=0)\n    \n    The derivative is the inverse operation of the antiderivative,\n    although some floating point error accumulates:\n    \n    >>> spl(1.7), spl.antiderivative().derivative()(1.7)\n    (array(2.1565429877197317), array(2.1565429877201865))\n    \n    Antiderivative can be used to evaluate definite integrals:\n    \n    >>> ispl = spl.antiderivative()\n    >>> ispl(np.pi/2) - ispl(0)\n    2.2572053588768486\n    \n    This is indeed an approximation to the complete elliptic integral\n    :math:`K(m) = \\int_0^{\\pi/2} [1 - m\\sin^2 x]^{-1/2} dx`:\n    \n    >>> from scipy.special import ellipk\n    >>> ellipk(0.8)\n    2.2572053268208538",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "00dac4accb169b882565904066132e436d24f3c5fafcf24a1a2fdc21bcefabd0",
            "fields": [
                {
                    "id": "0nyfy61f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.antiderivative object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qwpwzw9z",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nw4ifpng",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.antiderivative",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3p_clzd8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5bhgeeu9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wgsju9zs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gguhdwpq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "venqsz51",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qvwkdmfo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k289grdb",
            "name": "InterpolatedUnivariateSpline.derivative",
            "description": "Construct a new spline representing the derivative of this spline.\n    \n    Parameters\n    ----------\n    n : int, optional\n        Order of derivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    spline : UnivariateSpline\n        Spline of order k2=k-n representing the derivative of this\n        spline.\n    \n    See Also\n    --------\n    splder, antiderivative\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    This can be used for finding maxima of a curve:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 10, 70)\n    >>> y = np.sin(x)\n    >>> spl = UnivariateSpline(x, y, k=4, s=0)\n    \n    Now, differentiate the spline and find the zeros of the\n    derivative. (NB: `sproot` only works for order 3 splines, so we\n    fit an order 4 spline):\n    \n    >>> spl.derivative().roots() / np.pi\n    array([ 0.50000001,  1.5       ,  2.49999998])\n    \n    This agrees well with roots :math:`\\pi/2 + n\\pi` of\n    :math:`\\cos(x) = \\sin'(x)`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "03bfeb2fe0bf2571bb8dbf27e558a5ff8ed965760fa1de7335d58ce28cc48609",
            "fields": [
                {
                    "id": "bclj3wbu",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rf3hzi0f",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnqbwztt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fvlsgmi3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hq0r20id",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0n45fxw4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "192rm29p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d9hesskm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6q_8qz2s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "45hxy8jt",
            "name": "InterpolatedUnivariateSpline.derivatives",
            "description": "Return all derivatives of the spline at the point x.\n    \n    Parameters\n    ----------\n    x : float\n        The point to evaluate the derivatives at.\n    \n    Returns\n    -------\n    der : ndarray, shape(k+1,)\n        Derivatives of the orders 0 to k.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 3, 11)\n    >>> y = x**2\n    >>> spl = UnivariateSpline(x, y)\n    >>> spl.derivatives(1.5)\n    array([2.25, 3.0, 2.0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "198bb045379e0842f05944795d6aa4d1e26a7f930901b06e86ed5c2bc7acc74a",
            "fields": [
                {
                    "id": "3o2irth7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.derivatives object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hnyz092",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point to evaluate the derivatives at.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmh8gu1w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.derivatives",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.derivatives",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8t9z6ndw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6zq5tm_2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5nsxo4gt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gjq3yxjk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ae5gzw0u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "njlhs70w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4gy_kdxf",
            "name": "InterpolatedUnivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1451657b111b1ceb062bf115b707f3454057f14bf8c731be9707cddea524577c",
            "fields": [
                {
                    "id": "kjmr8_0f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8xy21e1b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nk2c98_r",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "erhud9e8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "18cttlz5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r07up2cx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4lhk7224",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z8kzkcrf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "thpky8h7",
            "name": "InterpolatedUnivariateSpline.get_knots",
            "description": "Return positions of interior knots of the spline.\n    \n    Internally, the knot vector contains ``2*k`` additional boundary knots.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "57c98dca2459dfacdbdf15ccd981134069f4ff60c0fb047efc2a2b6691f6bf83",
            "fields": [
                {
                    "id": "m1riva10",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mx96ueah",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm9xumor",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqyumc5p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bix9lcok",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q89acxlo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aofo50lq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m27btied",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hcsht0ga",
            "name": "InterpolatedUnivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline approximation.\n    \n    This is equivalent to::\n    \n         sum((w[i] * (y[i]-spl(x[i])))**2, axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "01ef697c4fddc2b18cac6f764f2717cdb3dbda2ce34fcc4392073e4b5e878adc",
            "fields": [
                {
                    "id": "wxnoyf30",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ics5u5ey",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x4wmy_zh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgdy6a0z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "09_nhqn6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45yckmdc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_pgs_dt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "88hv24aw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "vfywdmqj",
            "name": "InterpolatedUnivariateSpline.integral",
            "description": "Return definite integral of the spline between two given points.\n    \n    Parameters\n    ----------\n    a : float\n        Lower limit of integration.\n    b : float\n        Upper limit of integration.\n    \n    Returns\n    -------\n    integral : float\n        The value of the definite integral of the spline between limits.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 3, 11)\n    >>> y = x**2\n    >>> spl = UnivariateSpline(x, y)\n    >>> spl.integral(0, 3)\n    9.0\n    \n    which agrees with :math:`\\int x^2 dx = x^3 / 3` between the limits\n    of 0 and 3.\n    \n    A caveat is that this routine assumes the spline to be zero outside of\n    the data limits:\n    \n    >>> spl.integral(-1, 4)\n    9.0\n    >>> spl.integral(-1, 0)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2463f74f020cc5bc293462e0df2768de930f4d183bacf5ddf027c5ec3846530f",
            "fields": [
                {
                    "id": "urqee_6b",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yhm4yw4o",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7uq7mxwz",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dktt_99t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "687iy4gr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ia0_mq0p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z_48fqh9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gr3tr97a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q35kajvo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "54qkvfs9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5tm4su8h",
            "name": "InterpolatedUnivariateSpline.roots",
            "description": "Return the zeros of the spline.\n    \n    Notes\n    -----\n    Restriction: only cubic splines are supported by FITPACK. For non-cubic\n    splines, use `PPoly.root` (see below for an example).\n    \n    Examples\n    --------\n    \n    For some data, this method may miss a root. This happens when one of\n    the spline knots (which FITPACK places automatically) happens to\n    coincide with the true root. A workaround is to convert to `PPoly`,\n    which uses a different root-finding algorithm.\n    \n    For example,\n    \n    >>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]\n    >>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,\n    ...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,\n    ...      6.520430e-03,  8.170770e-03]\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> spl = UnivariateSpline(x, y, s=0)\n    >>> spl.roots()\n    array([], dtype=float64)\n    \n    Converting to a PPoly object does find the roots at `x=2`:\n    \n    >>> from scipy.interpolate import splrep, PPoly\n    >>> tck = splrep(x, y, s=0)\n    >>> ppoly = PPoly.from_spline(tck)\n    >>> ppoly.roots(extrapolate=False)\n    array([2.])\n    \n    See Also\n    --------\n    sproot\n    PPoly.roots",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2f7a8eeb83a1ec5bac3a6ba823e76405c2f73d4bfb3df346468d8c69afc92e2e",
            "fields": [
                {
                    "id": "58ztz7gx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.roots object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ukc6i9fa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.roots",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_povcth",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_65zkv7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o3cpq7iw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hi1yva1_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4z33y1hu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbfekgjd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fqyuvw68",
            "name": "InterpolatedUnivariateSpline.set_smoothing_factor",
            "description": "Continue spline computation with the given smoothing\n    factor s and with the knots found at the last call.\n    \n    This routine modifies the spline in place.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f1b55bacb6a04da77beca060b0ffd3363a40fc1063995cf206a2acbb243d90b0",
            "fields": [
                {
                    "id": "f3dcjvpo",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.set_smoothing_factor object",
                    "type": "Object:scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4xm6tss0",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yo84qvjn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.set_smoothing_factor",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.set_smoothing_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pp8gpah",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdxh7i0g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dblja0z1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwgav5o3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8lyt0_73",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fer67dta",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g2g9evtt",
            "name": "InterpolatedUnivariateSpline.validate_input",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b504a30fba043dd023a9d15314201af9976d7f0e27148f77af9e4ab578ae56c3",
            "fields": [
                {
                    "id": "h3squxdj",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ia7gmz3n",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zyzhz3j",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwg0tgis",
                    "encoding": "",
                    "name": "bbox",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cn9bi30w",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qdm5f6d8",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gqsct27n",
                    "encoding": "",
                    "name": "ext",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7vujd3yi",
                    "encoding": "",
                    "name": "check_finite",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k9rvsjuw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.validate_input",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.validate_input",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hh88jzjk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bjp_qfs6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y900o6ec",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ks6wp7j1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.InterpolatedUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4_c32s7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1q70a7eu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4a1o4p51",
            "name": "KroghInterpolator.__init__",
            "description": "\nKrogh interpolator (C\u221e smooth).\n    \n    The polynomial passes through all the pairs ``(xi, yi)``. One may\n    additionally specify a number of derivatives at each point `xi`;\n    this is done by repeating the value `xi` and specifying the\n    derivatives as successive `yi` values.\n    \n    Allows evaluation of the polynomial and all its derivatives.\n    For reasons of numerical stability, this function does not compute\n    the coefficients of the polynomial, although they can be obtained\n    by evaluating all the derivatives.\n    \n    Parameters\n    ----------\n    xi : array_like, shape (npoints, )\n        Known x-coordinates. Must be sorted in increasing order.\n    yi : array_like, shape (..., npoints, ...)\n        Known y-coordinates. When an xi occurs two or more times in\n        a row, the corresponding yi's represent derivative values. The length of `yi`\n        along the interpolation axis must be equal to the length of `xi`. Use the\n        `axis` parameter to select the correct axis.\n    axis : int, optional\n        Axis in the `yi` array corresponding to the x-coordinate values. Defaults to\n        ``axis=0``.\n    \n    Notes\n    -----\n    Be aware that the algorithms implemented here are not necessarily\n    the most numerically stable known. Moreover, even in a world of\n    exact computation, unless the x coordinates are chosen very\n    carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice -\n    polynomial interpolation itself is a very ill-conditioned process\n    due to the Runge phenomenon. In general, even with well-chosen\n    x values, degrees higher than about thirty cause problems with\n    numerical instability in this code.\n    \n    Based on [1]_.\n    \n    References\n    ----------\n    .. [1] Krogh, \"Efficient Algorithms for Polynomial Interpolation\n        and Numerical Differentiation\", 1970.\n    \n    Examples\n    --------\n    To produce a polynomial that is zero at 0 and 1 and has\n    derivative 2 at 0, call\n    \n    >>> from scipy.interpolate import KroghInterpolator\n    >>> KroghInterpolator([0,0,1],[0,2,0])\n    \n    This constructs the quadratic :math:`2x^2-2x`. The derivative condition\n    is indicated by the repeated zero in the `xi` array; the corresponding\n    yi values are 0, the function value, and 2, the derivative value.\n    \n    For another example, given `xi`, `yi`, and a derivative `ypi` for each\n    point, appropriate arrays can be constructed as:\n    \n    >>> import numpy as np\n    >>> rng = np.random.default_rng()\n    >>> xi = np.linspace(0, 1, 5)\n    >>> yi, ypi = rng.random((2, 5))\n    >>> xi_k, yi_k = np.repeat(xi, 2), np.ravel(np.dstack((yi,ypi)))\n    >>> KroghInterpolator(xi_k, yi_k)\n    \n    To produce a vector-valued polynomial, supply a higher-dimensional\n    array for `yi`:\n    \n    >>> KroghInterpolator([0,1],[[2,3],[4,5]])\n    \n    This constructs a linear polynomial giving (2,3) at 0 and (4,5) at 1.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "38519ab1823cbc0e2f204c085c3072fd138d4b9b74547b1012094f8828d16a63",
            "fields": [
                {
                    "id": "aejah8n7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to KroghInterpolator object",
                    "type": "Object:scipy.interpolate._polyint.KroghInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "re3p26t7",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Known x-coordinates. Must be sorted in increasing order.",
                    "type": "arraylike, shape (npoints, )",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4sppdhus",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Known y-coordinates. When an xi occurs two or more times in\na row, the corresponding yi's represent derivative values. The length of `yi`\nalong the interpolation axis must be equal to the length of `xi`. Use the\n`axis` parameter to select the correct axis.",
                    "type": "arraylike, shape (..., npoints, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9yrnvr5",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the `yi` array corresponding to the x-coordinate values. Defaults to\n``axis=0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ch27dhzn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.KroghInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._polyint.KroghInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntoe2od9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m96dxlj9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4b9473e9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xzwsa_kc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.KroghInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.KroghInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aj_bcztg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ie__sdya",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "kug6i4i9",
            "name": "KroghInterpolator.derivative",
            "description": "Evaluate a single derivative of the polynomial at the point `x`.\n    \n    Parameters\n    ----------\n    x : array_like\n        Point or points at which to evaluate the derivatives\n    \n    der : integer, optional\n        Which derivative to evaluate (default: first derivative).\n        This number includes the function value as 0th derivative.\n    \n    Returns\n    -------\n    d : ndarray\n        Derivative interpolated at the x-points. Shape of `d` is\n        determined by replacing the interpolation axis in the\n        original array with the shape of `x`.\n    \n    Notes\n    -----\n    This may be computed by evaluating all derivatives up to the desired\n    one (using self.derivatives()) and then discarding the rest.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "350fe503e16de977327b9a3bae6cd6f311fb6fb5d60c4a7e6701a7f24a9d1cb0",
            "fields": [
                {
                    "id": "glmlmzxd",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._polyint.KroghInterpolator.derivative object",
                    "type": "Object:scipy.interpolate._polyint.KroghInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__ic981h",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the derivatives",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h9gexq38",
                    "encoding": "",
                    "name": "der",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Which derivative to evaluate (default: first derivative).\nThis number includes the function value as 0th derivative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5gn05ptn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.KroghInterpolator.derivative",
                    "defaultValue": "scipy.interpolate._polyint.KroghInterpolator.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xtc_aun",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qeymrkye",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2tg06v0c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "txnd35rw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.KroghInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.KroghInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2molxdpc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nchexzg5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9_uvuagy",
            "name": "KroghInterpolator.derivatives",
            "description": "Evaluate several derivatives of the polynomial at the point `x`\n    \n    Produce an array of derivatives evaluated at the point `x`.\n    \n    Parameters\n    ----------\n    x : array_like\n        Point or points at which to evaluate the derivatives\n    der : int or list or None, optional\n        How many derivatives to evaluate, or None for all potentially\n        nonzero derivatives (that is, a number equal to the number\n        of points), or a list of derivatives to evaluate. This number\n        includes the function value as the '0th' derivative.\n    \n    Returns\n    -------\n    d : ndarray\n        Array with derivatives; ``d[j]`` contains the jth derivative.\n        Shape of ``d[j]`` is determined by replacing the interpolation\n        axis in the original array with the shape of `x`.\n    \n    Examples\n    --------\n    >>> from scipy.interpolate import KroghInterpolator\n    >>> KroghInterpolator([0,0,0],[1,2,3]).derivatives(0)\n    array([1.0,2.0,3.0])\n    >>> KroghInterpolator([0,0,0],[1,2,3]).derivatives([0,0])\n    array([[1.0,1.0],\n           [2.0,2.0],\n           [3.0,3.0]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2dda1de39394090040958e61b1998b32f7e2e3edd9252dfe4116d1938d9073fc",
            "fields": [
                {
                    "id": "p7t1i9dc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._polyint.KroghInterpolator.derivatives object",
                    "type": "Object:scipy.interpolate._polyint.KroghInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dfw5n0vh",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the derivatives",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhms0tt9",
                    "encoding": "",
                    "name": "der",
                    "value": "",
                    "defaultValue": "",
                    "description": "How many derivatives to evaluate, or None for all potentially\nnonzero derivatives (that is, a number equal to the number\nof points), or a list of derivatives to evaluate. This number\nincludes the function value as the '0th' derivative.",
                    "type": "int or list or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8guznwg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._polyint.KroghInterpolator.derivatives",
                    "defaultValue": "scipy.interpolate._polyint.KroghInterpolator.derivatives",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "858fzgsw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3z3q_dob",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0uv0crfp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufbqsr__",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._polyint.KroghInterpolator",
                    "defaultValue": "scipy.interpolate._polyint.KroghInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xlyov_nh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ohdg7qw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ghwq4l9q",
            "name": "LSQBivariateSpline.__init__",
            "description": "\nWeighted least-squares bivariate spline approximation.\n    \n    Parameters\n    ----------\n    x, y, z : array_like\n        1-D sequences of data points (order is not important).\n    tx, ty : array_like\n        Strictly ordered 1-D sequences of knots coordinates.\n    w : array_like, optional\n        Positive 1-D array of weights, of the same length as `x`, `y` and `z`.\n    bbox : (4,) array_like, optional\n        Sequence of length 4 specifying the boundary of the rectangular\n        approximation domain.  By default,\n        ``bbox=[min(x,tx),max(x,tx), min(y,ty),max(y,ty)]``.\n    kx, ky : ints, optional\n        Degrees of the bivariate spline. Default is 3.\n    eps : float, optional\n        A threshold for determining the effective rank of an over-determined\n        linear system of equations. `eps` should have a value within the open\n        interval ``(0, 1)``, the default is 1e-16.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh.\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    \n    Notes\n    -----\n    The length of `x`, `y` and `z` should be at least ``(kx+1) * (ky+1)``.\n    \n    If the input data is such that input dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolating.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e077127a06467d1b81e573d589ad348cd4e89a33ab7e2d366ca3c68661125349",
            "fields": [
                {
                    "id": "zdz5_kfo",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to LSQBivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0scmzorh",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fy5ddff3",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7drktcpk",
                    "encoding": "",
                    "name": "z",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3gn9j29p",
                    "encoding": "",
                    "name": "tx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l4a4w371",
                    "encoding": "",
                    "name": "ty",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfnu5txy",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positive 1-D array of weights, of the same length as `x`, `y` and `z`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "roea5su_",
                    "encoding": "",
                    "name": "bbox",
                    "value": [
                        null,
                        null,
                        null,
                        null
                    ],
                    "defaultValue": [
                        null,
                        null,
                        null,
                        null
                    ],
                    "description": "Sequence of length 4 specifying the boundary of the rectangular\napproximation domain.  By default,\n``bbox=[min(x,tx),max(x,tx), min(y,ty),max(y,ty)]``.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7yr1km7",
                    "encoding": "",
                    "name": "kx",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7ppis2g",
                    "encoding": "",
                    "name": "ky",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mo_30w0",
                    "encoding": "",
                    "name": "eps",
                    "value": "",
                    "defaultValue": "",
                    "description": "A threshold for determining the effective rank of an over-determined\nlinear system of equations. `eps` should have a value within the open\ninterval ``(0, 1)``, the default is 1e-16.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tththci7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6reowdf",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b0vhqofr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mmlf4pp1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qx5vrx_1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x07b6s1j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mucjyus6",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rudubnk9",
            "name": "LSQBivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(xi[i], yi[i]),\n    i=0,...,len(xi)-1``.\n    \n    Parameters\n    ----------\n    xi, yi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        ``np.meshgrid(..., indexing=\"ij\")`` and inconsistent with the\n        default ordering ``np.meshgrid(..., indexing=\"xy\")``.\n    dx : int, optional\n        Order of x-derivative\n    \n        .. versionadded:: 0.14.0\n    dy : int, optional\n        Order of y-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to bilinearly interpolate an exponentially decaying\n    function in 2 dimensions.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectBivariateSpline\n    >>> def f(x, y):\n    ...     return np.exp(-np.sqrt((x / 2) ** 2 + y**2))\n    \n    We sample the function on a coarse grid and set up the interpolator. Note that\n    the default ``indexing=\"xy\"`` of meshgrid would result in an unexpected\n    (transposed) result after interpolation.\n    \n    >>> xarr = np.linspace(-3, 3, 21)\n    >>> yarr = np.linspace(-3, 3, 21)\n    >>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=\"ij\")\n    >>> zdata = f(xgrid, ygrid)\n    >>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)\n    \n    Next we sample the function along a diagonal slice through the coordinate space\n    on a finer grid using interpolation.\n    \n    >>> xinterp = np.linspace(-3, 3, 201)\n    >>> yinterp = np.linspace(3, -3, 201)\n    >>> zinterp = rbs.ev(xinterp, yinterp)\n    \n    And check that the interpolation passes through the function evaluations as a\n    function of the distance from the origin along the slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sqrt(xarr**2 + yarr**2), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sqrt(xinterp**2 + yinterp**2), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b513f040629fea5404aaa6825472bfe25f79612e59bfeb0d25c5635c4959d0dd",
            "fields": [
                {
                    "id": "_3wxpfvf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQBivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9jviu_u0",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbnqerq5",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fkwqpddu",
                    "encoding": "",
                    "name": "dx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of x-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pb2bf2t_",
                    "encoding": "",
                    "name": "dy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of y-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_f6a1b7x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4__smbm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4w0b8rfx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h6wwox61",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tyebna31",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ktj5speb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jo0ibsly",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "6kbxg3cw",
            "name": "LSQBivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2c7f6c09563eff529f817e64972bbbe7ff136902df361b8e53a068737945c84f",
            "fields": [
                {
                    "id": "57pd156z",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQBivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yu0yz25s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtovji0g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uqffbegi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e235xra0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1zu4r__",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ep5240y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utehgf0b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t_dtkq1o",
            "name": "LSQBivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3a7d71c644b752e87b43109453c84caa993a950de29847633ce9ac40458fcc90",
            "fields": [
                {
                    "id": "fbfiufw6",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQBivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ia9ygp1r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dqu_za_e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmmrpzmz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "idr3vjvw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zucoz7js",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hcr60a63",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvi6zsug",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "43u7zyv9",
            "name": "LSQBivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b8f92618146567ea5780b83569f279ca569f329fe06f7fc4b8776434df0f048b",
            "fields": [
                {
                    "id": "muyf_i_k",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQBivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgo2ky9h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mseau0s8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ca13odc9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pqhmkzh3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mk47afku",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhuso05t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g3nyz3bq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t7ikf028",
            "name": "LSQBivariateSpline.integral",
            "description": "Evaluate the integral of the spline over area [xa,xb] x [ya,yb].\n    \n    Parameters\n    ----------\n    xa, xb : float\n        The end-points of the x integration interval.\n    ya, yb : float\n        The end-points of the y integration interval.\n    \n    Returns\n    -------\n    integ : float\n        The value of the resulting integral.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56a66537dc56a326128641745409a53f56df3c87083c0e28ea2c334df6916b31",
            "fields": [
                {
                    "id": "bad7fcqx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQBivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hy8pgf7q",
                    "encoding": "",
                    "name": "xa",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jcfil23",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6myphc6j",
                    "encoding": "",
                    "name": "ya",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u12jy26_",
                    "encoding": "",
                    "name": "yb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zcz2j40",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gwr1uqg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2lrbhifv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q7nylr9j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "howp5we_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l164gxhv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mtha9s2r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fk0qktrh",
            "name": "LSQBivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f6af98332a6e3e6080b187f9d8d63fb25577dab6a50e5d92815b3204656d2c65",
            "fields": [
                {
                    "id": "l79c_ptt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQBivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iw8ec__8",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6indl279",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qf8qk1nh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "is4xgbl8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n3eydnqi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "j1a40sfc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kzmucdos",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d074j1_c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvrlr2ms",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nlfp69rh",
            "name": "LSQSphereBivariateSpline.__init__",
            "description": "\nWeighted least-squares bivariate spline approximation in spherical\n    coordinates.\n    \n    Determines a smoothing bicubic spline according to a given\n    set of knots in the `theta` and `phi` directions.\n    \n    .. versionadded:: 0.11.0\n    \n    Parameters\n    ----------\n    theta, phi, r : array_like\n        1-D sequences of data points (order is not important). Coordinates\n        must be given in radians. Theta must lie within the interval\n        ``[0, pi]``, and phi must lie within the interval ``[0, 2pi]``.\n    tt, tp : array_like\n        Strictly ordered 1-D sequences of knots coordinates.\n        Coordinates must satisfy ``0 < tt[i] < pi``, ``0 < tp[i] < 2*pi``.\n    w : array_like, optional\n        Positive 1-D sequence of weights, of the same length as `theta`, `phi`\n        and `r`.\n    eps : float, optional\n        A threshold for determining the effective rank of an over-determined\n        linear system of equations. `eps` should have a value within the\n        open interval ``(0, 1)``, the default is 1e-16.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh.\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    \n    Notes\n    -----\n    For more information, see the FITPACK_ site about this function.\n    \n    .. _FITPACK: http://www.netlib.org/dierckx/sphere.f\n    \n    Examples\n    --------\n    Suppose we have global data on a coarse grid (the input data does not\n    have to be on a grid):\n    \n    >>> from scipy.interpolate import LSQSphereBivariateSpline\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    \n    >>> theta = np.linspace(0, np.pi, num=7)\n    >>> phi = np.linspace(0, 2*np.pi, num=9)\n    >>> data = np.empty((theta.shape[0], phi.shape[0]))\n    >>> data[:,0], data[0,:], data[-1,:] = 0., 0., 0.\n    >>> data[1:-1,1], data[1:-1,-1] = 1., 1.\n    >>> data[1,1:-1], data[-2,1:-1] = 1., 1.\n    >>> data[2:-2,2], data[2:-2,-2] = 2., 2.\n    >>> data[2,2:-2], data[-3,2:-2] = 2., 2.\n    >>> data[3,3:-2] = 3.\n    >>> data = np.roll(data, 4, 1)\n    \n    We need to set up the interpolator object. Here, we must also specify the\n    coordinates of the knots to use.\n    \n    >>> lats, lons = np.meshgrid(theta, phi)\n    >>> knotst, knotsp = theta.copy(), phi.copy()\n    >>> knotst[0] += .0001\n    >>> knotst[-1] -= .0001\n    >>> knotsp[0] += .0001\n    >>> knotsp[-1] -= .0001\n    >>> lut = LSQSphereBivariateSpline(lats.ravel(), lons.ravel(),\n    ...                                data.T.ravel(), knotst, knotsp)\n    \n    As a first test, we'll see what the algorithm returns when run on the\n    input coordinates\n    \n    >>> data_orig = lut(theta, phi)\n    \n    Finally we interpolate the data to a finer grid\n    \n    >>> fine_lats = np.linspace(0., np.pi, 70)\n    >>> fine_lons = np.linspace(0., 2*np.pi, 90)\n    >>> data_lsq = lut(fine_lats, fine_lons)\n    \n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(131)\n    >>> ax1.imshow(data, interpolation='nearest')\n    >>> ax2 = fig.add_subplot(132)\n    >>> ax2.imshow(data_orig, interpolation='nearest')\n    >>> ax3 = fig.add_subplot(133)\n    >>> ax3.imshow(data_lsq, interpolation='nearest')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0c05c610b9b48de67a7922ef10e10284acbe0dae0346e14a0f1d3ccaeabb5f3a",
            "fields": [
                {
                    "id": "jkunspns",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to LSQSphereBivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6hxmwxa",
                    "encoding": "",
                    "name": "theta",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0txggpn_",
                    "encoding": "",
                    "name": "phi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h2x4219i",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qykxfdwh",
                    "encoding": "",
                    "name": "tt",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxyeemha",
                    "encoding": "",
                    "name": "tp",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "titanbea",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positive 1-D sequence of weights, of the same length as `theta`, `phi`\nand `r`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zv0z73y",
                    "encoding": "",
                    "name": "eps",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "A threshold for determining the effective rank of an over-determined\nlinear system of equations. `eps` should have a value within the\nopen interval ``(0, 1)``, the default is 1e-16.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jh6lc86f",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qyxz496o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvb7l47w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h1vyabcq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zf4yiv4y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b7d2u0ah",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aybxlqd0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8klvhbbp",
            "name": "LSQSphereBivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(theta[i], phi[i]),\n    i=0,...,len(theta)-1``.\n    \n    Parameters\n    ----------\n    theta, phi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        np.meshgrid(..., indexing=\"ij\") and inconsistent with the\n        default ordering np.meshgrid(..., indexing=\"xy\").\n    dtheta : int, optional\n        Order of theta-derivative\n    \n        .. versionadded:: 0.14.0\n    dphi : int, optional\n        Order of phi-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to use splines to interpolate a bivariate function on a\n    sphere. The value of the function is known on a grid of longitudes and\n    colatitudes.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectSphereBivariateSpline\n    >>> def f(theta, phi):\n    ...     return np.sin(theta) * np.cos(phi)\n    \n    We evaluate the function on the grid. Note that the default indexing=\"xy\"\n    of meshgrid would result in an unexpected (transposed) result after\n    interpolation.\n    \n    >>> thetaarr = np.linspace(0, np.pi, 22)[1:-1]\n    >>> phiarr = np.linspace(0, 2 * np.pi, 21)[:-1]\n    >>> thetagrid, phigrid = np.meshgrid(thetaarr, phiarr, indexing=\"ij\")\n    >>> zdata = f(thetagrid, phigrid)\n    \n    We next set up the interpolator and use it to evaluate the function\n    at points not on the original grid.\n    \n    >>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)\n    >>> thetainterp = np.linspace(thetaarr[0], thetaarr[-1], 200)\n    >>> phiinterp = np.linspace(phiarr[0], phiarr[-1], 200)\n    >>> zinterp = rsbs.ev(thetainterp, phiinterp)\n    \n    Finally we plot the original data for a diagonal slice through the\n    initial grid, and the spline approximation along the same slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sin(thetaarr) * np.sin(phiarr), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sin(thetainterp) * np.sin(phiinterp), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "819ac873a22dee9843beaf66d97875c84ccabcc5c3853ad535f694e1b3a060b9",
            "fields": [
                {
                    "id": "atx_5fgf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQSphereBivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7745kx8m",
                    "encoding": "",
                    "name": "theta",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ifljvwiz",
                    "encoding": "",
                    "name": "phi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fffermb3",
                    "encoding": "",
                    "name": "dtheta",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of theta-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ck1enj1e",
                    "encoding": "",
                    "name": "dphi",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of phi-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9pw9ups8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghr412ev",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aog5_feo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eby7la15",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rfb2xm7t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0k6n9f_4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g97q_vy2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "38vpi6x6",
            "name": "LSQSphereBivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5afb7a06511cc41696bc4583099beebf1ed88a03cc2c2e5a776a7a026d2316f5",
            "fields": [
                {
                    "id": "x446yw8p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "048o38xb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kwgddmj0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ypzy_t4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v_lxw92j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8gacc25n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xg_r32fs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "madg6v4_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "0zvzaikm",
            "name": "LSQSphereBivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4658f74f9f2c239bca08478eaa7b93469a75068794384fe2ec51d7995ed54398",
            "fields": [
                {
                    "id": "1pudlicw",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dkiuma1t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9j4wcne6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ixsissor",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "v1hsuj6i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdkp60da",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7aknyjmk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mugrcszi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "076yeuqs",
            "name": "LSQSphereBivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "67ca832e0ed6b543e7735115c751c412e918b8db2199310138d0e3972e668321",
            "fields": [
                {
                    "id": "jdps9xie",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_nohlzw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4pdbngl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmms22po",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bqxx6d10",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bm8puwe_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ebu2een6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g4ubw7ez",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "i9b2yn00",
            "name": "LSQSphereBivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fbd3952ff25310b2d60fc9cbb2003720515955847dd240e6db24f99fc5c5510b",
            "fields": [
                {
                    "id": "jekct3ai",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQSphereBivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aijuf49b",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4x02vq5m",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpo2ae9i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5905p1hl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fr5202zu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uw70pfn0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y5ubrj8a",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y7fp_owm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f5ridd2v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "nqzfcp0_",
            "name": "LSQUnivariateSpline.__init__",
            "description": "\n1-D spline with explicit internal knots.\n    \n    .. legacy:: class\n    \n        Specifically, we recommend using `make_lsq_spline` instead.\n    \n    \n    Fits a spline y = spl(x) of degree `k` to the provided `x`, `y` data.  `t`\n    specifies the internal knots of the spline\n    \n    Parameters\n    ----------\n    x : (N,) array_like\n        Input dimension of data points -- must be increasing\n    y : (N,) array_like\n        Input dimension of data points\n    t : (M,) array_like\n        interior knots of the spline.  Must be in ascending order and::\n    \n            bbox[0] < t[0] < ... < t[-1] < bbox[-1]\n    \n    w : (N,) array_like, optional\n        weights for spline fitting. Must be positive. If None (default),\n        weights are all 1.\n    bbox : (2,) array_like, optional\n        2-sequence specifying the boundary of the approximation interval. If\n        None (default), ``bbox = [x[0], x[-1]]``.\n    k : int, optional\n        Degree of the smoothing spline.  Must be 1 <= `k` <= 5.\n        Default is `k` = 3, a cubic spline.\n    ext : int or str, optional\n        Controls the extrapolation mode for elements\n        not in the interval defined by the knot sequence.\n    \n        * if ext=0 or 'extrapolate', return the extrapolated value.\n        * if ext=1 or 'zeros', return 0\n        * if ext=2 or 'raise', raise a ValueError\n        * if ext=3 of 'const', return the boundary value.\n    \n        The default value is 0.\n    \n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination or non-sensical results) if the inputs\n        do contain infinities or NaNs.\n        Default is False.\n    \n    Raises\n    ------\n    ValueError\n        If the interior knots do not satisfy the Schoenberg-Whitney conditions\n    \n    See Also\n    --------\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    InterpolatedUnivariateSpline :\n        a interpolating univariate spline for a given set of data points.\n    splrep :\n        a function to find the B-spline representation of a 1-D curve\n    splev :\n        a function to evaluate a B-spline or its derivatives\n    sproot :\n        a function to find the roots of a cubic B-spline\n    splint :\n        a function to evaluate the definite integral of a B-spline between two\n        given points\n    spalde :\n        a function to evaluate all derivatives of a B-spline\n    \n    Notes\n    -----\n    The number of data points must be larger than the spline degree `k`.\n    \n    Knots `t` must satisfy the Schoenberg-Whitney conditions,\n    i.e., there must be a subset of data points ``x[j]`` such that\n    ``t[j] < x[j] < t[j+k+1]``, for ``j=0, 1,...,n-k-2``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import LSQUnivariateSpline, UnivariateSpline\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = np.linspace(-3, 3, 50)\n    >>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(50)\n    \n    Fit a smoothing spline with a pre-defined internal knots:\n    \n    >>> t = [-1, 0, 1]\n    >>> spl = LSQUnivariateSpline(x, y, t)\n    \n    >>> xs = np.linspace(-3, 3, 1000)\n    >>> plt.plot(x, y, 'ro', ms=5)\n    >>> plt.plot(xs, spl(xs), 'g-', lw=3)\n    >>> plt.show()\n    \n    Check the knot vector:\n    \n    >>> spl.get_knots()\n    array([-3., -1., 0., 1., 3.])\n    \n    Constructing lsq spline using the knots from another spline:\n    \n    >>> x = np.arange(10)\n    >>> s = UnivariateSpline(x, x, s=0)\n    >>> s.get_knots()\n    array([ 0.,  2.,  3.,  4.,  5.,  6.,  7.,  9.])\n    >>> knt = s.get_knots()\n    >>> s1 = LSQUnivariateSpline(x, x, knt[1:-1])    # Chop 1st and last knot\n    >>> s1.get_knots()\n    array([ 0.,  2.,  3.,  4.,  5.,  6.,  7.,  9.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "17b9d02f9c6a60c1644baee306697dfe4335aa96c89f80ff6651b26fb38e5043",
            "fields": [
                {
                    "id": "y_gwka_p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to LSQUnivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7wb9nk0p",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input dimension of data points -- must be increasing",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "it0ufril",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input dimension of data points",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gq3fij9h",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "interior knots of the spline.  Must be in ascending order and::\n\n    bbox[0] < t[0] < ... < t[-1] < bbox[-1]",
                    "type": "(M,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8kz9a90u",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "weights for spline fitting. Must be positive. If None (default),\nweights are all 1.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gne0g9i6",
                    "encoding": "",
                    "name": "bbox",
                    "value": [
                        null,
                        null
                    ],
                    "defaultValue": [
                        null,
                        null
                    ],
                    "description": "2-sequence specifying the boundary of the approximation interval. If\nNone (default), ``bbox = [x[0], x[-1]]``.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2rkgrcgq",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Degree of the smoothing spline.  Must be 1 <= `k` <= 5.\nDefault is `k` = 3, a cubic spline.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "20fcperl",
                    "encoding": "",
                    "name": "ext",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the extrapolation mode for elements\nnot in the interval defined by the knot sequence.\n\n* if ext=0 or 'extrapolate', return the extrapolated value.\n* if ext=1 or 'zeros', return 0\n* if ext=2 or 'raise', raise a ValueError\n* if ext=3 of 'const', return the boundary value.\n\nThe default value is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hm6yidyi",
                    "encoding": "",
                    "name": "check_finite",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination or non-sensical results) if the inputs\ndo contain infinities or NaNs.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vi6scdfj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "az7xu8s_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qk1f7mbw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fb5b4y0z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hwhtp6e7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vooriann",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbzyeac9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "kwmu5flb",
            "name": "LSQUnivariateSpline.antiderivative",
            "description": "Construct a new spline representing the antiderivative of this spline.\n    \n    Parameters\n    ----------\n    n : int, optional\n        Order of antiderivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    spline : UnivariateSpline\n        Spline of order k2=k+n representing the antiderivative of this\n        spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    See Also\n    --------\n    splantider, derivative\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, np.pi/2, 70)\n    >>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)\n    >>> spl = UnivariateSpline(x, y, s=0)\n    \n    The derivative is the inverse operation of the antiderivative,\n    although some floating point error accumulates:\n    \n    >>> spl(1.7), spl.antiderivative().derivative()(1.7)\n    (array(2.1565429877197317), array(2.1565429877201865))\n    \n    Antiderivative can be used to evaluate definite integrals:\n    \n    >>> ispl = spl.antiderivative()\n    >>> ispl(np.pi/2) - ispl(0)\n    2.2572053588768486\n    \n    This is indeed an approximation to the complete elliptic integral\n    :math:`K(m) = \\int_0^{\\pi/2} [1 - m\\sin^2 x]^{-1/2} dx`:\n    \n    >>> from scipy.special import ellipk\n    >>> ellipk(0.8)\n    2.2572053268208538",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "98a7beca9fbafae504da30fb4640c0affb7cfceffcd4048624828de990a30713",
            "fields": [
                {
                    "id": "hwg_epsj",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.antiderivative object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_jqiyf6r",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljtxmqr0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.antiderivative",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsoam45i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wruc2zmi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0zjvoiyg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3ks78q_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xydlh_5u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "txptznw1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "i0q444ss",
            "name": "LSQUnivariateSpline.derivative",
            "description": "Construct a new spline representing the derivative of this spline.\n    \n    Parameters\n    ----------\n    n : int, optional\n        Order of derivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    spline : UnivariateSpline\n        Spline of order k2=k-n representing the derivative of this\n        spline.\n    \n    See Also\n    --------\n    splder, antiderivative\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    This can be used for finding maxima of a curve:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 10, 70)\n    >>> y = np.sin(x)\n    >>> spl = UnivariateSpline(x, y, k=4, s=0)\n    \n    Now, differentiate the spline and find the zeros of the\n    derivative. (NB: `sproot` only works for order 3 splines, so we\n    fit an order 4 spline):\n    \n    >>> spl.derivative().roots() / np.pi\n    array([ 0.50000001,  1.5       ,  2.49999998])\n    \n    This agrees well with roots :math:`\\pi/2 + n\\pi` of\n    :math:`\\cos(x) = \\sin'(x)`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "811cdbcfc1b93416fe519d3bf2c595eafc3ea5883aa00ee24add8adb310f59a6",
            "fields": [
                {
                    "id": "hbt0epxm",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xr_wfzqn",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tiqyqi5a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "weq2ju0h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjo4j18o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5jv_sczx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4hdz80f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vsem_azd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdd1hu82",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_q4dd7ud",
            "name": "LSQUnivariateSpline.derivatives",
            "description": "Return all derivatives of the spline at the point x.\n    \n    Parameters\n    ----------\n    x : float\n        The point to evaluate the derivatives at.\n    \n    Returns\n    -------\n    der : ndarray, shape(k+1,)\n        Derivatives of the orders 0 to k.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 3, 11)\n    >>> y = x**2\n    >>> spl = UnivariateSpline(x, y)\n    >>> spl.derivatives(1.5)\n    array([2.25, 3.0, 2.0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3112ee481b09afc5acbe81e1fbb6f33cc5c51c208daf632cec2fb3caeab3ce64",
            "fields": [
                {
                    "id": "cqu4tant",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.derivatives object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aa006_76",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point to evaluate the derivatives at.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zm127uqk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.derivatives",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.derivatives",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h_w0vu58",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nj3w9_lf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7jbzlxcn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9iy79n68",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_v4j13eo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h0yoxcg9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g1q0_gcu",
            "name": "LSQUnivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "26d9df71e301a09c99f4e949725981b307a27f7802fe3012cc57ece88d1cf719",
            "fields": [
                {
                    "id": "58m30l5g",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ze670o4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pmaq3ibu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nfw11x7_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "svh46m1n",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xg1v_ruw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nvg4zg5r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3xiyhnc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_4cujmsx",
            "name": "LSQUnivariateSpline.get_knots",
            "description": "Return positions of interior knots of the spline.\n    \n    Internally, the knot vector contains ``2*k`` additional boundary knots.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "14ac2bf549570712bb77cd2f790aecf3c4ae3fe9f7ab9cc2b2c815ea5903fd65",
            "fields": [
                {
                    "id": "jl4xw41c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i25fdaxv",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jnqm8yiv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0k_ytdtl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "klg25wh5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rogapch1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffug87qc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_8ym2pjw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oov9fa5h",
            "name": "LSQUnivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline approximation.\n    \n    This is equivalent to::\n    \n         sum((w[i] * (y[i]-spl(x[i])))**2, axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b4c4dca7f67873931e2e1f8a4e0201b867caee9289b96f65649d5f6da8c1b914",
            "fields": [
                {
                    "id": "arb9fre0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n53far19",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l3be16dn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hj9bse8_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "eiju3ke1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "33fxduyb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uiceszjv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3u7ecp5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xdiskron",
            "name": "LSQUnivariateSpline.integral",
            "description": "Return definite integral of the spline between two given points.\n    \n    Parameters\n    ----------\n    a : float\n        Lower limit of integration.\n    b : float\n        Upper limit of integration.\n    \n    Returns\n    -------\n    integral : float\n        The value of the definite integral of the spline between limits.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 3, 11)\n    >>> y = x**2\n    >>> spl = UnivariateSpline(x, y)\n    >>> spl.integral(0, 3)\n    9.0\n    \n    which agrees with :math:`\\int x^2 dx = x^3 / 3` between the limits\n    of 0 and 3.\n    \n    A caveat is that this routine assumes the spline to be zero outside of\n    the data limits:\n    \n    >>> spl.integral(-1, 4)\n    9.0\n    >>> spl.integral(-1, 0)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "db353a03ad82b95eb6f3e14eb0998df3757ca1d568a0c312f2ec6a168a4ad595",
            "fields": [
                {
                    "id": "w6oaqif8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1psg1v29",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v2j75xfr",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4rk4khz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mktxk7vt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vk91sjjm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ruj291gg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "buiw72c8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "72dxtqhg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qh8pxdo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "h_5k1d83",
            "name": "LSQUnivariateSpline.roots",
            "description": "Return the zeros of the spline.\n    \n    Notes\n    -----\n    Restriction: only cubic splines are supported by FITPACK. For non-cubic\n    splines, use `PPoly.root` (see below for an example).\n    \n    Examples\n    --------\n    \n    For some data, this method may miss a root. This happens when one of\n    the spline knots (which FITPACK places automatically) happens to\n    coincide with the true root. A workaround is to convert to `PPoly`,\n    which uses a different root-finding algorithm.\n    \n    For example,\n    \n    >>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]\n    >>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,\n    ...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,\n    ...      6.520430e-03,  8.170770e-03]\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> spl = UnivariateSpline(x, y, s=0)\n    >>> spl.roots()\n    array([], dtype=float64)\n    \n    Converting to a PPoly object does find the roots at `x=2`:\n    \n    >>> from scipy.interpolate import splrep, PPoly\n    >>> tck = splrep(x, y, s=0)\n    >>> ppoly = PPoly.from_spline(tck)\n    >>> ppoly.roots(extrapolate=False)\n    array([2.])\n    \n    See Also\n    --------\n    sproot\n    PPoly.roots",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4a5ca09c23b98029ea078caa62e5a91f116c9049f3bb22ddfab8fa99ee0695e0",
            "fields": [
                {
                    "id": "g3jfsgq8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.roots object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_op1m2z8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.roots",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9fd4rffb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9q9aafv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wzh1p1u7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujqkzhnw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ed3kns1t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b6e8y76d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ug_bk1ds",
            "name": "LSQUnivariateSpline.set_smoothing_factor",
            "description": "Continue spline computation with the given smoothing\n    factor s and with the knots found at the last call.\n    \n    This routine modifies the spline in place.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7afd818ab578dc41bad142bf4a5624cc62147b65cde2d9c373935f79ff35ca24",
            "fields": [
                {
                    "id": "5zzulx5q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.LSQUnivariateSpline.set_smoothing_factor object",
                    "type": "Object:scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wf5l3a74",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cuxgt_2d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.set_smoothing_factor",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.set_smoothing_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5j5ioim",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccg0alq4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jtl1kg7e",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9acx3uwk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4_j_uvix",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjuk1lzi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hqgd5sxm",
            "name": "LSQUnivariateSpline.validate_input",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d76648fc788bd9ca0f5599d86f20ca474f77125ddf0d2387c7b3d951953efc42",
            "fields": [
                {
                    "id": "bfxwu3wq",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gd2p4m6e",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ylji8rh",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ay187kbp",
                    "encoding": "",
                    "name": "bbox",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pbef9qvu",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nj7ej3mj",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gwfb2pcd",
                    "encoding": "",
                    "name": "ext",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jb29nkzl",
                    "encoding": "",
                    "name": "check_finite",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kfc108o0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline.validate_input",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline.validate_input",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "blr7dsbm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n9tt1wa_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o_ol24ch",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i97dk_y5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.LSQUnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ufzg391",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qa5_8624",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wu1px2i1",
            "name": "LinearNDInterpolator.__init__",
            "description": "\nLinearNDInterpolator(points, values, fill_value=np.nan, rescale=False)\n    \n    Piecewise linear interpolator in N > 1 dimensions.\n    \n    .. versionadded:: 0.9\n    \n    Methods\n    -------\n    __call__\n    \n    Parameters\n    ----------\n    points : ndarray of floats, shape (npoints, ndims); or Delaunay\n        2-D array of data point coordinates, or a precomputed Delaunay triangulation.\n    values : ndarray of float or complex, shape (npoints, ...), optional\n        N-D array of data values at `points`.  The length of `values` along the\n        first axis must be equal to the length of `points`. Unlike some\n        interpolators, the interpolation axis cannot be changed.\n    fill_value : float, optional\n        Value used to fill in for requested points outside of the\n        convex hull of the input points.  If not provided, then\n        the default is ``nan``.\n    rescale : bool, optional\n        Rescale points to unit cube before performing interpolation.\n        This is useful if some of the input dimensions have\n        incommensurable units and differ by many orders of magnitude.\n    \n    Notes\n    -----\n    The interpolant is constructed by triangulating the input data\n    with Qhull [1]_, and on each triangle performing linear\n    barycentric interpolation.\n    \n    .. note:: For data on a regular grid use `interpn` instead.\n    \n    Examples\n    --------\n    We can interpolate values on a 2D plane:\n    \n    >>> from scipy.interpolate import LinearNDInterpolator\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = rng.random(10) - 0.5\n    >>> y = rng.random(10) - 0.5\n    >>> z = np.hypot(x, y)\n    >>> X = np.linspace(min(x), max(x))\n    >>> Y = np.linspace(min(y), max(y))\n    >>> X, Y = np.meshgrid(X, Y)  # 2D grid for interpolation\n    >>> interp = LinearNDInterpolator(list(zip(x, y)), z)\n    >>> Z = interp(X, Y)\n    >>> plt.pcolormesh(X, Y, Z, shading='auto')\n    >>> plt.plot(x, y, \"ok\", label=\"input point\")\n    >>> plt.legend()\n    >>> plt.colorbar()\n    >>> plt.axis(\"equal\")\n    >>> plt.show()\n    \n    See also\n    --------\n    griddata :\n        Interpolate unstructured D-D data.\n    NearestNDInterpolator :\n        Nearest-neighbor interpolator in N dimensions.\n    CloughTocher2DInterpolator :\n        Piecewise cubic, C1 smooth, curvature-minimizing interpolator in 2D.\n    interpn : Interpolation on a regular grid or rectilinear grid.\n    RegularGridInterpolator : Interpolator on a regular or rectilinear grid\n                              in arbitrary dimensions (`interpn` wraps this\n                              class).\n    \n    References\n    ----------\n    .. [1] http://www.qhull.org/",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "689502be74fb6259172515bb5ae460e9dd1a27027903c6e009ac48dcf4617eaf",
            "fields": [
                {
                    "id": "jwe5ti1j",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to LinearNDInterpolator object",
                    "type": "Object:scipy.interpolate._interpnd.LinearNDInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_6tg3q8n",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array of data point coordinates, or a precomputed Delaunay triangulation.",
                    "type": "ndarray of floats, shape (npoints, ndims); or Delaunay",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxcyghqh",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D array of data values at `points`.  The length of `values` along the\nfirst axis must be equal to the length of `points`. Unlike some\ninterpolators, the interpolation axis cannot be changed.",
                    "type": "ndarray of float or complex, shape (npoints, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahujvdk2",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value used to fill in for requested points outside of the\nconvex hull of the input points.  If not provided, then\nthe default is ``nan``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3q9xcfp",
                    "encoding": "",
                    "name": "rescale",
                    "value": false,
                    "defaultValue": false,
                    "description": "Rescale points to unit cube before performing interpolation.\nThis is useful if some of the input dimensions have\nincommensurable units and differ by many orders of magnitude.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0vvskswo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpnd.LinearNDInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._interpnd.LinearNDInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nehif0c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "heb3c7hy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "smyqbqrb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "usfu47rj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpnd.LinearNDInterpolator",
                    "defaultValue": "scipy.interpolate._interpnd.LinearNDInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jn1im31",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5zg_h31_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xmebcm_g",
            "name": "NdBSpline.__init__",
            "description": "\nTensor product spline object.\n    \n    The value at point ``xp = (x1, x2, ..., xN)`` is evaluated as a linear\n    combination of products of one-dimensional b-splines in each of the ``N``\n    dimensions::\n    \n       c[i1, i2, ..., iN] * B(x1; i1, t1) * B(x2; i2, t2) * ... * B(xN; iN, tN)\n    \n    \n    Here ``B(x; i, t)`` is the ``i``-th b-spline defined by the knot vector\n    ``t`` evaluated at ``x``.\n    \n    Parameters\n    ----------\n    t : tuple of 1D ndarrays\n        knot vectors in directions 1, 2, ... N,\n        ``len(t[i]) == n[i] + k + 1``\n    c : ndarray, shape (n1, n2, ..., nN, ...)\n        b-spline coefficients\n    k : int or length-d tuple of integers\n        spline degrees.\n        A single integer is interpreted as having this degree for\n        all dimensions.\n    extrapolate : bool, optional\n        Whether to extrapolate out-of-bounds inputs, or return `nan`.\n        Default is to extrapolate.\n    \n    Attributes\n    ----------\n    t : tuple of ndarrays\n        Knots vectors.\n    c : ndarray\n        Coefficients of the tensor-product spline.\n    k : tuple of integers\n        Degrees for each dimension.\n    extrapolate : bool, optional\n        Whether to extrapolate or return nans for out-of-bounds inputs.\n        Defaults to true.\n    \n    Methods\n    -------\n    __call__\n    design_matrix\n    \n    See Also\n    --------\n    BSpline : a one-dimensional B-spline object\n    NdPPoly : an N-dimensional piecewise tensor product polynomial",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "12f7e78fb5065412f89831080918b4539d72bdf44bd86962675a10b9ff6c1f73",
            "fields": [
                {
                    "id": "ei1zpl57",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NdBSpline object",
                    "type": "Object:scipy.interpolate._ndbspline.NdBSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aq81bnm_",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Knots vectors.",
                    "type": "tuple of ndarrays",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45wgekhw",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coefficients of the tensor-product spline.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9sqd_83q",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degrees for each dimension.",
                    "type": "tuple of integers",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gk_7pzm8",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to extrapolate or return nans for out-of-bounds inputs.\nDefaults to true.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0d38coat",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._ndbspline.NdBSpline.__init__",
                    "defaultValue": "scipy.interpolate._ndbspline.NdBSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5x94lmtk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o1hjtv6r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wqw8ai41",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lowjhgr2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._ndbspline.NdBSpline",
                    "defaultValue": "scipy.interpolate._ndbspline.NdBSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6_ao7yv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rbmy93y",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pq3y0kkc",
            "name": "NdBSpline.design_matrix",
            "description": "Construct the design matrix as a CSR format sparse array.\n    \n    Parameters\n    ----------\n    xvals :  ndarray, shape(npts, ndim)\n        Data points. ``xvals[j, :]`` gives the ``j``-th data point as an\n        ``ndim``-dimensional array.\n    t : tuple of 1D ndarrays, length-ndim\n        Knot vectors in directions 1, 2, ... ndim,\n    k : int\n        B-spline degree.\n    extrapolate : bool, optional\n        Whether to extrapolate out-of-bounds values of raise a `ValueError`\n    \n    Returns\n    -------\n    design_matrix : a CSR array\n        Each row of the design matrix corresponds to a value in `xvals` and\n        contains values of b-spline basis elements which are non-zero\n        at this value.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5224b747e4fbe732bb27c25aaf33e2515c4342da3cc3c225ee75bdd498637e0c",
            "fields": [
                {
                    "id": "fys06or2",
                    "encoding": "",
                    "name": "xvals",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data points. ``xvals[j, :]`` gives the ``j``-th data point as an\n``ndim``-dimensional array.",
                    "type": "ndarray, shape(npts, ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7d2866p",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Knot vectors in directions 1, 2, ... ndim,",
                    "type": "tuple of 1D ndarrays, length-ndim",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mw9g31t3",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "B-spline degree.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gaegd7rp",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to extrapolate out-of-bounds values of raise a `ValueError`",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3khp0ia",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._ndbspline.NdBSpline.design_matrix",
                    "defaultValue": "scipy.interpolate._ndbspline.NdBSpline.design_matrix",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mhzdspjq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7fa_qxjr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9ckxluex",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i74bg94z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._ndbspline.NdBSpline",
                    "defaultValue": "scipy.interpolate._ndbspline.NdBSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fh2wgnrf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jdt4f_qe",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "l81k03s5",
            "name": "NdPPoly.__init__",
            "description": "\nPiecewise tensor product polynomial\n    \n    The value at point ``xp = (x', y', z', ...)`` is evaluated by first\n    computing the interval indices `i` such that::\n    \n        x[0][i[0]] <= x' < x[0][i[0]+1]\n        x[1][i[1]] <= y' < x[1][i[1]+1]\n        ...\n    \n    and then computing::\n    \n        S = sum(c[k0-m0-1,...,kn-mn-1,i[0],...,i[n]]\n                * (xp[0] - x[0][i[0]])**m0\n                * ...\n                * (xp[n] - x[n][i[n]])**mn\n                for m0 in range(k[0]+1)\n                ...\n                for mn in range(k[n]+1))\n    \n    where ``k[j]`` is the degree of the polynomial in dimension j. This\n    representation is the piecewise multivariate power basis.\n    \n    Parameters\n    ----------\n    c : ndarray, shape (k0, ..., kn, m0, ..., mn, ...)\n        Polynomial coefficients, with polynomial order `kj` and\n        `mj+1` intervals for each dimension `j`.\n    x : ndim-tuple of ndarrays, shapes (mj+1,)\n        Polynomial breakpoints for each dimension. These must be\n        sorted in increasing order.\n    extrapolate : bool, optional\n        Whether to extrapolate to out-of-bounds points based on first\n        and last intervals, or to return NaNs. Default: True.\n    \n    Attributes\n    ----------\n    x : tuple of ndarrays\n        Breakpoints.\n    c : ndarray\n        Coefficients of the polynomials.\n    \n    Methods\n    -------\n    __call__\n    derivative\n    antiderivative\n    integrate\n    integrate_1d\n    construct_fast\n    \n    See also\n    --------\n    PPoly : piecewise polynomials in 1D\n    \n    Notes\n    -----\n    High-order polynomials in the power basis can be numerically\n    unstable.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9dc5f9f09a3bb62de2b1a121b9b9668e041a143971a3b212bcb3bdd57bc5baff",
            "fields": [
                {
                    "id": "o55qzjpx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to NdPPoly object",
                    "type": "Object:scipy.interpolate._interpolate.NdPPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qq69vygf",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Coefficients of the polynomials.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1h_woxqm",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Breakpoints.",
                    "type": "tuple of ndarrays",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uyx1jakw",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to extrapolate to out-of-bounds points based on first\nand last intervals, or to return NaNs. Default: True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3x5b_g7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly.__init__",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mk5_ukd8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bttg7mk8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e1w3x5qj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjted47y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xpw3dvqe",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7jzbtw0e",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lznrmj8n",
            "name": "NdPPoly.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Antiderivative is also the indefinite integral of the function,\n    and derivative is its inverse operation.\n    \n    Parameters\n    ----------\n    nu : ndim-tuple of int\n        Order of derivatives to evaluate for each dimension.\n        If negative, the derivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k + n representing\n        the antiderivative of this polynomial.\n    \n    Notes\n    -----\n    The antiderivative returned by this function is continuous and\n    continuously differentiable to order n-1, up to floating point\n    rounding error.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ec4b2de8c2bb4ef88f4fd9c543e208c0c621269b51b4b3528ac2029d7dcf04d4",
            "fields": [
                {
                    "id": "owfyzhe7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.NdPPoly.antiderivative object",
                    "type": "Object:scipy.interpolate._interpolate.NdPPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alpm639q",
                    "encoding": "",
                    "name": "nu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of derivatives to evaluate for each dimension.\nIf negative, the derivative is returned.",
                    "type": "ndim-tuple of int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vv4m3g4a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly.antiderivative",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r328icng",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9lu3g3i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "icdzhf5x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "227cspq5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jvq5b2rf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0dialkj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g5r1937e",
            "name": "NdPPoly.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type.  The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9ddf126e81f99317bb9b4ce1bf0006dc94412c71360358f1c9525e25f4dd0c6a",
            "fields": [
                {
                    "id": "56lltv85",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tpbditnx",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4e5ghdb4",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iw47n6hi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly.construct_fast",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ialsao3f",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ui1divku",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "287o1noy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqlc97ya",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "og7k2nst",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2lul9au",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3nlv_zue",
            "name": "NdPPoly.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : ndim-tuple of int\n        Order of derivatives to evaluate for each dimension.\n        If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    pp : NdPPoly\n        Piecewise polynomial of orders (k[0] - nu[0], ..., k[n] - nu[n])\n        representing the derivative of this polynomial.\n    \n    Notes\n    -----\n    Derivatives are evaluated piecewise for each polynomial\n    segment, even if the polynomial is not differentiable at the\n    breakpoints. The polynomial intervals in each dimension are\n    considered half-open, ``[a, b)``, except for the last interval\n    which is closed ``[a, b]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b161806a37154e0f90c1fdb4e36ed66a7a7d94e93c8f20bfc7dd3ead1868b385",
            "fields": [
                {
                    "id": "p9qlxssc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.NdPPoly.derivative object",
                    "type": "Object:scipy.interpolate._interpolate.NdPPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nkvtojn2",
                    "encoding": "",
                    "name": "nu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of derivatives to evaluate for each dimension.\nIf negative, the antiderivative is returned.",
                    "type": "ndim-tuple of int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zyx5so7v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly.derivative",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6tdmger",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "71fbbwps",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lwunc14z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5tmqv7b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3c1gemi",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9lu5y32",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4gz54s2p",
            "name": "NdPPoly.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    ranges : ndim-tuple of 2-tuples float\n        Sequence of lower and upper bounds for each dimension,\n        ``[(a[0], b[0]), ..., (a[ndim-1], b[ndim-1])]``\n    extrapolate : bool, optional\n        Whether to extrapolate to out-of-bounds points based on first\n        and last intervals, or to return NaNs.\n    \n    Returns\n    -------\n    ig : array_like\n        Definite integral of the piecewise polynomial over\n        [a[0], b[0]] x ... x [a[ndim-1], b[ndim-1]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4a207cdc146f6dea4488d1eca5bcb6c684fdebe307e8370bccf9cb193a21c0d9",
            "fields": [
                {
                    "id": "ywpr1g4r",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.NdPPoly.integrate object",
                    "type": "Object:scipy.interpolate._interpolate.NdPPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0g5assts",
                    "encoding": "",
                    "name": "ranges",
                    "value": "",
                    "defaultValue": "",
                    "description": "Sequence of lower and upper bounds for each dimension,\n``[(a[0], b[0]), ..., (a[ndim-1], b[ndim-1])]``",
                    "type": "ndim-tuple of 2-tuples float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbg3tbu2",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to extrapolate to out-of-bounds points based on first\nand last intervals, or to return NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qlkx3yq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly.integrate",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gdsp389t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "743qq918",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5_jjtjri",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ieg2iqzm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6u4yz9vw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kne4m0z0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lk6o3_qk",
            "name": "NdPPoly.integrate_1d",
            "description": "Compute NdPPoly representation for one dimensional definite integral\n    \n    The result is a piecewise polynomial representing the integral:\n    \n    .. math::\n    \n       p(y, z, ...) = \\int_a^b dx\\, p(x, y, z, ...)\n    \n    where the dimension integrated over is specified with the\n    `axis` parameter.\n    \n    Parameters\n    ----------\n    a, b : float\n        Lower and upper bound for integration.\n    axis : int\n        Dimension over which to compute the 1-D integrals\n    extrapolate : bool, optional\n        Whether to extrapolate to out-of-bounds points based on first\n        and last intervals, or to return NaNs.\n    \n    Returns\n    -------\n    ig : NdPPoly or array-like\n        Definite integral of the piecewise polynomial over [a, b].\n        If the polynomial was 1D, an array is returned,\n        otherwise, an NdPPoly object.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c4022ac4029cf3b8dec4c84514b3f24f512a615a341db69b9a31573a84ec0250",
            "fields": [
                {
                    "id": "9aul_668",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.NdPPoly.integrate_1d object",
                    "type": "Object:scipy.interpolate._interpolate.NdPPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f2a8x8lm",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k6316647",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7htkz3ti",
                    "encoding": "",
                    "name": "axis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Dimension over which to compute the 1-D integrals",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lp3lourz",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to extrapolate to out-of-bounds points based on first\nand last intervals, or to return NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6zxifal",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly.integrate_1d",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly.integrate_1d",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4htqv03a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h1a77v6m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e8tdg3f8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a7kb5j3n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.NdPPoly",
                    "defaultValue": "scipy.interpolate._interpolate.NdPPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wmiwfnly",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2lh7peb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "c06rajw6",
            "name": "NearestNDInterpolator.__init__",
            "description": "Check shape of points and values arrays, and reshape values to\n    (npoints, nvalues).  Ensure the `points` and values arrays are\n    C-contiguous, and of correct type.\nNearest-neighbor interpolator in N > 1 dimensions.\n    \n    Methods\n    -------\n    __call__\n    \n    Parameters\n    ----------\n    x : (npoints, ndims) 2-D ndarray of floats\n        Data point coordinates.\n    y : (npoints, ) 1-D ndarray of float or complex\n        Data values.\n    rescale : boolean, optional\n        Rescale points to unit cube before performing interpolation.\n        This is useful if some of the input dimensions have\n        incommensurable units and differ by many orders of magnitude.\n    \n        .. versionadded:: 0.14.0\n    tree_options : dict, optional\n        Options passed to the underlying ``cKDTree``.\n    \n        .. versionadded:: 0.17.0\n    \n    See Also\n    --------\n    griddata :\n        Interpolate unstructured D-D data.\n    LinearNDInterpolator :\n        Piecewise linear interpolator in N dimensions.\n    CloughTocher2DInterpolator :\n        Piecewise cubic, C1 smooth, curvature-minimizing interpolator in 2D.\n    interpn : Interpolation on a regular grid or rectilinear grid.\n    RegularGridInterpolator : Interpolator on a regular or rectilinear grid\n                              in arbitrary dimensions (`interpn` wraps this\n                              class).\n    \n    Notes\n    -----\n    Uses ``scipy.spatial.cKDTree``\n    \n    .. note:: For data on a regular grid use `interpn` instead.\n    \n    Examples\n    --------\n    We can interpolate values on a 2D plane:\n    \n    >>> from scipy.interpolate import NearestNDInterpolator\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = rng.random(10) - 0.5\n    >>> y = rng.random(10) - 0.5\n    >>> z = np.hypot(x, y)\n    >>> X = np.linspace(min(x), max(x))\n    >>> Y = np.linspace(min(y), max(y))\n    >>> X, Y = np.meshgrid(X, Y)  # 2D grid for interpolation\n    >>> interp = NearestNDInterpolator(list(zip(x, y)), z)\n    >>> Z = interp(X, Y)\n    >>> plt.pcolormesh(X, Y, Z, shading='auto')\n    >>> plt.plot(x, y, \"ok\", label=\"input point\")\n    >>> plt.legend()\n    >>> plt.colorbar()\n    >>> plt.axis(\"equal\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c63ce869513e1ff733cabc23bacb6e2751c822ed978e2f1498f9be44f64e945",
            "fields": [
                {
                    "id": "ohmxvgdb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._ndgriddata.NearestNDInterpolator.__init__ object",
                    "type": "Object:scipy.interpolate._ndgriddata.NearestNDInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "69r002f8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ensqhsr2",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wun99de",
                    "encoding": "",
                    "name": "rescale",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "juheqkej",
                    "encoding": "",
                    "name": "tree_options",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "liz6jyr2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._ndgriddata.NearestNDInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._ndgriddata.NearestNDInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "837886_5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2ql6ycj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jy62a9yt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8b1afx1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._ndgriddata.NearestNDInterpolator",
                    "defaultValue": "scipy.interpolate._ndgriddata.NearestNDInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kutyije5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ke3ht7lf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "99wg3928",
            "name": "PPoly.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Antiderivative is also the indefinite integral of the function,\n    and derivative is its inverse operation.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of antiderivative to evaluate. Default is 1, i.e., compute\n        the first integral. If negative, the derivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k + n representing\n        the antiderivative of this polynomial.\n    \n    Notes\n    -----\n    The antiderivative returned by this function is continuous and\n    continuously differentiable to order n-1, up to floating point\n    rounding error.\n    \n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c77fe755879389d9c24378e02625037313677f017a3f7e2a20e92797a0c76a2e",
            "fields": [
                {
                    "id": "j7459p02",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.PPoly.antiderivative object",
                    "type": "Object:scipy.interpolate._interpolate.PPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tnl3i4cl",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default is 1, i.e., compute\nthe first integral. If negative, the derivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b7qdx75r",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.antiderivative",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "62u7l4zx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0fwgz00j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qhr48okc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "viw5dvx3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vh8wlzs4",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxz5r3b_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_q54pdcm",
            "name": "PPoly.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type. The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a1bc468f48c0a2bfa6924341686771dbe5400dd654f64fd1fdb5ee7e457ebfae",
            "fields": [
                {
                    "id": "iscuyi_p",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3cx56myy",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtzgafh0",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8flwchj",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y6t4ncqa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.construct_fast",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9uermjyr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qtg9vgob",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "76bjqw0j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1f9i2d4p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v0qud50m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "60lb6h_p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k1yzfdkx",
            "name": "PPoly.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of derivative to evaluate. Default is 1, i.e., compute the\n        first derivative. If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k - n representing the derivative\n        of this polynomial.\n    \n    Notes\n    -----\n    Derivatives are evaluated piecewise for each polynomial\n    segment, even if the polynomial is not differentiable at the\n    breakpoints. The polynomial intervals are considered half-open,\n    ``[a, b)``, except for the last interval which is closed\n    ``[a, b]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1de8c009ba0b7288008451d6169b34359dd44503f5c0c626cbfae849cd746543",
            "fields": [
                {
                    "id": "g48f1dh8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.PPoly.derivative object",
                    "type": "Object:scipy.interpolate._interpolate.PPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svh1wfgo",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default is 1, i.e., compute the\nfirst derivative. If negative, the antiderivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fu0mrc8l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.derivative",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hba9qoz8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6e28t9z2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "maq9dtq3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xuephiq7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kjc34iun",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xug_xe86",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "g8hj_3_l",
            "name": "PPoly.extend",
            "description": "Add additional breakpoints and coefficients to the polynomial.\n    \n    Parameters\n    ----------\n    c : ndarray, size (k, m, ...)\n        Additional coefficients for polynomials in intervals. Note that\n        the first additional interval will be formed using one of the\n        ``self.x`` end points.\n    x : ndarray, size (m,)\n        Additional breakpoints. Must be sorted in the same order as\n        ``self.x`` and either to the right or to the left of the current\n        breakpoints.\n    \n    Notes\n    -----\n    This method is not thread safe and must not be executed concurrently\n    with other methods available in this class. Doing so may cause\n    unexpected errors or numerical output mismatches.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1bb9aec66a395e642b0c9511635e5ba5f5a16ecb2ca0b7cda90a08c6230c529a",
            "fields": [
                {
                    "id": "47gq1q2p",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.PPoly.extend object",
                    "type": "Object:scipy.interpolate._interpolate.PPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "09e19eoc",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional coefficients for polynomials in intervals. Note that\nthe first additional interval will be formed using one of the\n``self.x`` end points.",
                    "type": "ndarray, size (k, m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l4o4ryzj",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional breakpoints. Must be sorted in the same order as\n``self.x`` and either to the right or to the left of the current\nbreakpoints.",
                    "type": "ndarray, size (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xv0ql6k3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.extend",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.extend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6nrlay6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5gjjblah",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jly6ex4w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bvvj6hhs",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nziwyjoo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3agt7s2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "kkungo0j",
            "name": "PPoly.from_bernstein_basis",
            "description": "Construct a piecewise polynomial in the power basis\n    from a polynomial in Bernstein basis.\n    \n    Parameters\n    ----------\n    bp : BPoly\n        A Bernstein basis polynomial, as created by BPoly\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dd5acb1ae6edd1db62d5932311e870bb41881297ec5ae2242b35f16a7520d818",
            "fields": [
                {
                    "id": "9s2a49lc",
                    "encoding": "",
                    "name": "bp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Bernstein basis polynomial, as created by BPoly",
                    "type": "BPoly",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwwpwvlh",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tb8etn_6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.from_bernstein_basis",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.from_bernstein_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7vr81wyq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xbvwska1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gphc2gv0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ujc11xj2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jqtx0ch",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_z_97w83",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ga1ok13p",
            "name": "PPoly.from_spline",
            "description": "Construct a piecewise polynomial from a spline\n    \n    Parameters\n    ----------\n    tck\n        A spline, as returned by `splrep` or a BSpline object.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.\n    \n    Examples\n    --------\n    Construct an interpolating spline and convert it to a `PPoly` instance\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import splrep, PPoly\n    >>> x = np.linspace(0, 1, 11)\n    >>> y = np.sin(2*np.pi*x)\n    >>> tck = splrep(x, y, s=0)\n    >>> p = PPoly.from_spline(tck)\n    >>> isinstance(p, PPoly)\n    True\n    \n    Note that this function only supports 1D splines out of the box.\n    \n    If the ``tck`` object represents a parametric spline (e.g. constructed\n    by `splprep` or a `BSpline` with ``c.ndim > 1``), you will need to loop\n    over the dimensions manually.\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> t = np.linspace(0, 1, 11)\n    >>> x = np.sin(2*np.pi*t)\n    >>> y = np.cos(2*np.pi*t)\n    >>> (t, c, k), u = splprep([x, y], s=0)\n    \n    Note that ``c`` is a list of two arrays of length 11.\n    \n    >>> unew = np.arange(0, 1.01, 0.01)\n    >>> out = splev(unew, (t, c, k))\n    \n    To convert this spline to the power basis, we convert each\n    component of the list of b-spline coefficients, ``c``, into the\n    corresponding cubic polynomial.\n    \n    >>> polys = [PPoly.from_spline((t, cj, k)) for cj in c]\n    >>> polys[0].c.shape\n    (4, 14)\n    \n    Note that the coefficients of the polynomials `polys` are in the\n    power basis and their dimensions reflect just that: here 4 is the order\n    (degree+1), and 14 is the number of intervals---which is nothing but\n    the length of the knot array of the original `tck` minus one.\n    \n    Optionally, we can stack the components into a single `PPoly` along\n    the third dimension:\n    \n    >>> cc = np.dstack([p.c for p in polys])    # has shape = (4, 14, 2)\n    >>> poly = PPoly(cc, polys[0].x)\n    >>> np.allclose(poly(unew).T,     # note the transpose to match `splev`\n    ...             out, atol=1e-15)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "15068bbe2c4331828a45e7e3a5dbb2e167b7212bec126a8c16559d436813a516",
            "fields": [
                {
                    "id": "0jf8j682",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A spline, as returned by `splrep` or a BSpline object.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_vnqrb_",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y2o8d5iq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.from_spline",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.from_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pttwghqk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vtdn5axq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0uagidv8",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dclv6ec1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73p95ips",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aptom46u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yjb5v9ti",
            "name": "PPoly.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    a : float\n        Lower integration bound\n    b : float\n        Upper integration bound\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used.\n        If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    ig : array_like\n        Definite integral of the piecewise polynomial over [a, b]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8620a33ab04f3f74314e3f5dad9826c68864bf8f910a1b8c2f1518aca7532f89",
            "fields": [
                {
                    "id": "87uobawr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.PPoly.integrate object",
                    "type": "Object:scipy.interpolate._interpolate.PPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6aydx7g_",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ylvhzgku",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5shg36n1",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used.\nIf None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ie50p_hs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.integrate",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "45goj2q1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7a68yfy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ur1umfng",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3w2hooq2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yifcybx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "46zwtpkk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m9hgk50s",
            "name": "PPoly.roots",
            "description": "Find real roots of the piecewise polynomial.\n    \n    Parameters\n    ----------\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    See Also\n    --------\n    PPoly.solve",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4bf0c0303aa21c9d09fe62f7cc2140614ae68e0832b1454ebb4ab57966b4b06f",
            "fields": [
                {
                    "id": "p_18pp1a",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.PPoly.roots object",
                    "type": "Object:scipy.interpolate._interpolate.PPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ts5m37c",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nuc3cc21",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a3k19q6u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.roots",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gvw1mbhu",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9kdjd5zw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cviq1rlu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iaqiig1s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2g1bsruk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9q64pnmi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "7btw8ogm",
            "name": "PPoly.solve",
            "description": "Find real solutions of the equation ``pp(x) == y``.\n    \n    Parameters\n    ----------\n    y : float, optional\n        Right-hand side. Default is zero.\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    Notes\n    -----\n    This routine works only on real-valued polynomials.\n    \n    If the piecewise polynomial contains sections that are\n    identically zero, the root list will contain the start point\n    of the corresponding interval, followed by a ``nan`` value.\n    \n    If the polynomial is discontinuous across a breakpoint, and\n    there is a sign change across the breakpoint, this is reported\n    if the `discont` parameter is True.\n    \n    Examples\n    --------\n    \n    Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals\n    ``[-2, 1], [1, 2]``:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import PPoly\n    >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])\n    >>> pp.solve()\n    array([-1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4325e26aa57e1127d217158038bc10a4eab6dd41d73bff515aa5245b946ab10b",
            "fields": [
                {
                    "id": "_x4eimbx",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.PPoly.solve object",
                    "type": "Object:scipy.interpolate._interpolate.PPoly",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mm11cj_d",
                    "encoding": "",
                    "name": "y",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Right-hand side. Default is zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5vi4bes",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "myfnl2oa",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svq0pl3g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.PPoly.solve",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kq9ffjjv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7y_g__4r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f642qe__",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ji0zfjd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.PPoly",
                    "defaultValue": "scipy.interpolate._interpolate.PPoly",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ohot3tb3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kd6k34qq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wlypf4vh",
            "name": "PchipInterpolator.__init__",
            "description": "\nPCHIP shape-preserving interpolator (C1 smooth).\n    \n    ``x`` and ``y`` are arrays of values used to approximate some function f,\n    with ``y = f(x)``. The interpolant uses monotonic cubic splines\n    to find the value of new points. (PCHIP stands for Piecewise Cubic\n    Hermite Interpolating Polynomial).\n    \n    Parameters\n    ----------\n    x : ndarray, shape (npoints, )\n        A 1-D array of monotonically increasing real values. ``x`` cannot\n        include duplicate values (otherwise f is overspecified)\n    y : ndarray, shape (..., npoints, ...)\n        A N-D array of real values. ``y``'s length along the interpolation\n        axis must be equal to the length of ``x``. Use the ``axis``\n        parameter to select the interpolation axis.\n    axis : int, optional\n        Axis in the ``y`` array corresponding to the x-coordinate values. Defaults\n        to ``axis=0``.\n    extrapolate : bool, optional\n        Whether to extrapolate to out-of-bounds points based on first\n        and last intervals, or to return NaNs.\n    \n    Methods\n    -------\n    __call__\n    derivative\n    antiderivative\n    integrate\n    solve\n    roots\n    \n    \n    See Also\n    --------\n    CubicHermiteSpline : Piecewise-cubic interpolator.\n    Akima1DInterpolator : Akima 1D interpolator.\n    CubicSpline : Cubic spline data interpolator.\n    PPoly : Piecewise polynomial in terms of coefficients and breakpoints.\n    \n    Notes\n    -----\n    The interpolator preserves monotonicity in the interpolation data and does\n    not overshoot if the data is not smooth.\n    \n    The first derivatives are guaranteed to be continuous, but the second\n    derivatives may jump at :math:`x_k`.\n    \n    Determines the derivatives at the points :math:`x_k`, :math:`f'_k`,\n    by using PCHIP algorithm [1]_.\n    \n    Let :math:`h_k = x_{k+1} - x_k`, and  :math:`d_k = (y_{k+1} - y_k) / h_k`\n    are the slopes at internal points :math:`x_k`.\n    If the signs of :math:`d_k` and :math:`d_{k-1}` are different or either of\n    them equals zero, then :math:`f'_k = 0`. Otherwise, it is given by the\n    weighted harmonic mean\n    \n    .. math::\n    \n        \\frac{w_1 + w_2}{f'_k} = \\frac{w_1}{d_{k-1}} + \\frac{w_2}{d_k}\n    \n    where :math:`w_1 = 2 h_k + h_{k-1}` and :math:`w_2 = h_k + 2 h_{k-1}`.\n    \n    The end slopes are set using a one-sided scheme [2]_.\n    \n    \n    References\n    ----------\n    .. [1] F. N. Fritsch and J. Butland,\n           A method for constructing local\n           monotone piecewise cubic interpolants,\n           SIAM J. Sci. Comput., 5(2), 300-304 (1984).\n           :doi:`10.1137/0905021`.\n    .. [2] see, e.g., C. Moler, Numerical Computing with Matlab, 2004.\n           :doi:`10.1137/1.9780898717952`",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "598c2c73b30e9f169a46db0e32cccc4e9682f9338863cd0a6c0492cabff81eb6",
            "fields": [
                {
                    "id": "mjniwn6n",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to PchipInterpolator object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "naa4pw8l",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "A 1-D array of monotonically increasing real values. ``x`` cannot\ninclude duplicate values (otherwise f is overspecified)",
                    "type": "ndarray, shape (npoints, )",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umgmk12m",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "A N-D array of real values. ``y``'s length along the interpolation\naxis must be equal to the length of ``x``. Use the ``axis``\nparameter to select the interpolation axis.",
                    "type": "ndarray, shape (..., npoints, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lb8xsylc",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the ``y`` array corresponding to the x-coordinate values. Defaults\nto ``axis=0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k5i1rfos",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to extrapolate to out-of-bounds points based on first\nand last intervals, or to return NaNs.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nv4o8uc5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yei8fcy6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yldi0xmf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "38elt9rc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qs5a894b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ygr55yqs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4pf34tv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gmd3wy1z",
            "name": "PchipInterpolator.antiderivative",
            "description": "Construct a new piecewise polynomial representing the antiderivative.\n    \n    Antiderivative is also the indefinite integral of the function,\n    and derivative is its inverse operation.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of antiderivative to evaluate. Default is 1, i.e., compute\n        the first integral. If negative, the derivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k + n representing\n        the antiderivative of this polynomial.\n    \n    Notes\n    -----\n    The antiderivative returned by this function is continuous and\n    continuously differentiable to order n-1, up to floating point\n    rounding error.\n    \n    If antiderivative is computed and ``self.extrapolate='periodic'``,\n    it will be set to False for the returned instance. This is done because\n    the antiderivative is no longer periodic and its correct evaluation\n    outside of the initially given x interval is difficult.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "749ab943ff0cf8b051128a2c708425ffb1a2f3995962eb209ed6fd4ea1c5d0c0",
            "fields": [
                {
                    "id": "7t5jx3y_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.PchipInterpolator.antiderivative object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9y0soxl2",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default is 1, i.e., compute\nthe first integral. If negative, the derivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mbe1409",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.antiderivative",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a8e_4m5u",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ugejw7io",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rr97eygp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dagund_5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1fxyfod",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zy61589k",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mc3gwyv8",
            "name": "PchipInterpolator.construct_fast",
            "description": "Construct the piecewise polynomial without making checks.\n    \n    Takes the same parameters as the constructor. Input arguments\n    ``c`` and ``x`` must be arrays of the correct shape and type. The\n    ``c`` array can only be of dtypes float and complex, and ``x``\n    array must have dtype float.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "95fab0f049da7086346659b6b39ece3fe83c826176c28269879e633505c51424",
            "fields": [
                {
                    "id": "e27gu_u_",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oj4abayw",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5a9oyvy9",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j485s4k1",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35eh87b2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.construct_fast",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.construct_fast",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ncmqwtgn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0qcd6yls",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tgpcg8lc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i46f1tux",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_syfcog7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t1v25gzm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "1jcc_veg",
            "name": "PchipInterpolator.derivative",
            "description": "Construct a new piecewise polynomial representing the derivative.\n    \n    Parameters\n    ----------\n    nu : int, optional\n        Order of derivative to evaluate. Default is 1, i.e., compute the\n        first derivative. If negative, the antiderivative is returned.\n    \n    Returns\n    -------\n    pp : PPoly\n        Piecewise polynomial of order k2 = k - n representing the derivative\n        of this polynomial.\n    \n    Notes\n    -----\n    Derivatives are evaluated piecewise for each polynomial\n    segment, even if the polynomial is not differentiable at the\n    breakpoints. The polynomial intervals are considered half-open,\n    ``[a, b)``, except for the last interval which is closed\n    ``[a, b]``.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5da966fa3ccd12757da99ae422eb668b2fe313bbfd2f00dc7783221763d12ee4",
            "fields": [
                {
                    "id": "d6i8ab45",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.PchipInterpolator.derivative object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aq99potz",
                    "encoding": "",
                    "name": "nu",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default is 1, i.e., compute the\nfirst derivative. If negative, the antiderivative is returned.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7t70ach3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.derivative",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dn40d4uq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zru7d31m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4lk_ccgl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29txzays",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vf4p8plb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lwvo834l",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "sutvn_mr",
            "name": "PchipInterpolator.extend",
            "description": "Add additional breakpoints and coefficients to the polynomial.\n    \n    Parameters\n    ----------\n    c : ndarray, size (k, m, ...)\n        Additional coefficients for polynomials in intervals. Note that\n        the first additional interval will be formed using one of the\n        ``self.x`` end points.\n    x : ndarray, size (m,)\n        Additional breakpoints. Must be sorted in the same order as\n        ``self.x`` and either to the right or to the left of the current\n        breakpoints.\n    \n    Notes\n    -----\n    This method is not thread safe and must not be executed concurrently\n    with other methods available in this class. Doing so may cause\n    unexpected errors or numerical output mismatches.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c3bd57bcc119044a67f829947a702a54896342c0c4064f6124f49f82b72edf6",
            "fields": [
                {
                    "id": "qo7a4ol4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.PchipInterpolator.extend object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_edzvhxx",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional coefficients for polynomials in intervals. Note that\nthe first additional interval will be formed using one of the\n``self.x`` end points.",
                    "type": "ndarray, size (k, m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eiznra8k",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional breakpoints. Must be sorted in the same order as\n``self.x`` and either to the right or to the left of the current\nbreakpoints.",
                    "type": "ndarray, size (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qw44hp2b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.extend",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.extend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16sxlkyd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smjmrr8r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tv16jg_g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_iyxapxa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r9bv19bz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_uyemzo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9zsgwvxf",
            "name": "PchipInterpolator.from_bernstein_basis",
            "description": "Construct a piecewise polynomial in the power basis\n    from a polynomial in Bernstein basis.\n    \n    Parameters\n    ----------\n    bp : BPoly\n        A Bernstein basis polynomial, as created by BPoly\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a91bb42a295e0f784c4c8819963eb7f2c8b3692152b81031530cf174e9a5f1b6",
            "fields": [
                {
                    "id": "e_jnhbpi",
                    "encoding": "",
                    "name": "bp",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Bernstein basis polynomial, as created by BPoly",
                    "type": "BPoly",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sbn7nu99",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxkl71o9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.from_bernstein_basis",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.from_bernstein_basis",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b40vjttl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3zv01n7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bzfg62ch",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cup2bfz_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1qkdl_7r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "isqncnf1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dp90ufr8",
            "name": "PchipInterpolator.from_spline",
            "description": "Construct a piecewise polynomial from a spline\n    \n    Parameters\n    ----------\n    tck\n        A spline, as returned by `splrep` or a BSpline object.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used. Default is True.\n    \n    Examples\n    --------\n    Construct an interpolating spline and convert it to a `PPoly` instance\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import splrep, PPoly\n    >>> x = np.linspace(0, 1, 11)\n    >>> y = np.sin(2*np.pi*x)\n    >>> tck = splrep(x, y, s=0)\n    >>> p = PPoly.from_spline(tck)\n    >>> isinstance(p, PPoly)\n    True\n    \n    Note that this function only supports 1D splines out of the box.\n    \n    If the ``tck`` object represents a parametric spline (e.g. constructed\n    by `splprep` or a `BSpline` with ``c.ndim > 1``), you will need to loop\n    over the dimensions manually.\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> t = np.linspace(0, 1, 11)\n    >>> x = np.sin(2*np.pi*t)\n    >>> y = np.cos(2*np.pi*t)\n    >>> (t, c, k), u = splprep([x, y], s=0)\n    \n    Note that ``c`` is a list of two arrays of length 11.\n    \n    >>> unew = np.arange(0, 1.01, 0.01)\n    >>> out = splev(unew, (t, c, k))\n    \n    To convert this spline to the power basis, we convert each\n    component of the list of b-spline coefficients, ``c``, into the\n    corresponding cubic polynomial.\n    \n    >>> polys = [PPoly.from_spline((t, cj, k)) for cj in c]\n    >>> polys[0].c.shape\n    (4, 14)\n    \n    Note that the coefficients of the polynomials `polys` are in the\n    power basis and their dimensions reflect just that: here 4 is the order\n    (degree+1), and 14 is the number of intervals---which is nothing but\n    the length of the knot array of the original `tck` minus one.\n    \n    Optionally, we can stack the components into a single `PPoly` along\n    the third dimension:\n    \n    >>> cc = np.dstack([p.c for p in polys])    # has shape = (4, 14, 2)\n    >>> poly = PPoly(cc, polys[0].x)\n    >>> np.allclose(poly(unew).T,     # note the transpose to match `splev`\n    ...             out, atol=1e-15)\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6a4e44cccaaa10bb3ce107a8c0babd3c2376020edd2fa5561beaadd681789301",
            "fields": [
                {
                    "id": "lmypf2sq",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A spline, as returned by `splrep` or a BSpline object.",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9u4696je",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used. Default is True.",
                    "type": "bool or 'periodic'",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i87upbbf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.from_spline",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.from_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evnt4n50",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "872wjwj2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6dg75nmf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1gvlar2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ehc33aki",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0c3xq83b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qkksqim_",
            "name": "PchipInterpolator.integrate",
            "description": "Compute a definite integral over a piecewise polynomial.\n    \n    Parameters\n    ----------\n    a : float\n        Lower integration bound\n    b : float\n        Upper integration bound\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs.\n        If 'periodic', periodic extrapolation is used.\n        If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    ig : array_like\n        Definite integral of the piecewise polynomial over [a, b]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ac9379d34cb0d12339d38638d5300fcb8c1311039ea2595774aceded287677f7",
            "fields": [
                {
                    "id": "c6ym1j4d",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.PchipInterpolator.integrate object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8hb7p4h",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmmob127",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper integration bound",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u2p392ou",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to extrapolate to out-of-bounds points\nbased on first and last intervals, or to return NaNs.\nIf 'periodic', periodic extrapolation is used.\nIf None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iyaq8k5a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.integrate",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2yw4fx66",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z6l46q8t",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f0qddzjv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6oj_kf6y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "31866516",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "whia8cpf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "dmppjd89",
            "name": "PchipInterpolator.roots",
            "description": "Find real roots of the piecewise polynomial.\n    \n    Parameters\n    ----------\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    See Also\n    --------\n    PPoly.solve",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c739823f3629a12b5176fd970c6d1e3583918b657812ddfb24412ff4126415ff",
            "fields": [
                {
                    "id": "gmmub807",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.PchipInterpolator.roots object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzl8rtwz",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0v63y16",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eunhh33w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.roots",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8kwnj53b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k6o99ctv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "c2tgp6_b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7220qm8q",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ujjesth",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1ntakab",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "f04yq3el",
            "name": "PchipInterpolator.solve",
            "description": "Find real solutions of the equation ``pp(x) == y``.\n    \n    Parameters\n    ----------\n    y : float, optional\n        Right-hand side. Default is zero.\n    discontinuity : bool, optional\n        Whether to report sign changes across discontinuities at\n        breakpoints as roots.\n    extrapolate : {bool, 'periodic', None}, optional\n        If bool, determines whether to return roots from the polynomial\n        extrapolated based on first and last intervals, 'periodic' works\n        the same as False. If None (default), use `self.extrapolate`.\n    \n    Returns\n    -------\n    roots : ndarray\n        Roots of the polynomial(s).\n    \n        If the PPoly object describes multiple polynomials, the\n        return value is an object array whose each element is an\n        ndarray containing the roots.\n    \n    Notes\n    -----\n    This routine works only on real-valued polynomials.\n    \n    If the piecewise polynomial contains sections that are\n    identically zero, the root list will contain the start point\n    of the corresponding interval, followed by a ``nan`` value.\n    \n    If the polynomial is discontinuous across a breakpoint, and\n    there is a sign change across the breakpoint, this is reported\n    if the `discont` parameter is True.\n    \n    Examples\n    --------\n    \n    Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals\n    ``[-2, 1], [1, 2]``:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import PPoly\n    >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])\n    >>> pp.solve()\n    array([-1.,  1.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e338a7e60a5129fcceb39f46eff1f10bcb1e18a607729a9b4fada261f5f0bb09",
            "fields": [
                {
                    "id": "_exg367q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._cubic.PchipInterpolator.solve object",
                    "type": "Object:scipy.interpolate._cubic.PchipInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghqto7so",
                    "encoding": "",
                    "name": "y",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Right-hand side. Default is zero.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2omma34g",
                    "encoding": "",
                    "name": "discontinuity",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to report sign changes across discontinuities at\nbreakpoints as roots.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nt0ix6un",
                    "encoding": "",
                    "name": "extrapolate",
                    "value": "",
                    "defaultValue": "",
                    "description": "If bool, determines whether to return roots from the polynomial\nextrapolated based on first and last intervals, 'periodic' works\nthe same as False. If None (default), use `self.extrapolate`.",
                    "type": "{bool, 'periodic', None}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjrl8tii",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator.solve",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator.solve",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0jxvw1ud",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qlemws0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "672__ak_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwvvdtc4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._cubic.PchipInterpolator",
                    "defaultValue": "scipy.interpolate._cubic.PchipInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovvn09qh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qd1nswku",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "e0k_cp4f",
            "name": "RBFInterpolator.__init__",
            "description": "\nRadial basis function interpolator in N \u2265 1 dimensions.\n    \n    Parameters\n    ----------\n    y : (npoints, ndims) array_like\n        2-D array of data point coordinates.\n    d : (npoints, ...) array_like\n        N-D array of data values at `y`. The length of `d` along the first\n        axis must be equal to the length of `y`. Unlike some interpolators, the\n        interpolation axis cannot be changed.\n    neighbors : int, optional\n        If specified, the value of the interpolant at each evaluation point\n        will be computed using only this many nearest data points. All the data\n        points are used by default.\n    smoothing : float or (npoints, ) array_like, optional\n        Smoothing parameter. The interpolant perfectly fits the data when this\n        is set to 0. For large values, the interpolant approaches a least\n        squares fit of a polynomial with the specified degree. Default is 0.\n    kernel : str, optional\n        Type of RBF. This should be one of\n    \n            - 'linear'               : ``-r``\n            - 'thin_plate_spline'    : ``r**2 * log(r)``\n            - 'cubic'                : ``r**3``\n            - 'quintic'              : ``-r**5``\n            - 'multiquadric'         : ``-sqrt(1 + r**2)``\n            - 'inverse_multiquadric' : ``1/sqrt(1 + r**2)``\n            - 'inverse_quadratic'    : ``1/(1 + r**2)``\n            - 'gaussian'             : ``exp(-r**2)``\n    \n        Default is 'thin_plate_spline'.\n    epsilon : float, optional\n        Shape parameter that scales the input to the RBF. If `kernel` is\n        'linear', 'thin_plate_spline', 'cubic', or 'quintic', this defaults to\n        1 and can be ignored because it has the same effect as scaling the\n        smoothing parameter. Otherwise, this must be specified.\n    degree : int, optional\n        Degree of the added polynomial. For some RBFs the interpolant may not\n        be well-posed if the polynomial degree is too small. Those RBFs and\n        their corresponding minimum degrees are\n    \n            - 'multiquadric'      : 0\n            - 'linear'            : 0\n            - 'thin_plate_spline' : 1\n            - 'cubic'             : 1\n            - 'quintic'           : 2\n    \n        The default value is the minimum degree for `kernel` or 0 if there is\n        no minimum degree. Set this to -1 for no added polynomial.\n    \n    Notes\n    -----\n    An RBF is a scalar valued function in N-dimensional space whose value at\n    :math:`x` can be expressed in terms of :math:`r=||x - c||`, where :math:`c`\n    is the center of the RBF.\n    \n    An RBF interpolant for the vector of data values :math:`d`, which are from\n    locations :math:`y`, is a linear combination of RBFs centered at :math:`y`\n    plus a polynomial with a specified degree. The RBF interpolant is written\n    as\n    \n    .. math::\n        f(x) = K(x, y) a + P(x) b,\n    \n    where :math:`K(x, y)` is a matrix of RBFs with centers at :math:`y`\n    evaluated at the points :math:`x`, and :math:`P(x)` is a matrix of\n    monomials, which span polynomials with the specified degree, evaluated at\n    :math:`x`. The coefficients :math:`a` and :math:`b` are the solution to the\n    linear equations\n    \n    .. math::\n        (K(y, y) + \\lambda I) a + P(y) b = d\n    \n    and\n    \n    .. math::\n        P(y)^T a = 0,\n    \n    where :math:`\\lambda` is a non-negative smoothing parameter that controls\n    how well we want to fit the data. The data are fit exactly when the\n    smoothing parameter is 0.\n    \n    The above system is uniquely solvable if the following requirements are\n    met:\n    \n        - :math:`P(y)` must have full column rank. :math:`P(y)` always has full\n          column rank when `degree` is -1 or 0. When `degree` is 1,\n          :math:`P(y)` has full column rank if the data point locations are not\n          all collinear (N=2), coplanar (N=3), etc.\n        - If `kernel` is 'multiquadric', 'linear', 'thin_plate_spline',\n          'cubic', or 'quintic', then `degree` must not be lower than the\n          minimum value listed above.\n        - If `smoothing` is 0, then each data point location must be distinct.\n    \n    When using an RBF that is not scale invariant ('multiquadric',\n    'inverse_multiquadric', 'inverse_quadratic', or 'gaussian'), an appropriate\n    shape parameter must be chosen (e.g., through cross validation). Smaller\n    values for the shape parameter correspond to wider RBFs. The problem can\n    become ill-conditioned or singular when the shape parameter is too small.\n    \n    The memory required to solve for the RBF interpolation coefficients\n    increases quadratically with the number of data points, which can become\n    impractical when interpolating more than about a thousand data points.\n    To overcome memory limitations for large interpolation problems, the\n    `neighbors` argument can be specified to compute an RBF interpolant for\n    each evaluation point using only the nearest data points.\n    \n    .. versionadded:: 1.7.0\n    \n    See Also\n    --------\n    NearestNDInterpolator\n    LinearNDInterpolator\n    CloughTocher2DInterpolator\n    \n    References\n    ----------\n    .. [1] Fasshauer, G., 2007. Meshfree Approximation Methods with Matlab.\n        World Scientific Publishing Co.\n    \n    .. [2] http://amadeus.math.iit.edu/~fass/603_ch3.pdf\n    \n    .. [3] Wahba, G., 1990. Spline Models for Observational Data. SIAM.\n    \n    .. [4] http://pages.stat.wisc.edu/~wahba/stat860public/lect/lect8/lect8.pdf\n    \n    Examples\n    --------\n    Demonstrate interpolating scattered data to a grid in 2-D.\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import RBFInterpolator\n    >>> from scipy.stats.qmc import Halton\n    \n    >>> rng = np.random.default_rng()\n    >>> xobs = 2*Halton(2, seed=rng).random(100) - 1\n    >>> yobs = np.sum(xobs, axis=1)*np.exp(-6*np.sum(xobs**2, axis=1))\n    \n    >>> xgrid = np.mgrid[-1:1:50j, -1:1:50j]\n    >>> xflat = xgrid.reshape(2, -1).T\n    >>> yflat = RBFInterpolator(xobs, yobs)(xflat)\n    >>> ygrid = yflat.reshape(50, 50)\n    \n    >>> fig, ax = plt.subplots()\n    >>> ax.pcolormesh(*xgrid, ygrid, vmin=-0.25, vmax=0.25, shading='gouraud')\n    >>> p = ax.scatter(*xobs.T, c=yobs, s=50, ec='k', vmin=-0.25, vmax=0.25)\n    >>> fig.colorbar(p)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d2604775bff621bfedde1cd2ba5fb3ad6fa089e80bf1f572711ead2203f199c0",
            "fields": [
                {
                    "id": "ev92bbt3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RBFInterpolator object",
                    "type": "Object:scipy.interpolate._rbfinterp.RBFInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0mtsxj1",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array of data point coordinates.",
                    "type": "(npoints, ndims) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csye067a",
                    "encoding": "",
                    "name": "d",
                    "value": "",
                    "defaultValue": "",
                    "description": "N-D array of data values at `y`. The length of `d` along the first\naxis must be equal to the length of `y`. Unlike some interpolators, the\ninterpolation axis cannot be changed.",
                    "type": "(npoints, ...) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_znp00e2",
                    "encoding": "",
                    "name": "neighbors",
                    "value": "",
                    "defaultValue": "",
                    "description": "If specified, the value of the interpolant at each evaluation point\nwill be computed using only this many nearest data points. All the data\npoints are used by default.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jgw54x7z",
                    "encoding": "",
                    "name": "smoothing",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Smoothing parameter. The interpolant perfectly fits the data when this\nis set to 0. For large values, the interpolant approaches a least\nsquares fit of a polynomial with the specified degree. Default is 0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bcepj3yc",
                    "encoding": "",
                    "name": "kernel",
                    "value": "thin_plate_spline",
                    "defaultValue": "thin_plate_spline",
                    "description": "Type of RBF. This should be one of\n\n    - 'linear'               : ``-r``\n    - 'thin_plate_spline'    : ``r**2 * log(r)``\n    - 'cubic'                : ``r**3``\n    - 'quintic'              : ``-r**5``\n    - 'multiquadric'         : ``-sqrt(1 + r**2)``\n    - 'inverse_multiquadric' : ``1/sqrt(1 + r**2)``\n    - 'inverse_quadratic'    : ``1/(1 + r**2)``\n    - 'gaussian'             : ``exp(-r**2)``\n\nDefault is 'thin_plate_spline'.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovqarcsj",
                    "encoding": "",
                    "name": "epsilon",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape parameter that scales the input to the RBF. If `kernel` is\n'linear', 'thin_plate_spline', 'cubic', or 'quintic', this defaults to\n1 and can be ignored because it has the same effect as scaling the\nsmoothing parameter. Otherwise, this must be specified.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "renrt37a",
                    "encoding": "",
                    "name": "degree",
                    "value": "",
                    "defaultValue": "",
                    "description": "Degree of the added polynomial. For some RBFs the interpolant may not\nbe well-posed if the polynomial degree is too small. Those RBFs and\ntheir corresponding minimum degrees are\n\n    - 'multiquadric'      : 0\n    - 'linear'            : 0\n    - 'thin_plate_spline' : 1\n    - 'cubic'             : 1\n    - 'quintic'           : 2\n\nThe default value is the minimum degree for `kernel` or 0 if there is\nno minimum degree. Set this to -1 for no added polynomial.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "24yr91ze",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._rbfinterp.RBFInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._rbfinterp.RBFInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1xdwm80a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y29fi6cj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "p6s1u5yx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v92q_ztc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._rbfinterp.RBFInterpolator",
                    "defaultValue": "scipy.interpolate._rbfinterp.RBFInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "prg34n2x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ftrnowpz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cjw5bfpb",
            "name": "Rbf.__init__",
            "description": "\nRbf(*args, **kwargs)\n    \n    Class for radial basis function interpolation of functions from\n    N-D scattered data to an M-D domain (legacy).\n    \n    .. legacy:: class\n    \n        `Rbf` is legacy code, for new usage please use `RBFInterpolator`\n        instead.\n    \n    Parameters\n    ----------\n    *args : arrays\n        x, y, z, ..., d, where x, y, z, ... are the coordinates of the nodes\n        and d is the array of values at the nodes\n    function : str or callable, optional\n        The radial basis function, based on the radius, r, given by the norm\n        (default is Euclidean distance); the default is 'multiquadric'::\n    \n            'multiquadric': sqrt((r/self.epsilon)**2 + 1)\n            'inverse': 1.0/sqrt((r/self.epsilon)**2 + 1)\n            'gaussian': exp(-(r/self.epsilon)**2)\n            'linear': r\n            'cubic': r**3\n            'quintic': r**5\n            'thin_plate': r**2 * log(r)\n    \n        If callable, then it must take 2 arguments (self, r). The epsilon\n        parameter will be available as self.epsilon. Other keyword\n        arguments passed in will be available as well.\n    \n    epsilon : float, optional\n        Adjustable constant for gaussian or multiquadrics functions\n        - defaults to approximate average distance between nodes (which is\n        a good start).\n    smooth : float, optional\n        Values greater than zero increase the smoothness of the\n        approximation. 0 is for interpolation (default), the function will\n        always go through the nodal points in this case.\n    norm : str, callable, optional\n        A function that returns the 'distance' between two points, with\n        inputs as arrays of positions (x, y, z, ...), and an output as an\n        array of distance. E.g., the default: 'euclidean', such that the result\n        is a matrix of the distances from each point in ``x1`` to each point in\n        ``x2``. For more options, see documentation of\n        `scipy.spatial.distances.cdist`.\n    mode : str, optional\n        Mode of the interpolation, can be '1-D' (default) or 'N-D'. When it is\n        '1-D' the data `d` will be considered as 1-D and flattened\n        internally. When it is 'N-D' the data `d` is assumed to be an array of\n        shape (n_samples, m), where m is the dimension of the target domain.\n    \n    \n    Attributes\n    ----------\n    N : int\n        The number of data points (as determined by the input arrays).\n    di : ndarray\n        The 1-D array of data values at each of the data coordinates `xi`.\n    xi : ndarray\n        The 2-D array of data coordinates.\n    function : str or callable\n        The radial basis function. See description under Parameters.\n    epsilon : float\n        Parameter used by gaussian or multiquadrics functions. See Parameters.\n    smooth : float\n        Smoothing parameter. See description under Parameters.\n    norm : str or callable\n        The distance function. See description under Parameters.\n    mode : str\n        Mode of the interpolation. See description under Parameters.\n    nodes : ndarray\n        A 1-D array of node values for the interpolation.\n    A : internal property, do not use\n    \n    See Also\n    --------\n    RBFInterpolator\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import Rbf\n    >>> rng = np.random.default_rng()\n    >>> x, y, z, d = rng.random((4, 50))\n    >>> rbfi = Rbf(x, y, z, d)  # radial basis function interpolator instance\n    >>> xi = yi = zi = np.linspace(0, 1, 20)\n    >>> di = rbfi(xi, yi, zi)   # interpolated values\n    >>> di.shape\n    (20,)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2e2a579c9c811e4d9699eccbd2068489a618080cf7d9b2b7296f2ab847728456",
            "fields": [
                {
                    "id": "m_z1esme",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Rbf object",
                    "type": "Object:scipy.interpolate._rbf.Rbf",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vyxj0yt",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ggj2b6a",
                    "encoding": "",
                    "name": "kwargs",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "Dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9q88e9kn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._rbf.Rbf.__init__",
                    "defaultValue": "scipy.interpolate._rbf.Rbf.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70h0vmjc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ogq7tw5a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kwk8876b",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j35dg7mk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._rbf.Rbf",
                    "defaultValue": "scipy.interpolate._rbf.Rbf",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qn7ekpid",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4socm45o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3s1iih2f",
            "name": "RectBivariateSpline.__init__",
            "description": "\nBivariate spline approximation over a rectangular mesh.\n    \n    Can be used for both smoothing and interpolating data.\n    \n    Parameters\n    ----------\n    x,y : array_like\n        1-D arrays of coordinates in strictly ascending order.\n        Evaluated points outside the data range will be extrapolated.\n    z : array_like\n        2-D array of data with shape (x.size,y.size).\n    bbox : array_like, optional\n        Sequence of length 4 specifying the boundary of the rectangular\n        approximation domain, which means the start and end spline knots of\n        each dimension are set by these values. By default,\n        ``bbox=[min(x), max(x), min(y), max(y)]``.\n    kx, ky : ints, optional\n        Degrees of the bivariate spline. Default is 3.\n    s : float, optional\n        Positive smoothing factor defined for estimation condition:\n        ``sum((z[i]-f(x[i], y[i]))**2, axis=0) <= s`` where f is a spline\n        function. Default is ``s=0``, which is for interpolation.\n    maxit : int, optional\n        The maximal number of iterations maxit allowed for finding a\n        smoothing spline with fp=s. Default is ``maxit=20``.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    \n    Notes\n    -----\n    \n    If the input data is such that input dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolating.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4870a3296681a95ce55a2bb90885220a910026b704585f0346dc5725f345760c",
            "fields": [
                {
                    "id": "os2k_x53",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RectBivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5do94bg",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ptjzpvyr",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "165j8t2y",
                    "encoding": "",
                    "name": "z",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array of data with shape (x.size,y.size).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6uygpjum",
                    "encoding": "",
                    "name": "bbox",
                    "value": [
                        null,
                        null,
                        null,
                        null
                    ],
                    "defaultValue": [
                        null,
                        null,
                        null,
                        null
                    ],
                    "description": "Sequence of length 4 specifying the boundary of the rectangular\napproximation domain, which means the start and end spline knots of\neach dimension are set by these values. By default,\n``bbox=[min(x), max(x), min(y), max(y)]``.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xx7ax4l7",
                    "encoding": "",
                    "name": "kx",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zlxue4gc",
                    "encoding": "",
                    "name": "ky",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z5ez8uar",
                    "encoding": "",
                    "name": "s",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Positive smoothing factor defined for estimation condition:\n``sum((z[i]-f(x[i], y[i]))**2, axis=0) <= s`` where f is a spline\nfunction. Default is ``s=0``, which is for interpolation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hi2ydjqn",
                    "encoding": "",
                    "name": "maxit",
                    "value": 20,
                    "defaultValue": 20,
                    "description": "The maximal number of iterations maxit allowed for finding a\nsmoothing spline with fp=s. Default is ``maxit=20``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j611soln",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8i9skkbw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kwq76fuq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0mvfm398",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n_p2cvd8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "za2big2c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0oi9ir7c",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "wrnju67v",
            "name": "RectBivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(xi[i], yi[i]),\n    i=0,...,len(xi)-1``.\n    \n    Parameters\n    ----------\n    xi, yi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        ``np.meshgrid(..., indexing=\"ij\")`` and inconsistent with the\n        default ordering ``np.meshgrid(..., indexing=\"xy\")``.\n    dx : int, optional\n        Order of x-derivative\n    \n        .. versionadded:: 0.14.0\n    dy : int, optional\n        Order of y-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to bilinearly interpolate an exponentially decaying\n    function in 2 dimensions.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectBivariateSpline\n    >>> def f(x, y):\n    ...     return np.exp(-np.sqrt((x / 2) ** 2 + y**2))\n    \n    We sample the function on a coarse grid and set up the interpolator. Note that\n    the default ``indexing=\"xy\"`` of meshgrid would result in an unexpected\n    (transposed) result after interpolation.\n    \n    >>> xarr = np.linspace(-3, 3, 21)\n    >>> yarr = np.linspace(-3, 3, 21)\n    >>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=\"ij\")\n    >>> zdata = f(xgrid, ygrid)\n    >>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)\n    \n    Next we sample the function along a diagonal slice through the coordinate space\n    on a finer grid using interpolation.\n    \n    >>> xinterp = np.linspace(-3, 3, 201)\n    >>> yinterp = np.linspace(3, -3, 201)\n    >>> zinterp = rbs.ev(xinterp, yinterp)\n    \n    And check that the interpolation passes through the function evaluations as a\n    function of the distance from the origin along the slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sqrt(xarr**2 + yarr**2), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sqrt(xinterp**2 + yinterp**2), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8b98695de3bb45f28ac063d8401f09028299fc1d5781109251c80409076113d0",
            "fields": [
                {
                    "id": "9fiqe5dp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectBivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rqkgg9sj",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nadl32q1",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hjba4zrt",
                    "encoding": "",
                    "name": "dx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of x-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5x516cxx",
                    "encoding": "",
                    "name": "dy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of y-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "um2p2fdy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdxq5yjd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3vvg4sh5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l62salb_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9d5vxxgg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olb4f8ha",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ou7n6hy4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yiqqmypb",
            "name": "RectBivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cc7757736bc098ec1054baf83f041c81ccf19f14e6e3d97bdd01031b7123b62c",
            "fields": [
                {
                    "id": "l29ve5s0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectBivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbxd_n2t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8mduev5a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3thts5v7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ouf3ilij",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aab9q8et",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yw7cuiuf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "idc2vuqv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "3m1yx3c9",
            "name": "RectBivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bee6b4c6cab290c9374978ec8540c1fc06d167fadea387ce871c33e837fbee66",
            "fields": [
                {
                    "id": "tfytdkos",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectBivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0s4j4q8q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_4w_i_z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "faby35by",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "izjubb6m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ua0zwpbj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_t9wjpw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dso4cklx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zzvtdgy4",
            "name": "RectBivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a47f8c99fd78f43f3f14347e47bdbfe6eabc77a32d5726eb09f930e10a7853c1",
            "fields": [
                {
                    "id": "6ax4km4w",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectBivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "edd58l6v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "823spubq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c3ueq6w1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mzmei36i",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dprtliny",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wqkoosau",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nll_1783",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "m0cvytw4",
            "name": "RectBivariateSpline.integral",
            "description": "Evaluate the integral of the spline over area [xa,xb] x [ya,yb].\n    \n    Parameters\n    ----------\n    xa, xb : float\n        The end-points of the x integration interval.\n    ya, yb : float\n        The end-points of the y integration interval.\n    \n    Returns\n    -------\n    integ : float\n        The value of the resulting integral.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f85ab7f69685b61c91b79b0e97ca12f49705cbaba653ae3cee5d173f457d48ea",
            "fields": [
                {
                    "id": "annrzz47",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectBivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7d9tmr3x",
                    "encoding": "",
                    "name": "xa",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4miz01_m",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q79t2je",
                    "encoding": "",
                    "name": "ya",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "atndcahd",
                    "encoding": "",
                    "name": "yb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8rw7q2io",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3wy_pqz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vdpfxsfk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "edyd2zjc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2n1x5a5e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ut8s1hkt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kgtf17tx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gi80c2zf",
            "name": "RectBivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e2534893d631cdc2047e3eb5259541d7c4d47acf094cf2b18ce5f0767bbde830",
            "fields": [
                {
                    "id": "hjjn3_2q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectBivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.RectBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q592d992",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxwmzt6n",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "921mz1zn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7c7p7h2c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "apqplb55",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5d__tgyh",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ax2hrojr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m7rzrcqz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x6qi7q38",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "n4wzftm5",
            "name": "RectSphereBivariateSpline.__init__",
            "description": "\nBivariate spline approximation over a rectangular mesh on a sphere.\n    \n    Can be used for smoothing data.\n    \n    .. versionadded:: 0.11.0\n    \n    Parameters\n    ----------\n    u : array_like\n        1-D array of colatitude coordinates in strictly ascending order.\n        Coordinates must be given in radians and lie within the open interval\n        ``(0, pi)``.\n    v : array_like\n        1-D array of longitude coordinates in strictly ascending order.\n        Coordinates must be given in radians. First element (``v[0]``) must lie\n        within the interval ``[-pi, pi)``. Last element (``v[-1]``) must satisfy\n        ``v[-1] <= v[0] + 2*pi``.\n    r : array_like\n        2-D array of data with shape ``(u.size, v.size)``.\n    s : float, optional\n        Positive smoothing factor defined for estimation condition\n        (``s=0`` is for interpolation).\n    pole_continuity : bool or (bool, bool), optional\n        Order of continuity at the poles ``u=0`` (``pole_continuity[0]``) and\n        ``u=pi`` (``pole_continuity[1]``).  The order of continuity at the pole\n        will be 1 or 0 when this is True or False, respectively.\n        Defaults to False.\n    pole_values : float or (float, float), optional\n        Data values at the poles ``u=0`` and ``u=pi``.  Either the whole\n        parameter or each individual element can be None.  Defaults to None.\n    pole_exact : bool or (bool, bool), optional\n        Data value exactness at the poles ``u=0`` and ``u=pi``.  If True, the\n        value is considered to be the right function value, and it will be\n        fitted exactly. If False, the value will be considered to be a data\n        value just like the other data values.  Defaults to False.\n    pole_flat : bool or (bool, bool), optional\n        For the poles at ``u=0`` and ``u=pi``, specify whether or not the\n        approximation has vanishing derivatives.  Defaults to False.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh.\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    \n    Notes\n    -----\n    Currently, only the smoothing spline approximation (``iopt[0] = 0`` and\n    ``iopt[0] = 1`` in the FITPACK routine) is supported.  The exact\n    least-squares spline approximation is not implemented yet.\n    \n    When actually performing the interpolation, the requested `v` values must\n    lie within the same length 2pi interval that the original `v` values were\n    chosen from.\n    \n    For more information, see the FITPACK_ site about this function.\n    \n    .. _FITPACK: http://www.netlib.org/dierckx/spgrid.f\n    \n    Examples\n    --------\n    Suppose we have global data on a coarse grid\n    \n    >>> import numpy as np\n    >>> lats = np.linspace(10, 170, 9) * np.pi / 180.\n    >>> lons = np.linspace(0, 350, 18) * np.pi / 180.\n    >>> data = np.dot(np.atleast_2d(90. - np.linspace(-80., 80., 18)).T,\n    ...               np.atleast_2d(180. - np.abs(np.linspace(0., 350., 9)))).T\n    \n    We want to interpolate it to a global one-degree grid\n    \n    >>> new_lats = np.linspace(1, 180, 180) * np.pi / 180\n    >>> new_lons = np.linspace(1, 360, 360) * np.pi / 180\n    >>> new_lats, new_lons = np.meshgrid(new_lats, new_lons)\n    \n    We need to set up the interpolator object\n    \n    >>> from scipy.interpolate import RectSphereBivariateSpline\n    >>> lut = RectSphereBivariateSpline(lats, lons, data)\n    \n    Finally we interpolate the data.  The `RectSphereBivariateSpline` object\n    only takes 1-D arrays as input, therefore we need to do some reshaping.\n    \n    >>> data_interp = lut.ev(new_lats.ravel(),\n    ...                      new_lons.ravel()).reshape((360, 180)).T\n    \n    Looking at the original and the interpolated data, one can see that the\n    interpolant reproduces the original data very well:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(211)\n    >>> ax1.imshow(data, interpolation='nearest')\n    >>> ax2 = fig.add_subplot(212)\n    >>> ax2.imshow(data_interp, interpolation='nearest')\n    >>> plt.show()\n    \n    Choosing the optimal value of ``s`` can be a delicate task. Recommended\n    values for ``s`` depend on the accuracy of the data values.  If the user\n    has an idea of the statistical errors on the data, she can also find a\n    proper estimate for ``s``. By assuming that, if she specifies the\n    right ``s``, the interpolator will use a spline ``f(u,v)`` which exactly\n    reproduces the function underlying the data, she can evaluate\n    ``sum((r(i,j)-s(u(i),v(j)))**2)`` to find a good estimate for this ``s``.\n    For example, if she knows that the statistical errors on her\n    ``r(i,j)``-values are not greater than 0.1, she may expect that a good\n    ``s`` should have a value not larger than ``u.size * v.size * (0.1)**2``.\n    \n    If nothing is known about the statistical error in ``r(i,j)``, ``s`` must\n    be determined by trial and error.  The best is then to start with a very\n    large value of ``s`` (to determine the least-squares polynomial and the\n    corresponding upper bound ``fp0`` for ``s``) and then to progressively\n    decrease the value of ``s`` (say by a factor 10 in the beginning, i.e.\n    ``s = fp0 / 10, fp0 / 100, ...``  and more carefully as the approximation\n    shows more detail) to obtain closer fits.\n    \n    The interpolation results for different values of ``s`` give some insight\n    into this process:\n    \n    >>> fig2 = plt.figure()\n    >>> s = [3e9, 2e9, 1e9, 1e8]\n    >>> for idx, sval in enumerate(s, 1):\n    ...     lut = RectSphereBivariateSpline(lats, lons, data, s=sval)\n    ...     data_interp = lut.ev(new_lats.ravel(),\n    ...                          new_lons.ravel()).reshape((360, 180)).T\n    ...     ax = fig2.add_subplot(2, 2, idx)\n    ...     ax.imshow(data_interp, interpolation='nearest')\n    ...     ax.set_title(f\"s = {sval:g}\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1ea73e365866e5f718df96aab710cdc8083bc10e951e9cf9eb5078d922093eb4",
            "fields": [
                {
                    "id": "clnmr6o0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RectSphereBivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kx7xideo",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of colatitude coordinates in strictly ascending order.\nCoordinates must be given in radians and lie within the open interval\n``(0, pi)``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qx6nuzy",
                    "encoding": "",
                    "name": "v",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of longitude coordinates in strictly ascending order.\nCoordinates must be given in radians. First element (``v[0]``) must lie\nwithin the interval ``[-pi, pi)``. Last element (``v[-1]``) must satisfy\n``v[-1] <= v[0] + 2*pi``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3mfwz26",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "2-D array of data with shape ``(u.size, v.size)``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9n3kme7",
                    "encoding": "",
                    "name": "s",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Positive smoothing factor defined for estimation condition\n(``s=0`` is for interpolation).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp7ch0pi",
                    "encoding": "",
                    "name": "pole_continuity",
                    "value": false,
                    "defaultValue": false,
                    "description": "Order of continuity at the poles ``u=0`` (``pole_continuity[0]``) and\n``u=pi`` (``pole_continuity[1]``).  The order of continuity at the pole\nwill be 1 or 0 when this is True or False, respectively.\nDefaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z78xafuj",
                    "encoding": "",
                    "name": "pole_values",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data values at the poles ``u=0`` and ``u=pi``.  Either the whole\nparameter or each individual element can be None.  Defaults to None.",
                    "type": "float or (float, float)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4kc434f",
                    "encoding": "",
                    "name": "pole_exact",
                    "value": false,
                    "defaultValue": false,
                    "description": "Data value exactness at the poles ``u=0`` and ``u=pi``.  If True, the\nvalue is considered to be the right function value, and it will be\nfitted exactly. If False, the value will be considered to be a data\nvalue just like the other data values.  Defaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "siqrs_j3",
                    "encoding": "",
                    "name": "pole_flat",
                    "value": false,
                    "defaultValue": false,
                    "description": "For the poles at ``u=0`` and ``u=pi``, specify whether or not the\napproximation has vanishing derivatives.  Defaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t9davwf4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u94y0qvo",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yi5w6mqw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l40gc9xu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hkplgzbu",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pksbain9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urf8phdn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "zclpw_8o",
            "name": "RectSphereBivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(theta[i], phi[i]),\n    i=0,...,len(theta)-1``.\n    \n    Parameters\n    ----------\n    theta, phi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        np.meshgrid(..., indexing=\"ij\") and inconsistent with the\n        default ordering np.meshgrid(..., indexing=\"xy\").\n    dtheta : int, optional\n        Order of theta-derivative\n    \n        .. versionadded:: 0.14.0\n    dphi : int, optional\n        Order of phi-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to use splines to interpolate a bivariate function on a\n    sphere. The value of the function is known on a grid of longitudes and\n    colatitudes.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectSphereBivariateSpline\n    >>> def f(theta, phi):\n    ...     return np.sin(theta) * np.cos(phi)\n    \n    We evaluate the function on the grid. Note that the default indexing=\"xy\"\n    of meshgrid would result in an unexpected (transposed) result after\n    interpolation.\n    \n    >>> thetaarr = np.linspace(0, np.pi, 22)[1:-1]\n    >>> phiarr = np.linspace(0, 2 * np.pi, 21)[:-1]\n    >>> thetagrid, phigrid = np.meshgrid(thetaarr, phiarr, indexing=\"ij\")\n    >>> zdata = f(thetagrid, phigrid)\n    \n    We next set up the interpolator and use it to evaluate the function\n    at points not on the original grid.\n    \n    >>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)\n    >>> thetainterp = np.linspace(thetaarr[0], thetaarr[-1], 200)\n    >>> phiinterp = np.linspace(phiarr[0], phiarr[-1], 200)\n    >>> zinterp = rsbs.ev(thetainterp, phiinterp)\n    \n    Finally we plot the original data for a diagonal slice through the\n    initial grid, and the spline approximation along the same slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sin(thetaarr) * np.sin(phiarr), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sin(thetainterp) * np.sin(phiinterp), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e3816950ddfc3aa421d7aa371a76b43930500d0f154697b29673c06488429134",
            "fields": [
                {
                    "id": "e67lcrwa",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectSphereBivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fwe4wq7s",
                    "encoding": "",
                    "name": "theta",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5unb80z",
                    "encoding": "",
                    "name": "phi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t88oynxl",
                    "encoding": "",
                    "name": "dtheta",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of theta-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "swnk2vx4",
                    "encoding": "",
                    "name": "dphi",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of phi-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxdb7t4t",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f3jeae3o",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "euhg07nj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "n9n_2okg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9w9x7uln",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djc96ax_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lczmlaem",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "w80be62s",
            "name": "RectSphereBivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e4e90a6d2efbc4878431c38ee7d950450c3f993911761076ecc2e7933945d56c",
            "fields": [
                {
                    "id": "essllx9c",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufqislnn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jap339d0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7ps2e_6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_wwdmj6m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1gicmqxd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dzyy3pg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jto80snf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "kcl40ndn",
            "name": "RectSphereBivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6d615e1db47f270c012908ee76497f513f060d8688d05f9b8d76f6567d1f4e9f",
            "fields": [
                {
                    "id": "e6b8q5ce",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xn15e8u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emeg6ph6",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80__l38f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h401mjkz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4id5sgq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ngmi46f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l4xn7a_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oy0c6ju7",
            "name": "RectSphereBivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0acac9158bbf375f334d663069e435664ea7ab58f9b6d277a2c674067dc9e1a3",
            "fields": [
                {
                    "id": "na_tivdp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qogqzh8",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mtl2803l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i6lva7j9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m5bhwx91",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6tvh7v1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "18g2u86n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9b4l7amn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "c8vq4_cv",
            "name": "RectSphereBivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0bf97dd65819cdaf2cfd40b2856a001f53ef6fca92557eb3af9f23a5a779d38e",
            "fields": [
                {
                    "id": "ykx6uv3w",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.RectSphereBivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2oe1mcy",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x83jg14x",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yucaon5u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ydkjn8e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "76de9v3g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "137919ip",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_6w18876",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.RectSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7w_sxv8e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0i5mnh6u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "x6rr7o8f",
            "name": "RegularGridInterpolator.__init__",
            "description": "\nInterpolator of specified order on a rectilinear grid in N \u2265 1 dimensions.\n    \n    The data must be defined on a rectilinear grid; that is, a rectangular\n    grid with even or uneven spacing. Linear, nearest-neighbor, spline\n    interpolations are supported. After setting up the interpolator object,\n    the interpolation method may be chosen at each evaluation.\n    \n    Parameters\n    ----------\n    points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, )\n        The points defining the regular grid in n dimensions. The points in\n        each dimension (i.e. every elements of the points tuple) must be\n        strictly ascending or descending.\n    \n    values : array_like, shape (m1, ..., mn, ...)\n        The data on the regular grid in n dimensions. Complex data is\n        accepted.\n    \n    method : str, optional\n        The method of interpolation to perform. Supported are \"linear\",\n        \"nearest\", \"slinear\", \"cubic\", \"quintic\" and \"pchip\". This\n        parameter will become the default for the object's ``__call__``\n        method. Default is \"linear\".\n    \n    bounds_error : bool, optional\n        If True, when interpolated values are requested outside of the\n        domain of the input data, a ValueError is raised.\n        If False, then `fill_value` is used.\n        Default is True.\n    \n    fill_value : float or None, optional\n        The value to use for points outside of the interpolation domain.\n        If None, values outside the domain are extrapolated.\n        Default is ``np.nan``.\n    \n    solver : callable, optional\n        Only used for methods \"slinear\", \"cubic\" and \"quintic\".\n        Sparse linear algebra solver for construction of the NdBSpline instance.\n        Default is the iterative solver `scipy.sparse.linalg.gcrotmk`.\n    \n        .. versionadded:: 1.13\n    \n    solver_args: dict, optional\n        Additional arguments to pass to `solver`, if any.\n    \n        .. versionadded:: 1.13\n    \n    Methods\n    -------\n    __call__\n    \n    Attributes\n    ----------\n    grid : tuple of ndarrays\n        The points defining the regular grid in n dimensions.\n        This tuple defines the full grid via\n        ``np.meshgrid(*grid, indexing='ij')``\n    values : ndarray\n        Data values at the grid.\n    method : str\n        Interpolation method.\n    fill_value : float or ``None``\n        Use this value for out-of-bounds arguments to `__call__`.\n    bounds_error : bool\n        If ``True``, out-of-bounds argument raise a ``ValueError``.\n    \n    Notes\n    -----\n    Contrary to `LinearNDInterpolator` and `NearestNDInterpolator`, this class\n    avoids expensive triangulation of the input data by taking advantage of the\n    regular grid structure.\n    \n    In other words, this class assumes that the data is defined on a\n    *rectilinear* grid.\n    \n    .. versionadded:: 0.14\n    \n    The 'slinear'(k=1), 'cubic'(k=3), and 'quintic'(k=5) methods are\n    tensor-product spline interpolators, where `k` is the spline degree,\n    If any dimension has fewer points than `k` + 1, an error will be raised.\n    \n    .. versionadded:: 1.9\n    \n    If the input data is such that dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolating.\n    \n    **Choosing a solver for spline methods**\n    \n    Spline methods, \"slinear\", \"cubic\" and \"quintic\" involve solving a\n    large sparse linear system at instantiation time. Depending on data,\n    the default solver may or may not be adequate. When it is not, you may\n    need to experiment with an optional `solver` argument, where you may\n    choose between the direct solver (`scipy.sparse.linalg.spsolve`) or\n    iterative solvers from `scipy.sparse.linalg`. You may need to supply\n    additional parameters via the optional `solver_args` parameter (for instance,\n    you may supply the starting value or target tolerance). See the\n    `scipy.sparse.linalg` documentation for the full list of available options.\n    \n    Alternatively, you may instead use the legacy methods, \"slinear_legacy\",\n    \"cubic_legacy\" and \"quintic_legacy\". These methods allow faster construction\n    but evaluations will be much slower.\n    \n    **Rounding rule at half points with `nearest` method**\n    \n    The rounding rule with the `nearest` method at half points is rounding *down*.\n    \n    \n    Examples\n    --------\n    **Evaluate a function on the points of a 3-D grid**\n    \n    As a first example, we evaluate a simple example function on the points of\n    a 3-D grid:\n    \n    >>> from scipy.interpolate import RegularGridInterpolator\n    >>> import numpy as np\n    >>> def f(x, y, z):\n    ...     return 2 * x**3 + 3 * y**2 - z\n    >>> x = np.linspace(1, 4, 11)\n    >>> y = np.linspace(4, 7, 22)\n    >>> z = np.linspace(7, 9, 33)\n    >>> xg, yg ,zg = np.meshgrid(x, y, z, indexing='ij', sparse=True)\n    >>> data = f(xg, yg, zg)\n    \n    ``data`` is now a 3-D array with ``data[i, j, k] = f(x[i], y[j], z[k])``.\n    Next, define an interpolating function from this data:\n    \n    >>> interp = RegularGridInterpolator((x, y, z), data)\n    \n    Evaluate the interpolating function at the two points\n    ``(x,y,z) = (2.1, 6.2, 8.3)`` and ``(3.3, 5.2, 7.1)``:\n    \n    >>> pts = np.array([[2.1, 6.2, 8.3],\n    ...                 [3.3, 5.2, 7.1]])\n    >>> interp(pts)\n    array([ 125.80469388,  146.30069388])\n    \n    which is indeed a close approximation to\n    \n    >>> f(2.1, 6.2, 8.3), f(3.3, 5.2, 7.1)\n    (125.54200000000002, 145.894)\n    \n    **Interpolate and extrapolate a 2D dataset**\n    \n    As a second example, we interpolate and extrapolate a 2D data set:\n    \n    >>> x, y = np.array([-2, 0, 4]), np.array([-2, 0, 2, 5])\n    >>> def ff(x, y):\n    ...     return x**2 + y**2\n    \n    >>> xg, yg = np.meshgrid(x, y, indexing='ij')\n    >>> data = ff(xg, yg)\n    >>> interp = RegularGridInterpolator((x, y), data,\n    ...                                  bounds_error=False, fill_value=None)\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(projection='3d')\n    >>> ax.scatter(xg.ravel(), yg.ravel(), data.ravel(),\n    ...            s=60, c='k', label='data')\n    \n    Evaluate and plot the interpolator on a finer grid\n    \n    >>> xx = np.linspace(-4, 9, 31)\n    >>> yy = np.linspace(-4, 9, 31)\n    >>> X, Y = np.meshgrid(xx, yy, indexing='ij')\n    \n    >>> # interpolator\n    >>> ax.plot_wireframe(X, Y, interp((X, Y)), rstride=3, cstride=3,\n    ...                   alpha=0.4, color='m', label='linear interp')\n    \n    >>> # ground truth\n    >>> ax.plot_wireframe(X, Y, ff(X, Y), rstride=3, cstride=3,\n    ...                   alpha=0.4, label='ground truth')\n    >>> plt.legend()\n    >>> plt.show()\n    \n    Other examples are given\n    :ref:`in the tutorial <tutorial-interpolate_regular_grid_interpolator>`.\n    \n    See Also\n    --------\n    NearestNDInterpolator : Nearest neighbor interpolator on *unstructured*\n                            data in N dimensions\n    \n    LinearNDInterpolator : Piecewise linear interpolator on *unstructured* data\n                           in N dimensions\n    \n    interpn : a convenience function which wraps `RegularGridInterpolator`\n    \n    scipy.ndimage.map_coordinates : interpolation on grids with equal spacing\n                                    (suitable for e.g., N-D image resampling)\n    \n    References\n    ----------\n    .. [1] Python package *regulargrid* by Johannes Buchner, see\n           https://pypi.python.org/pypi/regulargrid/\n    .. [2] Wikipedia, \"Trilinear interpolation\",\n           https://en.wikipedia.org/wiki/Trilinear_interpolation\n    .. [3] Weiser, Alan, and Sergio E. Zarantonello. \"A note on piecewise linear\n           and multilinear table interpolation in many dimensions.\" MATH.\n           COMPUT. 50.181 (1988): 189-196.\n           https://www.ams.org/journals/mcom/1988-50-181/S0025-5718-1988-0917826-0/S0025-5718-1988-0917826-0.pdf\n           :doi:`10.1090/S0025-5718-1988-0917826-0`",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6ab9638fad5cd72d85b38258da688e6908bbdefc30b9f9925206c63a3826412e",
            "fields": [
                {
                    "id": "sivylzwk",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to RegularGridInterpolator object",
                    "type": "Object:scipy.interpolate._rgi.RegularGridInterpolator",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p5uhmtf9",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "The points defining the regular grid in n dimensions. The points in\neach dimension (i.e. every elements of the points tuple) must be\nstrictly ascending or descending.",
                    "type": "tuple of ndarray of float, with shapes (m1, ), ..., (mn, )",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jd9jt6wo",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data values at the grid.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pqyz3v0j",
                    "encoding": "",
                    "name": "method",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Interpolation method.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qpvrcpp1",
                    "encoding": "",
                    "name": "bounds_error",
                    "value": true,
                    "defaultValue": true,
                    "description": "If ``True``, out-of-bounds argument raise a ``ValueError``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6cou_6f",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Use this value for out-of-bounds arguments to `__call__`.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zh2rowok",
                    "encoding": "",
                    "name": "solver",
                    "value": "",
                    "defaultValue": "",
                    "description": "Only used for methods \"slinear\", \"cubic\" and \"quintic\".\nSparse linear algebra solver for construction of the NdBSpline instance.\nDefault is the iterative solver `scipy.sparse.linalg.gcrotmk`.\n\n.. versionadded:: 1.13",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bagk3s_7",
                    "encoding": "",
                    "name": "solver_args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional arguments to pass to `solver`, if any.\n\n.. versionadded:: 1.13",
                    "type": "dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2h8gcdzz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._rgi.RegularGridInterpolator.__init__",
                    "defaultValue": "scipy.interpolate._rgi.RegularGridInterpolator.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ony3h4a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xp4reqp_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3c5t2280",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pf9ierb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._rgi.RegularGridInterpolator",
                    "defaultValue": "scipy.interpolate._rgi.RegularGridInterpolator",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxi9fbaw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lt0st77v",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "uflk_e02",
            "name": "SmoothBivariateSpline.__init__",
            "description": "\nSmooth bivariate spline approximation.\n    \n    Parameters\n    ----------\n    x, y, z : array_like\n        1-D sequences of data points (order is not important).\n    w : array_like, optional\n        Positive 1-D sequence of weights, of same length as `x`, `y` and `z`.\n    bbox : array_like, optional\n        Sequence of length 4 specifying the boundary of the rectangular\n        approximation domain.  By default,\n        ``bbox=[min(x), max(x), min(y), max(y)]``.\n    kx, ky : ints, optional\n        Degrees of the bivariate spline. Default is 3.\n    s : float, optional\n        Positive smoothing factor defined for estimation condition:\n        ``sum((w[i]*(z[i]-s(x[i], y[i])))**2, axis=0) <= s``\n        Default ``s=len(w)`` which should be a good value if ``1/w[i]`` is an\n        estimate of the standard deviation of ``z[i]``.\n    eps : float, optional\n        A threshold for determining the effective rank of an over-determined\n        linear system of equations. `eps` should have a value within the open\n        interval ``(0, 1)``, the default is 1e-16.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    \n    Notes\n    -----\n    The length of `x`, `y` and `z` should be at least ``(kx+1) * (ky+1)``.\n    \n    If the input data is such that input dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolating.\n    \n    This routine constructs spline knot vectors automatically via the FITPACK\n    algorithm. The spline knots may be placed away from the data points. For\n    some data sets, this routine may fail to construct an interpolating spline,\n    even if one is requested via ``s=0`` parameter. In such situations, it is\n    recommended to use `bisplrep` / `bisplev` directly instead of this routine\n    and, if needed, increase the values of ``nxest`` and ``nyest`` parameters\n    of `bisplrep`.\n    \n    For linear interpolation, prefer `LinearNDInterpolator`.\n    See ``https://gist.github.com/ev-br/8544371b40f414b7eaf3fe6217209bff``\n    for discussion.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bbdeb460ae41a8fa83e4c3db15497b3426353413c4d4ea41c8bc2d7a2ab805f3",
            "fields": [
                {
                    "id": "97dlkwjj",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to SmoothBivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ji8cw6q3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uuca7euq",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t387nq4m",
                    "encoding": "",
                    "name": "z",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jdw5gjna",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positive 1-D sequence of weights, of same length as `x`, `y` and `z`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2frpnc7e",
                    "encoding": "",
                    "name": "bbox",
                    "value": [
                        null,
                        null,
                        null,
                        null
                    ],
                    "defaultValue": [
                        null,
                        null,
                        null,
                        null
                    ],
                    "description": "Sequence of length 4 specifying the boundary of the rectangular\napproximation domain.  By default,\n``bbox=[min(x), max(x), min(y), max(y)]``.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6s1j73pn",
                    "encoding": "",
                    "name": "kx",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cr0wrfr",
                    "encoding": "",
                    "name": "ky",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rg489s0d",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positive smoothing factor defined for estimation condition:\n``sum((w[i]*(z[i]-s(x[i], y[i])))**2, axis=0) <= s``\nDefault ``s=len(w)`` which should be a good value if ``1/w[i]`` is an\nestimate of the standard deviation of ``z[i]``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9pi_h0fr",
                    "encoding": "",
                    "name": "eps",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "A threshold for determining the effective rank of an over-determined\nlinear system of equations. `eps` should have a value within the open\ninterval ``(0, 1)``, the default is 1e-16.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y3bz18ab",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_3kd1d5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8q1oyawm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w3ewggr7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0390g_68",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5w3wcvsv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wn3y3zu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "hvagelqm",
            "name": "SmoothBivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(xi[i], yi[i]),\n    i=0,...,len(xi)-1``.\n    \n    Parameters\n    ----------\n    xi, yi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        ``np.meshgrid(..., indexing=\"ij\")`` and inconsistent with the\n        default ordering ``np.meshgrid(..., indexing=\"xy\")``.\n    dx : int, optional\n        Order of x-derivative\n    \n        .. versionadded:: 0.14.0\n    dy : int, optional\n        Order of y-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to bilinearly interpolate an exponentially decaying\n    function in 2 dimensions.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectBivariateSpline\n    >>> def f(x, y):\n    ...     return np.exp(-np.sqrt((x / 2) ** 2 + y**2))\n    \n    We sample the function on a coarse grid and set up the interpolator. Note that\n    the default ``indexing=\"xy\"`` of meshgrid would result in an unexpected\n    (transposed) result after interpolation.\n    \n    >>> xarr = np.linspace(-3, 3, 21)\n    >>> yarr = np.linspace(-3, 3, 21)\n    >>> xgrid, ygrid = np.meshgrid(xarr, yarr, indexing=\"ij\")\n    >>> zdata = f(xgrid, ygrid)\n    >>> rbs = RectBivariateSpline(xarr, yarr, zdata, kx=1, ky=1)\n    \n    Next we sample the function along a diagonal slice through the coordinate space\n    on a finer grid using interpolation.\n    \n    >>> xinterp = np.linspace(-3, 3, 201)\n    >>> yinterp = np.linspace(3, -3, 201)\n    >>> zinterp = rbs.ev(xinterp, yinterp)\n    \n    And check that the interpolation passes through the function evaluations as a\n    function of the distance from the origin along the slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sqrt(xarr**2 + yarr**2), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sqrt(xinterp**2 + yinterp**2), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41cb95c451958e4fe451394ad15eeea981e71375374b5288c23dd5fcb511ceb1",
            "fields": [
                {
                    "id": "ujbpaku9",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothBivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsmc431z",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_3hcy_g6",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ele5uh7d",
                    "encoding": "",
                    "name": "dx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of x-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0eh1fec2",
                    "encoding": "",
                    "name": "dy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of y-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5829x6rs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2aw1sv1j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2_9w0m3h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9px4w6e2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jefkm0b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ahwreyte",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nz_qzfve",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2mrf8a4l",
            "name": "SmoothBivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a7ed9e4b0cc4923f7a70fb52f6561a09520ac7fabebc1d8f48e974f915aeabcc",
            "fields": [
                {
                    "id": "0qu0jtd8",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothBivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qnnr9kb_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0acpy9uh",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0y3sx61w",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "klstedf4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g94xrcjf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mzllxse1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2b48e0cw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "uyoa07yb",
            "name": "SmoothBivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e644bc9220c03b0eae8d78d642701d6e0b85d82d7a4f610ff45ac36dfd02ec44",
            "fields": [
                {
                    "id": "p54v2dhi",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothBivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ji7f6n4_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kugefwn3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4140tc9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "282h8nlq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wsktcy8m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "inluh0uk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2jbuleyw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "mgpwq_ok",
            "name": "SmoothBivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c4149ee5c69881206737c7013b90bf7210e93055c812fec06a3178c6477aad24",
            "fields": [
                {
                    "id": "jl6iwq__",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothBivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ng59loed",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "px69w659",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3z0wrwje",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9gezasic",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vglb_rs4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_mcihcv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mspjau64",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8i0328s6",
            "name": "SmoothBivariateSpline.integral",
            "description": "Evaluate the integral of the spline over area [xa,xb] x [ya,yb].\n    \n    Parameters\n    ----------\n    xa, xb : float\n        The end-points of the x integration interval.\n    ya, yb : float\n        The end-points of the y integration interval.\n    \n    Returns\n    -------\n    integ : float\n        The value of the resulting integral.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "29cb668e2c20b2b8a0c04351ac62def260e205ef458f39a4184bcc809dba4d7b",
            "fields": [
                {
                    "id": "x6yg10gg",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothBivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wf0828k8",
                    "encoding": "",
                    "name": "xa",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8hkehezk",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jnx_35d5",
                    "encoding": "",
                    "name": "ya",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rhiphg13",
                    "encoding": "",
                    "name": "yb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oudqh2d4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "41at22pe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_7_2mfu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5365jh79",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ldnrnki",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rr72at8z",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d420ynrq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9mhk11qd",
            "name": "SmoothBivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e7bc995d690158320bdbfd8358cceb9817ccac3f3c15412937b81fe186cbeb34",
            "fields": [
                {
                    "id": "aqzwv02y",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothBivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0w0aw45k",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5cvkovf",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "497w9_dc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4gztgqz1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "18osxg8y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3oumlnnd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ajngthe6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_sgfr2r_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lmz1hv33",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "li5qoo92",
            "name": "SmoothSphereBivariateSpline.__init__",
            "description": "\nSmooth bivariate spline approximation in spherical coordinates.\n    \n    .. versionadded:: 0.11.0\n    \n    Parameters\n    ----------\n    theta, phi, r : array_like\n        1-D sequences of data points (order is not important). Coordinates\n        must be given in radians. Theta must lie within the interval\n        ``[0, pi]``, and phi must lie within the interval ``[0, 2pi]``.\n    w : array_like, optional\n        Positive 1-D sequence of weights.\n    s : float, optional\n        Positive smoothing factor defined for estimation condition:\n        ``sum((w(i)*(r(i) - s(theta(i), phi(i))))**2, axis=0) <= s``\n        Default ``s=len(w)`` which should be a good value if ``1/w[i]`` is an\n        estimate of the standard deviation of ``r[i]``.\n    eps : float, optional\n        A threshold for determining the effective rank of an over-determined\n        linear system of equations. `eps` should have a value within the open\n        interval ``(0, 1)``, the default is 1e-16.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    UnivariateSpline :\n        a smooth univariate spline to fit a given set of data points.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh.\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    \n    Notes\n    -----\n    For more information, see the FITPACK_ site about this function.\n    \n    .. _FITPACK: http://www.netlib.org/dierckx/sphere.f\n    \n    Examples\n    --------\n    Suppose we have global data on a coarse grid (the input data does not\n    have to be on a grid):\n    \n    >>> import numpy as np\n    >>> theta = np.linspace(0., np.pi, 7)\n    >>> phi = np.linspace(0., 2*np.pi, 9)\n    >>> data = np.empty((theta.shape[0], phi.shape[0]))\n    >>> data[:,0], data[0,:], data[-1,:] = 0., 0., 0.\n    >>> data[1:-1,1], data[1:-1,-1] = 1., 1.\n    >>> data[1,1:-1], data[-2,1:-1] = 1., 1.\n    >>> data[2:-2,2], data[2:-2,-2] = 2., 2.\n    >>> data[2,2:-2], data[-3,2:-2] = 2., 2.\n    >>> data[3,3:-2] = 3.\n    >>> data = np.roll(data, 4, 1)\n    \n    We need to set up the interpolator object\n    \n    >>> lats, lons = np.meshgrid(theta, phi)\n    >>> from scipy.interpolate import SmoothSphereBivariateSpline\n    >>> lut = SmoothSphereBivariateSpline(lats.ravel(), lons.ravel(),\n    ...                                   data.T.ravel(), s=3.5)\n    \n    As a first test, we'll see what the algorithm returns when run on the\n    input coordinates\n    \n    >>> data_orig = lut(theta, phi)\n    \n    Finally we interpolate the data to a finer grid\n    \n    >>> fine_lats = np.linspace(0., np.pi, 70)\n    >>> fine_lons = np.linspace(0., 2 * np.pi, 90)\n    \n    >>> data_smth = lut(fine_lats, fine_lons)\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(131)\n    >>> ax1.imshow(data, interpolation='nearest')\n    >>> ax2 = fig.add_subplot(132)\n    >>> ax2.imshow(data_orig, interpolation='nearest')\n    >>> ax3 = fig.add_subplot(133)\n    >>> ax3.imshow(data_smth, interpolation='nearest')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cced8d23421c87284124551c2f1b9d1b348de07f1ad9a9f8090472023fbf1e8b",
            "fields": [
                {
                    "id": "8v9hv6_u",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to SmoothSphereBivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jo226kym",
                    "encoding": "",
                    "name": "theta",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ajudgoi",
                    "encoding": "",
                    "name": "phi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z3u5z8x6",
                    "encoding": "",
                    "name": "r",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3xpzt13m",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positive 1-D sequence of weights.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1ufhf5g",
                    "encoding": "",
                    "name": "s",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Positive smoothing factor defined for estimation condition:\n``sum((w(i)*(r(i) - s(theta(i), phi(i))))**2, axis=0) <= s``\nDefault ``s=len(w)`` which should be a good value if ``1/w[i]`` is an\nestimate of the standard deviation of ``r[i]``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "squzkvd0",
                    "encoding": "",
                    "name": "eps",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "A threshold for determining the effective rank of an over-determined\nlinear system of equations. `eps` should have a value within the open\ninterval ``(0, 1)``, the default is 1e-16.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t62yhdsr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tvsdue2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "crakrbbx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zy2kn_0s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rdv5puqo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fgwrebfz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5j4h9ijn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "gjd2c9bb",
            "name": "SmoothSphereBivariateSpline.ev",
            "description": "Evaluate the spline at points\n    \n    Returns the interpolated value at ``(theta[i], phi[i]),\n    i=0,...,len(theta)-1``.\n    \n    Parameters\n    ----------\n    theta, phi : array_like\n        Input coordinates. Standard Numpy broadcasting is obeyed.\n        The ordering of axes is consistent with\n        np.meshgrid(..., indexing=\"ij\") and inconsistent with the\n        default ordering np.meshgrid(..., indexing=\"xy\").\n    dtheta : int, optional\n        Order of theta-derivative\n    \n        .. versionadded:: 0.14.0\n    dphi : int, optional\n        Order of phi-derivative\n    \n        .. versionadded:: 0.14.0\n    \n    Examples\n    --------\n    Suppose that we want to use splines to interpolate a bivariate function on a\n    sphere. The value of the function is known on a grid of longitudes and\n    colatitudes.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import RectSphereBivariateSpline\n    >>> def f(theta, phi):\n    ...     return np.sin(theta) * np.cos(phi)\n    \n    We evaluate the function on the grid. Note that the default indexing=\"xy\"\n    of meshgrid would result in an unexpected (transposed) result after\n    interpolation.\n    \n    >>> thetaarr = np.linspace(0, np.pi, 22)[1:-1]\n    >>> phiarr = np.linspace(0, 2 * np.pi, 21)[:-1]\n    >>> thetagrid, phigrid = np.meshgrid(thetaarr, phiarr, indexing=\"ij\")\n    >>> zdata = f(thetagrid, phigrid)\n    \n    We next set up the interpolator and use it to evaluate the function\n    at points not on the original grid.\n    \n    >>> rsbs = RectSphereBivariateSpline(thetaarr, phiarr, zdata)\n    >>> thetainterp = np.linspace(thetaarr[0], thetaarr[-1], 200)\n    >>> phiinterp = np.linspace(phiarr[0], phiarr[-1], 200)\n    >>> zinterp = rsbs.ev(thetainterp, phiinterp)\n    \n    Finally we plot the original data for a diagonal slice through the\n    initial grid, and the spline approximation along the same slice.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> ax1 = fig.add_subplot(1, 1, 1)\n    >>> ax1.plot(np.sin(thetaarr) * np.sin(phiarr), np.diag(zdata), \"or\")\n    >>> ax1.plot(np.sin(thetainterp) * np.sin(phiinterp), zinterp, \"-b\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5f6d11ce167925699cf27ff5e1711f7017d99a35739e8d392ce08d0b7a7b6f76",
            "fields": [
                {
                    "id": "2o22wif2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.ev object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_kiio_o4",
                    "encoding": "",
                    "name": "theta",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wez4nejy",
                    "encoding": "",
                    "name": "phi",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a8n7yjw7",
                    "encoding": "",
                    "name": "dtheta",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of theta-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35mrvz82",
                    "encoding": "",
                    "name": "dphi",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Order of phi-derivative\n\n.. versionadded:: 0.14.0",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cbbt7sew",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.ev",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.ev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "308lj551",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_tcmgdv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qscjgek3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cnselll7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ua9zgmu2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2sj0hd4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "54ynb2ws",
            "name": "SmoothSphereBivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4fb092a8d428d480bf05e0ceb2057f5a641f776506f3ae6b31b5b8a0bdabe6ef",
            "fields": [
                {
                    "id": "bjhjb2ap",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpd3r2eh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_hs7ko0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "neu5hv87",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "przkbz3k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "unr6xsyi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jd1a8ab0",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jj2gk4a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ssviqcwx",
            "name": "SmoothSphereBivariateSpline.get_knots",
            "description": "Return a tuple (tx,ty) where tx,ty contain knots positions\n    of the spline with respect to x-, y-variable, respectively.\n    The position of interior and additional knots are given as\n    t[k+1:-k-1] and t[:k+1]=b, t[-k-1:]=e, respectively.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5eb562a7dfbbe4ec9bd4d9b179fab3d0555042498355c6ae9e8511d82d0713bf",
            "fields": [
                {
                    "id": "tvc_bq3e",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgc9if1l",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ufvcdjk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a7i76tkl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "33qxtoij",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "369orpsw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dr5yptjs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pat7hl4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "l076b_ol",
            "name": "SmoothSphereBivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline\n    approximation: sum ((w[i]*(z[i]-s(x[i],y[i])))**2,axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3a82bfdfa02d678ac7ceff90e688bb25bdb8ff76271ea2d1cce770c8188d73da",
            "fields": [
                {
                    "id": "yo04a__2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ks9e25b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mvxgvz5t",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7x8k289",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "st22nr14",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ev4mwhz_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfn845w3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8aefc9vy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "1pmrgeyk",
            "name": "SmoothSphereBivariateSpline.partial_derivative",
            "description": "Construct a new spline representing a partial derivative of this\n    spline.\n    \n    Parameters\n    ----------\n    dx, dy : int\n        Orders of the derivative in x and y respectively. They must be\n        non-negative integers and less than the respective degree of the\n        original spline (self) in that direction (``kx``, ``ky``).\n    \n    Returns\n    -------\n    spline :\n        A new spline of degrees (``kx - dx``, ``ky - dy``) representing the\n        derivative of this spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.9.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bfce778e4f107283203f7d673c834bb138dd708c8cd14095a59c6b7c9d1a1726",
            "fields": [
                {
                    "id": "1axf0imc",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.partial_derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jzl0kkti",
                    "encoding": "",
                    "name": "dx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ch0p5w0b",
                    "encoding": "",
                    "name": "dy",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "enaby1is",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.partial_derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.partial_derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d__4m0ok",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yfq4yn3q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "63fcpgje",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vwmnc3aq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.SmoothSphereBivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ukl5c6hc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hs7f4vow",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "9mwd882d",
            "name": "UnivariateSpline.__init__",
            "description": "\n1-D smoothing spline fit to a given set of data points.\n    \n    .. legacy:: class\n    \n        Specifically, we recommend using `make_splrep` instead.\n    \n    Fits a spline y = spl(x) of degree `k` to the provided `x`, `y` data.  `s`\n    specifies the number of knots by specifying a smoothing condition.\n    \n    Parameters\n    ----------\n    x : (N,) array_like\n        1-D array of independent input data. Must be increasing;\n        must be strictly increasing if `s` is 0.\n    y : (N,) array_like\n        1-D array of dependent input data, of the same length as `x`.\n    w : (N,) array_like, optional\n        Weights for spline fitting.  Must be positive.  If `w` is None,\n        weights are all 1. Default is None.\n    bbox : (2,) array_like, optional\n        2-sequence specifying the boundary of the approximation interval. If\n        `bbox` is None, ``bbox=[x[0], x[-1]]``. Default is None.\n    k : int, optional\n        Degree of the smoothing spline.  Must be 1 <= `k` <= 5.\n        ``k = 3`` is a cubic spline. Default is 3.\n    s : float or None, optional\n        Positive smoothing factor used to choose the number of knots.  Number\n        of knots will be increased until the smoothing condition is satisfied::\n    \n            sum((w[i] * (y[i]-spl(x[i])))**2, axis=0) <= s\n    \n        However, because of numerical issues, the actual condition is::\n    \n            abs(sum((w[i] * (y[i]-spl(x[i])))**2, axis=0) - s) < 0.001 * s\n    \n        If `s` is None, `s` will be set as `len(w)` for a smoothing spline\n        that uses all data points.\n        If 0, spline will interpolate through all data points. This is\n        equivalent to `InterpolatedUnivariateSpline`.\n        Default is None.\n        The user can use the `s` to control the tradeoff between closeness\n        and smoothness of fit. Larger `s` means more smoothing while smaller\n        values of `s` indicate less smoothing.\n        Recommended values of `s` depend on the weights, `w`. If the weights\n        represent the inverse of the standard-deviation of `y`, then a good\n        `s` value should be found in the range (m-sqrt(2*m),m+sqrt(2*m))\n        where m is the number of datapoints in `x`, `y`, and `w`. This means\n        ``s = len(w)`` should be a good value if ``1/w[i]`` is an\n        estimate of the standard deviation of ``y[i]``.\n    ext : int or str, optional\n        Controls the extrapolation mode for elements\n        not in the interval defined by the knot sequence.\n    \n        * if ext=0 or 'extrapolate', return the extrapolated value.\n        * if ext=1 or 'zeros', return 0\n        * if ext=2 or 'raise', raise a ValueError\n        * if ext=3 or 'const', return the boundary value.\n    \n        Default is 0.\n    \n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination or non-sensical results) if the inputs\n        do contain infinities or NaNs.\n        Default is False.\n    \n    See Also\n    --------\n    BivariateSpline :\n        a base class for bivariate splines.\n    SmoothBivariateSpline :\n        a smoothing bivariate spline through the given points\n    LSQBivariateSpline :\n        a bivariate spline using weighted least-squares fitting\n    RectSphereBivariateSpline :\n        a bivariate spline over a rectangular mesh on a sphere\n    SmoothSphereBivariateSpline :\n        a smoothing bivariate spline in spherical coordinates\n    LSQSphereBivariateSpline :\n        a bivariate spline in spherical coordinates using weighted\n        least-squares fitting\n    RectBivariateSpline :\n        a bivariate spline over a rectangular mesh\n    InterpolatedUnivariateSpline :\n        a interpolating univariate spline for a given set of data points.\n    bisplrep :\n        a function to find a bivariate B-spline representation of a surface\n    bisplev :\n        a function to evaluate a bivariate B-spline and its derivatives\n    splrep :\n        a function to find the B-spline representation of a 1-D curve\n    splev :\n        a function to evaluate a B-spline or its derivatives\n    sproot :\n        a function to find the roots of a cubic B-spline\n    splint :\n        a function to evaluate the definite integral of a B-spline between two\n        given points\n    spalde :\n        a function to evaluate all derivatives of a B-spline\n    \n    Notes\n    -----\n    The number of data points must be larger than the spline degree `k`.\n    \n    **NaN handling**: If the input arrays contain ``nan`` values, the result\n    is not useful, since the underlying spline fitting routines cannot deal\n    with ``nan``. A workaround is to use zero weights for not-a-number\n    data points:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x, y = np.array([1, 2, 3, 4]), np.array([1, np.nan, 3, 4])\n    >>> w = np.isnan(y)\n    >>> y[w] = 0.\n    >>> spl = UnivariateSpline(x, y, w=~w)\n    \n    Notice the need to replace a ``nan`` by a numerical value (precise value\n    does not matter as long as the corresponding weight is zero.)\n    \n    References\n    ----------\n    Based on algorithms described in [1]_, [2]_, [3]_, and [4]_:\n    \n    .. [1] P. Dierckx, \"An algorithm for smoothing, differentiation and\n       integration of experimental data using spline functions\",\n       J.Comp.Appl.Maths 1 (1975) 165-184.\n    .. [2] P. Dierckx, \"A fast algorithm for smoothing data on a rectangular\n       grid while using spline functions\", SIAM J.Numer.Anal. 19 (1982)\n       1286-1304.\n    .. [3] P. Dierckx, \"An improved algorithm for curve fitting with spline\n       functions\", report tw54, Dept. Computer Science,K.U. Leuven, 1981.\n    .. [4] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> rng = np.random.default_rng()\n    >>> x = np.linspace(-3, 3, 50)\n    >>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(50)\n    >>> plt.plot(x, y, 'ro', ms=5)\n    \n    Use the default value for the smoothing parameter:\n    \n    >>> spl = UnivariateSpline(x, y)\n    >>> xs = np.linspace(-3, 3, 1000)\n    >>> plt.plot(xs, spl(xs), 'g', lw=3)\n    \n    Manually change the amount of smoothing:\n    \n    >>> spl.set_smoothing_factor(0.5)\n    >>> plt.plot(xs, spl(xs), 'b', lw=3)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "877e0d4564e3f54cfbc7bf609dbbbd9e5fde9d3dc859b25be2c4cd561bfdddd3",
            "fields": [
                {
                    "id": "kut536al",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to UnivariateSpline object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imeqyld3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of independent input data. Must be increasing;\nmust be strictly increasing if `s` is 0.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m52qa3ut",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of dependent input data, of the same length as `x`.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9zcjwwf",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights for spline fitting.  Must be positive.  If `w` is None,\nweights are all 1. Default is None.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acak3n1q",
                    "encoding": "",
                    "name": "bbox",
                    "value": [
                        null,
                        null
                    ],
                    "defaultValue": [
                        null,
                        null
                    ],
                    "description": "2-sequence specifying the boundary of the approximation interval. If\n`bbox` is None, ``bbox=[x[0], x[-1]]``. Default is None.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lnds7co0",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Degree of the smoothing spline.  Must be 1 <= `k` <= 5.\n``k = 3`` is a cubic spline. Default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "42v3rcty",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Positive smoothing factor used to choose the number of knots.  Number\nof knots will be increased until the smoothing condition is satisfied::\n\n    sum((w[i] * (y[i]-spl(x[i])))**2, axis=0) <= s\n\nHowever, because of numerical issues, the actual condition is::\n\n    abs(sum((w[i] * (y[i]-spl(x[i])))**2, axis=0) - s) < 0.001 * s\n\nIf `s` is None, `s` will be set as `len(w)` for a smoothing spline\nthat uses all data points.\nIf 0, spline will interpolate through all data points. This is\nequivalent to `InterpolatedUnivariateSpline`.\nDefault is None.\nThe user can use the `s` to control the tradeoff between closeness\nand smoothness of fit. Larger `s` means more smoothing while smaller\nvalues of `s` indicate less smoothing.\nRecommended values of `s` depend on the weights, `w`. If the weights\nrepresent the inverse of the standard-deviation of `y`, then a good\n`s` value should be found in the range (m-sqrt(2*m),m+sqrt(2*m))\nwhere m is the number of datapoints in `x`, `y`, and `w`. This means\n``s = len(w)`` should be a good value if ``1/w[i]`` is an\nestimate of the standard deviation of ``y[i]``.",
                    "type": "float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6lks3qfz",
                    "encoding": "",
                    "name": "ext",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the extrapolation mode for elements\nnot in the interval defined by the knot sequence.\n\n* if ext=0 or 'extrapolate', return the extrapolated value.\n* if ext=1 or 'zeros', return 0\n* if ext=2 or 'raise', raise a ValueError\n* if ext=3 or 'const', return the boundary value.\n\nDefault is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jc53zf2n",
                    "encoding": "",
                    "name": "check_finite",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination or non-sensical results) if the inputs\ndo contain infinities or NaNs.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m38jsv7c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.__init__",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_liwkfl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uc6slqds",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h_c8dp3w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8wbh7i2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ttd4vd6k",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_zus97g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jbcu5bfy",
            "name": "UnivariateSpline.antiderivative",
            "description": "Construct a new spline representing the antiderivative of this spline.\n    \n    Parameters\n    ----------\n    n : int, optional\n        Order of antiderivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    spline : UnivariateSpline\n        Spline of order k2=k+n representing the antiderivative of this\n        spline.\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    See Also\n    --------\n    splantider, derivative\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, np.pi/2, 70)\n    >>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)\n    >>> spl = UnivariateSpline(x, y, s=0)\n    \n    The derivative is the inverse operation of the antiderivative,\n    although some floating point error accumulates:\n    \n    >>> spl(1.7), spl.antiderivative().derivative()(1.7)\n    (array(2.1565429877197317), array(2.1565429877201865))\n    \n    Antiderivative can be used to evaluate definite integrals:\n    \n    >>> ispl = spl.antiderivative()\n    >>> ispl(np.pi/2) - ispl(0)\n    2.2572053588768486\n    \n    This is indeed an approximation to the complete elliptic integral\n    :math:`K(m) = \\int_0^{\\pi/2} [1 - m\\sin^2 x]^{-1/2} dx`:\n    \n    >>> from scipy.special import ellipk\n    >>> ellipk(0.8)\n    2.2572053268208538",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f5af6c83bbbd84be7bcee11076682fbe662f7665dc45289773afb8558ee0cc0a",
            "fields": [
                {
                    "id": "dol5h6ft",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.antiderivative object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7y0ofc3e",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ej0mkhlo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.antiderivative",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.antiderivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "atw901sp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ues1v1a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6aa6hm_2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o8oci_lh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gm2zuyon",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdmb6l_z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "8k07q3j4",
            "name": "UnivariateSpline.derivative",
            "description": "Construct a new spline representing the derivative of this spline.\n    \n    Parameters\n    ----------\n    n : int, optional\n        Order of derivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    spline : UnivariateSpline\n        Spline of order k2=k-n representing the derivative of this\n        spline.\n    \n    See Also\n    --------\n    splder, antiderivative\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    This can be used for finding maxima of a curve:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 10, 70)\n    >>> y = np.sin(x)\n    >>> spl = UnivariateSpline(x, y, k=4, s=0)\n    \n    Now, differentiate the spline and find the zeros of the\n    derivative. (NB: `sproot` only works for order 3 splines, so we\n    fit an order 4 spline):\n    \n    >>> spl.derivative().roots() / np.pi\n    array([ 0.50000001,  1.5       ,  2.49999998])\n    \n    This agrees well with roots :math:`\\pi/2 + n\\pi` of\n    :math:`\\cos(x) = \\sin'(x)`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cc0026f284399f5f321c9d067a02f048cf327881e132b61332e7223efb76b7f6",
            "fields": [
                {
                    "id": "_gyhrtdt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.derivative object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c1djoenc",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wtlwau49",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.derivative",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.derivative",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ht5gnnr",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vxfztriw",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "85jo9lh7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "be44tggj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1npf2gzw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h7s0rt7o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ke44zn9a",
            "name": "UnivariateSpline.derivatives",
            "description": "Return all derivatives of the spline at the point x.\n    \n    Parameters\n    ----------\n    x : float\n        The point to evaluate the derivatives at.\n    \n    Returns\n    -------\n    der : ndarray, shape(k+1,)\n        Derivatives of the orders 0 to k.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 3, 11)\n    >>> y = x**2\n    >>> spl = UnivariateSpline(x, y)\n    >>> spl.derivatives(1.5)\n    array([2.25, 3.0, 2.0, 0])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "34a500979652eaa9b3f90ea3cd34f370a63789d0d405ee1b7ba9bc8d8d91e642",
            "fields": [
                {
                    "id": "p21ix55t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.derivatives object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zwvtn20h",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point to evaluate the derivatives at.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f6upa46j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.derivatives",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.derivatives",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5yvjype9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evp2sqpr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ivi5r9ho",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvqavttc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_szh7gji",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hd51_s3s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "cguvdwrl",
            "name": "UnivariateSpline.get_coeffs",
            "description": "Return spline coefficients.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3564a712205427c2ac115eeff54354bc1092c144f749df60f3a2083791154da9",
            "fields": [
                {
                    "id": "evcctcsq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.get_coeffs object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pg4bhepc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.get_coeffs",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.get_coeffs",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3viriv4h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0e6cp0ta",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o3xpny03",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_tdvh5j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "st782ev_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6i8l8gw5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "keae8lfr",
            "name": "UnivariateSpline.get_knots",
            "description": "Return positions of interior knots of the spline.\n    \n    Internally, the knot vector contains ``2*k`` additional boundary knots.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "16e9b75a518781ee5b391ab7538118f7bfed564e3e5e71cd0ea5ec87f28b91f8",
            "fields": [
                {
                    "id": "d12_s8tt",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.get_knots object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "94yi3x5c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.get_knots",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.get_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0prd8rj0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rf_pu3g3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pker31oc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lq7zaj_r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ew9qrwc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yraw_kim",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "i4hc5tii",
            "name": "UnivariateSpline.get_residual",
            "description": "Return weighted sum of squared residuals of the spline approximation.\n    \n    This is equivalent to::\n    \n         sum((w[i] * (y[i]-spl(x[i])))**2, axis=0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "78d754c63f9bafd2b0747ef1119ce8a6705ae87dd0cb1a2030c8443378f8dc4b",
            "fields": [
                {
                    "id": "ftw78k2_",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.get_residual object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "asadeqzo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.get_residual",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.get_residual",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5v15kl4u",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jowhhbcg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qrt3t74m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "871uucab",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "94dzxvgl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o2hs3zsl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qmfh8fmj",
            "name": "UnivariateSpline.integral",
            "description": "Return definite integral of the spline between two given points.\n    \n    Parameters\n    ----------\n    a : float\n        Lower limit of integration.\n    b : float\n        Upper limit of integration.\n    \n    Returns\n    -------\n    integral : float\n        The value of the definite integral of the spline between limits.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> x = np.linspace(0, 3, 11)\n    >>> y = x**2\n    >>> spl = UnivariateSpline(x, y)\n    >>> spl.integral(0, 3)\n    9.0\n    \n    which agrees with :math:`\\int x^2 dx = x^3 / 3` between the limits\n    of 0 and 3.\n    \n    A caveat is that this routine assumes the spline to be zero outside of\n    the data limits:\n    \n    >>> spl.integral(-1, 4)\n    9.0\n    >>> spl.integral(-1, 0)\n    0.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "81701d59719a34ec7d56699e517567017fec28a211e6c15f4246743e468d50c0",
            "fields": [
                {
                    "id": "k7x5czm1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.integral object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mnbgbp92",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h04evg3n",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "is2rrrgs",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.integral",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.integral",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hksn7lju",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3sbra56",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0la75q90",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6w712b4x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwg5nglf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k5ztwuqj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ecsjc6ma",
            "name": "UnivariateSpline.roots",
            "description": "Return the zeros of the spline.\n    \n    Notes\n    -----\n    Restriction: only cubic splines are supported by FITPACK. For non-cubic\n    splines, use `PPoly.root` (see below for an example).\n    \n    Examples\n    --------\n    \n    For some data, this method may miss a root. This happens when one of\n    the spline knots (which FITPACK places automatically) happens to\n    coincide with the true root. A workaround is to convert to `PPoly`,\n    which uses a different root-finding algorithm.\n    \n    For example,\n    \n    >>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]\n    >>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,\n    ...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,\n    ...      6.520430e-03,  8.170770e-03]\n    >>> from scipy.interpolate import UnivariateSpline\n    >>> spl = UnivariateSpline(x, y, s=0)\n    >>> spl.roots()\n    array([], dtype=float64)\n    \n    Converting to a PPoly object does find the roots at `x=2`:\n    \n    >>> from scipy.interpolate import splrep, PPoly\n    >>> tck = splrep(x, y, s=0)\n    >>> ppoly = PPoly.from_spline(tck)\n    >>> ppoly.roots(extrapolate=False)\n    array([2.])\n    \n    See Also\n    --------\n    sproot\n    PPoly.roots",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "69bdef11185d93e0a05ed5dce42ab0cb83b56f1d3726ce4d7a93d86ee75365d2",
            "fields": [
                {
                    "id": "ld37zo19",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.roots object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_40wuzep",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.roots",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.roots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u375neb0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8def9wch",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "neyfow__",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hnvgrpzo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "romr12tz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1e5a7lpk",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t5qs7yo1",
            "name": "UnivariateSpline.set_smoothing_factor",
            "description": "Continue spline computation with the given smoothing\n    factor s and with the knots found at the last call.\n    \n    This routine modifies the spline in place.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d724723812158ece6a4198b6a0f42a53430b0e908477cad82efa55bbaa36ea81",
            "fields": [
                {
                    "id": "pkxz3j14",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._fitpack2.UnivariateSpline.set_smoothing_factor object",
                    "type": "Object:scipy.interpolate._fitpack2.UnivariateSpline",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zsrk_gyt",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wkeo7c60",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.set_smoothing_factor",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.set_smoothing_factor",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzrsa6hb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6yeusv4r",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "uzxi5w2v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7g0a2l9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z8zkr749",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ttwh2d52",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "i3_wfnbn",
            "name": "UnivariateSpline.validate_input",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "580bee1d1af0993bfa1c345787713b51240f4797418699d9bb8d3df32ccbeee4",
            "fields": [
                {
                    "id": "lnv6ym7p",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ck374h1",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6631bos_",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3kargk4",
                    "encoding": "",
                    "name": "bbox",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "heubc77c",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83ermr9_",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4pg5ggi0",
                    "encoding": "",
                    "name": "ext",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f1h7z0zy",
                    "encoding": "",
                    "name": "check_finite",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtvezslp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline.validate_input",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline.validate_input",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3bzwcipw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hui0l3xk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "cdfcugbk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8eypyl6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "defaultValue": "scipy.interpolate._fitpack2.UnivariateSpline",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08dglj8e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ucxxnlk8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2bcjws3n",
            "name": "interpolate.approximate_taylor_polynomial",
            "description": "Estimate the Taylor polynomial of f at x by polynomial fitting.\n    \n    Parameters\n    ----------\n    f : callable\n        The function whose Taylor polynomial is sought. Should accept\n        a vector of `x` values.\n    x : scalar\n        The point at which the polynomial is to be evaluated.\n    degree : int\n        The degree of the Taylor polynomial\n    scale : scalar\n        The width of the interval to use to evaluate the Taylor polynomial.\n        Function values spread over a range this wide are used to fit the\n        polynomial. Must be chosen carefully.\n    order : int or None, optional\n        The order of the polynomial to be used in the fitting; `f` will be\n        evaluated ``order+1`` times. If None, use `degree`.\n    \n    Returns\n    -------\n    p : poly1d instance\n        The Taylor polynomial (translated to the origin, so that\n        for example p(0)=f(x)).\n    \n    Notes\n    -----\n    The appropriate choice of \"scale\" is a trade-off; too large and the\n    function differs from its Taylor polynomial too much to get a good\n    answer, too small and round-off errors overwhelm the higher-order terms.\n    The algorithm used becomes numerically unstable around order 30 even\n    under ideal circumstances.\n    \n    Choosing order somewhat larger than degree may improve the higher-order\n    terms.\n    \n    Examples\n    --------\n    We can calculate Taylor approximation polynomials of sin function with\n    various degrees:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import approximate_taylor_polynomial\n    >>> x = np.linspace(-10.0, 10.0, num=100)\n    >>> plt.plot(x, np.sin(x), label=\"sin curve\")\n    >>> for degree in np.arange(1, 15, step=2):\n    ...     sin_taylor = approximate_taylor_polynomial(np.sin, 0, degree, 1,\n    ...                                                order=degree + 2)\n    ...     plt.plot(x, sin_taylor(x), label=f\"degree={degree}\")\n    >>> plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left',\n    ...            borderaxespad=0.0, shadow=True)\n    >>> plt.tight_layout()\n    >>> plt.axis([-10, 10, -10, 10])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6b530498d3778d9493635cb27fd91341b7bd39cebc65c234576aa55afcf271f1",
            "fields": [
                {
                    "id": "0a9e1_qf",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function whose Taylor polynomial is sought. Should accept\na vector of `x` values.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z2gsr_k8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point at which the polynomial is to be evaluated.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1jpm_ls",
                    "encoding": "",
                    "name": "degree",
                    "value": "",
                    "defaultValue": "",
                    "description": "The degree of the Taylor polynomial",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j3ce81n4",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "The width of the interval to use to evaluate the Taylor polynomial.\nFunction values spread over a range this wide are used to fit the\npolynomial. Must be chosen carefully.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4e_05x4",
                    "encoding": "",
                    "name": "order",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the polynomial to be used in the fitting; `f` will be\nevaluated ``order+1`` times. If None, use `degree`.",
                    "type": "int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vf2bg4ha",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.approximate_taylor_polynomial",
                    "defaultValue": "scipy.interpolate.approximate_taylor_polynomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b9olqp36",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4y23qbb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z66cp17_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wlf67dm5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64433_xt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nocspi3q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "h3__jmud",
            "name": "interpolate.barycentric_interpolate",
            "description": "Convenience function for barycentric interpolation.\n    \n    Constructs a polynomial that passes through a given set of points,\n    then evaluates the polynomial. For reasons of numerical stability,\n    this function does not compute the coefficients of the polynomial.\n    \n    This function uses a \"barycentric interpolation\" method that treats\n    the problem as a special case of rational function interpolation.\n    This algorithm is quite stable, numerically, but even in a world of\n    exact computation, unless the `x` coordinates are chosen very\n    carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice -\n    polynomial interpolation itself is a very ill-conditioned process\n    due to the Runge phenomenon.\n    \n    Parameters\n    ----------\n    xi : array_like\n        1-D array of x coordinates of the points the polynomial should\n        pass through\n    yi : array_like\n        The y coordinates of the points the polynomial should pass through.\n    x : scalar or array_like\n        Point or points at which to evaluate the interpolant.\n    axis : int, optional\n        Axis in the `yi` array corresponding to the x-coordinate values.\n    der : int or list or None, optional\n        How many derivatives to evaluate, or None for all potentially\n        nonzero derivatives (that is, a number equal to the number\n        of points), or a list of derivatives to evaluate. This number\n        includes the function value as the '0th' derivative.\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n    \n    Returns\n    -------\n    y : scalar or array_like\n        Interpolated values. Shape is determined by replacing\n        the interpolation axis in the original array with the shape of `x`.\n    \n    See Also\n    --------\n    BarycentricInterpolator : Barycentric interpolator\n    \n    Notes\n    -----\n    Construction of the interpolation weights is a relatively slow process.\n    If you want to call this many times with the same xi (but possibly\n    varying yi or x) you should use the class `BarycentricInterpolator`.\n    This is what this function uses internally.\n    \n    Examples\n    --------\n    We can interpolate 2D observed data using barycentric interpolation:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import barycentric_interpolate\n    >>> x_observed = np.linspace(0.0, 10.0, 11)\n    >>> y_observed = np.sin(x_observed)\n    >>> x = np.linspace(min(x_observed), max(x_observed), num=100)\n    >>> y = barycentric_interpolate(x_observed, y_observed, x)\n    >>> plt.plot(x_observed, y_observed, \"o\", label=\"observation\")\n    >>> plt.plot(x, y, label=\"barycentric interpolation\")\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9774ee8ce7812da59458e8a16a9e05019c44db38fd43f65f902cc8e7fe9b7e90",
            "fields": [
                {
                    "id": "xbnn4cyw",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of x coordinates of the points the polynomial should\npass through",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_2yux29",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The y coordinates of the points the polynomial should pass through.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ra980v2",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the interpolant.",
                    "type": "scalar or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "52n9kunz",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the `yi` array corresponding to the x-coordinate values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eecvbdmg",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "How many derivatives to evaluate, or None for all potentially\nnonzero derivatives (that is, a number equal to the number\nof points), or a list of derivatives to evaluate. This number\nincludes the function value as the '0th' derivative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ky50qvo0",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vzuwqrcz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.barycentric_interpolate",
                    "defaultValue": "scipy.interpolate.barycentric_interpolate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3yrpuca1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qqad8bd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nsym8gxl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0g2d3nhc",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e337blnr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7hjwuqbi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "pgmfx8f_",
            "name": "interpolate.bisplev",
            "description": "Evaluate a bivariate B-spline and its derivatives.\n    \n    Return a rank-2 array of spline function values (or spline derivative\n    values) at points given by the cross-product of the rank-1 arrays `x` and\n    `y`.  In special cases, return an array or just a float if either `x` or\n    `y` or both are floats.  Based on BISPEV and PARDER from FITPACK.\n    \n    Parameters\n    ----------\n    x, y : ndarray\n        Rank-1 arrays specifying the domain over which to evaluate the\n        spline or its derivative.\n    tck : tuple\n        A sequence of length 5 returned by `bisplrep` containing the knot\n        locations, the coefficients, and the degree of the spline:\n        [tx, ty, c, kx, ky].\n    dx, dy : int, optional\n        The orders of the partial derivatives in `x` and `y` respectively.\n    \n    Returns\n    -------\n    vals : ndarray\n        The B-spline or its derivative evaluated over the set formed by\n        the cross-product of `x` and `y`.\n    \n    See Also\n    --------\n    splprep, splrep, splint, sproot, splev\n    UnivariateSpline, BivariateSpline\n    \n    Notes\n    -----\n        See `bisplrep` to generate the `tck` representation.\n    \n    References\n    ----------\n    .. [1] Dierckx P. : An algorithm for surface fitting\n       with spline functions\n       Ima J. Numer. Anal. 1 (1981) 267-283.\n    .. [2] Dierckx P. : An algorithm for surface fitting\n       with spline functions\n       report tw50, Dept. Computer Science,K.U.Leuven, 1980.\n    .. [3] Dierckx P. : Curve and surface fitting with splines,\n       Monographs on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_2d_spline>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9c30abfee8f175947458e1e7f133a1ba1931b84472dd0110f1b8beae2755bc30",
            "fields": [
                {
                    "id": "4v3d9q4t",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9n2wnab",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zjxz9zua",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sequence of length 5 returned by `bisplrep` containing the knot\nlocations, the coefficients, and the degree of the spline:\n[tx, ty, c, kx, ky].",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "byv781r3",
                    "encoding": "",
                    "name": "dx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oeugdw8u",
                    "encoding": "",
                    "name": "dy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6xnpr1x6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.bisplev",
                    "defaultValue": "scipy.interpolate.bisplev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m991dk9g",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tljppoye",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i6oql1_u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6s6xtcp1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m9mxmean",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a9areb65",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0o8xgqpx",
            "name": "interpolate.bisplrep",
            "description": "Find a bivariate B-spline representation of a surface.\n    \n    Given a set of data points (x[i], y[i], z[i]) representing a surface\n    z=f(x,y), compute a B-spline representation of the surface. Based on\n    the routine SURFIT from FITPACK.\n    \n    Parameters\n    ----------\n    x, y, z : ndarray\n        Rank-1 arrays of data points.\n    w : ndarray, optional\n        Rank-1 array of weights. By default ``w=np.ones(len(x))``.\n    xb, xe : float, optional\n        End points of approximation interval in `x`.\n        By default ``xb = x.min(), xe=x.max()``.\n    yb, ye : float, optional\n        End points of approximation interval in `y`.\n        By default ``yb=y.min(), ye = y.max()``.\n    kx, ky : int, optional\n        The degrees of the spline (1 <= kx, ky <= 5).\n        Third order (kx=ky=3) is recommended.\n    task : int, optional\n        If task=0, find knots in x and y and coefficients for a given\n        smoothing factor, s.\n        If task=1, find knots and coefficients for another value of the\n        smoothing factor, s.  bisplrep must have been previously called\n        with task=0 or task=1.\n        If task=-1, find coefficients for a given set of knots tx, ty.\n    s : float, optional\n        A non-negative smoothing factor. If weights correspond\n        to the inverse of the standard-deviation of the errors in z,\n        then a good s-value should be found in the range\n        ``(m-sqrt(2*m),m+sqrt(2*m))`` where m=len(x).\n    eps : float, optional\n        A threshold for determining the effective rank of an\n        over-determined linear system of equations (0 < eps < 1).\n        `eps` is not likely to need changing.\n    tx, ty : ndarray, optional\n        Rank-1 arrays of the knots of the spline for task=-1\n    full_output : int, optional\n        Non-zero to return optional outputs.\n    nxest, nyest : int, optional\n        Over-estimates of the total number of knots. If None then\n        ``nxest = max(kx+sqrt(m/2),2*kx+3)``,\n        ``nyest = max(ky+sqrt(m/2),2*ky+3)``.\n    quiet : int, optional\n        Non-zero to suppress printing of messages.\n    \n    Returns\n    -------\n    tck : array_like\n        A list [tx, ty, c, kx, ky] containing the knots (tx, ty) and\n        coefficients (c) of the bivariate B-spline representation of the\n        surface along with the degree of the spline.\n    fp : ndarray\n        The weighted sum of squared residuals of the spline approximation.\n    ier : int\n        An integer flag about splrep success. Success is indicated if\n        ier<=0. If ier in [1,2,3] an error occurred but was not raised.\n        Otherwise an error is raised.\n    msg : str\n        A message corresponding to the integer flag, ier.\n    \n    See Also\n    --------\n    splprep, splrep, splint, sproot, splev\n    UnivariateSpline, BivariateSpline\n    \n    Notes\n    -----\n    See `bisplev` to evaluate the value of the B-spline given its tck\n    representation.\n    \n    If the input data is such that input dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolation.\n    \n    References\n    ----------\n    .. [1] Dierckx P.:An algorithm for surface fitting with spline functions\n       Ima J. Numer. Anal. 1 (1981) 267-283.\n    .. [2] Dierckx P.:An algorithm for surface fitting with spline functions\n       report tw50, Dept. Computer Science,K.U.Leuven, 1980.\n    .. [3] Dierckx P.:Curve and surface fitting with splines, Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_2d_spline>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f25de8a7e26fe2cbda3c163733d175c0c63a82e24ee4392264b8ca2affbe1a00",
            "fields": [
                {
                    "id": "e_3o7bxg",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6ck_qc9",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d45p8tlh",
                    "encoding": "",
                    "name": "z",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kf8oss55",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rank-1 array of weights. By default ``w=np.ones(len(x))``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b2q_mvl3",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhp98aby",
                    "encoding": "",
                    "name": "xe",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "64hzapfr",
                    "encoding": "",
                    "name": "yb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8ytzl6h",
                    "encoding": "",
                    "name": "ye",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y17obl52",
                    "encoding": "",
                    "name": "kx",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y00mnhmm",
                    "encoding": "",
                    "name": "ky",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ayuky38h",
                    "encoding": "",
                    "name": "task",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If task=0, find knots in x and y and coefficients for a given\nsmoothing factor, s.\nIf task=1, find knots and coefficients for another value of the\nsmoothing factor, s.  bisplrep must have been previously called\nwith task=0 or task=1.\nIf task=-1, find coefficients for a given set of knots tx, ty.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ild8twq",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "A non-negative smoothing factor. If weights correspond\nto the inverse of the standard-deviation of the errors in z,\nthen a good s-value should be found in the range\n``(m-sqrt(2*m),m+sqrt(2*m))`` where m=len(x).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8wuqd8oz",
                    "encoding": "",
                    "name": "eps",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "A threshold for determining the effective rank of an\nover-determined linear system of equations (0 < eps < 1).\n`eps` is not likely to need changing.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ocath4er",
                    "encoding": "",
                    "name": "tx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqrkfbxq",
                    "encoding": "",
                    "name": "ty",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s___o1bo",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Non-zero to return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ooo6g63u",
                    "encoding": "",
                    "name": "nxest",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1ynpknn",
                    "encoding": "",
                    "name": "nyest",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bsj05nxi",
                    "encoding": "",
                    "name": "quiet",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Non-zero to suppress printing of messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6jmkyiyk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.bisplrep",
                    "defaultValue": "scipy.interpolate.bisplrep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nh4j9q9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ju51g585",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kou4b4w9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtrbgnib",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zn4zfi0m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dwy28d0n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7q1ehytr",
            "name": "interpolate.generate_knots",
            "description": "Generate knot vectors until the Least SQuares (LSQ) criterion is satified.\n    \n    Parameters\n    ----------\n    x, y : array_like\n        The data points defining the curve ``y = f(x)``.\n    w : array_like, optional\n        Weights.\n    xb : float, optional\n        The boundary of the approximation interval. If None (default),\n        is set to ``x[0]``.\n    xe : float, optional\n        The boundary of the approximation interval. If None (default),\n        is set to ``x[-1]``.\n    k : int, optional\n        The spline degree. Default is cubic, ``k = 3``.\n    s : float, optional\n        The smoothing factor. Default is ``s = 0``.\n    nest : int, optional\n        Stop when at least this many knots are placed.\n    \n    Yields\n    ------\n    t : ndarray\n        Knot vectors with an increasing number of knots.\n        The generator is finite: it stops when the smoothing critetion is\n        satisfied, or when then number of knots exceeds the maximum value:\n        the user-provided `nest` or `x.size + k + 1` --- which is the knot vector\n        for the interpolating spline.\n    \n    Examples\n    --------\n    Generate some noisy data and fit a sequence of LSQ splines:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import make_lsq_spline, generate_knots\n    >>> rng = np.random.default_rng(12345)\n    >>> x = np.linspace(-3, 3, 50)\n    >>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(size=50)\n    \n    >>> knots = list(generate_knots(x, y, s=1e-10))\n    >>> for t in knots[::3]:\n    ...     spl = make_lsq_spline(x, y, t)\n    ...     xs = xs = np.linspace(-3, 3, 201)\n    ...     plt.plot(xs, spl(xs), '-', label=f'n = {len(t)}', lw=3, alpha=0.7)\n    >>> plt.plot(x, y, 'o', label='data')\n    >>> plt.plot(xs, np.exp(-xs**2), '--')\n    >>> plt.legend()\n    \n    Note that increasing the number of knots make the result follow the data\n    more and more closely.\n    \n    Also note that a step of the generator may add multiple knots:\n    \n    >>> [len(t) for t in knots]\n    [8, 9, 10, 12, 16, 24, 40, 48, 52, 54]\n    \n    Notes\n    -----\n    The routine generates successive knots vectors of increasing length, starting\n    from ``2*(k+1)`` to ``len(x) + k + 1``, trying to make knots more dense\n    in the regions where the deviation of the LSQ spline from data is large.\n    \n    When the maximum number of knots, ``len(x) + k + 1`` is reached\n    (this happens when ``s`` is small and ``nest`` is large), the generator\n    stops, and the last output is the knots for the interpolation with the\n    not-a-knot boundary condition.\n    \n    Knots are located at data sites, unless ``k`` is even and the number of knots\n    is ``len(x) + k + 1``. In that case, the last output of the generator\n    has internal knots at Greville sites, ``(x[1:] + x[:-1]) / 2``.\n    \n    .. versionadded:: 1.15.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a5eaffe668ad355757dede3fd3ebc30cf6acdc1f331235a93791dcf92bf98c9f",
            "fields": [
                {
                    "id": "emmud92y",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1por5i7m",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bsxrc3i4",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8r95nj4p",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "The boundary of the approximation interval. If None (default),\nis set to ``x[0]``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0rxeiwg",
                    "encoding": "",
                    "name": "xe",
                    "value": "",
                    "defaultValue": "",
                    "description": "The boundary of the approximation interval. If None (default),\nis set to ``x[-1]``.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2q01aik3",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The spline degree. Default is cubic, ``k = 3``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eua_pcee",
                    "encoding": "",
                    "name": "s",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The smoothing factor. Default is ``s = 0``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt9074jr",
                    "encoding": "",
                    "name": "nest",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stop when at least this many knots are placed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0yvswznt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.generate_knots",
                    "defaultValue": "scipy.interpolate.generate_knots",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "32ligstx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "734rexko",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pzmqvtwi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgwtrb_o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "igrd4l_o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z5o4f6zn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qv81fqtg",
            "name": "interpolate.griddata",
            "description": "Convenience function for interpolating unstructured data in multiple dimensions.\n    \n    Parameters\n    ----------\n    points : 2-D ndarray of floats with shape (n, D), or length D tuple of 1-D ndarrays with shape (n,).\n        Data point coordinates.\n    values : ndarray of float or complex, shape (n,)\n        Data values.\n    xi : 2-D ndarray of floats with shape (m, D), or length D tuple of ndarrays broadcastable to the same shape.\n        Points at which to interpolate data.\n    method : {'linear', 'nearest', 'cubic'}, optional\n        Method of interpolation. One of\n    \n        ``nearest``\n          return the value at the data point closest to\n          the point of interpolation. See `NearestNDInterpolator` for\n          more details.\n    \n        ``linear``\n          tessellate the input point set to N-D\n          simplices, and interpolate linearly on each simplex. See\n          `LinearNDInterpolator` for more details.\n    \n        ``cubic`` (1-D)\n          return the value determined from a cubic\n          spline.\n    \n        ``cubic`` (2-D)\n          return the value determined from a\n          piecewise cubic, continuously differentiable (C1), and\n          approximately curvature-minimizing polynomial surface. See\n          `CloughTocher2DInterpolator` for more details.\n    fill_value : float, optional\n        Value used to fill in for requested points outside of the\n        convex hull of the input points. If not provided, then the\n        default is ``nan``. This option has no effect for the\n        'nearest' method.\n    rescale : bool, optional\n        Rescale points to unit cube before performing interpolation.\n        This is useful if some of the input dimensions have\n        incommensurable units and differ by many orders of magnitude.\n    \n        .. versionadded:: 0.14.0\n    \n    Returns\n    -------\n    ndarray\n        Array of interpolated values.\n    \n    See Also\n    --------\n    LinearNDInterpolator :\n        Piecewise linear interpolator in N dimensions.\n    NearestNDInterpolator :\n        Nearest-neighbor interpolator in N dimensions.\n    CloughTocher2DInterpolator :\n        Piecewise cubic, C1 smooth, curvature-minimizing interpolator in 2D.\n    interpn : Interpolation on a regular grid or rectilinear grid.\n    RegularGridInterpolator : Interpolator on a regular or rectilinear grid\n                              in arbitrary dimensions (`interpn` wraps this\n                              class).\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.9\n    \n    .. note:: For data on a regular grid use `interpn` instead.\n    \n    Examples\n    --------\n    \n    Suppose we want to interpolate the 2-D function\n    \n    >>> import numpy as np\n    >>> def func(x, y):\n    ...     return x*(1-x)*np.cos(4*np.pi*x) * np.sin(4*np.pi*y**2)**2\n    \n    on a grid in [0, 1]x[0, 1]\n    \n    >>> grid_x, grid_y = np.mgrid[0:1:100j, 0:1:200j]\n    \n    but we only know its values at 1000 data points:\n    \n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((1000, 2))\n    >>> values = func(points[:,0], points[:,1])\n    \n    This can be done with `griddata` -- below we try out all of the\n    interpolation methods:\n    \n    >>> from scipy.interpolate import griddata\n    >>> grid_z0 = griddata(points, values, (grid_x, grid_y), method='nearest')\n    >>> grid_z1 = griddata(points, values, (grid_x, grid_y), method='linear')\n    >>> grid_z2 = griddata(points, values, (grid_x, grid_y), method='cubic')\n    \n    One can see that the exact result is reproduced by all of the\n    methods to some degree, but for this smooth function the piecewise\n    cubic interpolant gives the best results:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.subplot(221)\n    >>> plt.imshow(func(grid_x, grid_y).T, extent=(0,1,0,1), origin='lower')\n    >>> plt.plot(points[:,0], points[:,1], 'k.', ms=1)\n    >>> plt.title('Original')\n    >>> plt.subplot(222)\n    >>> plt.imshow(grid_z0.T, extent=(0,1,0,1), origin='lower')\n    >>> plt.title('Nearest')\n    >>> plt.subplot(223)\n    >>> plt.imshow(grid_z1.T, extent=(0,1,0,1), origin='lower')\n    >>> plt.title('Linear')\n    >>> plt.subplot(224)\n    >>> plt.imshow(grid_z2.T, extent=(0,1,0,1), origin='lower')\n    >>> plt.title('Cubic')\n    >>> plt.gcf().set_size_inches(6, 6)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1f40c4cb434c6753e707438fe13ef2b07eb4855e3be3c978c79c3a7448ca8659",
            "fields": [
                {
                    "id": "rv5c3nfn",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data point coordinates.",
                    "type": "2-D ndarray of floats with shape (n, D), or length D tuple of 1-D ndarrays with shape (n,).",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "762jh24b",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data values.",
                    "type": "ndarray of float or complex, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xz2x1k8y",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points at which to interpolate data.",
                    "type": "2-D ndarray of floats with shape (m, D), or length D tuple of ndarrays broadcastable to the same shape.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdb_m9sg",
                    "encoding": "",
                    "name": "method",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Method of interpolation. One of\n\n``nearest``\n  return the value at the data point closest to\n  the point of interpolation. See `NearestNDInterpolator` for\n  more details.\n\n``linear``\n  tessellate the input point set to N-D\n  simplices, and interpolate linearly on each simplex. See\n  `LinearNDInterpolator` for more details.\n\n``cubic`` (1-D)\n  return the value determined from a cubic\n  spline.\n\n``cubic`` (2-D)\n  return the value determined from a\n  piecewise cubic, continuously differentiable (C1), and\n  approximately curvature-minimizing polynomial surface. See\n  `CloughTocher2DInterpolator` for more details.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4kqgdux",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value used to fill in for requested points outside of the\nconvex hull of the input points. If not provided, then the\ndefault is ``nan``. This option has no effect for the\n'nearest' method.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9l3cguq",
                    "encoding": "",
                    "name": "rescale",
                    "value": false,
                    "defaultValue": false,
                    "description": "Rescale points to unit cube before performing interpolation.\nThis is useful if some of the input dimensions have\nincommensurable units and differ by many orders of magnitude.\n\n.. versionadded:: 0.14.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ie2awueo",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.griddata",
                    "defaultValue": "scipy.interpolate.griddata",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8rq3gby",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ccvarfh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "udaq3ga7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_misbza0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "158njvaw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "73lsmz_2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "atmx4554",
            "name": "interpolate.insert",
            "description": "Insert knots into a B-spline.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using\n        its ``insert_knot`` method.\n    \n    Given the knots and coefficients of a B-spline representation, create a\n    new B-spline with a knot inserted `m` times at point `x`.\n    This is a wrapper around the FORTRAN routine insert of FITPACK.\n    \n    Parameters\n    ----------\n    x (u) : float\n        A knot value at which to insert a new knot.  If `tck` was returned\n        from ``splprep``, then the parameter values, u should be given.\n    tck : a `BSpline` instance or a tuple\n        If tuple, then it is expected to be a tuple (t,c,k) containing\n        the vector of knots, the B-spline coefficients, and the degree of\n        the spline.\n    m : int, optional\n        The number of times to insert the given knot (its multiplicity).\n        Default is 1.\n    per : int, optional\n        If non-zero, the input spline is considered periodic.\n    \n    Returns\n    -------\n    BSpline instance or a tuple\n        A new B-spline with knots t, coefficients c, and degree k.\n        ``t(k+1) <= x <= t(n-k)``, where k is the degree of the spline.\n        In case of a periodic spline (``per != 0``) there must be\n        either at least k interior knots t(j) satisfying ``t(k+1)<t(j)<=x``\n        or at least k interior knots t(j) satisfying ``x<=t(j)<t(n-k)``.\n        A tuple is returned iff the input argument `tck` is a tuple, otherwise\n        a BSpline object is constructed and returned.\n    \n    Notes\n    -----\n    Based on algorithms from [1]_ and [2]_.\n    \n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using the `BSpline` objects, in particular `BSpline.insert_knot`\n    method.\n    \n    See Also\n    --------\n    BSpline.insert_knot\n    \n    References\n    ----------\n    .. [1] W. Boehm, \"Inserting new knots into b-spline curves.\",\n        Computer Aided Design, 12, p.199-201, 1980.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines, Monographs on\n        Numerical Analysis\", Oxford University Press, 1993.\n    \n    Examples\n    --------\n    You can insert knots into a B-spline.\n    \n    >>> from scipy.interpolate import splrep, insert\n    >>> import numpy as np\n    >>> x = np.linspace(0, 10, 5)\n    >>> y = np.sin(x)\n    >>> tck = splrep(x, y)\n    >>> tck[0]\n    array([ 0.,  0.,  0.,  0.,  5., 10., 10., 10., 10.])\n    \n    A knot is inserted:\n    \n    >>> tck_inserted = insert(3, tck)\n    >>> tck_inserted[0]\n    array([ 0.,  0.,  0.,  0.,  3.,  5., 10., 10., 10., 10.])\n    \n    Some knots are inserted:\n    \n    >>> tck_inserted2 = insert(8, tck, m=3)\n    >>> tck_inserted2[0]\n    array([ 0.,  0.,  0.,  0.,  5.,  8.,  8.,  8., 10., 10., 10., 10.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "862511291942e4c2668d57c7f0a172e49ccba872b8e647cd7cf9748e06c53dfb",
            "fields": [
                {
                    "id": "dbqe_zmq",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f737o_24",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If tuple, then it is expected to be a tuple (t,c,k) containing\nthe vector of knots, the B-spline coefficients, and the degree of\nthe spline.",
                    "type": "a BSpline instance or a tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "657hp7y0",
                    "encoding": "",
                    "name": "m",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The number of times to insert the given knot (its multiplicity).\nDefault is 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fx_ix6d",
                    "encoding": "",
                    "name": "per",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, the input spline is considered periodic.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1nw10ymm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.insert",
                    "defaultValue": "scipy.interpolate.insert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7r0t_7ms",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2kx3czy1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mud_1906",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kswn792x",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r1wi7czv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a85dp3ah",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fvaanwdm",
            "name": "interp1d.__init__",
            "description": "Initialize a 1-D linear interpolation class.\nInterpolate a 1-D function (legacy).\n    \n    .. legacy:: class\n    \n        For a guide to the intended replacements for `interp1d` see\n        :ref:`tutorial-interpolate_1Dsection`.\n    \n    `x` and `y` are arrays of values used to approximate some function f:\n    ``y = f(x)``. This class returns a function whose call method uses\n    interpolation to find the value of new points.\n    \n    Parameters\n    ----------\n    x : (npoints, ) array_like\n        A 1-D array of real values.\n    y : (..., npoints, ...) array_like\n        A N-D array of real values. The length of `y` along the interpolation\n        axis must be equal to the length of `x`. Use the ``axis`` parameter\n        to select correct axis. Unlike other interpolators, the default\n        interpolation axis is the last axis of `y`.\n    kind : str or int, optional\n        Specifies the kind of interpolation as a string or as an integer\n        specifying the order of the spline interpolator to use.\n        The string has to be one of 'linear', 'nearest', 'nearest-up', 'zero',\n        'slinear', 'quadratic', 'cubic', 'previous', or 'next'. 'zero',\n        'slinear', 'quadratic' and 'cubic' refer to a spline interpolation of\n        zeroth, first, second or third order; 'previous' and 'next' simply\n        return the previous or next value of the point; 'nearest-up' and\n        'nearest' differ when interpolating half-integers (e.g. 0.5, 1.5)\n        in that 'nearest-up' rounds up and 'nearest' rounds down. Default\n        is 'linear'.\n    axis : int, optional\n        Axis in the ``y`` array corresponding to the x-coordinate values. Unlike\n        other interpolators, defaults to ``axis=-1``.\n    copy : bool, optional\n        If ``True``, the class makes internal copies of x and y. If ``False``,\n        references to ``x`` and ``y`` are used if possible. The default is to copy.\n    bounds_error : bool, optional\n        If True, a ValueError is raised any time interpolation is attempted on\n        a value outside of the range of x (where extrapolation is\n        necessary). If False, out of bounds values are assigned `fill_value`.\n        By default, an error is raised unless ``fill_value=\"extrapolate\"``.\n    fill_value : array-like or (array-like, array_like) or \"extrapolate\", optional\n        - if a ndarray (or float), this value will be used to fill in for\n          requested points outside of the data range. If not provided, then\n          the default is NaN. The array-like must broadcast properly to the\n          dimensions of the non-interpolation axes.\n        - If a two-element tuple, then the first element is used as a\n          fill value for ``x_new < x[0]`` and the second element is used for\n          ``x_new > x[-1]``. Anything that is not a 2-element tuple (e.g.,\n          list or ndarray, regardless of shape) is taken to be a single\n          array-like argument meant to be used for both bounds as\n          ``below, above = fill_value, fill_value``. Using a two-element tuple\n          or ndarray requires ``bounds_error=False``.\n    \n          .. versionadded:: 0.17.0\n        - If \"extrapolate\", then points outside the data range will be\n          extrapolated.\n    \n          .. versionadded:: 0.17.0\n    assume_sorted : bool, optional\n        If False, values of `x` can be in any order and they are sorted first.\n        If True, `x` has to be an array of monotonically increasing values.\n    \n    Attributes\n    ----------\n    fill_value\n    \n    Methods\n    -------\n    __call__\n    \n    See Also\n    --------\n    splrep, splev\n        Spline interpolation/smoothing based on FITPACK.\n    UnivariateSpline : An object-oriented wrapper of the FITPACK routines.\n    interp2d : 2-D interpolation\n    \n    Notes\n    -----\n    Calling `interp1d` with NaNs present in input values results in\n    undefined behaviour.\n    \n    Input values `x` and `y` must be convertible to `float` values like\n    `int` or `float`.\n    \n    If the values in `x` are not unique, the resulting behavior is\n    undefined and specific to the choice of `kind`, i.e., changing\n    `kind` will change the behavior for duplicates.\n    \n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import interpolate\n    >>> x = np.arange(0, 10)\n    >>> y = np.exp(-x/3.0)\n    >>> f = interpolate.interp1d(x, y)\n    \n    >>> xnew = np.arange(0, 9, 0.1)\n    >>> ynew = f(xnew)   # use interpolation function returned by `interp1d`\n    >>> plt.plot(x, y, 'o', xnew, ynew, '-')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2d8cfce22d810ccc9062def201c4961de64297bb420c528118024c75fbd6eceb",
            "fields": [
                {
                    "id": "o8ij37bu",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.interpolate._interpolate.interp1d.__init__ object",
                    "type": "Object:scipy.interpolate._interpolate.interp1d",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hqc691j4",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6f4dpbw",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "spnkytqb",
                    "encoding": "",
                    "name": "kind",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "97xlo5og",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "clpuxauq",
                    "encoding": "",
                    "name": "copy",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ocup70jk",
                    "encoding": "",
                    "name": "bounds_error",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gxjcqzyd",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yo60k24s",
                    "encoding": "",
                    "name": "assume_sorted",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sviunn3p",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.interp1d.__init__",
                    "defaultValue": "scipy.interpolate._interpolate.interp1d.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yikuk56e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0kzfr5en",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5w_su2tu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pgeki856",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.interp1d",
                    "defaultValue": "scipy.interpolate._interpolate.interp1d",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "56bcz998",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "csx11hvf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ja2iyz7m",
            "name": "interp2d.__init__",
            "description": "\ninterp2d(x, y, z, kind='linear', copy=True, bounds_error=False,\n             fill_value=None)\n    \n    Class for 2D interpolation (deprecated and removed)\n    \n    .. versionremoved:: 1.14.0\n    \n        `interp2d` has been removed in SciPy 1.14.0.\n    \n        For legacy code, nearly bug-for-bug compatible replacements are\n        `RectBivariateSpline` on regular grids, and `bisplrep`/`bisplev` for\n        scattered 2D data.\n    \n        In new code, for regular grids use `RegularGridInterpolator` instead.\n        For scattered data, prefer `LinearNDInterpolator` or\n        `CloughTocher2DInterpolator`.\n    \n        For more details see :ref:`interp-transition-guide`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "48e91bc0e0b073832836fad4245006185b6f90afba576247cea78435780b13ef",
            "fields": [
                {
                    "id": "ssvj63uw",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to interp2d object",
                    "type": "Object:scipy.interpolate._interpolate.interp2d",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f7qtl7aq",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cqpj27sq",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p7xnipme",
                    "encoding": "",
                    "name": "z",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6icibja",
                    "encoding": "",
                    "name": "kind",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wsc1ncr2",
                    "encoding": "",
                    "name": "copy",
                    "value": true,
                    "defaultValue": true,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cmxexcbz",
                    "encoding": "",
                    "name": "bounds_error",
                    "value": false,
                    "defaultValue": false,
                    "description": "",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uikjtzyv",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ne87a0hg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate._interpolate.interp2d.__init__",
                    "defaultValue": "scipy.interpolate._interpolate.interp2d.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2nv1_ovc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqcfooz6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "84752op2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "upu5nhh8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate._interpolate.interp2d",
                    "defaultValue": "scipy.interpolate._interpolate.interp2d",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1vxl26g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "55t_yxry",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2n1f6prt",
            "name": "interpolate.interpn",
            "description": "Multidimensional interpolation on regular or rectilinear grids.\n    \n    Strictly speaking, not all regular grids are supported - this function\n    works on *rectilinear* grids, that is, a rectangular grid with even or\n    uneven spacing.\n    \n    Parameters\n    ----------\n    points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, )\n        The points defining the regular grid in n dimensions. The points in\n        each dimension (i.e. every elements of the points tuple) must be\n        strictly ascending or descending.\n    \n    values : array_like, shape (m1, ..., mn, ...)\n        The data on the regular grid in n dimensions. Complex data is\n        accepted.\n    xi : ndarray of shape (..., ndim)\n        The coordinates to sample the gridded data at\n    \n    method : str, optional\n        The method of interpolation to perform. Supported are \"linear\",\n        \"nearest\", \"slinear\", \"cubic\", \"quintic\", \"pchip\", and \"splinef2d\".\n        \"splinef2d\" is only supported for 2-dimensional data.\n    \n    bounds_error : bool, optional\n        If True, when interpolated values are requested outside of the\n        domain of the input data, a ValueError is raised.\n        If False, then `fill_value` is used.\n    \n    fill_value : number, optional\n        If provided, the value to use for points outside of the\n        interpolation domain. If None, values outside\n        the domain are extrapolated.  Extrapolation is not supported by method\n        \"splinef2d\".\n    \n    Returns\n    -------\n    values_x : ndarray, shape xi.shape[:-1] + values.shape[ndim:]\n        Interpolated values at `xi`. See notes for behaviour when\n        ``xi.ndim == 1``.\n    \n    See Also\n    --------\n    NearestNDInterpolator : Nearest neighbor interpolation on unstructured\n                            data in N dimensions\n    LinearNDInterpolator : Piecewise linear interpolant on unstructured data\n                           in N dimensions\n    RegularGridInterpolator : interpolation on a regular or rectilinear grid\n                              in arbitrary dimensions (`interpn` wraps this\n                              class).\n    RectBivariateSpline : Bivariate spline approximation over a rectangular mesh\n    scipy.ndimage.map_coordinates : interpolation on grids with equal spacing\n                                    (suitable for e.g., N-D image resampling)\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.14\n    \n    In the case that ``xi.ndim == 1`` a new axis is inserted into\n    the 0 position of the returned array, values_x, so its shape is\n    instead ``(1,) + values.shape[ndim:]``.\n    \n    If the input data is such that input dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolation.\n    \n    Examples\n    --------\n    Evaluate a simple example function on the points of a regular 3-D grid:\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import interpn\n    >>> def value_func_3d(x, y, z):\n    ...     return 2 * x + 3 * y - z\n    >>> x = np.linspace(0, 4, 5)\n    >>> y = np.linspace(0, 5, 6)\n    >>> z = np.linspace(0, 6, 7)\n    >>> points = (x, y, z)\n    >>> values = value_func_3d(*np.meshgrid(*points, indexing='ij'))\n    \n    Evaluate the interpolating function at a point\n    \n    >>> point = np.array([2.21, 3.12, 1.15])\n    >>> print(interpn(points, values, point))\n    [12.63]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "771b79ea9aef6287fa978ff0908cedd1734a9845883d8e823895399d83bf61ad",
            "fields": [
                {
                    "id": "zlwkjrhy",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "The points defining the regular grid in n dimensions. The points in\neach dimension (i.e. every elements of the points tuple) must be\nstrictly ascending or descending.",
                    "type": "tuple of ndarray of float, with shapes (m1, ), ..., (mn, )",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4shlzfw",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "The data on the regular grid in n dimensions. Complex data is\naccepted.",
                    "type": "arraylike, shape (m1, ..., mn, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "saa4cija",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinates to sample the gridded data at",
                    "type": "ndarray of shape (..., ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "void_tuu",
                    "encoding": "",
                    "name": "method",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "The method of interpolation to perform. Supported are \"linear\",\n\"nearest\", \"slinear\", \"cubic\", \"quintic\", \"pchip\", and \"splinef2d\".\n\"splinef2d\" is only supported for 2-dimensional data.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "17qm6dii",
                    "encoding": "",
                    "name": "bounds_error",
                    "value": true,
                    "defaultValue": true,
                    "description": "If True, when interpolated values are requested outside of the\ndomain of the input data, a ValueError is raised.\nIf False, then `fill_value` is used.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3an66jqg",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "If provided, the value to use for points outside of the\ninterpolation domain. If None, values outside\nthe domain are extrapolated.  Extrapolation is not supported by method\n\"splinef2d\".",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ab_xz7bt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.interpn",
                    "defaultValue": "scipy.interpolate.interpn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xvm2p0kq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_0arhhy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ajl5yr7x",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ok_nar1s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nag3_llg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w_by5530",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "q5637cqa",
            "name": "interpolate.krogh_interpolate",
            "description": "Convenience function for Krogh interpolation.\n    \n    See `KroghInterpolator` for more details.\n    \n    Parameters\n    ----------\n    xi : array_like\n        Interpolation points (known x-coordinates).\n    yi : array_like\n        Known y-coordinates, of shape ``(xi.size, R)``. Interpreted as\n        vectors of length R, or scalars if R=1.\n    x : array_like\n        Point or points at which to evaluate the derivatives.\n    der : int or list or None, optional\n        How many derivatives to evaluate, or None for all potentially\n        nonzero derivatives (that is, a number equal to the number\n        of points), or a list of derivatives to evaluate. This number\n        includes the function value as the '0th' derivative.\n    axis : int, optional\n        Axis in the `yi` array corresponding to the x-coordinate values.\n    \n    Returns\n    -------\n    d : ndarray\n        If the interpolator's values are R-D then the\n        returned array will be the number of derivatives by N by R.\n        If `x` is a scalar, the middle dimension will be dropped; if\n        the `yi` are scalars then the last dimension will be dropped.\n    \n    See Also\n    --------\n    KroghInterpolator : Krogh interpolator\n    \n    Notes\n    -----\n    Construction of the interpolating polynomial is a relatively expensive\n    process. If you want to evaluate it repeatedly consider using the class\n    KroghInterpolator (which is what this function uses).\n    \n    Examples\n    --------\n    We can interpolate 2D observed data using Krogh interpolation:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import krogh_interpolate\n    >>> x_observed = np.linspace(0.0, 10.0, 11)\n    >>> y_observed = np.sin(x_observed)\n    >>> x = np.linspace(min(x_observed), max(x_observed), num=100)\n    >>> y = krogh_interpolate(x_observed, y_observed, x)\n    >>> plt.plot(x_observed, y_observed, \"o\", label=\"observation\")\n    >>> plt.plot(x, y, label=\"krogh interpolation\")\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "651b658a5387db35940f7b8bf5f014202b8f2d758b72adc1488c53da3cfd3c47",
            "fields": [
                {
                    "id": "i1tfwwlg",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation points (known x-coordinates).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tdvafogv",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Known y-coordinates, of shape ``(xi.size, R)``. Interpreted as\nvectors of length R, or scalars if R=1.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w6j0aq3z",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the derivatives.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0n3b1iyv",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "How many derivatives to evaluate, or None for all potentially\nnonzero derivatives (that is, a number equal to the number\nof points), or a list of derivatives to evaluate. This number\nincludes the function value as the '0th' derivative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nu5onc3b",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the `yi` array corresponding to the x-coordinate values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p9w1mnu4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.krogh_interpolate",
                    "defaultValue": "scipy.interpolate.krogh_interpolate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qh4rbj41",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "prvi9srh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y1yrovlk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t52v6b23",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9j2fzc8s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2gw44is2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "uvrjw8j0",
            "name": "interpolate.lagrange",
            "description": "Return a Lagrange interpolating polynomial.\n    \n    Given two 1-D arrays `x` and `w,` returns the Lagrange interpolating\n    polynomial through the points ``(x, w)``.\n    \n    Warning: This implementation is numerically unstable. Do not expect to\n    be able to use more than about 20 points even if they are chosen optimally.\n    \n    Parameters\n    ----------\n    x : array_like\n        `x` represents the x-coordinates of a set of datapoints.\n    w : array_like\n        `w` represents the y-coordinates of a set of datapoints, i.e., f(`x`).\n    \n    Returns\n    -------\n    lagrange : `numpy.poly1d` instance\n        The Lagrange interpolating polynomial.\n    \n    Notes\n    -----\n    The name of this function refers to the fact that the returned object represents\n    a Lagrange polynomial, the unique polynomial of lowest degree that interpolates\n    a given set of data [1]_. It computes the polynomial using Newton's divided\n    differences formula [2]_; that is, it works with Newton basis polynomials rather\n    than Lagrange basis polynomials. For numerical calculations, the barycentric form\n    of Lagrange interpolation (`scipy.interpolate.BarycentricInterpolator`) is\n    typically more appropriate.\n    \n    References\n    ----------\n    .. [1] Lagrange polynomial. *Wikipedia*.\n           https://en.wikipedia.org/wiki/Lagrange_polynomial\n    .. [2] Newton polynomial. *Wikipedia*.\n           https://en.wikipedia.org/wiki/Newton_polynomial\n    \n    Examples\n    --------\n    Interpolate :math:`f(x) = x^3` by 3 points.\n    \n    >>> import numpy as np\n    >>> from scipy.interpolate import lagrange\n    >>> x = np.array([0, 1, 2])\n    >>> y = x**3\n    >>> poly = lagrange(x, y)\n    \n    Since there are only 3 points, the Lagrange polynomial has degree 2. Explicitly,\n    it is given by\n    \n    .. math::\n    \n        \\begin{aligned}\n            L(x) &= 1\\times \\frac{x (x - 2)}{-1} + 8\\times \\frac{x (x-1)}{2} \\\\\n                 &= x (-2 + 3x)\n        \\end{aligned}\n    \n    >>> from numpy.polynomial.polynomial import Polynomial\n    >>> Polynomial(poly.coef[::-1]).coef\n    array([ 0., -2.,  3.])\n    \n    >>> import matplotlib.pyplot as plt\n    >>> x_new = np.arange(0, 2.1, 0.1)\n    >>> plt.scatter(x, y, label='data')\n    >>> plt.plot(x_new, Polynomial(poly.coef[::-1])(x_new), label='Polynomial')\n    >>> plt.plot(x_new, 3*x_new**2 - 2*x_new + 0*x_new,\n    ...          label=r\"$3 x^2 - 2 x$\", linestyle='-.')\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0690d6038fb646db5ece224073230cee3000d40ba801997541df4c9d4f1bbcbc",
            "fields": [
                {
                    "id": "c3py_io_",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "`x` represents the x-coordinates of a set of datapoints.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qmtp7hn5",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "`w` represents the y-coordinates of a set of datapoints, i.e., f(`x`).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e3et0z7g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.lagrange",
                    "defaultValue": "scipy.interpolate.lagrange",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8kp02r81",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwnvvgnn",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "vom8s_e7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6k3cs1n6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a8uz018w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aus32lfi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "a_pxu0gc",
            "name": "interpolate.make_interp_spline",
            "description": "Create an interpolating B-spline with specified degree and boundary conditions.\n    \n    Parameters\n    ----------\n    x : array_like, shape (n,)\n        Abscissas.\n    y : array_like, shape (n, ...)\n        Ordinates.\n    k : int, optional\n        B-spline degree. Default is cubic, ``k = 3``.\n    t : array_like, shape (nt + k + 1,), optional.\n        Knots.\n        The number of knots needs to agree with the number of data points and\n        the number of derivatives at the edges. Specifically, ``nt - n`` must\n        equal ``len(deriv_l) + len(deriv_r)``.\n    bc_type : 2-tuple or None\n        Boundary conditions.\n        Default is None, which means choosing the boundary conditions\n        automatically. Otherwise, it must be a length-two tuple where the first\n        element (``deriv_l``) sets the boundary conditions at ``x[0]`` and\n        the second element (``deriv_r``) sets the boundary conditions at\n        ``x[-1]``. Each of these must be an iterable of pairs\n        ``(order, value)`` which gives the values of derivatives of specified\n        orders at the given edge of the interpolation interval.\n        Alternatively, the following string aliases are recognized:\n    \n        * ``\"clamped\"``: The first derivatives at the ends are zero. This is\n           equivalent to ``bc_type=([(1, 0.0)], [(1, 0.0)])``.\n        * ``\"natural\"``: The second derivatives at ends are zero. This is\n          equivalent to ``bc_type=([(2, 0.0)], [(2, 0.0)])``.\n        * ``\"not-a-knot\"`` (default): The first and second segments are the\n          same polynomial. This is equivalent to having ``bc_type=None``.\n        * ``\"periodic\"``: The values and the first ``k-1`` derivatives at the\n          ends are equivalent.\n    \n    axis : int, optional\n        Interpolation axis. Default is 0.\n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n        Default is True.\n    \n    Returns\n    -------\n    b : `BSpline` object\n        A `BSpline` object of the degree ``k`` and with knots ``t``.\n    \n    See Also\n    --------\n    BSpline : base class representing the B-spline objects\n    CubicSpline : a cubic spline in the polynomial basis\n    make_lsq_spline : a similar factory function for spline fitting\n    UnivariateSpline : a wrapper over FITPACK spline fitting routines\n    splrep : a wrapper over FITPACK spline fitting routines\n    \n    Examples\n    --------\n    \n    Use cubic interpolation on Chebyshev nodes:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> def cheb_nodes(N):\n    ...     jj = 2.*np.arange(N) + 1\n    ...     x = np.cos(np.pi * jj / 2 / N)[::-1]\n    ...     return x\n    \n    >>> x = cheb_nodes(20)\n    >>> y = np.sqrt(1 - x**2)\n    \n    >>> from scipy.interpolate import BSpline, make_interp_spline\n    >>> b = make_interp_spline(x, y)\n    >>> np.allclose(b(x), y)\n    True\n    \n    Note that the default is a cubic spline with a not-a-knot boundary condition\n    \n    >>> b.k\n    3\n    \n    Here we use a 'natural' spline, with zero 2nd derivatives at edges:\n    \n    >>> l, r = [(2, 0.0)], [(2, 0.0)]\n    >>> b_n = make_interp_spline(x, y, bc_type=(l, r))  # or, bc_type=\"natural\"\n    >>> np.allclose(b_n(x), y)\n    True\n    >>> x0, x1 = x[0], x[-1]\n    >>> np.allclose([b_n(x0, 2), b_n(x1, 2)], [0, 0])\n    True\n    \n    Interpolation of parametric curves is also supported. As an example, we\n    compute a discretization of a snail curve in polar coordinates\n    \n    >>> phi = np.linspace(0, 2.*np.pi, 40)\n    >>> r = 0.3 + np.cos(phi)\n    >>> x, y = r*np.cos(phi), r*np.sin(phi)  # convert to Cartesian coordinates\n    \n    Build an interpolating curve, parameterizing it by the angle\n    \n    >>> spl = make_interp_spline(phi, np.c_[x, y])\n    \n    Evaluate the interpolant on a finer grid (note that we transpose the result\n    to unpack it into a pair of x- and y-arrays)\n    \n    >>> phi_new = np.linspace(0, 2.*np.pi, 100)\n    >>> x_new, y_new = spl(phi_new).T\n    \n    Plot the result\n    \n    >>> plt.plot(x, y, 'o')\n    >>> plt.plot(x_new, y_new, '-')\n    >>> plt.show()\n    \n    Build a B-spline curve with 2 dimensional y\n    \n    >>> x = np.linspace(0, 2*np.pi, 10)\n    >>> y = np.array([np.sin(x), np.cos(x)])\n    \n    Periodic condition is satisfied because y coordinates of points on the ends\n    are equivalent\n    \n    >>> ax = plt.axes(projection='3d')\n    >>> xx = np.linspace(0, 2*np.pi, 100)\n    >>> bspl = make_interp_spline(x, y, k=5, bc_type='periodic', axis=1)\n    >>> ax.plot3D(xx, *bspl(xx))\n    >>> ax.scatter3D(x, *y, color='red')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "17435bc1609754576fbeb0af58688cfb5ab31a1b73c7c664b02f51ffb29e4f1d",
            "fields": [
                {
                    "id": "uh2kkodd",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Abscissas.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0pd130s8",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Ordinates.",
                    "type": "arraylike, shape (n, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wfyltc87",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "B-spline degree. Default is cubic, ``k = 3``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "abx0189w",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Knots.\nThe number of knots needs to agree with the number of data points and\nthe number of derivatives at the edges. Specifically, ``nt - n`` must\nequal ``len(deriv_l) + len(deriv_r)``.",
                    "type": "arraylike, shape (nt + k + 1,), optional.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urftlyej",
                    "encoding": "",
                    "name": "bc_type",
                    "value": "",
                    "defaultValue": "",
                    "description": "Boundary conditions.\nDefault is None, which means choosing the boundary conditions\nautomatically. Otherwise, it must be a length-two tuple where the first\nelement (``deriv_l``) sets the boundary conditions at ``x[0]`` and\nthe second element (``deriv_r``) sets the boundary conditions at\n``x[-1]``. Each of these must be an iterable of pairs\n``(order, value)`` which gives the values of derivatives of specified\norders at the given edge of the interpolation interval.\nAlternatively, the following string aliases are recognized:\n\n* ``\"clamped\"``: The first derivatives at the ends are zero. This is\n   equivalent to ``bc_type=([(1, 0.0)], [(1, 0.0)])``.\n* ``\"natural\"``: The second derivatives at ends are zero. This is\n  equivalent to ``bc_type=([(2, 0.0)], [(2, 0.0)])``.\n* ``\"not-a-knot\"`` (default): The first and second segments are the\n  same polynomial. This is equivalent to having ``bc_type=None``.\n* ``\"periodic\"``: The values and the first ``k-1`` derivatives at the\n  ends are equivalent.",
                    "type": "2-tuple or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1u9fw3iz",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Interpolation axis. Default is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b57blbed",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hcpvw2_9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.make_interp_spline",
                    "defaultValue": "scipy.interpolate.make_interp_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1apivv96",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bighnea3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6gqw6qz4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4h2uz54",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ke7ahuhh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qw_ws6ps",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ypbwovdd",
            "name": "interpolate.make_lsq_spline",
            "description": "Create a smoothing B-spline satisfying the Least SQuares (LSQ) criterion.\n    \n    The result is a linear combination\n    \n    .. math::\n    \n            S(x) = \\sum_j c_j B_j(x; t)\n    \n    of the B-spline basis elements, :math:`B_j(x; t)`, which minimizes\n    \n    .. math::\n    \n        \\sum_{j} \\left( w_j \\times (S(x_j) - y_j) \\right)^2\n    \n    Parameters\n    ----------\n    x : array_like, shape (m,)\n        Abscissas.\n    y : array_like, shape (m, ...)\n        Ordinates.\n    t : array_like, shape (n + k + 1,).\n        Knots.\n        Knots and data points must satisfy Schoenberg-Whitney conditions.\n    k : int, optional\n        B-spline degree. Default is cubic, ``k = 3``.\n    w : array_like, shape (m,), optional\n        Weights for spline fitting. Must be positive. If ``None``,\n        then weights are all equal.\n        Default is ``None``.\n    axis : int, optional\n        Interpolation axis. Default is zero.\n    check_finite : bool, optional\n        Whether to check that the input arrays contain only finite numbers.\n        Disabling may give a performance gain, but may result in problems\n        (crashes, non-termination) if the inputs do contain infinities or NaNs.\n        Default is True.\n    method : str, optional\n        Method for solving the linear LSQ problem. Allowed values are \"norm-eq\"\n        (Explicitly construct and solve the normal system of equations), and\n        \"qr\" (Use the QR factorization of the design matrix).\n        Default is \"qr\".\n    \n    Returns\n    -------\n    b : `BSpline` object\n        A `BSpline` object of the degree ``k`` with knots ``t``.\n    \n    See Also\n    --------\n    BSpline : base class representing the B-spline objects\n    make_interp_spline : a similar factory function for interpolating splines\n    LSQUnivariateSpline : a FITPACK-based spline fitting routine\n    splrep : a FITPACK-based fitting routine\n    \n    Notes\n    -----\n    The number of data points must be larger than the spline degree ``k``.\n    \n    Knots ``t`` must satisfy the Schoenberg-Whitney conditions,\n    i.e., there must be a subset of data points ``x[j]`` such that\n    ``t[j] < x[j] < t[j+k+1]``, for ``j=0, 1,...,n-k-2``.\n    \n    Examples\n    --------\n    Generate some noisy data:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> x = np.linspace(-3, 3, 50)\n    >>> y = np.exp(-x**2) + 0.1 * rng.standard_normal(50)\n    \n    Now fit a smoothing cubic spline with a pre-defined internal knots.\n    Here we make the knot vector (k+1)-regular by adding boundary knots:\n    \n    >>> from scipy.interpolate import make_lsq_spline, BSpline\n    >>> t = [-1, 0, 1]\n    >>> k = 3\n    >>> t = np.r_[(x[0],)*(k+1),\n    ...           t,\n    ...           (x[-1],)*(k+1)]\n    >>> spl = make_lsq_spline(x, y, t, k)\n    \n    For comparison, we also construct an interpolating spline for the same\n    set of data:\n    \n    >>> from scipy.interpolate import make_interp_spline\n    >>> spl_i = make_interp_spline(x, y)\n    \n    Plot both:\n    \n    >>> xs = np.linspace(-3, 3, 100)\n    >>> plt.plot(x, y, 'ro', ms=5)\n    >>> plt.plot(xs, spl(xs), 'g-', lw=3, label='LSQ spline')\n    >>> plt.plot(xs, spl_i(xs), 'b-', lw=3, alpha=0.7, label='interp spline')\n    >>> plt.legend(loc='best')\n    >>> plt.show()\n    \n    **NaN handling**: If the input arrays contain ``nan`` values, the result is\n    not useful since the underlying spline fitting routines cannot deal with\n    ``nan``. A workaround is to use zero weights for not-a-number data points:\n    \n    >>> y[8] = np.nan\n    >>> w = np.isnan(y)\n    >>> y[w] = 0.\n    >>> tck = make_lsq_spline(x, y, t, w=~w)\n    \n    Notice the need to replace a ``nan`` by a numerical value (precise value\n    does not matter as long as the corresponding weight is zero.)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2fe902b45853e26e06fc827b3a01e6d19d9fe4c5bf488408fdc20dea92efd5a4",
            "fields": [
                {
                    "id": "k9eyail1",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Abscissas.",
                    "type": "arraylike, shape (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dfrqcqv7",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Ordinates.",
                    "type": "arraylike, shape (m, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "485vndht",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "Knots.\nKnots and data points must satisfy Schoenberg-Whitney conditions.",
                    "type": "arraylike, shape (n + k + 1,).",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "icu41vru",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "B-spline degree. Default is cubic, ``k = 3``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3t0ph59x",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Weights for spline fitting. Must be positive. If ``None``,\nthen weights are all equal.\nDefault is ``None``.",
                    "type": "arraylike, shape (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrvttzzb",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Interpolation axis. Default is zero.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9dobc7jh",
                    "encoding": "",
                    "name": "check_finite",
                    "value": true,
                    "defaultValue": true,
                    "description": "Whether to check that the input arrays contain only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.\nDefault is True.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0dipbvx",
                    "encoding": "",
                    "name": "method",
                    "value": "qr",
                    "defaultValue": "qr",
                    "description": "Method for solving the linear LSQ problem. Allowed values are \"norm-eq\"\n(Explicitly construct and solve the normal system of equations), and\n\"qr\" (Use the QR factorization of the design matrix).\nDefault is \"qr\".",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q4r6s_oz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.make_lsq_spline",
                    "defaultValue": "scipy.interpolate.make_lsq_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfmhume2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsqp4x6m",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pv632fmd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s541o9u7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9z7h3qkc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7sbt3zxi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ly71927i",
            "name": "interpolate.make_smoothing_spline",
            "description": "Create a smoothing B-spline satisfying the Generalized Cross Validation (GCV) criterion.\n    \n    Compute the (coefficients of) smoothing cubic spline function using\n    ``lam`` to control the tradeoff between the amount of smoothness of the\n    curve and its proximity to the data. In case ``lam`` is None, using the\n    GCV criteria [1] to find it.\n    \n    A smoothing spline is found as a solution to the regularized weighted\n    linear regression problem:\n    \n    .. math::\n    \n        \\sum\\limits_{i=1}^n w_i\\lvert y_i - f(x_i) \\rvert^2 +\n        \\lambda\\int\\limits_{x_1}^{x_n} (f^{(2)}(u))^2 d u\n    \n    where :math:`f` is a spline function, :math:`w` is a vector of weights and\n    :math:`\\lambda` is a regularization parameter.\n    \n    If ``lam`` is None, we use the GCV criteria to find an optimal\n    regularization parameter, otherwise we solve the regularized weighted\n    linear regression problem with given parameter. The parameter controls\n    the tradeoff in the following way: the larger the parameter becomes, the\n    smoother the function gets.\n    \n    Parameters\n    ----------\n    x : array_like, shape (n,)\n        Abscissas. `n` must be at least 5.\n    y : array_like, shape (n, ...)\n        Ordinates. `n` must be at least 5.\n    w : array_like, shape (n,), optional\n        Vector of weights. Default is ``np.ones_like(x)``.\n    lam : float, (:math:`\\lambda \\geq 0`), optional\n        Regularization parameter. If ``lam`` is None, then it is found from\n        the GCV criteria. Default is None.\n    axis : int, optional\n        The data axis. Default is zero.\n        The assumption is that ``y.shape[axis] == n``, and all other axes of ``y``\n        are batching axes.\n    \n    Returns\n    -------\n    func : `BSpline` object\n        An object representing a spline in the B-spline basis\n        as a solution of the problem of smoothing splines using\n        the GCV criteria [1] in case ``lam`` is None, otherwise using the\n        given parameter ``lam``.\n    \n    Notes\n    -----\n    This algorithm is a clean room reimplementation of the algorithm\n    introduced by Woltring in FORTRAN [2]. The original version cannot be used\n    in SciPy source code because of the license issues. The details of the\n    reimplementation are discussed here (available only in Russian) [4].\n    \n    If the vector of weights ``w`` is None, we assume that all the points are\n    equal in terms of weights, and vector of weights is vector of ones.\n    \n    Note that in weighted residual sum of squares, weights are not squared:\n    :math:`\\sum\\limits_{i=1}^n w_i\\lvert y_i - f(x_i) \\rvert^2` while in\n    ``splrep`` the sum is built from the squared weights.\n    \n    In cases when the initial problem is ill-posed (for example, the product\n    :math:`X^T W X` where :math:`X` is a design matrix is not a positive\n    defined matrix) a ValueError is raised.\n    \n    References\n    ----------\n    .. [1] G. Wahba, \"Estimating the smoothing parameter\" in Spline models for\n        observational data, Philadelphia, Pennsylvania: Society for Industrial\n        and Applied Mathematics, 1990, pp. 45-65.\n        :doi:`10.1137/1.9781611970128`\n    .. [2] H. J. Woltring, A Fortran package for generalized, cross-validatory\n        spline smoothing and differentiation, Advances in Engineering\n        Software, vol. 8, no. 2, pp. 104-113, 1986.\n        :doi:`10.1016/0141-1195(86)90098-7`\n    .. [3] T. Hastie, J. Friedman, and R. Tisbshirani, \"Smoothing Splines\" in\n        The elements of Statistical Learning: Data Mining, Inference, and\n        prediction, New York: Springer, 2017, pp. 241-249.\n        :doi:`10.1007/978-0-387-84858-7`\n    .. [4] E. Zemlyanoy, \"Generalized cross-validation smoothing splines\",\n        BSc thesis, 2022.\n        `<https://www.hse.ru/ba/am/students/diplomas/620910604>`_ (in\n        Russian)\n    \n    Examples\n    --------\n    Generate some noisy data\n    \n    >>> import numpy as np\n    >>> np.random.seed(1234)\n    >>> n = 200\n    >>> def func(x):\n    ...    return x**3 + x**2 * np.sin(4 * x)\n    >>> x = np.sort(np.random.random_sample(n) * 4 - 2)\n    >>> y = func(x) + np.random.normal(scale=1.5, size=n)\n    \n    Make a smoothing spline function\n    \n    >>> from scipy.interpolate import make_smoothing_spline\n    >>> spl = make_smoothing_spline(x, y)\n    \n    Plot both\n    \n    >>> import matplotlib.pyplot as plt\n    >>> grid = np.linspace(x[0], x[-1], 400)\n    >>> plt.plot(x, y, '.')\n    >>> plt.plot(grid, spl(grid), label='Spline')\n    >>> plt.plot(grid, func(grid), label='Original function')\n    >>> plt.legend(loc='best')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "50ff15b7bb338cf9b08805959efdbfbbb46fdd2260f362fe029c17fc580f3a4d",
            "fields": [
                {
                    "id": "pus_v12n",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Abscissas. `n` must be at least 5.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8sbz3sff",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Ordinates. `n` must be at least 5.",
                    "type": "arraylike, shape (n, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "thlv7zin",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector of weights. Default is ``np.ones_like(x)``.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s11zzw5u",
                    "encoding": "",
                    "name": "lam",
                    "value": "",
                    "defaultValue": "",
                    "description": "Regularization parameter. If ``lam`` is None, then it is found from\nthe GCV criteria. Default is None.",
                    "type": "float, (:math:\\lambda \\geq 0)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0kejd46x",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The data axis. Default is zero.\nThe assumption is that ``y.shape[axis] == n``, and all other axes of ``y``\nare batching axes.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bqgcikr1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.make_smoothing_spline",
                    "defaultValue": "scipy.interpolate.make_smoothing_spline",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a0uuc_xs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nb7zqet9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8jyix38r",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_cgp2n94",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hu644d_x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oz1wd3j2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sgspal6y",
            "name": "interpolate.make_splprep",
            "description": "Create a smoothing parametric B-spline curve with bounded error, minimizing derivative jumps.\n    \n    Given a list of N 1D arrays, `x`, which represent a curve in\n    N-dimensional space parametrized by `u`, find a smooth approximating\n    spline curve ``g(u)``.\n    \n    Parameters\n    ----------\n    x : array_like, shape (m, ndim)\n        Sampled data points representing the curve in ``ndim`` dimensions.\n        The typical use is a list of 1D arrays, each of length ``m``.\n    w : array_like, shape(m,), optional\n        Strictly positive 1D array of weights.\n        The weights are used in computing the weighted least-squares spline\n        fit. If the errors in the `x` values have standard deviation given by\n        the vector d, then `w` should be 1/d. Default is ``np.ones(m)``.\n    u : array_like, optional\n        An array of parameter values for the curve in the parametric form.\n        If not given, these values are calculated automatically, according to::\n    \n            v[0] = 0\n            v[i] = v[i-1] + distance(x[i], x[i-1])\n            u[i] = v[i] / v[-1]\n    \n    ub, ue : float, optional\n        The end-points of the parameters interval. Default to ``u[0]`` and ``u[-1]``.\n    k : int, optional\n        Degree of the spline. Cubic splines, ``k=3``, are recommended.\n        Even values of `k` should be avoided especially with a small ``s`` value.\n        Default is ``k=3``\n    s : float, optional\n        A smoothing condition.  The amount of smoothness is determined by\n        satisfying the conditions::\n    \n            sum((w * (g(u) - x))**2) <= s,\n    \n        where ``g(u)`` is the smoothed approximation to ``x``.  The user can\n        use `s` to control the trade-off between closeness and smoothness\n        of fit.  Larger ``s`` means more smoothing while smaller values of ``s``\n        indicate less smoothing.\n        Recommended values of ``s`` depend on the weights, ``w``.  If the weights\n        represent the inverse of the standard deviation of ``x``, then a good\n        ``s`` value should be found in the range ``(m - sqrt(2*m), m + sqrt(2*m))``,\n        where ``m`` is the number of data points in ``x`` and ``w``.\n    t : array_like, optional\n        The spline knots. If None (default), the knots will be constructed\n        automatically.\n        There must be at least ``2*k + 2`` and at most ``m + k + 1`` knots.\n    nest : int, optional\n        The target length of the knot vector. Should be between ``2*(k + 1)``\n        (the minimum number of knots for a degree-``k`` spline), and\n        ``m + k + 1`` (the number of knots of the interpolating spline).\n        The actual number of knots returned by this routine may be slightly\n        larger than `nest`.\n        Default is None (no limit, add up to ``m + k + 1`` knots).\n    \n    Returns\n    -------\n    spl : a `BSpline` instance\n        For `s=0`,  ``spl(u) == x``.\n        For non-zero values of ``s``, `spl` represents the smoothed approximation\n        to ``x``, generally with fewer knots.\n    u : ndarray\n        The values of the parameters\n    \n    See Also\n    --------\n    generate_knots : is used under the hood for generating the knots\n    make_splrep : the analog of this routine 1D functions\n    make_interp_spline : construct an interpolating spline (``s = 0``)\n    make_lsq_spline : construct the least-squares spline given the knot vector\n    splprep : a FITPACK analog of this routine\n    \n    Notes\n    -----\n    Given a set of :math:`m` data points in :math:`D` dimensions, :math:`\\vec{x}_j`,\n    with :math:`j=1, ..., m` and :math:`\\vec{x}_j = (x_{j; 1}, ..., x_{j; D})`,\n    this routine constructs the parametric spline curve :math:`g_a(u)` with\n    :math:`a=1, ..., D`, to minimize the sum of jumps, :math:`D_{i; a}`, of the\n    ``k``-th derivative at the internal knots (:math:`u_b < t_i < u_e`), where\n    \n    .. math::\n    \n        D_{i; a} = g_a^{(k)}(t_i + 0) - g_a^{(k)}(t_i - 0)\n    \n    Specifically, the routine constructs the spline function :math:`g(u)` which\n    minimizes\n    \n    .. math::\n    \n            \\sum_i \\sum_{a=1}^D | D_{i; a} |^2 \\to \\mathrm{min}\n    \n    provided that\n    \n    .. math::\n    \n        \\sum_{j=1}^m \\sum_{a=1}^D (w_j \\times (g_a(u_j) - x_{j; a}))^2 \\leqslant s\n    \n    where :math:`u_j` is the value of the parameter corresponding to the data point\n    :math:`(x_{j; 1}, ..., x_{j; D})`, and :math:`s > 0` is the input parameter.\n    \n    In other words, we balance maximizing the smoothness (measured as the jumps\n    of the derivative, the first criterion), and the deviation of :math:`g(u_j)`\n    from the data :math:`x_j` (the second criterion).\n    \n    Note that the summation in the second criterion is over all data points,\n    and in the first criterion it is over the internal spline knots (i.e.\n    those with ``ub < t[i] < ue``). The spline knots are in general a subset\n    of data, see `generate_knots` for details.\n    \n    .. versionadded:: 1.15.0\n    \n    References\n    ----------\n    .. [1] P. Dierckx, \"Algorithms for smoothing data with periodic and\n        parametric splines, Computer Graphics and Image Processing\",\n        20 (1982) 171-184.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n        Numerical Analysis, Oxford University Press, 1993.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3f751355fd4ddd7efeb97d5485f62011b39a79ca81edfc4525aeb57514bae0e3",
            "fields": [
                {
                    "id": "rm_gugki",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Sampled data points representing the curve in ``ndim`` dimensions.\nThe typical use is a list of 1D arrays, each of length ``m``.",
                    "type": "arraylike, shape (m, ndim)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7jkk2v7m",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Strictly positive 1D array of weights.\nThe weights are used in computing the weighted least-squares spline\nfit. If the errors in the `x` values have standard deviation given by\nthe vector d, then `w` should be 1/d. Default is ``np.ones(m)``.",
                    "type": "arraylike, shape(m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9t3cbhni",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of parameter values for the curve in the parametric form.\nIf not given, these values are calculated automatically, according to::\n\n    v[0] = 0\n    v[i] = v[i-1] + distance(x[i], x[i-1])\n    u[i] = v[i] / v[-1]",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t7kcht2v",
                    "encoding": "",
                    "name": "ub",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uw0fm4bs",
                    "encoding": "",
                    "name": "ue",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rty78yro",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Degree of the spline. Cubic splines, ``k=3``, are recommended.\nEven values of `k` should be avoided especially with a small ``s`` value.\nDefault is ``k=3``",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ti8rusm5",
                    "encoding": "",
                    "name": "s",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "A smoothing condition.  The amount of smoothness is determined by\nsatisfying the conditions::\n\n    sum((w * (g(u) - x))**2) <= s,\n\nwhere ``g(u)`` is the smoothed approximation to ``x``.  The user can\nuse `s` to control the trade-off between closeness and smoothness\nof fit.  Larger ``s`` means more smoothing while smaller values of ``s``\nindicate less smoothing.\nRecommended values of ``s`` depend on the weights, ``w``.  If the weights\nrepresent the inverse of the standard deviation of ``x``, then a good\n``s`` value should be found in the range ``(m - sqrt(2*m), m + sqrt(2*m))``,\nwhere ``m`` is the number of data points in ``x`` and ``w``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0v3zk3vk",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The spline knots. If None (default), the knots will be constructed\nautomatically.\nThere must be at least ``2*k + 2`` and at most ``m + k + 1`` knots.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmqll1ln",
                    "encoding": "",
                    "name": "nest",
                    "value": "",
                    "defaultValue": "",
                    "description": "The target length of the knot vector. Should be between ``2*(k + 1)``\n(the minimum number of knots for a degree-``k`` spline), and\n``m + k + 1`` (the number of knots of the interpolating spline).\nThe actual number of knots returned by this routine may be slightly\nlarger than `nest`.\nDefault is None (no limit, add up to ``m + k + 1`` knots).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smrg5jjq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.make_splprep",
                    "defaultValue": "scipy.interpolate.make_splprep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9s0djk5v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "67ewb6c8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3fggq7jz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ddecdw99",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4df92bp8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29q43z1j",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mmvam5fc",
            "name": "interpolate.make_splrep",
            "description": "Create a smoothing B-spline function with bounded error, minimizing derivative jumps.\n    \n    Given the set of data points ``(x[i], y[i])``, determine a smooth spline\n    approximation of degree ``k`` on the interval ``xb <= x <= xe``.\n    \n    Parameters\n    ----------\n    x, y : array_like, shape (m,)\n        The data points defining a curve ``y = f(x)``.\n    w : array_like, shape (m,), optional\n        Strictly positive 1D array of weights, of the same length as `x` and `y`.\n        The weights are used in computing the weighted least-squares spline\n        fit. If the errors in the y values have standard-deviation given by the\n        vector ``d``, then `w` should be ``1/d``.\n        Default is ``np.ones(m)``.\n    xb, xe : float, optional\n        The interval to fit.  If None, these default to ``x[0]`` and ``x[-1]``,\n        respectively.\n    k : int, optional\n        The degree of the spline fit. It is recommended to use cubic splines,\n        ``k=3``, which is the default. Even values of `k` should be avoided,\n        especially with small `s` values.\n    s : float, optional\n        The smoothing condition. The amount of smoothness is determined by\n        satisfying the LSQ (least-squares) constraint::\n    \n            sum((w * (g(x)  - y))**2 ) <= s\n    \n        where ``g(x)`` is the smoothed fit to ``(x, y)``. The user can use `s`\n        to control the tradeoff between closeness to data and smoothness of fit.\n        Larger `s` means more smoothing while smaller values of `s` indicate less\n        smoothing.\n        Recommended values of `s` depend on the weights, `w`. If the weights\n        represent the inverse of the standard deviation of `y`, then a good `s`\n        value should be found in the range ``(m-sqrt(2*m), m+sqrt(2*m))`` where\n        ``m`` is the number of datapoints in `x`, `y`, and `w`.\n        Default is ``s = 0.0``, i.e. interpolation.\n    t : array_like, optional\n        The spline knots. If None (default), the knots will be constructed\n        automatically.\n        There must be at least ``2*k + 2`` and at most ``m + k + 1`` knots.\n    nest : int, optional\n        The target length of the knot vector. Should be between ``2*(k + 1)``\n        (the minimum number of knots for a degree-``k`` spline), and\n        ``m + k + 1`` (the number of knots of the interpolating spline).\n        The actual number of knots returned by this routine may be slightly\n        larger than `nest`.\n        Default is None (no limit, add up to ``m + k + 1`` knots).\n    \n    Returns\n    -------\n    spl : a `BSpline` instance\n        For `s=0`,  ``spl(x) == y``.\n        For non-zero values of `s` the `spl` represents the smoothed approximation\n        to `(x, y)`, generally with fewer knots.\n    \n    See Also\n    --------\n    generate_knots : is used under the hood for generating the knots\n    make_splprep : the analog of this routine for parametric curves\n    make_interp_spline : construct an interpolating spline (``s = 0``)\n    make_lsq_spline : construct the least-squares spline given the knot vector\n    splrep : a FITPACK analog of this routine\n    \n    References\n    ----------\n    .. [1] P. Dierckx, \"Algorithms for smoothing data with periodic and\n        parametric splines, Computer Graphics and Image Processing\",\n        20 (1982) 171-184.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n        Numerical Analysis, Oxford University Press, 1993.\n    \n    Notes\n    -----\n    This routine constructs the smoothing spline function, :math:`g(x)`, to\n    minimize the sum of jumps, :math:`D_j`, of the ``k``-th derivative at the\n    internal knots (:math:`x_b < t_i < x_e`), where\n    \n    .. math::\n    \n        D_i = g^{(k)}(t_i + 0) - g^{(k)}(t_i - 0)\n    \n    Specifically, the routine constructs the spline function :math:`g(x)` which\n    minimizes\n    \n    .. math::\n    \n            \\sum_i | D_i |^2 \\to \\mathrm{min}\n    \n    provided that\n    \n    .. math::\n    \n           \\sum_{j=1}^m (w_j \\times (g(x_j) - y_j))^2 \\leqslant s ,\n    \n    where :math:`s > 0` is the input parameter.\n    \n    In other words, we balance maximizing the smoothness (measured as the jumps\n    of the derivative, the first criterion), and the deviation of :math:`g(x_j)`\n    from the data :math:`y_j` (the second criterion).\n    \n    Note that the summation in the second criterion is over all data points,\n    and in the first criterion it is over the internal spline knots (i.e.\n    those with ``xb < t[i] < xe``). The spline knots are in general a subset\n    of data, see `generate_knots` for details.\n    \n    Also note the difference of this routine to `make_lsq_spline`: the latter\n    routine does not consider smoothness and simply solves a least-squares\n    problem\n    \n    .. math::\n    \n        \\sum w_j \\times (g(x_j) - y_j)^2 \\to \\mathrm{min}\n    \n    for a spline function :math:`g(x)` with a _fixed_ knot vector ``t``.\n    \n    .. versionadded:: 1.15.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f3d4bdc80df4baf54a6b78b9f3f675251b3e6ba67ff8d850976151319534bd00",
            "fields": [
                {
                    "id": "xpb6jv4y",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mggjxdap",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "spbe2gbo",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Strictly positive 1D array of weights, of the same length as `x` and `y`.\nThe weights are used in computing the weighted least-squares spline\nfit. If the errors in the y values have standard-deviation given by the\nvector ``d``, then `w` should be ``1/d``.\nDefault is ``np.ones(m)``.",
                    "type": "arraylike, shape (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brp47lbm",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fg19gedu",
                    "encoding": "",
                    "name": "xe",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2h0344lf",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The degree of the spline fit. It is recommended to use cubic splines,\n``k=3``, which is the default. Even values of `k` should be avoided,\nespecially with small `s` values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fkcnhsza",
                    "encoding": "",
                    "name": "s",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The smoothing condition. The amount of smoothness is determined by\nsatisfying the LSQ (least-squares) constraint::\n\n    sum((w * (g(x)  - y))**2 ) <= s\n\nwhere ``g(x)`` is the smoothed fit to ``(x, y)``. The user can use `s`\nto control the tradeoff between closeness to data and smoothness of fit.\nLarger `s` means more smoothing while smaller values of `s` indicate less\nsmoothing.\nRecommended values of `s` depend on the weights, `w`. If the weights\nrepresent the inverse of the standard deviation of `y`, then a good `s`\nvalue should be found in the range ``(m-sqrt(2*m), m+sqrt(2*m))`` where\n``m`` is the number of datapoints in `x`, `y`, and `w`.\nDefault is ``s = 0.0``, i.e. interpolation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1is0soit",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The spline knots. If None (default), the knots will be constructed\nautomatically.\nThere must be at least ``2*k + 2`` and at most ``m + k + 1`` knots.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owf_67tt",
                    "encoding": "",
                    "name": "nest",
                    "value": "",
                    "defaultValue": "",
                    "description": "The target length of the knot vector. Should be between ``2*(k + 1)``\n(the minimum number of knots for a degree-``k`` spline), and\n``m + k + 1`` (the number of knots of the interpolating spline).\nThe actual number of knots returned by this routine may be slightly\nlarger than `nest`.\nDefault is None (no limit, add up to ``m + k + 1`` knots).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rta6jifa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.make_splrep",
                    "defaultValue": "scipy.interpolate.make_splrep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o_06x47n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "joyeufgu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mpxm_b3_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dk244cah",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bzgfiqfh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ncz0rui",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bfl7t33b",
            "name": "interpolate.pade",
            "description": "Return Pade approximation to a polynomial as the ratio of two polynomials.\n    \n    Parameters\n    ----------\n    an : (N,) array_like\n        Taylor series coefficients.\n    m : int\n        The order of the returned approximating polynomial `q`.\n    n : int, optional\n        The order of the returned approximating polynomial `p`. By default,\n        the order is ``len(an)-1-m``.\n    \n    Returns\n    -------\n    p, q : Polynomial class\n        The Pade approximation of the polynomial defined by `an` is\n        ``p(x)/q(x)``.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.interpolate import pade\n    >>> e_exp = [1.0, 1.0, 1.0/2.0, 1.0/6.0, 1.0/24.0, 1.0/120.0]\n    >>> p, q = pade(e_exp, 2)\n    \n    >>> e_exp.reverse()\n    >>> e_poly = np.poly1d(e_exp)\n    \n    Compare ``e_poly(x)`` and the Pade approximation ``p(x)/q(x)``\n    \n    >>> e_poly(1)\n    2.7166666666666668\n    \n    >>> p(1)/q(1)\n    2.7179487179487181",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8a8a01025709c242f6b5f53680df55311555deb6b64499db4d8a999af45420c8",
            "fields": [
                {
                    "id": "omaf52ad",
                    "encoding": "",
                    "name": "an",
                    "value": "",
                    "defaultValue": "",
                    "description": "Taylor series coefficients.",
                    "type": "(N,) arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpgfhodo",
                    "encoding": "",
                    "name": "m",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the returned approximating polynomial `q`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpcnjq1d",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the returned approximating polynomial `p`. By default,\nthe order is ``len(an)-1-m``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1sb4jih5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.pade",
                    "defaultValue": "scipy.interpolate.pade",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1dzznmyt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "63kqf65d",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qo2489a5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_93begy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4bgnvko",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jrdujvta",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "z5ddp3oh",
            "name": "interpolate.pchip_interpolate",
            "description": "Convenience function for pchip interpolation.\n    \n    xi and yi are arrays of values used to approximate some function f,\n    with ``yi = f(xi)``. The interpolant uses monotonic cubic splines\n    to find the value of new points x and the derivatives there.\n    \n    See `scipy.interpolate.PchipInterpolator` for details.\n    \n    Parameters\n    ----------\n    xi : array_like\n        A sorted list of x-coordinates, of length N.\n    yi : array_like\n        A 1-D array of real values. `yi`'s length along the interpolation\n        axis must be equal to the length of `xi`. If N-D array, use axis\n        parameter to select correct axis.\n    x : scalar or array_like\n        Of length M.\n    der : int or list, optional\n        Derivatives to extract. The 0th derivative can be included to\n        return the function value.\n    axis : int, optional\n        Axis in the yi array corresponding to the x-coordinate values.\n    \n    Returns\n    -------\n    y : scalar or array_like\n        The result, of length R or length M or M by R.\n    \n    See Also\n    --------\n    PchipInterpolator : PCHIP 1-D monotonic cubic interpolator.\n    \n    Examples\n    --------\n    We can interpolate 2D observed data using pchip interpolation:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import pchip_interpolate\n    >>> x_observed = np.linspace(0.0, 10.0, 11)\n    >>> y_observed = np.sin(x_observed)\n    >>> x = np.linspace(min(x_observed), max(x_observed), num=100)\n    >>> y = pchip_interpolate(x_observed, y_observed, x)\n    >>> plt.plot(x_observed, y_observed, \"o\", label=\"observation\")\n    >>> plt.plot(x, y, label=\"pchip interpolation\")\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4daf12c2986b67811b49b55171760cec6f2f42184c6af8cfa98314f75add567c",
            "fields": [
                {
                    "id": "_11opm_b",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sorted list of x-coordinates, of length N.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ztiuxipd",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "A 1-D array of real values. `yi`'s length along the interpolation\naxis must be equal to the length of `xi`. If N-D array, use axis\nparameter to select correct axis.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_rcuy44w",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Of length M.",
                    "type": "scalar or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wt1prguz",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Derivatives to extract. The 0th derivative can be included to\nreturn the function value.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_vfncgic",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the yi array corresponding to the x-coordinate values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k80uze2b",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.pchip_interpolate",
                    "defaultValue": "scipy.interpolate.pchip_interpolate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "im4nyqkn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tcppiwsb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ih7bvfaz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pry31sd",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7mnvsi9u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_qop9qm1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dmrk8hz3",
            "name": "interpolate.spalde",
            "description": "Evaluate a B-spline and all its derivatives at one point (or set of points) up\n    to order k (the degree of the spline), being 0 the spline itself.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and evaluate\n        its derivative in a loop or a list comprehension.\n    \n    Parameters\n    ----------\n    x : array_like\n        A point or a set of points at which to evaluate the derivatives.\n        Note that ``t(k) <= x <= t(n-k+1)`` must hold for each `x`.\n    tck : tuple\n        A tuple (t,c,k) containing the vector of knots,\n        the B-spline coefficients, and the degree of the spline whose \n        derivatives to compute.\n    \n    Returns\n    -------\n    results : {ndarray, list of ndarrays}\n        An array (or a list of arrays) containing all derivatives\n        up to order k inclusive for each point `x`, being the first element the \n        spline itself.\n    \n    See Also\n    --------\n    splprep, splrep, splint, sproot, splev, bisplrep, bisplev,\n    UnivariateSpline, BivariateSpline\n    \n    References\n    ----------\n    .. [1] de Boor C : On calculating with b-splines, J. Approximation Theory\n       6 (1972) 50-62.\n    .. [2] Cox M.G. : The numerical evaluation of b-splines, J. Inst. Maths\n       applics 10 (1972) 134-149.\n    .. [3] Dierckx P. : Curve and surface fitting with splines, Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    To calculate the derivatives of a B-spline there are several aproaches. \n    In this example, we will demonstrate that `spalde` is equivalent to\n    calling `splev` and `splder`.\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import BSpline, spalde, splder, splev\n    \n    >>> # Store characteristic parameters of a B-spline\n    >>> tck = ((-2, -2, -2, -2, -1, 0, 1, 2, 2, 2, 2),  # knots\n    ...        (0, 0, 0, 6, 0, 0, 0),  # coefficients\n    ...        3)  # degree (cubic)\n    >>> # Instance a B-spline object\n    >>> # `BSpline` objects are preferred, except for spalde()\n    >>> bspl = BSpline(tck[0], tck[1], tck[2])\n    >>> # Generate extra points to get a smooth curve\n    >>> x = np.linspace(min(tck[0]), max(tck[0]), 100)\n    \n    Evaluate the curve and all derivatives\n    \n    >>> # The order of derivative must be less or equal to k, the degree of the spline\n    >>> # Method 1: spalde()\n    >>> f1_y_bsplin = [spalde(i, tck)[0] for i in x ]  # The B-spline itself\n    >>> f1_y_deriv1 = [spalde(i, tck)[1] for i in x ]  # 1st derivative\n    >>> f1_y_deriv2 = [spalde(i, tck)[2] for i in x ]  # 2nd derivative\n    >>> f1_y_deriv3 = [spalde(i, tck)[3] for i in x ]  # 3rd derivative\n    >>> # You can reach the same result by using `splev`and `splder`\n    >>> f2_y_deriv3 = splev(x, bspl, der=3)\n    >>> f3_y_deriv3 = splder(bspl, n=3)(x)\n    \n    >>> # Generate a figure with three axes for graphic comparison\n    >>> fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(16, 5))\n    >>> suptitle = fig.suptitle(f'Evaluate a B-spline and all derivatives')\n    >>> # Plot B-spline and all derivatives using the three methods\n    >>> orders = range(4)\n    >>> linetypes = ['-', '--', '-.', ':']\n    >>> labels = ['B-Spline', '1st deriv.', '2nd deriv.', '3rd deriv.']\n    >>> functions = ['splev()', 'splder()', 'spalde()']\n    >>> for order, linetype, label in zip(orders, linetypes, labels):\n    ...     ax1.plot(x, splev(x, bspl, der=order), linetype, label=label)\n    ...     ax2.plot(x, splder(bspl, n=order)(x), linetype, label=label)\n    ...     ax3.plot(x, [spalde(i, tck)[order] for i in x], linetype, label=label)\n    >>> for ax, function in zip((ax1, ax2, ax3), functions):\n    ...     ax.set_title(function)\n    ...     ax.legend()\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "eb1da515e2d996abab330903fdce5da3502fcdde555a4c761aad00f9bfd3d592",
            "fields": [
                {
                    "id": "qn7pseq8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "A point or a set of points at which to evaluate the derivatives.\nNote that ``t(k) <= x <= t(n-k+1)`` must hold for each `x`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8g3rurt9",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A tuple (t,c,k) containing the vector of knots,\nthe B-spline coefficients, and the degree of the spline whose \nderivatives to compute.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_7sr234",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.spalde",
                    "defaultValue": "scipy.interpolate.spalde",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2lgp3a_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qhwoc_7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "21_kgfmi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9e3ek2x6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wg2ox_rg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q862r15q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "vbifnqcv",
            "name": "interpolate.splantider",
            "description": "Compute the spline for the antiderivative (integral) of a given spline.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using its\n        ``antiderivative`` method.\n    \n    Parameters\n    ----------\n    tck : BSpline instance or a tuple of (t, c, k)\n        Spline whose antiderivative to compute\n    n : int, optional\n        Order of antiderivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    BSpline instance or a tuple of (t2, c2, k2)\n        Spline of order k2=k+n representing the antiderivative of the input\n        spline.\n        A tuple is returned iff the input argument `tck` is a tuple, otherwise\n        a BSpline object is constructed and returned.\n    \n    See Also\n    --------\n    splder, splev, spalde\n    BSpline\n    \n    Notes\n    -----\n    The `splder` function is the inverse operation of this function.\n    Namely, ``splder(splantider(tck))`` is identical to `tck`, modulo\n    rounding error.\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    >>> from scipy.interpolate import splrep, splder, splantider, splev\n    >>> import numpy as np\n    >>> x = np.linspace(0, np.pi/2, 70)\n    >>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)\n    >>> spl = splrep(x, y)\n    \n    The derivative is the inverse operation of the antiderivative,\n    although some floating point error accumulates:\n    \n    >>> splev(1.7, spl), splev(1.7, splder(splantider(spl)))\n    (array(2.1565429877197317), array(2.1565429877201865))\n    \n    Antiderivative can be used to evaluate definite integrals:\n    \n    >>> ispl = splantider(spl)\n    >>> splev(np.pi/2, ispl) - splev(0, ispl)\n    2.2572053588768486\n    \n    This is indeed an approximation to the complete elliptic integral\n    :math:`K(m) = \\int_0^{\\pi/2} [1 - m\\sin^2 x]^{-1/2} dx`:\n    \n    >>> from scipy.special import ellipk\n    >>> ellipk(0.8)\n    2.2572053268208538",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "00d5efb78e1bd92c2313bef17af2787d483222d4f640a0664c01c1c0fa4190cb",
            "fields": [
                {
                    "id": "rn0q4807",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spline whose antiderivative to compute",
                    "type": "BSpline instance or a tuple of (t, c, k)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7946wevp",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yojafnh7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.splantider",
                    "defaultValue": "scipy.interpolate.splantider",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m52jwldt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxnv3k2g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ay7jf8ph",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gx7ycf3r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zq8t1l5d",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k43yf2mz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4r370853",
            "name": "interpolate.splder",
            "description": "Compute the spline representation of the derivative of a given spline\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using its\n        ``derivative`` method.\n    \n    Parameters\n    ----------\n    tck : BSpline instance or tuple\n        BSpline instance or a tuple (t,c,k) containing the vector of knots,\n        the B-spline coefficients, and the degree of the spline whose \n        derivative to compute\n    n : int, optional\n        Order of derivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    `BSpline` instance or tuple\n        Spline of order k2=k-n representing the derivative\n        of the input spline.\n        A tuple is returned if the input argument `tck` is a tuple, otherwise\n        a BSpline object is constructed and returned.\n    \n    See Also\n    --------\n    splantider, splev, spalde\n    BSpline\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    This can be used for finding maxima of a curve:\n    \n    >>> from scipy.interpolate import splrep, splder, sproot\n    >>> import numpy as np\n    >>> x = np.linspace(0, 10, 70)\n    >>> y = np.sin(x)\n    >>> spl = splrep(x, y, k=4)\n    \n    Now, differentiate the spline and find the zeros of the\n    derivative. (NB: `sproot` only works for order 3 splines, so we\n    fit an order 4 spline):\n    \n    >>> dspl = splder(spl)\n    >>> sproot(dspl) / np.pi\n    array([ 0.50000001,  1.5       ,  2.49999998])\n    \n    This agrees well with roots :math:`\\pi/2 + n\\pi` of\n    :math:`\\cos(x) = \\sin'(x)`.\n    \n    A comparison between `splev`, `splder` and `spalde` to compute the derivatives of a \n    B-spline can be found in the `spalde` examples section.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "88d150f8fb88ea511a4a64b15ab2297004d05c97a661b1a243e048b028fa4d4d",
            "fields": [
                {
                    "id": "hc4c_8ss",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "BSpline instance or a tuple (t,c,k) containing the vector of knots,\nthe B-spline coefficients, and the degree of the spline whose \nderivative to compute",
                    "type": "BSpline instance or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1t9g529n",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zj_30f29",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.splder",
                    "defaultValue": "scipy.interpolate.splder",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ca0guipq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmai37xy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "85h0l68w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2tsnhjd2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "buvt3sqs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xioop73b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wcfcux1r",
            "name": "interpolate.splev",
            "description": "Evaluate a B-spline or its derivatives.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using\n        its ``__call__`` method.\n    \n    Given the knots and coefficients of a B-spline representation, evaluate\n    the value of the smoothing polynomial and its derivatives. This is a\n    wrapper around the FORTRAN routines splev and splder of FITPACK.\n    \n    Parameters\n    ----------\n    x : array_like\n        An array of points at which to return the value of the smoothed\n        spline or its derivatives. If `tck` was returned from `splprep`,\n        then the parameter values, u should be given.\n    tck : BSpline instance or tuple\n        If a tuple, then it should be a sequence of length 3 returned by\n        `splrep` or `splprep` containing the knots, coefficients, and degree\n        of the spline. (Also see Notes.)\n    der : int, optional\n        The order of derivative of the spline to compute (must be less than\n        or equal to k, the degree of the spline).\n    ext : int, optional\n        Controls the value returned for elements of ``x`` not in the\n        interval defined by the knot sequence.\n    \n        * if ext=0, return the extrapolated value.\n        * if ext=1, return 0\n        * if ext=2, raise a ValueError\n        * if ext=3, return the boundary value.\n    \n        The default value is 0.\n    \n    Returns\n    -------\n    y : ndarray or list of ndarrays\n        An array of values representing the spline function evaluated at\n        the points in `x`.  If `tck` was returned from `splprep`, then this\n        is a list of arrays representing the curve in an N-D space.\n    \n    See Also\n    --------\n    splprep, splrep, sproot, spalde, splint\n    bisplrep, bisplev\n    BSpline\n    \n    Notes\n    -----\n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using `BSpline` objects.\n    \n    References\n    ----------\n    .. [1] C. de Boor, \"On calculating with b-splines\", J. Approximation\n        Theory, 6, p.50-62, 1972.\n    .. [2] M. G. Cox, \"The numerical evaluation of b-splines\", J. Inst. Maths\n        Applics, 10, p.134-149, 1972.\n    .. [3] P. Dierckx, \"Curve and surface fitting with splines\", Monographs\n        on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_splXXX>`.\n    \n    A comparison between `splev`, `splder` and `spalde` to compute the derivatives of a \n    B-spline can be found in the `spalde` examples section.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7d0006e403088527db48c195d527618248a353b381050b04044b78d2f1dfe586",
            "fields": [
                {
                    "id": "zwc63ozc",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of points at which to return the value of the smoothed\nspline or its derivatives. If `tck` was returned from `splprep`,\nthen the parameter values, u should be given.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ee_6nuoi",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a tuple, then it should be a sequence of length 3 returned by\n`splrep` or `splprep` containing the knots, coefficients, and degree\nof the spline. (Also see Notes.)",
                    "type": "BSpline instance or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zqx8po3j",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The order of derivative of the spline to compute (must be less than\nor equal to k, the degree of the spline).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u8jgiz2c",
                    "encoding": "",
                    "name": "ext",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the value returned for elements of ``x`` not in the\ninterval defined by the knot sequence.\n\n* if ext=0, return the extrapolated value.\n* if ext=1, return 0\n* if ext=2, raise a ValueError\n* if ext=3, return the boundary value.\n\nThe default value is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4bh5nxf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.splev",
                    "defaultValue": "scipy.interpolate.splev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_zk8_4z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrq6y2sj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "co3l9h3w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1_z9rb_k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdt8kouw",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lsfz7h8r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "755slx9t",
            "name": "interpolate.splint",
            "description": "Evaluate the definite integral of a B-spline between two given points.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using its\n        ``integrate`` method.\n    \n    Parameters\n    ----------\n    a, b : float\n        The end-points of the integration interval.\n    tck : tuple or a BSpline instance\n        If a tuple, then it should be a sequence of length 3, containing the\n        vector of knots, the B-spline coefficients, and the degree of the\n        spline (see `splev`).\n    full_output : int, optional\n        Non-zero to return optional output.\n    \n    Returns\n    -------\n    integral : float\n        The resulting integral.\n    wrk : ndarray\n        An array containing the integrals of the normalized B-splines\n        defined on the set of knots.\n        (Only returned if `full_output` is non-zero)\n    \n    See Also\n    --------\n    splprep, splrep, sproot, spalde, splev\n    bisplrep, bisplev\n    BSpline\n    \n    Notes\n    -----\n    `splint` silently assumes that the spline function is zero outside the data\n    interval (`a`, `b`).\n    \n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using the `BSpline` objects.\n    \n    References\n    ----------\n    .. [1] P.W. Gaffney, The calculation of indefinite integrals of b-splines\",\n        J. Inst. Maths Applics, 17, p.37-41, 1976.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines\", Monographs\n        on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_splXXX>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a708378b4fb297c8d9b0bf00ed5862d2e76eb4e8f3f746a2443324a94e9694ea",
            "fields": [
                {
                    "id": "qgsrmg8r",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ku2sji25",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "15g31omy",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a tuple, then it should be a sequence of length 3, containing the\nvector of knots, the B-spline coefficients, and the degree of the\nspline (see `splev`).",
                    "type": "tuple or a BSpline instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40ipcs71",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Non-zero to return optional output.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ugsj5kt",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.splint",
                    "defaultValue": "scipy.interpolate.splint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xe3qv0g8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kfopqbif",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d2zkld7g",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n27v03oy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lkrhgybr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "83sdeono",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bvzaxnuk",
            "name": "interpolate.splprep",
            "description": "Find the B-spline representation of an N-D curve.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend using `make_splprep` in new code.\n    \n    Given a list of N rank-1 arrays, `x`, which represent a curve in\n    N-dimensional space parametrized by `u`, find a smooth approximating\n    spline curve g(`u`). Uses the FORTRAN routine parcur from FITPACK.\n    \n    Parameters\n    ----------\n    x : array_like\n        A list of sample vector arrays representing the curve.\n    w : array_like, optional\n        Strictly positive rank-1 array of weights the same length as `x[0]`.\n        The weights are used in computing the weighted least-squares spline\n        fit. If the errors in the `x` values have standard-deviation given by\n        the vector d, then `w` should be 1/d. Default is ``ones(len(x[0]))``.\n    u : array_like, optional\n        An array of parameter values. If not given, these values are\n        calculated automatically as ``M = len(x[0])``, where\n    \n            v[0] = 0\n    \n            v[i] = v[i-1] + distance(`x[i]`, `x[i-1]`)\n    \n            u[i] = v[i] / v[M-1]\n    \n    ub, ue : int, optional\n        The end-points of the parameters interval.  Defaults to\n        u[0] and u[-1].\n    k : int, optional\n        Degree of the spline. Cubic splines are recommended.\n        Even values of `k` should be avoided especially with a small s-value.\n        ``1 <= k <= 5``, default is 3.\n    task : int, optional\n        If task==0 (default), find t and c for a given smoothing factor, s.\n        If task==1, find t and c for another value of the smoothing factor, s.\n        There must have been a previous call with task=0 or task=1\n        for the same set of data.\n        If task=-1 find the weighted least square spline for a given set of\n        knots, t.\n    s : float, optional\n        A smoothing condition.  The amount of smoothness is determined by\n        satisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s``,\n        where g(x) is the smoothed interpolation of (x,y).  The user can\n        use `s` to control the trade-off between closeness and smoothness\n        of fit.  Larger `s` means more smoothing while smaller values of `s`\n        indicate less smoothing. Recommended values of `s` depend on the\n        weights, w.  If the weights represent the inverse of the\n        standard-deviation of y, then a good `s` value should be found in\n        the range ``(m-sqrt(2*m),m+sqrt(2*m))``, where m is the number of\n        data points in x, y, and w.\n    t : array, optional\n        The knots needed for ``task=-1``.\n        There must be at least ``2*k+2`` knots.\n    full_output : int, optional\n        If non-zero, then return optional outputs.\n    nest : int, optional\n        An over-estimate of the total number of knots of the spline to\n        help in determining the storage space.  By default nest=m/2.\n        Always large enough is nest=m+k+1.\n    per : int, optional\n       If non-zero, data points are considered periodic with period\n       ``x[m-1] - x[0]`` and a smooth periodic spline approximation is\n       returned.  Values of ``y[m-1]`` and ``w[m-1]`` are not used.\n    quiet : int, optional\n         Non-zero to suppress messages.\n    \n    Returns\n    -------\n    tck : tuple\n        A tuple, ``(t,c,k)`` containing the vector of knots, the B-spline\n        coefficients, and the degree of the spline.\n    u : array\n        An array of the values of the parameter.\n    fp : float\n        The weighted sum of squared residuals of the spline approximation.\n    ier : int\n        An integer flag about splrep success.  Success is indicated\n        if ier<=0. If ier in [1,2,3] an error occurred but was not raised.\n        Otherwise an error is raised.\n    msg : str\n        A message corresponding to the integer flag, ier.\n    \n    See Also\n    --------\n    splrep, splev, sproot, spalde, splint,\n    bisplrep, bisplev\n    UnivariateSpline, BivariateSpline\n    BSpline\n    make_interp_spline\n    \n    Notes\n    -----\n    See `splev` for evaluation of the spline and its derivatives.\n    The number of dimensions N must be smaller than 11.\n    \n    The number of coefficients in the `c` array is ``k+1`` less than the number\n    of knots, ``len(t)``. This is in contrast with `splrep`, which zero-pads\n    the array of coefficients to have the same length as the array of knots.\n    These additional coefficients are ignored by evaluation routines, `splev`\n    and `BSpline`.\n    \n    References\n    ----------\n    .. [1] P. Dierckx, \"Algorithms for smoothing data with periodic and\n        parametric splines, Computer Graphics and Image Processing\",\n        20 (1982) 171-184.\n    .. [2] P. Dierckx, \"Algorithms for smoothing data with periodic and\n        parametric splines\", report tw55, Dept. Computer Science,\n        K.U.Leuven, 1981.\n    .. [3] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n        Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Generate a discretization of a limacon curve in the polar coordinates:\n    \n    >>> import numpy as np\n    >>> phi = np.linspace(0, 2.*np.pi, 40)\n    >>> r = 0.5 + np.cos(phi)         # polar coords\n    >>> x, y = r * np.cos(phi), r * np.sin(phi)    # convert to cartesian\n    \n    And interpolate:\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> tck, u = splprep([x, y], s=0)\n    >>> new_points = splev(u, tck)\n    \n    Notice that (i) we force interpolation by using ``s=0``,\n    (ii) the parameterization, ``u``, is generated automatically.\n    Now plot the result:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(x, y, 'ro')\n    >>> ax.plot(new_points[0], new_points[1], 'r-')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "56359df2d957d989fc9d6afbed7643ba71255a26c4cccec678f41c4910cfed96",
            "fields": [
                {
                    "id": "tvuasn6t",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of sample vector arrays representing the curve.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ay8mcxtt",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Strictly positive rank-1 array of weights the same length as `x[0]`.\nThe weights are used in computing the weighted least-squares spline\nfit. If the errors in the `x` values have standard-deviation given by\nthe vector d, then `w` should be 1/d. Default is ``ones(len(x[0]))``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uhzqk7ky",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of parameter values. If not given, these values are\ncalculated automatically as ``M = len(x[0])``, where\n\n    v[0] = 0\n\n    v[i] = v[i-1] + distance(`x[i]`, `x[i-1]`)\n\n    u[i] = v[i] / v[M-1]",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p0klmwih",
                    "encoding": "",
                    "name": "ub",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "scvlr5ti",
                    "encoding": "",
                    "name": "ue",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jb_eqrgr",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Degree of the spline. Cubic splines are recommended.\nEven values of `k` should be avoided especially with a small s-value.\n``1 <= k <= 5``, default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8gv_19nu",
                    "encoding": "",
                    "name": "task",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If task==0 (default), find t and c for a given smoothing factor, s.\nIf task==1, find t and c for another value of the smoothing factor, s.\nThere must have been a previous call with task=0 or task=1\nfor the same set of data.\nIf task=-1 find the weighted least square spline for a given set of\nknots, t.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jf3y_n98",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "A smoothing condition.  The amount of smoothness is determined by\nsatisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s``,\nwhere g(x) is the smoothed interpolation of (x,y).  The user can\nuse `s` to control the trade-off between closeness and smoothness\nof fit.  Larger `s` means more smoothing while smaller values of `s`\nindicate less smoothing. Recommended values of `s` depend on the\nweights, w.  If the weights represent the inverse of the\nstandard-deviation of y, then a good `s` value should be found in\nthe range ``(m-sqrt(2*m),m+sqrt(2*m))``, where m is the number of\ndata points in x, y, and w.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4ow86l9",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The knots needed for ``task=-1``.\nThere must be at least ``2*k+2`` knots.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sagev380",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, then return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2r1_i_yh",
                    "encoding": "",
                    "name": "nest",
                    "value": "",
                    "defaultValue": "",
                    "description": "An over-estimate of the total number of knots of the spline to\nhelp in determining the storage space.  By default nest=m/2.\nAlways large enough is nest=m+k+1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hph_zasn",
                    "encoding": "",
                    "name": "per",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, data points are considered periodic with period\n``x[m-1] - x[0]`` and a smooth periodic spline approximation is\nreturned.  Values of ``y[m-1]`` and ``w[m-1]`` are not used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ce93sx7",
                    "encoding": "",
                    "name": "quiet",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Non-zero to suppress messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6bbit1pn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.splprep",
                    "defaultValue": "scipy.interpolate.splprep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "luqj_0xl",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpqrgux7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ce1g4f2f",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iamk_m3v",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12ky4qpv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "seozrz54",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "8gn6sy0r",
            "name": "interpolate.splrep",
            "description": "Find the B-spline representation of a 1-D curve.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend using `make_splrep` in new code.\n    \n    \n    Given the set of data points ``(x[i], y[i])`` determine a smooth spline\n    approximation of degree k on the interval ``xb <= x <= xe``.\n    \n    Parameters\n    ----------\n    x, y : array_like\n        The data points defining a curve ``y = f(x)``.\n    w : array_like, optional\n        Strictly positive rank-1 array of weights the same length as `x` and `y`.\n        The weights are used in computing the weighted least-squares spline\n        fit. If the errors in the `y` values have standard-deviation given by the\n        vector ``d``, then `w` should be ``1/d``. Default is ``ones(len(x))``.\n    xb, xe : float, optional\n        The interval to fit.  If None, these default to ``x[0]`` and ``x[-1]``\n        respectively.\n    k : int, optional\n        The degree of the spline fit. It is recommended to use cubic splines.\n        Even values of `k` should be avoided especially with small `s` values.\n        ``1 <= k <= 5``.\n    task : {1, 0, -1}, optional\n        If ``task==0``, find ``t`` and ``c`` for a given smoothing factor, `s`.\n    \n        If ``task==1`` find ``t`` and ``c`` for another value of the smoothing factor,\n        `s`. There must have been a previous call with ``task=0`` or ``task=1`` for\n        the same set of data (``t`` will be stored an used internally)\n    \n        If ``task=-1`` find the weighted least square spline for a given set of\n        knots, ``t``. These should be interior knots as knots on the ends will be\n        added automatically.\n    s : float, optional\n        A smoothing condition. The amount of smoothness is determined by\n        satisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s`` where ``g(x)``\n        is the smoothed interpolation of ``(x,y)``. The user can use `s` to control\n        the tradeoff between closeness and smoothness of fit. Larger `s` means\n        more smoothing while smaller values of `s` indicate less smoothing.\n        Recommended values of `s` depend on the weights, `w`. If the weights\n        represent the inverse of the standard-deviation of `y`, then a good `s`\n        value should be found in the range ``(m-sqrt(2*m),m+sqrt(2*m))`` where ``m`` is\n        the number of datapoints in `x`, `y`, and `w`. default : ``s=m-sqrt(2*m)`` if\n        weights are supplied. ``s = 0.0`` (interpolating) if no weights are\n        supplied.\n    t : array_like, optional\n        The knots needed for ``task=-1``. If given then task is automatically set\n        to ``-1``.\n    full_output : bool, optional\n        If non-zero, then return optional outputs.\n    per : bool, optional\n        If non-zero, data points are considered periodic with period ``x[m-1]`` -\n        ``x[0]`` and a smooth periodic spline approximation is returned. Values of\n        ``y[m-1]`` and ``w[m-1]`` are not used.\n        The default is zero, corresponding to boundary condition 'not-a-knot'.\n    quiet : bool, optional\n        Non-zero to suppress messages.\n    \n    Returns\n    -------\n    tck : tuple\n        A tuple ``(t,c,k)`` containing the vector of knots, the B-spline\n        coefficients, and the degree of the spline.\n    fp : array, optional\n        The weighted sum of squared residuals of the spline approximation.\n    ier : int, optional\n        An integer flag about splrep success. Success is indicated if ``ier<=0``.\n        If ``ier in [1,2,3]``, an error occurred but was not raised. Otherwise an\n        error is raised.\n    msg : str, optional\n        A message corresponding to the integer flag, `ier`.\n    \n    See Also\n    --------\n    UnivariateSpline, BivariateSpline\n    splprep, splev, sproot, spalde, splint\n    bisplrep, bisplev\n    BSpline\n    make_interp_spline\n    \n    Notes\n    -----\n    See `splev` for evaluation of the spline and its derivatives. Uses the\n    FORTRAN routine ``curfit`` from FITPACK.\n    \n    The user is responsible for assuring that the values of `x` are unique.\n    Otherwise, `splrep` will not return sensible results.\n    \n    If provided, knots `t` must satisfy the Schoenberg-Whitney conditions,\n    i.e., there must be a subset of data points ``x[j]`` such that\n    ``t[j] < x[j] < t[j+k+1]``, for ``j=0, 1,...,n-k-2``.\n    \n    This routine zero-pads the coefficients array ``c`` to have the same length\n    as the array of knots ``t`` (the trailing ``k + 1`` coefficients are ignored\n    by the evaluation routines, `splev` and `BSpline`.) This is in contrast with\n    `splprep`, which does not zero-pad the coefficients.\n    \n    The default boundary condition is 'not-a-knot', i.e. the first and second\n    segment at a curve end are the same polynomial. More boundary conditions are\n    available in `CubicSpline`.\n    \n    References\n    ----------\n    Based on algorithms described in [1]_, [2]_, [3]_, and [4]_:\n    \n    .. [1] P. Dierckx, \"An algorithm for smoothing, differentiation and\n       integration of experimental data using spline functions\",\n       J.Comp.Appl.Maths 1 (1975) 165-184.\n    .. [2] P. Dierckx, \"A fast algorithm for smoothing data on a rectangular\n       grid while using spline functions\", SIAM J.Numer.Anal. 19 (1982)\n       1286-1304.\n    .. [3] P. Dierckx, \"An improved algorithm for curve fitting with spline\n       functions\", report tw54, Dept. Computer Science,K.U. Leuven, 1981.\n    .. [4] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    You can interpolate 1-D points with a B-spline curve.\n    Further examples are given in\n    :ref:`in the tutorial <tutorial-interpolate_splXXX>`.\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import splev, splrep\n    >>> x = np.linspace(0, 10, 10)\n    >>> y = np.sin(x)\n    >>> spl = splrep(x, y)\n    >>> x2 = np.linspace(0, 10, 200)\n    >>> y2 = splev(x2, spl)\n    >>> plt.plot(x, y, 'o', x2, y2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "84e6ee15e4a61a648e866d4e22623abebb51b461748c8d976e3801b27fbbef95",
            "fields": [
                {
                    "id": "2y4ch5y9",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5u6fd1v",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pq0r8zc8",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Strictly positive rank-1 array of weights the same length as `x` and `y`.\nThe weights are used in computing the weighted least-squares spline\nfit. If the errors in the `y` values have standard-deviation given by the\nvector ``d``, then `w` should be ``1/d``. Default is ``ones(len(x))``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "diauw6zu",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1wn1dm_o",
                    "encoding": "",
                    "name": "xe",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suvwtanj",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The degree of the spline fit. It is recommended to use cubic splines.\nEven values of `k` should be avoided especially with small `s` values.\n``1 <= k <= 5``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ip0iz9ex",
                    "encoding": "",
                    "name": "task",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If ``task==0``, find ``t`` and ``c`` for a given smoothing factor, `s`.\n\nIf ``task==1`` find ``t`` and ``c`` for another value of the smoothing factor,\n`s`. There must have been a previous call with ``task=0`` or ``task=1`` for\nthe same set of data (``t`` will be stored an used internally)\n\nIf ``task=-1`` find the weighted least square spline for a given set of\nknots, ``t``. These should be interior knots as knots on the ends will be\nadded automatically.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4cyd8rb3",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "A smoothing condition. The amount of smoothness is determined by\nsatisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s`` where ``g(x)``\nis the smoothed interpolation of ``(x,y)``. The user can use `s` to control\nthe tradeoff between closeness and smoothness of fit. Larger `s` means\nmore smoothing while smaller values of `s` indicate less smoothing.\nRecommended values of `s` depend on the weights, `w`. If the weights\nrepresent the inverse of the standard-deviation of `y`, then a good `s`\nvalue should be found in the range ``(m-sqrt(2*m),m+sqrt(2*m))`` where ``m`` is\nthe number of datapoints in `x`, `y`, and `w`. default : ``s=m-sqrt(2*m)`` if\nweights are supplied. ``s = 0.0`` (interpolating) if no weights are\nsupplied.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vjaxgpos",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The knots needed for ``task=-1``. If given then task is automatically set\nto ``-1``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ju7cn80v",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, then return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0rabp69e",
                    "encoding": "",
                    "name": "per",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, data points are considered periodic with period ``x[m-1]`` -\n``x[0]`` and a smooth periodic spline approximation is returned. Values of\n``y[m-1]`` and ``w[m-1]`` are not used.\nThe default is zero, corresponding to boundary condition 'not-a-knot'.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3tg95cvp",
                    "encoding": "",
                    "name": "quiet",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Non-zero to suppress messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9cwq15v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.splrep",
                    "defaultValue": "scipy.interpolate.splrep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_b431t8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xdzpmo26",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "leowl0n4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6tsl5h3",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4s3om19w",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_zqd_sh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2n4u1s5y",
            "name": "interpolate.sproot",
            "description": "Find the roots of a cubic B-spline.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using the\n        following pattern: `PPoly.from_spline(spl).roots()`.\n    \n    Given the knots (>=8) and coefficients of a cubic B-spline return the\n    roots of the spline.\n    \n    Parameters\n    ----------\n    tck : tuple or a BSpline object\n        If a tuple, then it should be a sequence of length 3, containing the\n        vector of knots, the B-spline coefficients, and the degree of the\n        spline.\n        The number of knots must be >= 8, and the degree must be 3.\n        The knots must be a montonically increasing sequence.\n    mest : int, optional\n        An estimate of the number of zeros (Default is 10).\n    \n    Returns\n    -------\n    zeros : ndarray\n        An array giving the roots of the spline.\n    \n    See Also\n    --------\n    splprep, splrep, splint, spalde, splev\n    bisplrep, bisplev\n    BSpline\n    \n    Notes\n    -----\n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using the `BSpline` objects.\n    \n    References\n    ----------\n    .. [1] C. de Boor, \"On calculating with b-splines\", J. Approximation\n        Theory, 6, p.50-62, 1972.\n    .. [2] M. G. Cox, \"The numerical evaluation of b-splines\", J. Inst. Maths\n        Applics, 10, p.134-149, 1972.\n    .. [3] P. Dierckx, \"Curve and surface fitting with splines\", Monographs\n        on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    \n    For some data, this method may miss a root. This happens when one of\n    the spline knots (which FITPACK places automatically) happens to\n    coincide with the true root. A workaround is to convert to `PPoly`,\n    which uses a different root-finding algorithm.\n    \n    For example,\n    \n    >>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]\n    >>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,\n    ...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,\n    ...      6.520430e-03,  8.170770e-03]\n    >>> from scipy.interpolate import splrep, sproot, PPoly\n    >>> tck = splrep(x, y, s=0)\n    >>> sproot(tck)\n    array([], dtype=float64)\n    \n    Converting to a PPoly object does find the roots at ``x=2``:\n    \n    >>> ppoly = PPoly.from_spline(tck)\n    >>> ppoly.roots(extrapolate=False)\n    array([2.])\n    \n    \n    Further examples are given :ref:`in the tutorial\n    <tutorial-interpolate_splXXX>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fcc6d2700fc0657a39ef689319c08bca86f1be4cc3a78b7e45033ed809f7336b",
            "fields": [
                {
                    "id": "amn6zpmd",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a tuple, then it should be a sequence of length 3, containing the\nvector of knots, the B-spline coefficients, and the degree of the\nspline.\nThe number of knots must be >= 8, and the degree must be 3.\nThe knots must be a montonically increasing sequence.",
                    "type": "tuple or a BSpline object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sde36gvi",
                    "encoding": "",
                    "name": "mest",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "An estimate of the number of zeros (Default is 10).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8c4s3yyx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.sproot",
                    "defaultValue": "scipy.interpolate.sproot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8e57c09",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "18_nl11j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oqnkz5h1",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jmlyqjdo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate",
                    "defaultValue": "scipy.interpolate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_a8lrrf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5uucbmy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bvujsxyj",
            "name": "fitpack.bisplev",
            "description": "Evaluate a bivariate B-spline and its derivatives.\n    \n    Return a rank-2 array of spline function values (or spline derivative\n    values) at points given by the cross-product of the rank-1 arrays `x` and\n    `y`.  In special cases, return an array or just a float if either `x` or\n    `y` or both are floats.  Based on BISPEV and PARDER from FITPACK.\n    \n    Parameters\n    ----------\n    x, y : ndarray\n        Rank-1 arrays specifying the domain over which to evaluate the\n        spline or its derivative.\n    tck : tuple\n        A sequence of length 5 returned by `bisplrep` containing the knot\n        locations, the coefficients, and the degree of the spline:\n        [tx, ty, c, kx, ky].\n    dx, dy : int, optional\n        The orders of the partial derivatives in `x` and `y` respectively.\n    \n    Returns\n    -------\n    vals : ndarray\n        The B-spline or its derivative evaluated over the set formed by\n        the cross-product of `x` and `y`.\n    \n    See Also\n    --------\n    splprep, splrep, splint, sproot, splev\n    UnivariateSpline, BivariateSpline\n    \n    Notes\n    -----\n        See `bisplrep` to generate the `tck` representation.\n    \n    References\n    ----------\n    .. [1] Dierckx P. : An algorithm for surface fitting\n       with spline functions\n       Ima J. Numer. Anal. 1 (1981) 267-283.\n    .. [2] Dierckx P. : An algorithm for surface fitting\n       with spline functions\n       report tw50, Dept. Computer Science,K.U.Leuven, 1980.\n    .. [3] Dierckx P. : Curve and surface fitting with splines,\n       Monographs on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_2d_spline>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "141b7e3c981c95db19424e624b9076b84926ece4cec1c36464bbba3823fcf4f5",
            "fields": [
                {
                    "id": "9f0jcw_q",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ru1c9kl",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dp24lfrg",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sequence of length 5 returned by `bisplrep` containing the knot\nlocations, the coefficients, and the degree of the spline:\n[tx, ty, c, kx, ky].",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w7vwyysi",
                    "encoding": "",
                    "name": "dx",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a_3xrojl",
                    "encoding": "",
                    "name": "dy",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_bkox_2c",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.bisplev",
                    "defaultValue": "scipy.interpolate.fitpack.bisplev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wmregh4a",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0dgyxfle",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bu8cy3pw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t3w7wi67",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g3n185o2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q20b37fr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s8n4f8jk",
            "name": "fitpack.bisplrep",
            "description": "Find a bivariate B-spline representation of a surface.\n    \n    Given a set of data points (x[i], y[i], z[i]) representing a surface\n    z=f(x,y), compute a B-spline representation of the surface. Based on\n    the routine SURFIT from FITPACK.\n    \n    Parameters\n    ----------\n    x, y, z : ndarray\n        Rank-1 arrays of data points.\n    w : ndarray, optional\n        Rank-1 array of weights. By default ``w=np.ones(len(x))``.\n    xb, xe : float, optional\n        End points of approximation interval in `x`.\n        By default ``xb = x.min(), xe=x.max()``.\n    yb, ye : float, optional\n        End points of approximation interval in `y`.\n        By default ``yb=y.min(), ye = y.max()``.\n    kx, ky : int, optional\n        The degrees of the spline (1 <= kx, ky <= 5).\n        Third order (kx=ky=3) is recommended.\n    task : int, optional\n        If task=0, find knots in x and y and coefficients for a given\n        smoothing factor, s.\n        If task=1, find knots and coefficients for another value of the\n        smoothing factor, s.  bisplrep must have been previously called\n        with task=0 or task=1.\n        If task=-1, find coefficients for a given set of knots tx, ty.\n    s : float, optional\n        A non-negative smoothing factor. If weights correspond\n        to the inverse of the standard-deviation of the errors in z,\n        then a good s-value should be found in the range\n        ``(m-sqrt(2*m),m+sqrt(2*m))`` where m=len(x).\n    eps : float, optional\n        A threshold for determining the effective rank of an\n        over-determined linear system of equations (0 < eps < 1).\n        `eps` is not likely to need changing.\n    tx, ty : ndarray, optional\n        Rank-1 arrays of the knots of the spline for task=-1\n    full_output : int, optional\n        Non-zero to return optional outputs.\n    nxest, nyest : int, optional\n        Over-estimates of the total number of knots. If None then\n        ``nxest = max(kx+sqrt(m/2),2*kx+3)``,\n        ``nyest = max(ky+sqrt(m/2),2*ky+3)``.\n    quiet : int, optional\n        Non-zero to suppress printing of messages.\n    \n    Returns\n    -------\n    tck : array_like\n        A list [tx, ty, c, kx, ky] containing the knots (tx, ty) and\n        coefficients (c) of the bivariate B-spline representation of the\n        surface along with the degree of the spline.\n    fp : ndarray\n        The weighted sum of squared residuals of the spline approximation.\n    ier : int\n        An integer flag about splrep success. Success is indicated if\n        ier<=0. If ier in [1,2,3] an error occurred but was not raised.\n        Otherwise an error is raised.\n    msg : str\n        A message corresponding to the integer flag, ier.\n    \n    See Also\n    --------\n    splprep, splrep, splint, sproot, splev\n    UnivariateSpline, BivariateSpline\n    \n    Notes\n    -----\n    See `bisplev` to evaluate the value of the B-spline given its tck\n    representation.\n    \n    If the input data is such that input dimensions have incommensurate\n    units and differ by many orders of magnitude, the interpolant may have\n    numerical artifacts. Consider rescaling the data before interpolation.\n    \n    References\n    ----------\n    .. [1] Dierckx P.:An algorithm for surface fitting with spline functions\n       Ima J. Numer. Anal. 1 (1981) 267-283.\n    .. [2] Dierckx P.:An algorithm for surface fitting with spline functions\n       report tw50, Dept. Computer Science,K.U.Leuven, 1980.\n    .. [3] Dierckx P.:Curve and surface fitting with splines, Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_2d_spline>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "002ae513dc27ee69aa2c01d0ddf824eeb738b37a8d18ac36dd4b690f2cfd7c45",
            "fields": [
                {
                    "id": "z2x4zbdd",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e0zts0un",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hdwuch9d",
                    "encoding": "",
                    "name": "z",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tizcww6h",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rank-1 array of weights. By default ``w=np.ones(len(x))``.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a5nqtop7",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ve5rv3pt",
                    "encoding": "",
                    "name": "xe",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "80qrb8q6",
                    "encoding": "",
                    "name": "yb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2xs7obr",
                    "encoding": "",
                    "name": "ye",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9wds8lvf",
                    "encoding": "",
                    "name": "kx",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jg91vfz6",
                    "encoding": "",
                    "name": "ky",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_nqhe7f",
                    "encoding": "",
                    "name": "task",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If task=0, find knots in x and y and coefficients for a given\nsmoothing factor, s.\nIf task=1, find knots and coefficients for another value of the\nsmoothing factor, s.  bisplrep must have been previously called\nwith task=0 or task=1.\nIf task=-1, find coefficients for a given set of knots tx, ty.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7k53uip",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "A non-negative smoothing factor. If weights correspond\nto the inverse of the standard-deviation of the errors in z,\nthen a good s-value should be found in the range\n``(m-sqrt(2*m),m+sqrt(2*m))`` where m=len(x).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__yartrk",
                    "encoding": "",
                    "name": "eps",
                    "value": 1e-16,
                    "defaultValue": 1e-16,
                    "description": "A threshold for determining the effective rank of an\nover-determined linear system of equations (0 < eps < 1).\n`eps` is not likely to need changing.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umx8mwrw",
                    "encoding": "",
                    "name": "tx",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_fax3dzq",
                    "encoding": "",
                    "name": "ty",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oxgzrz68",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Non-zero to return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gymeug12",
                    "encoding": "",
                    "name": "nxest",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ur5_ux37",
                    "encoding": "",
                    "name": "nyest",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "22_rcoeh",
                    "encoding": "",
                    "name": "quiet",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Non-zero to suppress printing of messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qnae71x3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.bisplrep",
                    "defaultValue": "scipy.interpolate.fitpack.bisplrep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nvd8nhp8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "df34vtit",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rw3j4kjm",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "onhrcb09",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kcsis63x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qm89yie5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sa0ct39i",
            "name": "fitpack.insert",
            "description": "Insert knots into a B-spline.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using\n        its ``insert_knot`` method.\n    \n    Given the knots and coefficients of a B-spline representation, create a\n    new B-spline with a knot inserted `m` times at point `x`.\n    This is a wrapper around the FORTRAN routine insert of FITPACK.\n    \n    Parameters\n    ----------\n    x (u) : float\n        A knot value at which to insert a new knot.  If `tck` was returned\n        from ``splprep``, then the parameter values, u should be given.\n    tck : a `BSpline` instance or a tuple\n        If tuple, then it is expected to be a tuple (t,c,k) containing\n        the vector of knots, the B-spline coefficients, and the degree of\n        the spline.\n    m : int, optional\n        The number of times to insert the given knot (its multiplicity).\n        Default is 1.\n    per : int, optional\n        If non-zero, the input spline is considered periodic.\n    \n    Returns\n    -------\n    BSpline instance or a tuple\n        A new B-spline with knots t, coefficients c, and degree k.\n        ``t(k+1) <= x <= t(n-k)``, where k is the degree of the spline.\n        In case of a periodic spline (``per != 0``) there must be\n        either at least k interior knots t(j) satisfying ``t(k+1)<t(j)<=x``\n        or at least k interior knots t(j) satisfying ``x<=t(j)<t(n-k)``.\n        A tuple is returned iff the input argument `tck` is a tuple, otherwise\n        a BSpline object is constructed and returned.\n    \n    Notes\n    -----\n    Based on algorithms from [1]_ and [2]_.\n    \n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using the `BSpline` objects, in particular `BSpline.insert_knot`\n    method.\n    \n    See Also\n    --------\n    BSpline.insert_knot\n    \n    References\n    ----------\n    .. [1] W. Boehm, \"Inserting new knots into b-spline curves.\",\n        Computer Aided Design, 12, p.199-201, 1980.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines, Monographs on\n        Numerical Analysis\", Oxford University Press, 1993.\n    \n    Examples\n    --------\n    You can insert knots into a B-spline.\n    \n    >>> from scipy.interpolate import splrep, insert\n    >>> import numpy as np\n    >>> x = np.linspace(0, 10, 5)\n    >>> y = np.sin(x)\n    >>> tck = splrep(x, y)\n    >>> tck[0]\n    array([ 0.,  0.,  0.,  0.,  5., 10., 10., 10., 10.])\n    \n    A knot is inserted:\n    \n    >>> tck_inserted = insert(3, tck)\n    >>> tck_inserted[0]\n    array([ 0.,  0.,  0.,  0.,  3.,  5., 10., 10., 10., 10.])\n    \n    Some knots are inserted:\n    \n    >>> tck_inserted2 = insert(8, tck, m=3)\n    >>> tck_inserted2[0]\n    array([ 0.,  0.,  0.,  0.,  5.,  8.,  8.,  8., 10., 10., 10., 10.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c70b6c59fbb69cd882617cc27ef53fa22d2e7e4fd307e75c096fbac14fde32cb",
            "fields": [
                {
                    "id": "isi_xs_6",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9w0m1ey3",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If tuple, then it is expected to be a tuple (t,c,k) containing\nthe vector of knots, the B-spline coefficients, and the degree of\nthe spline.",
                    "type": "a BSpline instance or a tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhtbxz64",
                    "encoding": "",
                    "name": "m",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "The number of times to insert the given knot (its multiplicity).\nDefault is 1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2o_ty57",
                    "encoding": "",
                    "name": "per",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, the input spline is considered periodic.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bnp61duz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.insert",
                    "defaultValue": "scipy.interpolate.fitpack.insert",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gyy_ylrz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qjr1vqnm",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "36p9gdu4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "grw2ptdn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ipwfdbsf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbepw2ho",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "3sminnjt",
            "name": "fitpack.spalde",
            "description": "Evaluate a B-spline and all its derivatives at one point (or set of points) up\n    to order k (the degree of the spline), being 0 the spline itself.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and evaluate\n        its derivative in a loop or a list comprehension.\n    \n    Parameters\n    ----------\n    x : array_like\n        A point or a set of points at which to evaluate the derivatives.\n        Note that ``t(k) <= x <= t(n-k+1)`` must hold for each `x`.\n    tck : tuple\n        A tuple (t,c,k) containing the vector of knots,\n        the B-spline coefficients, and the degree of the spline whose \n        derivatives to compute.\n    \n    Returns\n    -------\n    results : {ndarray, list of ndarrays}\n        An array (or a list of arrays) containing all derivatives\n        up to order k inclusive for each point `x`, being the first element the \n        spline itself.\n    \n    See Also\n    --------\n    splprep, splrep, splint, sproot, splev, bisplrep, bisplev,\n    UnivariateSpline, BivariateSpline\n    \n    References\n    ----------\n    .. [1] de Boor C : On calculating with b-splines, J. Approximation Theory\n       6 (1972) 50-62.\n    .. [2] Cox M.G. : The numerical evaluation of b-splines, J. Inst. Maths\n       applics 10 (1972) 134-149.\n    .. [3] Dierckx P. : Curve and surface fitting with splines, Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    To calculate the derivatives of a B-spline there are several aproaches. \n    In this example, we will demonstrate that `spalde` is equivalent to\n    calling `splev` and `splder`.\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import BSpline, spalde, splder, splev\n    \n    >>> # Store characteristic parameters of a B-spline\n    >>> tck = ((-2, -2, -2, -2, -1, 0, 1, 2, 2, 2, 2),  # knots\n    ...        (0, 0, 0, 6, 0, 0, 0),  # coefficients\n    ...        3)  # degree (cubic)\n    >>> # Instance a B-spline object\n    >>> # `BSpline` objects are preferred, except for spalde()\n    >>> bspl = BSpline(tck[0], tck[1], tck[2])\n    >>> # Generate extra points to get a smooth curve\n    >>> x = np.linspace(min(tck[0]), max(tck[0]), 100)\n    \n    Evaluate the curve and all derivatives\n    \n    >>> # The order of derivative must be less or equal to k, the degree of the spline\n    >>> # Method 1: spalde()\n    >>> f1_y_bsplin = [spalde(i, tck)[0] for i in x ]  # The B-spline itself\n    >>> f1_y_deriv1 = [spalde(i, tck)[1] for i in x ]  # 1st derivative\n    >>> f1_y_deriv2 = [spalde(i, tck)[2] for i in x ]  # 2nd derivative\n    >>> f1_y_deriv3 = [spalde(i, tck)[3] for i in x ]  # 3rd derivative\n    >>> # You can reach the same result by using `splev`and `splder`\n    >>> f2_y_deriv3 = splev(x, bspl, der=3)\n    >>> f3_y_deriv3 = splder(bspl, n=3)(x)\n    \n    >>> # Generate a figure with three axes for graphic comparison\n    >>> fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(16, 5))\n    >>> suptitle = fig.suptitle(f'Evaluate a B-spline and all derivatives')\n    >>> # Plot B-spline and all derivatives using the three methods\n    >>> orders = range(4)\n    >>> linetypes = ['-', '--', '-.', ':']\n    >>> labels = ['B-Spline', '1st deriv.', '2nd deriv.', '3rd deriv.']\n    >>> functions = ['splev()', 'splder()', 'spalde()']\n    >>> for order, linetype, label in zip(orders, linetypes, labels):\n    ...     ax1.plot(x, splev(x, bspl, der=order), linetype, label=label)\n    ...     ax2.plot(x, splder(bspl, n=order)(x), linetype, label=label)\n    ...     ax3.plot(x, [spalde(i, tck)[order] for i in x], linetype, label=label)\n    >>> for ax, function in zip((ax1, ax2, ax3), functions):\n    ...     ax.set_title(function)\n    ...     ax.legend()\n    >>> plt.tight_layout()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2688724bbe00db889853c36a6733000f1f99168b38af5f5f1f53bd84013aa0fc",
            "fields": [
                {
                    "id": "q6cbursm",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "A point or a set of points at which to evaluate the derivatives.\nNote that ``t(k) <= x <= t(n-k+1)`` must hold for each `x`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ulnhilkj",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "A tuple (t,c,k) containing the vector of knots,\nthe B-spline coefficients, and the degree of the spline whose \nderivatives to compute.",
                    "type": "tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "emgaxsw7",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.spalde",
                    "defaultValue": "scipy.interpolate.fitpack.spalde",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xuyntj2u",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "01s8rudc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q6x3m900",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odfxsu9k",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cp67pvll",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "596amnaa",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7fg588al",
            "name": "fitpack.splantider",
            "description": "Compute the spline for the antiderivative (integral) of a given spline.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using its\n        ``antiderivative`` method.\n    \n    Parameters\n    ----------\n    tck : BSpline instance or a tuple of (t, c, k)\n        Spline whose antiderivative to compute\n    n : int, optional\n        Order of antiderivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    BSpline instance or a tuple of (t2, c2, k2)\n        Spline of order k2=k+n representing the antiderivative of the input\n        spline.\n        A tuple is returned iff the input argument `tck` is a tuple, otherwise\n        a BSpline object is constructed and returned.\n    \n    See Also\n    --------\n    splder, splev, spalde\n    BSpline\n    \n    Notes\n    -----\n    The `splder` function is the inverse operation of this function.\n    Namely, ``splder(splantider(tck))`` is identical to `tck`, modulo\n    rounding error.\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    >>> from scipy.interpolate import splrep, splder, splantider, splev\n    >>> import numpy as np\n    >>> x = np.linspace(0, np.pi/2, 70)\n    >>> y = 1 / np.sqrt(1 - 0.8*np.sin(x)**2)\n    >>> spl = splrep(x, y)\n    \n    The derivative is the inverse operation of the antiderivative,\n    although some floating point error accumulates:\n    \n    >>> splev(1.7, spl), splev(1.7, splder(splantider(spl)))\n    (array(2.1565429877197317), array(2.1565429877201865))\n    \n    Antiderivative can be used to evaluate definite integrals:\n    \n    >>> ispl = splantider(spl)\n    >>> splev(np.pi/2, ispl) - splev(0, ispl)\n    2.2572053588768486\n    \n    This is indeed an approximation to the complete elliptic integral\n    :math:`K(m) = \\int_0^{\\pi/2} [1 - m\\sin^2 x]^{-1/2} dx`:\n    \n    >>> from scipy.special import ellipk\n    >>> ellipk(0.8)\n    2.2572053268208538",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dfd0076ddd1a2f8df4830ae56539b2689838e4d02f373a8d68301a14e4a4172f",
            "fields": [
                {
                    "id": "cmxafozk",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spline whose antiderivative to compute",
                    "type": "BSpline instance or a tuple of (t, c, k)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtt7l9dr",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of antiderivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ue_b55er",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.splantider",
                    "defaultValue": "scipy.interpolate.fitpack.splantider",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i5xfc8sy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6vh8hocc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "m838zx1k",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8hpli098",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hp_hy90x",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_y03ywoj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ojvw7fql",
            "name": "fitpack.splder",
            "description": "Compute the spline representation of the derivative of a given spline\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using its\n        ``derivative`` method.\n    \n    Parameters\n    ----------\n    tck : BSpline instance or tuple\n        BSpline instance or a tuple (t,c,k) containing the vector of knots,\n        the B-spline coefficients, and the degree of the spline whose \n        derivative to compute\n    n : int, optional\n        Order of derivative to evaluate. Default: 1\n    \n    Returns\n    -------\n    `BSpline` instance or tuple\n        Spline of order k2=k-n representing the derivative\n        of the input spline.\n        A tuple is returned if the input argument `tck` is a tuple, otherwise\n        a BSpline object is constructed and returned.\n    \n    See Also\n    --------\n    splantider, splev, spalde\n    BSpline\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.13.0\n    \n    Examples\n    --------\n    This can be used for finding maxima of a curve:\n    \n    >>> from scipy.interpolate import splrep, splder, sproot\n    >>> import numpy as np\n    >>> x = np.linspace(0, 10, 70)\n    >>> y = np.sin(x)\n    >>> spl = splrep(x, y, k=4)\n    \n    Now, differentiate the spline and find the zeros of the\n    derivative. (NB: `sproot` only works for order 3 splines, so we\n    fit an order 4 spline):\n    \n    >>> dspl = splder(spl)\n    >>> sproot(dspl) / np.pi\n    array([ 0.50000001,  1.5       ,  2.49999998])\n    \n    This agrees well with roots :math:`\\pi/2 + n\\pi` of\n    :math:`\\cos(x) = \\sin'(x)`.\n    \n    A comparison between `splev`, `splder` and `spalde` to compute the derivatives of a \n    B-spline can be found in the `spalde` examples section.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a37b5d6cd8659a8ceb7e8affa751bd2a8d496f8f5dc19cf30fea031e4673042a",
            "fields": [
                {
                    "id": "nu2li87p",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "BSpline instance or a tuple (t,c,k) containing the vector of knots,\nthe B-spline coefficients, and the degree of the spline whose \nderivative to compute",
                    "type": "BSpline instance or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "13idcpq0",
                    "encoding": "",
                    "name": "n",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Order of derivative to evaluate. Default: 1",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2qwufwls",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.splder",
                    "defaultValue": "scipy.interpolate.fitpack.splder",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3q16pk33",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lgndg23o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hbatw_rg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j9_tdybr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j1jvegm8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ik5_2jvq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e5kg9tbj",
            "name": "fitpack.splev",
            "description": "Evaluate a B-spline or its derivatives.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using\n        its ``__call__`` method.\n    \n    Given the knots and coefficients of a B-spline representation, evaluate\n    the value of the smoothing polynomial and its derivatives. This is a\n    wrapper around the FORTRAN routines splev and splder of FITPACK.\n    \n    Parameters\n    ----------\n    x : array_like\n        An array of points at which to return the value of the smoothed\n        spline or its derivatives. If `tck` was returned from `splprep`,\n        then the parameter values, u should be given.\n    tck : BSpline instance or tuple\n        If a tuple, then it should be a sequence of length 3 returned by\n        `splrep` or `splprep` containing the knots, coefficients, and degree\n        of the spline. (Also see Notes.)\n    der : int, optional\n        The order of derivative of the spline to compute (must be less than\n        or equal to k, the degree of the spline).\n    ext : int, optional\n        Controls the value returned for elements of ``x`` not in the\n        interval defined by the knot sequence.\n    \n        * if ext=0, return the extrapolated value.\n        * if ext=1, return 0\n        * if ext=2, raise a ValueError\n        * if ext=3, return the boundary value.\n    \n        The default value is 0.\n    \n    Returns\n    -------\n    y : ndarray or list of ndarrays\n        An array of values representing the spline function evaluated at\n        the points in `x`.  If `tck` was returned from `splprep`, then this\n        is a list of arrays representing the curve in an N-D space.\n    \n    See Also\n    --------\n    splprep, splrep, sproot, spalde, splint\n    bisplrep, bisplev\n    BSpline\n    \n    Notes\n    -----\n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using `BSpline` objects.\n    \n    References\n    ----------\n    .. [1] C. de Boor, \"On calculating with b-splines\", J. Approximation\n        Theory, 6, p.50-62, 1972.\n    .. [2] M. G. Cox, \"The numerical evaluation of b-splines\", J. Inst. Maths\n        Applics, 10, p.134-149, 1972.\n    .. [3] P. Dierckx, \"Curve and surface fitting with splines\", Monographs\n        on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_splXXX>`.\n    \n    A comparison between `splev`, `splder` and `spalde` to compute the derivatives of a \n    B-spline can be found in the `spalde` examples section.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9b2176c4afc1706a03c230d1a0253a3513fede2afaada8175f28e94f5b7cbc13",
            "fields": [
                {
                    "id": "3ih1vbh6",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of points at which to return the value of the smoothed\nspline or its derivatives. If `tck` was returned from `splprep`,\nthen the parameter values, u should be given.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lgysml0q",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a tuple, then it should be a sequence of length 3 returned by\n`splrep` or `splprep` containing the knots, coefficients, and degree\nof the spline. (Also see Notes.)",
                    "type": "BSpline instance or tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iacd6plt",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "The order of derivative of the spline to compute (must be less than\nor equal to k, the degree of the spline).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zrxfdpvy",
                    "encoding": "",
                    "name": "ext",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Controls the value returned for elements of ``x`` not in the\ninterval defined by the knot sequence.\n\n* if ext=0, return the extrapolated value.\n* if ext=1, return 0\n* if ext=2, raise a ValueError\n* if ext=3, return the boundary value.\n\nThe default value is 0.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8t3i8s5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.splev",
                    "defaultValue": "scipy.interpolate.fitpack.splev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w3llpnf2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ky13_9q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fcf0ycsj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o54ew04r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6atnk7a8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f4ixgztq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7ckmy10t",
            "name": "fitpack.splint",
            "description": "Evaluate the definite integral of a B-spline between two given points.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using its\n        ``integrate`` method.\n    \n    Parameters\n    ----------\n    a, b : float\n        The end-points of the integration interval.\n    tck : tuple or a BSpline instance\n        If a tuple, then it should be a sequence of length 3, containing the\n        vector of knots, the B-spline coefficients, and the degree of the\n        spline (see `splev`).\n    full_output : int, optional\n        Non-zero to return optional output.\n    \n    Returns\n    -------\n    integral : float\n        The resulting integral.\n    wrk : ndarray\n        An array containing the integrals of the normalized B-splines\n        defined on the set of knots.\n        (Only returned if `full_output` is non-zero)\n    \n    See Also\n    --------\n    splprep, splrep, sproot, spalde, splev\n    bisplrep, bisplev\n    BSpline\n    \n    Notes\n    -----\n    `splint` silently assumes that the spline function is zero outside the data\n    interval (`a`, `b`).\n    \n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using the `BSpline` objects.\n    \n    References\n    ----------\n    .. [1] P.W. Gaffney, The calculation of indefinite integrals of b-splines\",\n        J. Inst. Maths Applics, 17, p.37-41, 1976.\n    .. [2] P. Dierckx, \"Curve and surface fitting with splines\", Monographs\n        on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Examples are given :ref:`in the tutorial <tutorial-interpolate_splXXX>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3ae8f36e52a454ad6f1dbf1cfe7d2da600d0d7f09b08842ea60f0219d2b90532",
            "fields": [
                {
                    "id": "hrnz0c69",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k267lxjl",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ntt3b1g7",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a tuple, then it should be a sequence of length 3, containing the\nvector of knots, the B-spline coefficients, and the degree of the\nspline (see `splev`).",
                    "type": "tuple or a BSpline instance",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cdf35a3k",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Non-zero to return optional output.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r25gjq76",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.splint",
                    "defaultValue": "scipy.interpolate.fitpack.splint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zddzqds9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fo1689od",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kx4312p6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gnusl_2p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qfshmzjl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pbjr_z4d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "be32pfzo",
            "name": "fitpack.splprep",
            "description": "Find the B-spline representation of an N-D curve.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend using `make_splprep` in new code.\n    \n    Given a list of N rank-1 arrays, `x`, which represent a curve in\n    N-dimensional space parametrized by `u`, find a smooth approximating\n    spline curve g(`u`). Uses the FORTRAN routine parcur from FITPACK.\n    \n    Parameters\n    ----------\n    x : array_like\n        A list of sample vector arrays representing the curve.\n    w : array_like, optional\n        Strictly positive rank-1 array of weights the same length as `x[0]`.\n        The weights are used in computing the weighted least-squares spline\n        fit. If the errors in the `x` values have standard-deviation given by\n        the vector d, then `w` should be 1/d. Default is ``ones(len(x[0]))``.\n    u : array_like, optional\n        An array of parameter values. If not given, these values are\n        calculated automatically as ``M = len(x[0])``, where\n    \n            v[0] = 0\n    \n            v[i] = v[i-1] + distance(`x[i]`, `x[i-1]`)\n    \n            u[i] = v[i] / v[M-1]\n    \n    ub, ue : int, optional\n        The end-points of the parameters interval.  Defaults to\n        u[0] and u[-1].\n    k : int, optional\n        Degree of the spline. Cubic splines are recommended.\n        Even values of `k` should be avoided especially with a small s-value.\n        ``1 <= k <= 5``, default is 3.\n    task : int, optional\n        If task==0 (default), find t and c for a given smoothing factor, s.\n        If task==1, find t and c for another value of the smoothing factor, s.\n        There must have been a previous call with task=0 or task=1\n        for the same set of data.\n        If task=-1 find the weighted least square spline for a given set of\n        knots, t.\n    s : float, optional\n        A smoothing condition.  The amount of smoothness is determined by\n        satisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s``,\n        where g(x) is the smoothed interpolation of (x,y).  The user can\n        use `s` to control the trade-off between closeness and smoothness\n        of fit.  Larger `s` means more smoothing while smaller values of `s`\n        indicate less smoothing. Recommended values of `s` depend on the\n        weights, w.  If the weights represent the inverse of the\n        standard-deviation of y, then a good `s` value should be found in\n        the range ``(m-sqrt(2*m),m+sqrt(2*m))``, where m is the number of\n        data points in x, y, and w.\n    t : array, optional\n        The knots needed for ``task=-1``.\n        There must be at least ``2*k+2`` knots.\n    full_output : int, optional\n        If non-zero, then return optional outputs.\n    nest : int, optional\n        An over-estimate of the total number of knots of the spline to\n        help in determining the storage space.  By default nest=m/2.\n        Always large enough is nest=m+k+1.\n    per : int, optional\n       If non-zero, data points are considered periodic with period\n       ``x[m-1] - x[0]`` and a smooth periodic spline approximation is\n       returned.  Values of ``y[m-1]`` and ``w[m-1]`` are not used.\n    quiet : int, optional\n         Non-zero to suppress messages.\n    \n    Returns\n    -------\n    tck : tuple\n        A tuple, ``(t,c,k)`` containing the vector of knots, the B-spline\n        coefficients, and the degree of the spline.\n    u : array\n        An array of the values of the parameter.\n    fp : float\n        The weighted sum of squared residuals of the spline approximation.\n    ier : int\n        An integer flag about splrep success.  Success is indicated\n        if ier<=0. If ier in [1,2,3] an error occurred but was not raised.\n        Otherwise an error is raised.\n    msg : str\n        A message corresponding to the integer flag, ier.\n    \n    See Also\n    --------\n    splrep, splev, sproot, spalde, splint,\n    bisplrep, bisplev\n    UnivariateSpline, BivariateSpline\n    BSpline\n    make_interp_spline\n    \n    Notes\n    -----\n    See `splev` for evaluation of the spline and its derivatives.\n    The number of dimensions N must be smaller than 11.\n    \n    The number of coefficients in the `c` array is ``k+1`` less than the number\n    of knots, ``len(t)``. This is in contrast with `splrep`, which zero-pads\n    the array of coefficients to have the same length as the array of knots.\n    These additional coefficients are ignored by evaluation routines, `splev`\n    and `BSpline`.\n    \n    References\n    ----------\n    .. [1] P. Dierckx, \"Algorithms for smoothing data with periodic and\n        parametric splines, Computer Graphics and Image Processing\",\n        20 (1982) 171-184.\n    .. [2] P. Dierckx, \"Algorithms for smoothing data with periodic and\n        parametric splines\", report tw55, Dept. Computer Science,\n        K.U.Leuven, 1981.\n    .. [3] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n        Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    Generate a discretization of a limacon curve in the polar coordinates:\n    \n    >>> import numpy as np\n    >>> phi = np.linspace(0, 2.*np.pi, 40)\n    >>> r = 0.5 + np.cos(phi)         # polar coords\n    >>> x, y = r * np.cos(phi), r * np.sin(phi)    # convert to cartesian\n    \n    And interpolate:\n    \n    >>> from scipy.interpolate import splprep, splev\n    >>> tck, u = splprep([x, y], s=0)\n    >>> new_points = splev(u, tck)\n    \n    Notice that (i) we force interpolation by using ``s=0``,\n    (ii) the parameterization, ``u``, is generated automatically.\n    Now plot the result:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(x, y, 'ro')\n    >>> ax.plot(new_points[0], new_points[1], 'r-')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "502a11466990cd998770a00dba97d1a29ad4a380d14e9ff7f8ceae19ea37b9c6",
            "fields": [
                {
                    "id": "rpji32td",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "A list of sample vector arrays representing the curve.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0tfn8nth",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Strictly positive rank-1 array of weights the same length as `x[0]`.\nThe weights are used in computing the weighted least-squares spline\nfit. If the errors in the `x` values have standard-deviation given by\nthe vector d, then `w` should be 1/d. Default is ``ones(len(x[0]))``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwxj58o7",
                    "encoding": "",
                    "name": "u",
                    "value": "",
                    "defaultValue": "",
                    "description": "An array of parameter values. If not given, these values are\ncalculated automatically as ``M = len(x[0])``, where\n\n    v[0] = 0\n\n    v[i] = v[i-1] + distance(`x[i]`, `x[i-1]`)\n\n    u[i] = v[i] / v[M-1]",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ocbxi0s7",
                    "encoding": "",
                    "name": "ub",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "np84w8pb",
                    "encoding": "",
                    "name": "ue",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sp017ss",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "Degree of the spline. Cubic splines are recommended.\nEven values of `k` should be avoided especially with a small s-value.\n``1 <= k <= 5``, default is 3.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "np1lynz2",
                    "encoding": "",
                    "name": "task",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If task==0 (default), find t and c for a given smoothing factor, s.\nIf task==1, find t and c for another value of the smoothing factor, s.\nThere must have been a previous call with task=0 or task=1\nfor the same set of data.\nIf task=-1 find the weighted least square spline for a given set of\nknots, t.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dluklp6f",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "A smoothing condition.  The amount of smoothness is determined by\nsatisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s``,\nwhere g(x) is the smoothed interpolation of (x,y).  The user can\nuse `s` to control the trade-off between closeness and smoothness\nof fit.  Larger `s` means more smoothing while smaller values of `s`\nindicate less smoothing. Recommended values of `s` depend on the\nweights, w.  If the weights represent the inverse of the\nstandard-deviation of y, then a good `s` value should be found in\nthe range ``(m-sqrt(2*m),m+sqrt(2*m))``, where m is the number of\ndata points in x, y, and w.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bg4iy9b6",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The knots needed for ``task=-1``.\nThere must be at least ``2*k+2`` knots.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhp4dpz2",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, then return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "htgyb3qc",
                    "encoding": "",
                    "name": "nest",
                    "value": "",
                    "defaultValue": "",
                    "description": "An over-estimate of the total number of knots of the spline to\nhelp in determining the storage space.  By default nest=m/2.\nAlways large enough is nest=m+k+1.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d0zrh8og",
                    "encoding": "",
                    "name": "per",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, data points are considered periodic with period\n``x[m-1] - x[0]`` and a smooth periodic spline approximation is\nreturned.  Values of ``y[m-1]`` and ``w[m-1]`` are not used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9xbi_mb",
                    "encoding": "",
                    "name": "quiet",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Non-zero to suppress messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "994b_dnc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.splprep",
                    "defaultValue": "scipy.interpolate.fitpack.splprep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pf6nc8zw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jsei_edo",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ghxgv17w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w7a7e6qw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u241c7mu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mpevoes5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6zk9_pkr",
            "name": "fitpack.splrep",
            "description": "Find the B-spline representation of a 1-D curve.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend using `make_splrep` in new code.\n    \n    \n    Given the set of data points ``(x[i], y[i])`` determine a smooth spline\n    approximation of degree k on the interval ``xb <= x <= xe``.\n    \n    Parameters\n    ----------\n    x, y : array_like\n        The data points defining a curve ``y = f(x)``.\n    w : array_like, optional\n        Strictly positive rank-1 array of weights the same length as `x` and `y`.\n        The weights are used in computing the weighted least-squares spline\n        fit. If the errors in the `y` values have standard-deviation given by the\n        vector ``d``, then `w` should be ``1/d``. Default is ``ones(len(x))``.\n    xb, xe : float, optional\n        The interval to fit.  If None, these default to ``x[0]`` and ``x[-1]``\n        respectively.\n    k : int, optional\n        The degree of the spline fit. It is recommended to use cubic splines.\n        Even values of `k` should be avoided especially with small `s` values.\n        ``1 <= k <= 5``.\n    task : {1, 0, -1}, optional\n        If ``task==0``, find ``t`` and ``c`` for a given smoothing factor, `s`.\n    \n        If ``task==1`` find ``t`` and ``c`` for another value of the smoothing factor,\n        `s`. There must have been a previous call with ``task=0`` or ``task=1`` for\n        the same set of data (``t`` will be stored an used internally)\n    \n        If ``task=-1`` find the weighted least square spline for a given set of\n        knots, ``t``. These should be interior knots as knots on the ends will be\n        added automatically.\n    s : float, optional\n        A smoothing condition. The amount of smoothness is determined by\n        satisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s`` where ``g(x)``\n        is the smoothed interpolation of ``(x,y)``. The user can use `s` to control\n        the tradeoff between closeness and smoothness of fit. Larger `s` means\n        more smoothing while smaller values of `s` indicate less smoothing.\n        Recommended values of `s` depend on the weights, `w`. If the weights\n        represent the inverse of the standard-deviation of `y`, then a good `s`\n        value should be found in the range ``(m-sqrt(2*m),m+sqrt(2*m))`` where ``m`` is\n        the number of datapoints in `x`, `y`, and `w`. default : ``s=m-sqrt(2*m)`` if\n        weights are supplied. ``s = 0.0`` (interpolating) if no weights are\n        supplied.\n    t : array_like, optional\n        The knots needed for ``task=-1``. If given then task is automatically set\n        to ``-1``.\n    full_output : bool, optional\n        If non-zero, then return optional outputs.\n    per : bool, optional\n        If non-zero, data points are considered periodic with period ``x[m-1]`` -\n        ``x[0]`` and a smooth periodic spline approximation is returned. Values of\n        ``y[m-1]`` and ``w[m-1]`` are not used.\n        The default is zero, corresponding to boundary condition 'not-a-knot'.\n    quiet : bool, optional\n        Non-zero to suppress messages.\n    \n    Returns\n    -------\n    tck : tuple\n        A tuple ``(t,c,k)`` containing the vector of knots, the B-spline\n        coefficients, and the degree of the spline.\n    fp : array, optional\n        The weighted sum of squared residuals of the spline approximation.\n    ier : int, optional\n        An integer flag about splrep success. Success is indicated if ``ier<=0``.\n        If ``ier in [1,2,3]``, an error occurred but was not raised. Otherwise an\n        error is raised.\n    msg : str, optional\n        A message corresponding to the integer flag, `ier`.\n    \n    See Also\n    --------\n    UnivariateSpline, BivariateSpline\n    splprep, splev, sproot, spalde, splint\n    bisplrep, bisplev\n    BSpline\n    make_interp_spline\n    \n    Notes\n    -----\n    See `splev` for evaluation of the spline and its derivatives. Uses the\n    FORTRAN routine ``curfit`` from FITPACK.\n    \n    The user is responsible for assuring that the values of `x` are unique.\n    Otherwise, `splrep` will not return sensible results.\n    \n    If provided, knots `t` must satisfy the Schoenberg-Whitney conditions,\n    i.e., there must be a subset of data points ``x[j]`` such that\n    ``t[j] < x[j] < t[j+k+1]``, for ``j=0, 1,...,n-k-2``.\n    \n    This routine zero-pads the coefficients array ``c`` to have the same length\n    as the array of knots ``t`` (the trailing ``k + 1`` coefficients are ignored\n    by the evaluation routines, `splev` and `BSpline`.) This is in contrast with\n    `splprep`, which does not zero-pad the coefficients.\n    \n    The default boundary condition is 'not-a-knot', i.e. the first and second\n    segment at a curve end are the same polynomial. More boundary conditions are\n    available in `CubicSpline`.\n    \n    References\n    ----------\n    Based on algorithms described in [1]_, [2]_, [3]_, and [4]_:\n    \n    .. [1] P. Dierckx, \"An algorithm for smoothing, differentiation and\n       integration of experimental data using spline functions\",\n       J.Comp.Appl.Maths 1 (1975) 165-184.\n    .. [2] P. Dierckx, \"A fast algorithm for smoothing data on a rectangular\n       grid while using spline functions\", SIAM J.Numer.Anal. 19 (1982)\n       1286-1304.\n    .. [3] P. Dierckx, \"An improved algorithm for curve fitting with spline\n       functions\", report tw54, Dept. Computer Science,K.U. Leuven, 1981.\n    .. [4] P. Dierckx, \"Curve and surface fitting with splines\", Monographs on\n       Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    You can interpolate 1-D points with a B-spline curve.\n    Further examples are given in\n    :ref:`in the tutorial <tutorial-interpolate_splXXX>`.\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import splev, splrep\n    >>> x = np.linspace(0, 10, 10)\n    >>> y = np.sin(x)\n    >>> spl = splrep(x, y)\n    >>> x2 = np.linspace(0, 10, 200)\n    >>> y2 = splev(x2, spl)\n    >>> plt.plot(x, y, 'o', x2, y2)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dc1a00c4a97b52c97cca8fb2dfd98c268c45499f6669d4e47228eb4a7c0fc317",
            "fields": [
                {
                    "id": "m3pmt7cq",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6n_79s23",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e2ts7e6a",
                    "encoding": "",
                    "name": "w",
                    "value": "",
                    "defaultValue": "",
                    "description": "Strictly positive rank-1 array of weights the same length as `x` and `y`.\nThe weights are used in computing the weighted least-squares spline\nfit. If the errors in the `y` values have standard-deviation given by the\nvector ``d``, then `w` should be ``1/d``. Default is ``ones(len(x))``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6wbmzik",
                    "encoding": "",
                    "name": "xb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0u7j08me",
                    "encoding": "",
                    "name": "xe",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "24tue1jc",
                    "encoding": "",
                    "name": "k",
                    "value": 3,
                    "defaultValue": 3,
                    "description": "The degree of the spline fit. It is recommended to use cubic splines.\nEven values of `k` should be avoided especially with small `s` values.\n``1 <= k <= 5``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpvkw9_z",
                    "encoding": "",
                    "name": "task",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If ``task==0``, find ``t`` and ``c`` for a given smoothing factor, `s`.\n\nIf ``task==1`` find ``t`` and ``c`` for another value of the smoothing factor,\n`s`. There must have been a previous call with ``task=0`` or ``task=1`` for\nthe same set of data (``t`` will be stored an used internally)\n\nIf ``task=-1`` find the weighted least square spline for a given set of\nknots, ``t``. These should be interior knots as knots on the ends will be\nadded automatically.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cc3e3m3z",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "A smoothing condition. The amount of smoothness is determined by\nsatisfying the conditions: ``sum((w * (y - g))**2,axis=0) <= s`` where ``g(x)``\nis the smoothed interpolation of ``(x,y)``. The user can use `s` to control\nthe tradeoff between closeness and smoothness of fit. Larger `s` means\nmore smoothing while smaller values of `s` indicate less smoothing.\nRecommended values of `s` depend on the weights, `w`. If the weights\nrepresent the inverse of the standard-deviation of `y`, then a good `s`\nvalue should be found in the range ``(m-sqrt(2*m),m+sqrt(2*m))`` where ``m`` is\nthe number of datapoints in `x`, `y`, and `w`. default : ``s=m-sqrt(2*m)`` if\nweights are supplied. ``s = 0.0`` (interpolating) if no weights are\nsupplied.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0q978x20",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The knots needed for ``task=-1``. If given then task is automatically set\nto ``-1``.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dillqyi",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, then return optional outputs.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jn6s7_me",
                    "encoding": "",
                    "name": "per",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "If non-zero, data points are considered periodic with period ``x[m-1]`` -\n``x[0]`` and a smooth periodic spline approximation is returned. Values of\n``y[m-1]`` and ``w[m-1]`` are not used.\nThe default is zero, corresponding to boundary condition 'not-a-knot'.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bfg3zuao",
                    "encoding": "",
                    "name": "quiet",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Non-zero to suppress messages.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pf2894xn",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.splrep",
                    "defaultValue": "scipy.interpolate.fitpack.splrep",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fwzy594_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rei5bd16",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8qceil6v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bw3zb99t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lq6h1gek",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m3fwpg5b",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1bitryop",
            "name": "fitpack.sproot",
            "description": "Find the roots of a cubic B-spline.\n    \n    .. legacy:: function\n    \n        Specifically, we recommend constructing a `BSpline` object and using the\n        following pattern: `PPoly.from_spline(spl).roots()`.\n    \n    Given the knots (>=8) and coefficients of a cubic B-spline return the\n    roots of the spline.\n    \n    Parameters\n    ----------\n    tck : tuple or a BSpline object\n        If a tuple, then it should be a sequence of length 3, containing the\n        vector of knots, the B-spline coefficients, and the degree of the\n        spline.\n        The number of knots must be >= 8, and the degree must be 3.\n        The knots must be a montonically increasing sequence.\n    mest : int, optional\n        An estimate of the number of zeros (Default is 10).\n    \n    Returns\n    -------\n    zeros : ndarray\n        An array giving the roots of the spline.\n    \n    See Also\n    --------\n    splprep, splrep, splint, spalde, splev\n    bisplrep, bisplev\n    BSpline\n    \n    Notes\n    -----\n    Manipulating the tck-tuples directly is not recommended. In new code,\n    prefer using the `BSpline` objects.\n    \n    References\n    ----------\n    .. [1] C. de Boor, \"On calculating with b-splines\", J. Approximation\n        Theory, 6, p.50-62, 1972.\n    .. [2] M. G. Cox, \"The numerical evaluation of b-splines\", J. Inst. Maths\n        Applics, 10, p.134-149, 1972.\n    .. [3] P. Dierckx, \"Curve and surface fitting with splines\", Monographs\n        on Numerical Analysis, Oxford University Press, 1993.\n    \n    Examples\n    --------\n    \n    For some data, this method may miss a root. This happens when one of\n    the spline knots (which FITPACK places automatically) happens to\n    coincide with the true root. A workaround is to convert to `PPoly`,\n    which uses a different root-finding algorithm.\n    \n    For example,\n    \n    >>> x = [1.96, 1.97, 1.98, 1.99, 2.00, 2.01, 2.02, 2.03, 2.04, 2.05]\n    >>> y = [-6.365470e-03, -4.790580e-03, -3.204320e-03, -1.607270e-03,\n    ...      4.440892e-16,  1.616930e-03,  3.243000e-03,  4.877670e-03,\n    ...      6.520430e-03,  8.170770e-03]\n    >>> from scipy.interpolate import splrep, sproot, PPoly\n    >>> tck = splrep(x, y, s=0)\n    >>> sproot(tck)\n    array([], dtype=float64)\n    \n    Converting to a PPoly object does find the roots at ``x=2``:\n    \n    >>> ppoly = PPoly.from_spline(tck)\n    >>> ppoly.roots(extrapolate=False)\n    array([2.])\n    \n    \n    Further examples are given :ref:`in the tutorial\n    <tutorial-interpolate_splXXX>`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "929fb1b109feb7091798031e87bffe8d15c85a29e27bd921164582b8ab0be43a",
            "fields": [
                {
                    "id": "ff2lw9fe",
                    "encoding": "",
                    "name": "tck",
                    "value": "",
                    "defaultValue": "",
                    "description": "If a tuple, then it should be a sequence of length 3, containing the\nvector of knots, the B-spline coefficients, and the degree of the\nspline.\nThe number of knots must be >= 8, and the degree must be 3.\nThe knots must be a montonically increasing sequence.",
                    "type": "tuple or a BSpline object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nzz0sy8",
                    "encoding": "",
                    "name": "mest",
                    "value": 10,
                    "defaultValue": 10,
                    "description": "An estimate of the number of zeros (Default is 10).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8_1y34r4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.fitpack.sproot",
                    "defaultValue": "scipy.interpolate.fitpack.sproot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_kbyqc3m",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frdkm2ta",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jcmj_oqi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ux2bx2zv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.fitpack",
                    "defaultValue": "scipy.interpolate.fitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1kqjiq2c",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k234p036",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jzk8m7mv",
            "name": "interpnd.estimate_gradients_2d_global",
            "description": "",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b08fd1c9a94530543ab0daba70e2e6ceb68e6eaa19a2d2fc41f5b325679b94ee",
            "fields": [
                {
                    "id": "_hy1p7xu",
                    "encoding": "",
                    "name": "tri",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwpgh9f4",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "186ia5pu",
                    "encoding": "",
                    "name": "maxiter",
                    "value": 400,
                    "defaultValue": 400,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0o61gnhw",
                    "encoding": "",
                    "name": "tol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0auptj89",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.interpnd.estimate_gradients_2d_global",
                    "defaultValue": "scipy.interpolate.interpnd.estimate_gradients_2d_global",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxoq0qg1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3vxf3exu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "krl3om0_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nvpdr4pj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.interpnd",
                    "defaultValue": "scipy.interpolate.interpnd",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8h0j1rcd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pr1kga_h",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "enuj8uq2",
            "name": "ndgriddata.griddata",
            "description": "Convenience function for interpolating unstructured data in multiple dimensions.\n    \n    Parameters\n    ----------\n    points : 2-D ndarray of floats with shape (n, D), or length D tuple of 1-D ndarrays with shape (n,).\n        Data point coordinates.\n    values : ndarray of float or complex, shape (n,)\n        Data values.\n    xi : 2-D ndarray of floats with shape (m, D), or length D tuple of ndarrays broadcastable to the same shape.\n        Points at which to interpolate data.\n    method : {'linear', 'nearest', 'cubic'}, optional\n        Method of interpolation. One of\n    \n        ``nearest``\n          return the value at the data point closest to\n          the point of interpolation. See `NearestNDInterpolator` for\n          more details.\n    \n        ``linear``\n          tessellate the input point set to N-D\n          simplices, and interpolate linearly on each simplex. See\n          `LinearNDInterpolator` for more details.\n    \n        ``cubic`` (1-D)\n          return the value determined from a cubic\n          spline.\n    \n        ``cubic`` (2-D)\n          return the value determined from a\n          piecewise cubic, continuously differentiable (C1), and\n          approximately curvature-minimizing polynomial surface. See\n          `CloughTocher2DInterpolator` for more details.\n    fill_value : float, optional\n        Value used to fill in for requested points outside of the\n        convex hull of the input points. If not provided, then the\n        default is ``nan``. This option has no effect for the\n        'nearest' method.\n    rescale : bool, optional\n        Rescale points to unit cube before performing interpolation.\n        This is useful if some of the input dimensions have\n        incommensurable units and differ by many orders of magnitude.\n    \n        .. versionadded:: 0.14.0\n    \n    Returns\n    -------\n    ndarray\n        Array of interpolated values.\n    \n    See Also\n    --------\n    LinearNDInterpolator :\n        Piecewise linear interpolator in N dimensions.\n    NearestNDInterpolator :\n        Nearest-neighbor interpolator in N dimensions.\n    CloughTocher2DInterpolator :\n        Piecewise cubic, C1 smooth, curvature-minimizing interpolator in 2D.\n    interpn : Interpolation on a regular grid or rectilinear grid.\n    RegularGridInterpolator : Interpolator on a regular or rectilinear grid\n                              in arbitrary dimensions (`interpn` wraps this\n                              class).\n    \n    Notes\n    -----\n    \n    .. versionadded:: 0.9\n    \n    .. note:: For data on a regular grid use `interpn` instead.\n    \n    Examples\n    --------\n    \n    Suppose we want to interpolate the 2-D function\n    \n    >>> import numpy as np\n    >>> def func(x, y):\n    ...     return x*(1-x)*np.cos(4*np.pi*x) * np.sin(4*np.pi*y**2)**2\n    \n    on a grid in [0, 1]x[0, 1]\n    \n    >>> grid_x, grid_y = np.mgrid[0:1:100j, 0:1:200j]\n    \n    but we only know its values at 1000 data points:\n    \n    >>> rng = np.random.default_rng()\n    >>> points = rng.random((1000, 2))\n    >>> values = func(points[:,0], points[:,1])\n    \n    This can be done with `griddata` -- below we try out all of the\n    interpolation methods:\n    \n    >>> from scipy.interpolate import griddata\n    >>> grid_z0 = griddata(points, values, (grid_x, grid_y), method='nearest')\n    >>> grid_z1 = griddata(points, values, (grid_x, grid_y), method='linear')\n    >>> grid_z2 = griddata(points, values, (grid_x, grid_y), method='cubic')\n    \n    One can see that the exact result is reproduced by all of the\n    methods to some degree, but for this smooth function the piecewise\n    cubic interpolant gives the best results:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.subplot(221)\n    >>> plt.imshow(func(grid_x, grid_y).T, extent=(0,1,0,1), origin='lower')\n    >>> plt.plot(points[:,0], points[:,1], 'k.', ms=1)\n    >>> plt.title('Original')\n    >>> plt.subplot(222)\n    >>> plt.imshow(grid_z0.T, extent=(0,1,0,1), origin='lower')\n    >>> plt.title('Nearest')\n    >>> plt.subplot(223)\n    >>> plt.imshow(grid_z1.T, extent=(0,1,0,1), origin='lower')\n    >>> plt.title('Linear')\n    >>> plt.subplot(224)\n    >>> plt.imshow(grid_z2.T, extent=(0,1,0,1), origin='lower')\n    >>> plt.title('Cubic')\n    >>> plt.gcf().set_size_inches(6, 6)\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f382690177234fa50d49eea72d39e4a60c9b1283a4f1eadcec52db0c6649ff8b",
            "fields": [
                {
                    "id": "isdbl1b1",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data point coordinates.",
                    "type": "2-D ndarray of floats with shape (n, D), or length D tuple of 1-D ndarrays with shape (n,).",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sg1p8s5_",
                    "encoding": "",
                    "name": "values",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data values.",
                    "type": "ndarray of float or complex, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpybqddn",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Points at which to interpolate data.",
                    "type": "2-D ndarray of floats with shape (m, D), or length D tuple of ndarrays broadcastable to the same shape.",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umt683ss",
                    "encoding": "",
                    "name": "method",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Method of interpolation. One of\n\n``nearest``\n  return the value at the data point closest to\n  the point of interpolation. See `NearestNDInterpolator` for\n  more details.\n\n``linear``\n  tessellate the input point set to N-D\n  simplices, and interpolate linearly on each simplex. See\n  `LinearNDInterpolator` for more details.\n\n``cubic`` (1-D)\n  return the value determined from a cubic\n  spline.\n\n``cubic`` (2-D)\n  return the value determined from a\n  piecewise cubic, continuously differentiable (C1), and\n  approximately curvature-minimizing polynomial surface. See\n  `CloughTocher2DInterpolator` for more details.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ux9y4zie",
                    "encoding": "",
                    "name": "fill_value",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value used to fill in for requested points outside of the\nconvex hull of the input points. If not provided, then the\ndefault is ``nan``. This option has no effect for the\n'nearest' method.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6zczd4kd",
                    "encoding": "",
                    "name": "rescale",
                    "value": false,
                    "defaultValue": false,
                    "description": "Rescale points to unit cube before performing interpolation.\nThis is useful if some of the input dimensions have\nincommensurable units and differ by many orders of magnitude.\n\n.. versionadded:: 0.14.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ebb70lxc",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.ndgriddata.griddata",
                    "defaultValue": "scipy.interpolate.ndgriddata.griddata",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1i25_ryy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oylvmgjt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y_7e6zsw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0q8qhs7s",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.ndgriddata",
                    "defaultValue": "scipy.interpolate.ndgriddata",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q9bdadyj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ljh5xgq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "46f0upp8",
            "name": "polyint.approximate_taylor_polynomial",
            "description": "Estimate the Taylor polynomial of f at x by polynomial fitting.\n    \n    Parameters\n    ----------\n    f : callable\n        The function whose Taylor polynomial is sought. Should accept\n        a vector of `x` values.\n    x : scalar\n        The point at which the polynomial is to be evaluated.\n    degree : int\n        The degree of the Taylor polynomial\n    scale : scalar\n        The width of the interval to use to evaluate the Taylor polynomial.\n        Function values spread over a range this wide are used to fit the\n        polynomial. Must be chosen carefully.\n    order : int or None, optional\n        The order of the polynomial to be used in the fitting; `f` will be\n        evaluated ``order+1`` times. If None, use `degree`.\n    \n    Returns\n    -------\n    p : poly1d instance\n        The Taylor polynomial (translated to the origin, so that\n        for example p(0)=f(x)).\n    \n    Notes\n    -----\n    The appropriate choice of \"scale\" is a trade-off; too large and the\n    function differs from its Taylor polynomial too much to get a good\n    answer, too small and round-off errors overwhelm the higher-order terms.\n    The algorithm used becomes numerically unstable around order 30 even\n    under ideal circumstances.\n    \n    Choosing order somewhat larger than degree may improve the higher-order\n    terms.\n    \n    Examples\n    --------\n    We can calculate Taylor approximation polynomials of sin function with\n    various degrees:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import approximate_taylor_polynomial\n    >>> x = np.linspace(-10.0, 10.0, num=100)\n    >>> plt.plot(x, np.sin(x), label=\"sin curve\")\n    >>> for degree in np.arange(1, 15, step=2):\n    ...     sin_taylor = approximate_taylor_polynomial(np.sin, 0, degree, 1,\n    ...                                                order=degree + 2)\n    ...     plt.plot(x, sin_taylor(x), label=f\"degree={degree}\")\n    >>> plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left',\n    ...            borderaxespad=0.0, shadow=True)\n    >>> plt.tight_layout()\n    >>> plt.axis([-10, 10, -10, 10])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "784e65b745a669b4a13da83bf4e5b59279837a22a6054689a2334ebfd7eeb122",
            "fields": [
                {
                    "id": "qtjp0bpa",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function whose Taylor polynomial is sought. Should accept\na vector of `x` values.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zfbwopqd",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The point at which the polynomial is to be evaluated.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oju0c1ws",
                    "encoding": "",
                    "name": "degree",
                    "value": "",
                    "defaultValue": "",
                    "description": "The degree of the Taylor polynomial",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v1rudpoi",
                    "encoding": "",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "The width of the interval to use to evaluate the Taylor polynomial.\nFunction values spread over a range this wide are used to fit the\npolynomial. Must be chosen carefully.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f7m_27di",
                    "encoding": "",
                    "name": "order",
                    "value": "",
                    "defaultValue": "",
                    "description": "The order of the polynomial to be used in the fitting; `f` will be\nevaluated ``order+1`` times. If None, use `degree`.",
                    "type": "int or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "io0dv18n",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.polyint.approximate_taylor_polynomial",
                    "defaultValue": "scipy.interpolate.polyint.approximate_taylor_polynomial",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "chxwhwdy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqu_5618",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zk9z6plu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "77zbabym",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.polyint",
                    "defaultValue": "scipy.interpolate.polyint",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k8f327nj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ah0eyhe5",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y9jq0m0s",
            "name": "polyint.barycentric_interpolate",
            "description": "Convenience function for barycentric interpolation.\n    \n    Constructs a polynomial that passes through a given set of points,\n    then evaluates the polynomial. For reasons of numerical stability,\n    this function does not compute the coefficients of the polynomial.\n    \n    This function uses a \"barycentric interpolation\" method that treats\n    the problem as a special case of rational function interpolation.\n    This algorithm is quite stable, numerically, but even in a world of\n    exact computation, unless the `x` coordinates are chosen very\n    carefully - Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice -\n    polynomial interpolation itself is a very ill-conditioned process\n    due to the Runge phenomenon.\n    \n    Parameters\n    ----------\n    xi : array_like\n        1-D array of x coordinates of the points the polynomial should\n        pass through\n    yi : array_like\n        The y coordinates of the points the polynomial should pass through.\n    x : scalar or array_like\n        Point or points at which to evaluate the interpolant.\n    axis : int, optional\n        Axis in the `yi` array corresponding to the x-coordinate values.\n    der : int or list or None, optional\n        How many derivatives to evaluate, or None for all potentially\n        nonzero derivatives (that is, a number equal to the number\n        of points), or a list of derivatives to evaluate. This number\n        includes the function value as the '0th' derivative.\n    rng : `numpy.random.Generator`, optional\n        Pseudorandom number generator state. When `rng` is None, a new\n        `numpy.random.Generator` is created using entropy from the\n        operating system. Types other than `numpy.random.Generator` are\n        passed to `numpy.random.default_rng` to instantiate a ``Generator``.\n    \n    Returns\n    -------\n    y : scalar or array_like\n        Interpolated values. Shape is determined by replacing\n        the interpolation axis in the original array with the shape of `x`.\n    \n    See Also\n    --------\n    BarycentricInterpolator : Barycentric interpolator\n    \n    Notes\n    -----\n    Construction of the interpolation weights is a relatively slow process.\n    If you want to call this many times with the same xi (but possibly\n    varying yi or x) you should use the class `BarycentricInterpolator`.\n    This is what this function uses internally.\n    \n    Examples\n    --------\n    We can interpolate 2D observed data using barycentric interpolation:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import barycentric_interpolate\n    >>> x_observed = np.linspace(0.0, 10.0, 11)\n    >>> y_observed = np.sin(x_observed)\n    >>> x = np.linspace(min(x_observed), max(x_observed), num=100)\n    >>> y = barycentric_interpolate(x_observed, y_observed, x)\n    >>> plt.plot(x_observed, y_observed, \"o\", label=\"observation\")\n    >>> plt.plot(x, y, label=\"barycentric interpolation\")\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ff0577e9ed32d8737cfdee1dd53febbc8e2e3dff1188cab7a64749753c048074",
            "fields": [
                {
                    "id": "2370rsuf",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "1-D array of x coordinates of the points the polynomial should\npass through",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vi_n1mrk",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "The y coordinates of the points the polynomial should pass through.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5dol013",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the interpolant.",
                    "type": "scalar or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q6un6cly",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the `yi` array corresponding to the x-coordinate values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "plrwygg2",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "How many derivatives to evaluate, or None for all potentially\nnonzero derivatives (that is, a number equal to the number\nof points), or a list of derivatives to evaluate. This number\nincludes the function value as the '0th' derivative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wgqqwg2b",
                    "encoding": "",
                    "name": "rng",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pseudorandom number generator state. When `rng` is None, a new\n`numpy.random.Generator` is created using entropy from the\noperating system. Types other than `numpy.random.Generator` are\npassed to `numpy.random.default_rng` to instantiate a ``Generator``.",
                    "type": "numpy.random.Generator",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z6hapf2w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.polyint.barycentric_interpolate",
                    "defaultValue": "scipy.interpolate.polyint.barycentric_interpolate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kd1b5d8b",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0b1m5d_k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6fuvz_ln",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "38u_5nib",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.polyint",
                    "defaultValue": "scipy.interpolate.polyint",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dv1_5n2i",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59vpm15p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0z1ya0iu",
            "name": "polyint.krogh_interpolate",
            "description": "Convenience function for Krogh interpolation.\n    \n    See `KroghInterpolator` for more details.\n    \n    Parameters\n    ----------\n    xi : array_like\n        Interpolation points (known x-coordinates).\n    yi : array_like\n        Known y-coordinates, of shape ``(xi.size, R)``. Interpreted as\n        vectors of length R, or scalars if R=1.\n    x : array_like\n        Point or points at which to evaluate the derivatives.\n    der : int or list or None, optional\n        How many derivatives to evaluate, or None for all potentially\n        nonzero derivatives (that is, a number equal to the number\n        of points), or a list of derivatives to evaluate. This number\n        includes the function value as the '0th' derivative.\n    axis : int, optional\n        Axis in the `yi` array corresponding to the x-coordinate values.\n    \n    Returns\n    -------\n    d : ndarray\n        If the interpolator's values are R-D then the\n        returned array will be the number of derivatives by N by R.\n        If `x` is a scalar, the middle dimension will be dropped; if\n        the `yi` are scalars then the last dimension will be dropped.\n    \n    See Also\n    --------\n    KroghInterpolator : Krogh interpolator\n    \n    Notes\n    -----\n    Construction of the interpolating polynomial is a relatively expensive\n    process. If you want to evaluate it repeatedly consider using the class\n    KroghInterpolator (which is what this function uses).\n    \n    Examples\n    --------\n    We can interpolate 2D observed data using Krogh interpolation:\n    \n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.interpolate import krogh_interpolate\n    >>> x_observed = np.linspace(0.0, 10.0, 11)\n    >>> y_observed = np.sin(x_observed)\n    >>> x = np.linspace(min(x_observed), max(x_observed), num=100)\n    >>> y = krogh_interpolate(x_observed, y_observed, x)\n    >>> plt.plot(x_observed, y_observed, \"o\", label=\"observation\")\n    >>> plt.plot(x, y, label=\"krogh interpolation\")\n    >>> plt.legend()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "528d52c0deb9513916dad196d436508d5ee8594983a61d8204d357b496182673",
            "fields": [
                {
                    "id": "q3nec3i1",
                    "encoding": "",
                    "name": "xi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation points (known x-coordinates).",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3w426_yb",
                    "encoding": "",
                    "name": "yi",
                    "value": "",
                    "defaultValue": "",
                    "description": "Known y-coordinates, of shape ``(xi.size, R)``. Interpreted as\nvectors of length R, or scalars if R=1.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qfncvxx",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Point or points at which to evaluate the derivatives.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f42e2371",
                    "encoding": "",
                    "name": "der",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "How many derivatives to evaluate, or None for all potentially\nnonzero derivatives (that is, a number equal to the number\nof points), or a list of derivatives to evaluate. This number\nincludes the function value as the '0th' derivative.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xafp7rg4",
                    "encoding": "",
                    "name": "axis",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Axis in the `yi` array corresponding to the x-coordinate values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "485sz706",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.polyint.krogh_interpolate",
                    "defaultValue": "scipy.interpolate.polyint.krogh_interpolate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e160c08v",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ethtmj2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8ex7yg5j",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s87omjem",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.polyint",
                    "defaultValue": "scipy.interpolate.polyint",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7anntwtr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7idr_vt0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_lzlrfox",
            "name": "function spalde",
            "description": "Wrapper for ``spalde``.\n\nParameters\n----------\nt : input rank-1 array('d') with bounds (n)\nc : input rank-1 array('d') with bounds (nc)\nk1 : input int\nx : input float\n\nReturns\n-------\nd : rank-1 array('d') with bounds (k1)\nier : int",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fa7fee4bdf7014dab06d77342bbee8a50fe36637c9745d3ffe8b7faf6d39fe9f",
            "fields": [
                {
                    "id": "x8r_w0f1",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9zwo14az",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vkeuim4_",
                    "encoding": "",
                    "name": "k1",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ytz0g2b1",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pyoo0ftg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.dfitpack.function spalde",
                    "defaultValue": "scipy.interpolate.dfitpack.function spalde",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gpn_lsco",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ug8tl0km",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dcykgcxd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hhgcio8h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_5a70kge",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s8_bvuxr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6rgynqla",
            "name": "function splder",
            "description": "Wrapper for ``splder``.\n\nParameters\n----------\nt : input rank-1 array('d') with bounds (n)\nc : input rank-1 array('d') with bounds (nc)\nk : input int\nx : input rank-1 array('d') with bounds (m)\n\nOther Parameters\n----------------\nnu : input int, optional\n    Default: 1\ne : input int, optional\n    Default: 0\n\nReturns\n-------\ny : rank-1 array('d') with bounds (m)\nier : int",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "175d6c7956b6b62f0675cf1c137d3e0730f914826e585e7ecb2d0b3a54eb0e25",
            "fields": [
                {
                    "id": "6mwyyyu_",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j07qr44z",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "49yu9bf7",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "caio3god",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sdtc0mji",
                    "encoding": "",
                    "name": "nu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: 1",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umixlgje",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: 0",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ya_b0amf",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.dfitpack.function splder",
                    "defaultValue": "scipy.interpolate.dfitpack.function splder",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w9s_lhzt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tmo80gji",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0s2mxurl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "quilran2",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rgxtg5xr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fetd1ol",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wwp_7c51",
            "name": "function splev",
            "description": "Wrapper for ``splev``.\n\nParameters\n----------\nt : input rank-1 array('d') with bounds (n)\nc : input rank-1 array('d') with bounds (nc)\nk : input int\nx : input rank-1 array('d') with bounds (m)\n\nOther Parameters\n----------------\ne : input int, optional\n    Default: 0\n\nReturns\n-------\ny : rank-1 array('d') with bounds (m)\nier : int",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1b501d97eaaf279ce3791b2dfdcc8501d2495370648def077145d6bde8d17231",
            "fields": [
                {
                    "id": "d5fj7ptp",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nwmk9ptj",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nid4ec3a",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qow41147",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y_2n63ji",
                    "encoding": "",
                    "name": "e",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: 0",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "niolg0qr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.dfitpack.function splev",
                    "defaultValue": "scipy.interpolate.dfitpack.function splev",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lq3w6w5h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kkixy0hx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dl3c_sfa",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qi9q2lpg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eifpycdj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6u_rwh8r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "egx7ht47",
            "name": "dfitpack.splint",
            "description": "Wrapper for ``splint``.\n\nParameters\n----------\nt : input rank-1 array('d') with bounds (n)\nc : input rank-1 array('d') with bounds (nc)\nk : input int\na : input float\nb : input float\n\nReturns\n-------\nsplint : float\nwrk : rank-1 array('d') with bounds (n)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa790dae96fb468a4e5e097b4a926313e4d99377ad9be7d9ee1287c2e0d21393",
            "fields": [
                {
                    "id": "8tbf5y_x",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hohhmx0h",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "28aams6q",
                    "encoding": "",
                    "name": "k",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29t80_7g",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dw0nyur1",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqklte2h",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.dfitpack.splint",
                    "defaultValue": "scipy.interpolate.dfitpack.splint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_klkg6s",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckvsk24a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ks9h21qw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "szqknu57",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.interpolate.dfitpack",
                    "defaultValue": "scipy.interpolate.dfitpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nrbdzfoc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qk4fjtf0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lrxys57y",
            "name": "function sproot",
            "description": "Wrapper for ``sproot``.\n\nParameters\n----------\nt : input rank-1 array('d') with bounds (n)\nc : input rank-1 array('d') with bounds (nc)\n\nOther Parameters\n----------------\nmest : input int, optional\n    Default: 3*(n-7)\n\nReturns\n-------\nzero : rank-1 array('d') with bounds (mest)\nm : int\nier : int",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "64fe5797fa9f76d03ef1ba270c338c1adebd09e08d0b553106198999d38dc2ea",
            "fields": [
                {
                    "id": "r6fz27nu",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ggrwijbr",
                    "encoding": "",
                    "name": "c",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrg4ki2y",
                    "encoding": "",
                    "name": "mest",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: 3*(n-7)",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ywv7pn86",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.interpolate.dfitpack.function sproot",
                    "defaultValue": "scipy.interpolate.dfitpack.function sproot",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xd_96u2l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_sn416eq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jv0gd9tp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gr2ghjb7",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qm4dnd5l",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "du1drwlo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}