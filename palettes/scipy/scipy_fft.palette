{
    "modelData": {
        "filePath": "scipy_fft.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "==============================================\nDiscrete Fourier transforms (:mod:`scipy.fft`)\n==============================================\n\n.. currentmodule:: scipy.fft\n\nFast Fourier Transforms (FFTs)\n==============================\n\n.. autosummary::\n   :toctree: generated/\n\n   fft - Fast (discrete) Fourier Transform (FFT)\n   ifft - Inverse FFT\n   fft2 - 2-D FFT\n   ifft2 - 2-D inverse FFT\n   fftn - N-D FFT\n   ifftn - N-D inverse FFT\n   rfft - FFT of strictly real-valued sequence\n   irfft - Inverse of rfft\n   rfft2 - 2-D FFT of real sequence\n   irfft2 - Inverse of rfft2\n   rfftn - N-D FFT of real sequence\n   irfftn - Inverse of rfftn\n   hfft - FFT of a Hermitian sequence (real spectrum)\n   ihfft - Inverse of hfft\n   hfft2 - 2-D FFT of a Hermitian sequence\n   ihfft2 - Inverse of hfft2\n   hfftn - N-D FFT of a Hermitian sequence\n   ihfftn - Inverse of hfftn\n\nDiscrete Sin and Cosine Transforms (DST and DCT)\n================================================\n\n.. autosummary::\n   :toctree: generated/\n\n   dct - Discrete cosine transform\n   idct - Inverse discrete cosine transform\n   dctn - N-D Discrete cosine transform\n   idctn - N-D Inverse discrete cosine transform\n   dst - Discrete sine transform\n   idst - Inverse discrete sine transform\n   dstn - N-D Discrete sine transform\n   idstn - N-D Inverse discrete sine transform\n\nFast Hankel Transforms\n======================\n\n.. autosummary::\n   :toctree: generated/\n\n   fht - Fast Hankel transform\n   ifht - Inverse of fht\n\nHelper functions\n================\n\n.. autosummary::\n   :toctree: generated/\n\n   fftshift - Shift the zero-frequency component to the center of the spectrum\n   ifftshift - The inverse of `fftshift`\n   fftfreq - Return the Discrete Fourier Transform sample frequencies\n   rfftfreq - DFT sample frequencies (for usage with rfft, irfft)\n   fhtoffset - Compute an optimal offset for the Fast Hankel Transform\n   next_fast_len - Find the optimal length to zero-pad an FFT for speed\n   prev_fast_len - Find the maximum slice length that results in a fast FFT\n   set_workers - Context manager to set default number of workers\n   get_workers - Get the current default number of workers\n\nBackend control\n===============\n\n.. autosummary::\n   :toctree: generated/\n\n   set_backend - Context manager to set the backend within a fixed scope\n   skip_backend - Context manager to skip a backend within a fixed scope\n   set_global_backend - Sets the global fft backend\n   register_backend - Register a backend for permanent use",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "9452f9b802553b9a2eae6b1401e64d00923d51f2217262058a90f9d6e13cdeb5",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100436.071985,
        "numLGNodes": 41
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mz8t85ox",
            "name": "fft.dct",
            "description": "Return the Discrete Cosine Transform of arbitrary type sequence x.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DCT (see Notes). Default type is 2.\n    n : int, optional\n        Length of the transform.  If ``n < x.shape[axis]``, `x` is\n        truncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\n        default results in ``n = x.shape[axis]``.\n    axis : int, optional\n        Axis along which the dct is computed; the default is over the\n        last axis (i.e., ``axis=-1``).\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized DCT variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    y : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    idct : Inverse DCT\n    \n    Notes\n    -----\n    For a single dimension array ``x``, ``dct(x, norm='ortho')`` is equal to\n    MATLAB ``dct(x)``.\n    \n    .. warning:: For ``type in {1, 2, 3}``, ``norm=\"ortho\"`` breaks the direct\n                 correspondence with the direct Fourier transform. To recover\n                 it you must specify ``orthogonalize=False``.\n    \n    For ``norm=\"ortho\"`` both the `dct` and `idct` are scaled by the same\n    overall factor in both directions. By default, the transform is also\n    orthogonalized which for types 1, 2 and 3 means the transform definition is\n    modified to give orthogonality of the DCT matrix (see below).\n    \n    For ``norm=\"backward\"``, there is no scaling on `dct` and the `idct` is\n    scaled by ``1/N`` where ``N`` is the \"logical\" size of the DCT. For\n    ``norm=\"forward\"`` the ``1/N`` normalization is applied to the forward\n    `dct` instead and the `idct` is unnormalized.\n    \n    There are, theoretically, 8 types of the DCT, only the first 4 types are\n    implemented in SciPy.'The' DCT generally refers to DCT type 2, and 'the'\n    Inverse DCT generally refers to DCT type 3.\n    \n    **Type I**\n    \n    There are several definitions of the DCT-I; we use the following\n    (for ``norm=\"backward\"``)\n    \n    .. math::\n    \n       y_k = x_0 + (-1)^k x_{N-1} + 2 \\sum_{n=1}^{N-2} x_n \\cos\\left(\n       \\frac{\\pi k n}{N-1} \\right)\n    \n    If ``orthogonalize=True``, ``x[0]`` and ``x[N-1]`` are multiplied by a\n    scaling factor of :math:`\\sqrt{2}`, and ``y[0]`` and ``y[N-1]`` are divided\n    by :math:`\\sqrt{2}`. When combined with ``norm=\"ortho\"``, this makes the\n    corresponding matrix of coefficients orthonormal (``O @ O.T = np.eye(N)``).\n    \n    .. note::\n       The DCT-I is only supported for input size > 1.\n    \n    **Type II**\n    \n    There are several definitions of the DCT-II; we use the following\n    (for ``norm=\"backward\"``)\n    \n    .. math::\n    \n       y_k = 2 \\sum_{n=0}^{N-1} x_n \\cos\\left(\\frac{\\pi k(2n+1)}{2N} \\right)\n    \n    If ``orthogonalize=True``, ``y[0]`` is divided by :math:`\\sqrt{2}` which,\n    when combined with ``norm=\"ortho\"``, makes the corresponding matrix of\n    coefficients orthonormal (``O @ O.T = np.eye(N)``).\n    \n    **Type III**\n    \n    There are several definitions, we use the following (for\n    ``norm=\"backward\"``)\n    \n    .. math::\n    \n       y_k = x_0 + 2 \\sum_{n=1}^{N-1} x_n \\cos\\left(\\frac{\\pi(2k+1)n}{2N}\\right)\n    \n    If ``orthogonalize=True``, ``x[0]`` terms are multiplied by\n    :math:`\\sqrt{2}` which, when combined with ``norm=\"ortho\"``, makes the\n    corresponding matrix of coefficients orthonormal (``O @ O.T = np.eye(N)``).\n    \n    The (unnormalized) DCT-III is the inverse of the (unnormalized) DCT-II, up\n    to a factor `2N`. The orthonormalized DCT-III is exactly the inverse of\n    the orthonormalized DCT-II.\n    \n    **Type IV**\n    \n    There are several definitions of the DCT-IV; we use the following\n    (for ``norm=\"backward\"``)\n    \n    .. math::\n    \n       y_k = 2 \\sum_{n=0}^{N-1} x_n \\cos\\left(\\frac{\\pi(2k+1)(2n+1)}{4N} \\right)\n    \n    ``orthogonalize`` has no effect here, as the DCT-IV matrix is already\n    orthogonal up to a scale factor of ``2N``.\n    \n    References\n    ----------\n    .. [1] 'A Fast Cosine Transform in One and Two Dimensions', by J.\n           Makhoul, `IEEE Transactions on acoustics, speech and signal\n           processing` vol. 28(1), pp. 27-34,\n           :doi:`10.1109/TASSP.1980.1163351` (1980).\n    .. [2] Wikipedia, \"Discrete cosine transform\",\n           https://en.wikipedia.org/wiki/Discrete_cosine_transform\n    \n    Examples\n    --------\n    The Type 1 DCT is equivalent to the FFT (though faster) for real,\n    even-symmetrical inputs. The output is also real and even-symmetrical.\n    Half of the FFT input is used to generate half of the FFT output:\n    \n    >>> from scipy.fft import fft, dct\n    >>> import numpy as np\n    >>> fft(np.array([4., 3., 5., 10., 5., 3.])).real\n    array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])\n    >>> dct(np.array([4., 3., 5., 10.]), 1)\n    array([ 30.,  -8.,   6.,  -2.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "60c3a4c01f969bfe294f899609c5961d02197cd6917dbd36d0b40a490c0dd0bc",
            "fields": [
                {
                    "id": "227rbvt1",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qrw1xjzo",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DCT (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bt1j5adh",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transform.  If ``n < x.shape[axis]``, `x` is\ntruncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\ndefault results in ``n = x.shape[axis]``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zly1lntx",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis along which the dct is computed; the default is over the\nlast axis (i.e., ``axis=-1``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jam4p_zx",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m1lvcdlv",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y8ha81_y",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "de57qis1",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized DCT variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bz3hxp7i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.dct",
                    "defaultValue": "scipy.fft.dct",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oc54fiy3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x9qzumgz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bxvm1cw9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r8qsbtii",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s3hrlxco",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o33ay04p",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "urmg8m6o",
            "name": "fft.dctn",
            "description": "Return multidimensional Discrete Cosine Transform along the specified axes.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DCT (see Notes). Default type is 2.\n    s : int or array_like of ints or None, optional\n        The shape of the result. If both `s` and `axes` (see below) are None,\n        `s` is ``x.shape``; if `s` is None but `axes` is not None, then `s` is\n        ``numpy.take(x.shape, axes, axis=0)``.\n        If ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\n        If ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n        ``s[i]``.\n        If any element of `s` is -1, the size of the corresponding dimension of\n        `x` is used.\n    axes : int or array_like of ints or None, optional\n        Axes over which the DCT is computed. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized DCT variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    y : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    idctn : Inverse multidimensional DCT\n    \n    Notes\n    -----\n    For full details of the DCT types and normalization modes, as well as\n    references, see `dct`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.fft import dctn, idctn\n    >>> rng = np.random.default_rng()\n    >>> y = rng.standard_normal((16, 16))\n    >>> np.allclose(y, idctn(dctn(y)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5bdac511f95cb192d5a53e6ea93d5c468f885c9abe2405db6f7e49ab1fc50ed8",
            "fields": [
                {
                    "id": "yu7zu9mn",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "98i6pvl8",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DCT (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8pc_ci8",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the result. If both `s` and `axes` (see below) are None,\n`s` is ``x.shape``; if `s` is None but `axes` is not None, then `s` is\n``numpy.take(x.shape, axes, axis=0)``.\nIf ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\nIf ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n``s[i]``.\nIf any element of `s` is -1, the size of the corresponding dimension of\n`x` is used.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t_kkod4h",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which the DCT is computed. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "256q29o5",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x59f23w6",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b9t_n4ov",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0nqs872o",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized DCT variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zm37vyg3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.dctn",
                    "defaultValue": "scipy.fft.dctn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ylimazva",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7jyg2d2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qhqfkoti",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zt4y8n6b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_khea1a",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pa785bmt",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7j0ufh88",
            "name": "fft.dst",
            "description": "Return the Discrete Sine Transform of arbitrary type sequence x.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DST (see Notes). Default type is 2.\n    n : int, optional\n        Length of the transform. If ``n < x.shape[axis]``, `x` is\n        truncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\n        default results in ``n = x.shape[axis]``.\n    axis : int, optional\n        Axis along which the dst is computed; the default is over the\n        last axis (i.e., ``axis=-1``).\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized DST variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    dst : ndarray of reals\n        The transformed input array.\n    \n    See Also\n    --------\n    idst : Inverse DST\n    \n    Notes\n    -----\n    .. warning:: For ``type in {2, 3}``, ``norm=\"ortho\"`` breaks the direct\n                 correspondence with the direct Fourier transform. To recover\n                 it you must specify ``orthogonalize=False``.\n    \n    For ``norm=\"ortho\"`` both the `dst` and `idst` are scaled by the same\n    overall factor in both directions. By default, the transform is also\n    orthogonalized which for types 2 and 3 means the transform definition is\n    modified to give orthogonality of the DST matrix (see below).\n    \n    For ``norm=\"backward\"``, there is no scaling on the `dst` and the `idst` is\n    scaled by ``1/N`` where ``N`` is the \"logical\" size of the DST.\n    \n    There are, theoretically, 8 types of the DST for different combinations of\n    even/odd boundary conditions and boundary off sets [1]_, only the first\n    4 types are implemented in SciPy.\n    \n    **Type I**\n    \n    There are several definitions of the DST-I; we use the following for\n    ``norm=\"backward\"``. DST-I assumes the input is odd around :math:`n=-1` and\n    :math:`n=N`.\n    \n    .. math::\n    \n        y_k = 2 \\sum_{n=0}^{N-1} x_n \\sin\\left(\\frac{\\pi(k+1)(n+1)}{N+1}\\right)\n    \n    Note that the DST-I is only supported for input size > 1.\n    The (unnormalized) DST-I is its own inverse, up to a factor :math:`2(N+1)`.\n    The orthonormalized DST-I is exactly its own inverse.\n    \n    ``orthogonalize`` has no effect here, as the DST-I matrix is already\n    orthogonal up to a scale factor of ``2N``.\n    \n    **Type II**\n    \n    There are several definitions of the DST-II; we use the following for\n    ``norm=\"backward\"``. DST-II assumes the input is odd around :math:`n=-1/2` and\n    :math:`n=N-1/2`; the output is odd around :math:`k=-1` and even around :math:`k=N-1`\n    \n    .. math::\n    \n        y_k = 2 \\sum_{n=0}^{N-1} x_n \\sin\\left(\\frac{\\pi(k+1)(2n+1)}{2N}\\right)\n    \n    If ``orthogonalize=True``, ``y[-1]`` is divided :math:`\\sqrt{2}` which, when\n    combined with ``norm=\"ortho\"``, makes the corresponding matrix of\n    coefficients orthonormal (``O @ O.T = np.eye(N)``).\n    \n    **Type III**\n    \n    There are several definitions of the DST-III, we use the following (for\n    ``norm=\"backward\"``). DST-III assumes the input is odd around :math:`n=-1` and\n    even around :math:`n=N-1`\n    \n    .. math::\n    \n        y_k = (-1)^k x_{N-1} + 2 \\sum_{n=0}^{N-2} x_n \\sin\\left(\n        \\frac{\\pi(2k+1)(n+1)}{2N}\\right)\n    \n    If ``orthogonalize=True``, ``x[-1]`` is multiplied by :math:`\\sqrt{2}`\n    which, when combined with ``norm=\"ortho\"``, makes the corresponding matrix\n    of coefficients orthonormal (``O @ O.T = np.eye(N)``).\n    \n    The (unnormalized) DST-III is the inverse of the (unnormalized) DST-II, up\n    to a factor :math:`2N`. The orthonormalized DST-III is exactly the inverse of the\n    orthonormalized DST-II.\n    \n    **Type IV**\n    \n    There are several definitions of the DST-IV, we use the following (for\n    ``norm=\"backward\"``). DST-IV assumes the input is odd around :math:`n=-0.5` and\n    even around :math:`n=N-0.5`\n    \n    .. math::\n    \n        y_k = 2 \\sum_{n=0}^{N-1} x_n \\sin\\left(\\frac{\\pi(2k+1)(2n+1)}{4N}\\right)\n    \n    ``orthogonalize`` has no effect here, as the DST-IV matrix is already\n    orthogonal up to a scale factor of ``2N``.\n    \n    The (unnormalized) DST-IV is its own inverse, up to a factor :math:`2N`. The\n    orthonormalized DST-IV is exactly its own inverse.\n    \n    Examples\n    --------\n    Compute the DST of a simple 1D array:\n    \n    >>> import numpy as np\n    >>> from scipy.fft import dst\n    >>> x = np.array([1, -1, 1, -1])\n    >>> dst(x, type=2)\n    array([0., 0., 0., 8.])\n    \n    This computes the Discrete Sine Transform (DST) of type-II for the input array. \n    The output contains the transformed values corresponding to the given input sequence\n    \n    References\n    ----------\n    .. [1] Wikipedia, \"Discrete sine transform\",\n           https://en.wikipedia.org/wiki/Discrete_sine_transform",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aa56bc91dddb39075487dadf58b869bb836f635d54b99df0c372ba4fd4bee3ae",
            "fields": [
                {
                    "id": "i37w0ig8",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ce5q_te",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DST (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8ta4qber",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transform. If ``n < x.shape[axis]``, `x` is\ntruncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\ndefault results in ``n = x.shape[axis]``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8qaa714",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis along which the dst is computed; the default is over the\nlast axis (i.e., ``axis=-1``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2y64e_2n",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1t81uux",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ppt40g6",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ccx5al0",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized DST variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yum76fzi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.dst",
                    "defaultValue": "scipy.fft.dst",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vmltfoja",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o6n8bjmg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "sdq121ue",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b96v3xym",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mikbvt6",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jkrtramy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "wc6ofbgr",
            "name": "fft.dstn",
            "description": "Return multidimensional Discrete Sine Transform along the specified axes.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DST (see Notes). Default type is 2.\n    s : int or array_like of ints or None, optional\n        The shape of the result.  If both `s` and `axes` (see below) are None,\n        `s` is ``x.shape``; if `s` is None but `axes` is not None, then `s` is\n        ``numpy.take(x.shape, axes, axis=0)``.\n        If ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\n        If ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n        ``s[i]``.\n        If any element of `shape` is -1, the size of the corresponding dimension\n        of `x` is used.\n    axes : int or array_like of ints or None, optional\n        Axes over which the DST is computed. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized DST variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    y : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    idstn : Inverse multidimensional DST\n    \n    Notes\n    -----\n    For full details of the DST types and normalization modes, as well as\n    references, see `dst`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.fft import dstn, idstn\n    >>> rng = np.random.default_rng()\n    >>> y = rng.standard_normal((16, 16))\n    >>> np.allclose(y, idstn(dstn(y)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "53eededcb8cc70bfe192e3154577c42e26021c2c40a4b741014913e7752e8b3f",
            "fields": [
                {
                    "id": "l101tvkc",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z0tdjrkx",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DST (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sp_g8k2m",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the result.  If both `s` and `axes` (see below) are None,\n`s` is ``x.shape``; if `s` is None but `axes` is not None, then `s` is\n``numpy.take(x.shape, axes, axis=0)``.\nIf ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\nIf ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n``s[i]``.\nIf any element of `shape` is -1, the size of the corresponding dimension\nof `x` is used.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "12o03bt4",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which the DST is computed. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qkzfhvt6",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s1jkatpg",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uzxp_vba",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jo9usctr",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized DST variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5kp84zu1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.dstn",
                    "defaultValue": "scipy.fft.dstn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q5y_i1a5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tnqzwblt",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9zwcpxop",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dffr7gdj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sxr8v815",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yeexrbsq",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lva2y81w",
            "name": "fft.fft",
            "description": "Compute the 1-D discrete Fourier Transform.\n    \n    This function computes the 1-D *n*-point discrete Fourier\n    Transform (DFT) with the efficient Fast Fourier Transform (FFT)\n    algorithm [1]_.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, can be complex.\n    n : int, optional\n        Length of the transformed axis of the output.\n        If `n` is smaller than the length of the input, the input is cropped.\n        If it is larger, the input is padded with zeros. If `n` is not given,\n        the length of the input along the axis specified by `axis` is used.\n    axis : int, optional\n        Axis over which to compute the FFT. If not given, the last axis is\n        used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode. Default is \"backward\", meaning no normalization on\n        the forward transforms and scaling by ``1/n`` on the `ifft`.\n        \"forward\" instead applies the ``1/n`` factor on the forward transform.\n        For ``norm=\"ortho\"``, both directions are scaled by ``1/sqrt(n)``.\n    \n        .. versionadded:: 1.6.0\n           ``norm={\"forward\", \"backward\"}`` options were added\n    \n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See the notes below for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``. See below for more\n        details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n    \n    Raises\n    ------\n    IndexError\n        if `axes` is larger than the last axis of `x`.\n    \n    See Also\n    --------\n    ifft : The inverse of `fft`.\n    fft2 : The 2-D FFT.\n    fftn : The N-D FFT.\n    rfftn : The N-D FFT of real input.\n    fftfreq : Frequency bins for given FFT parameters.\n    next_fast_len : Size to pad input to for most efficient transforms\n    \n    Notes\n    -----\n    FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform\n    (DFT) can be calculated efficiently, by using symmetries in the calculated\n    terms. The symmetry is highest when `n` is a power of 2, and the transform\n    is therefore most efficient for these sizes. For poorly factorizable sizes,\n    `scipy.fft` uses Bluestein's algorithm [2]_ and so is never worse than\n    O(`n` log `n`). Further performance improvements may be seen by zero-padding\n    the input using `next_fast_len`.\n    \n    If ``x`` is a 1d array, then the `fft` is equivalent to ::\n    \n        y[k] = np.sum(x * np.exp(-2j * np.pi * k * np.arange(n)/n))\n    \n    The frequency term ``f=k/n`` is found at ``y[k]``. At ``y[n/2]`` we reach\n    the Nyquist frequency and wrap around to the negative-frequency terms. So,\n    for an 8-point transform, the frequencies of the result are\n    [0, 1, 2, 3, -4, -3, -2, -1]. To rearrange the fft output so that the\n    zero-frequency component is centered, like [-4, -3, -2, -1, 0, 1, 2, 3],\n    use `fftshift`.\n    \n    Transforms can be done in single, double, or extended precision (long\n    double) floating point. Half precision inputs will be converted to single\n    precision and non-floating-point inputs will be converted to double\n    precision.\n    \n    If the data type of ``x`` is real, a \"real FFT\" algorithm is automatically\n    used, which roughly halves the computation time. To increase efficiency\n    a little further, use `rfft`, which does the same calculation, but only\n    outputs half of the symmetrical spectrum. If the data are both real and\n    symmetrical, the `dct` can again double the efficiency, by generating\n    half of the spectrum from half of the signal.\n    \n    When ``overwrite_x=True`` is specified, the memory referenced by ``x`` may\n    be used by the implementation in any way. This may include reusing the\n    memory for the result, but this is in no way guaranteed. You should not\n    rely on the contents of ``x`` after the transform as this may change in\n    future without warning.\n    \n    The ``workers`` argument specifies the maximum number of parallel jobs to\n    split the FFT computation into. This will execute independent 1-D\n    FFTs within ``x``. So, ``x`` must be at least 2-D and the\n    non-transformed axes must be large enough to split into chunks. If ``x`` is\n    too small, fewer jobs may be used than requested.\n    \n    References\n    ----------\n    .. [1] Cooley, James W., and John W. Tukey, 1965, \"An algorithm for the\n           machine calculation of complex Fourier series,\" *Math. Comput.*\n           19: 297-301.\n    .. [2] Bluestein, L., 1970, \"A linear filtering approach to the\n           computation of discrete Fourier transform\". *IEEE Transactions on\n           Audio and Electroacoustics.* 18 (4): 451-455.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> scipy.fft.fft(np.exp(2j * np.pi * np.arange(8) / 8))\n    array([-2.33486982e-16+1.14423775e-17j,  8.00000000e+00-1.25557246e-15j,\n            2.33486982e-16+2.33486982e-16j,  0.00000000e+00+1.22464680e-16j,\n           -1.14423775e-17+2.33486982e-16j,  0.00000000e+00+5.20784380e-16j,\n            1.14423775e-17+1.14423775e-17j,  0.00000000e+00+1.22464680e-16j])\n    \n    In this example, real input has an FFT which is Hermitian, i.e., symmetric\n    in the real part and anti-symmetric in the imaginary part:\n    \n    >>> from scipy.fft import fft, fftfreq, fftshift\n    >>> import matplotlib.pyplot as plt\n    >>> t = np.arange(256)\n    >>> sp = fftshift(fft(np.sin(t)))\n    >>> freq = fftshift(fftfreq(t.shape[-1]))\n    >>> plt.plot(freq, sp.real, freq, sp.imag)\n    [<matplotlib.lines.Line2D object at 0x...>,\n     <matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0840548373d69b1896d04606ed2054a281f63d067c9af4355b4b358242327b29",
            "fields": [
                {
                    "id": "4_jz1h42",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, can be complex.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y9w3teek",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transformed axis of the output.\nIf `n` is smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros. If `n` is not given,\nthe length of the input along the axis specified by `axis` is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3e4pimvm",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis over which to compute the FFT. If not given, the last axis is\nused.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k5rizoml",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode. Default is \"backward\", meaning no normalization on\nthe forward transforms and scaling by ``1/n`` on the `ifft`.\n\"forward\" instead applies the ``1/n`` factor on the forward transform.\nFor ``norm=\"ortho\"``, both directions are scaled by ``1/sqrt(n)``.\n\n.. versionadded:: 1.6.0\n   ``norm={\"forward\", \"backward\"}`` options were added",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gfgle97j",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee the notes below for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0xnxczt_",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``. See below for more\ndetails.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6izwqx1v",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "slr6nw00",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fft",
                    "defaultValue": "scipy.fft.fft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0rrtb0_w",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kumsc_f",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f52a4q_h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "573r1ixv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g4g8vp9z",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8c2ssq42",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "lcn_uzdf",
            "name": "fft.fft2",
            "description": "Compute the 2-D discrete Fourier Transform\n    \n    This function computes the N-D discrete Fourier Transform\n    over any axes in an M-D array by means of the\n    Fast Fourier Transform (FFT). By default, the transform is computed over\n    the last two axes of the input array, i.e., a 2-dimensional FFT.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, can be complex\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        This corresponds to ``n`` for ``fft(x, n)``.\n        Along each axis, if the given shape is smaller than that of the input,\n        the input is cropped. If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input along the axes specified\n        by `axes` is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT. If not given, the last two axes are\n        used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or the last two axes if `axes` is not given.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length, or `axes` not given and\n        ``len(s) != 2``.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    ifft2 : The inverse 2-D FFT.\n    fft : The 1-D FFT.\n    fftn : The N-D FFT.\n    fftshift : Shifts zero-frequency terms to the center of the array.\n        For 2-D input, swaps first and third quadrants, and second\n        and fourth quadrants.\n    \n    Notes\n    -----\n    `fft2` is just `fftn` with a different default for `axes`.\n    \n    The output, analogously to `fft`, contains the term for zero frequency in\n    the low-order corner of the transformed axes, the positive frequency terms\n    in the first half of these axes, the term for the Nyquist frequency in the\n    middle of the axes and the negative frequency terms in the second half of\n    the axes, in order of decreasingly negative frequency.\n    \n    See `fftn` for details and a plotting example, and `fft` for\n    definitions and conventions used.\n    \n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.mgrid[:5, :5][0]\n    >>> scipy.fft.fft2(x)\n    array([[ 50.  +0.j        ,   0.  +0.j        ,   0.  +0.j        , # may vary\n              0.  +0.j        ,   0.  +0.j        ],\n           [-12.5+17.20477401j,   0.  +0.j        ,   0.  +0.j        ,\n              0.  +0.j        ,   0.  +0.j        ],\n           [-12.5 +4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,\n              0.  +0.j        ,   0.  +0.j        ],\n           [-12.5 -4.0614962j ,   0.  +0.j        ,   0.  +0.j        ,\n              0.  +0.j        ,   0.  +0.j        ],\n           [-12.5-17.20477401j,   0.  +0.j        ,   0.  +0.j        ,\n              0.  +0.j        ,   0.  +0.j        ]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a436f0364eacade12bc397ee75fd808eb879969138f4faceff47af14feea66db",
            "fields": [
                {
                    "id": "l50u5nly",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, can be complex",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h3a70xa2",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length of each transformed axis) of the output\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\nThis corresponds to ``n`` for ``fft(x, n)``.\nAlong each axis, if the given shape is smaller than that of the input,\nthe input is cropped. If it is larger, the input is padded with zeros.\nif `s` is not given, the shape of the input along the axes specified\nby `axes` is used.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmfr0ax3",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Axes over which to compute the FFT. If not given, the last two axes are\nused.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm5gyt1n",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s6ufl7ej",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p_rsq3ac",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9e3nsbk",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vpyqdwh9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fft2",
                    "defaultValue": "scipy.fft.fft2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cxs46z7c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h8kkrakg",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "isw7cx7a",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ducxq64f",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d4igg7f3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ttoh2gm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "jtgdqwgk",
            "name": "fft.fftfreq",
            "description": "Return the Discrete Fourier Transform sample frequencies.\n    \n    The returned float array `f` contains the frequency bin centers in cycles\n    per unit of the sample spacing (with zero at the start).  For instance, if\n    the sample spacing is in seconds, then the frequency unit is cycles/second.\n    \n    Given a window length `n` and a sample spacing `d`::\n    \n      f = [0, 1, ...,   n/2-1,     -n/2, ..., -1] / (d*n)   if n is even\n      f = [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)   if n is odd\n    \n    Parameters\n    ----------\n    n : int\n        Window length.\n    d : scalar, optional\n        Sample spacing (inverse of the sampling rate). Defaults to 1.\n    xp : array_namespace, optional\n        The namespace for the return array. Default is None, where NumPy is used.\n    device : device, optional\n        The device for the return array.\n        Only valid when `xp.fft.fftfreq` implements the device parameter.\n     \n    Returns\n    -------\n    f : ndarray\n        Array of length `n` containing the sample frequencies.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.fft\n    >>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5], dtype=float)\n    >>> fourier = scipy.fft.fft(signal)\n    >>> n = signal.size\n    >>> timestep = 0.1\n    >>> freq = scipy.fft.fftfreq(n, d=timestep)\n    >>> freq\n    array([ 0.  ,  1.25,  2.5 , ..., -3.75, -2.5 , -1.25])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "811c0395ac66dfff69945a1ab2ee546e450198dbd525355b43e2bc512f1593c2",
            "fields": [
                {
                    "id": "zb5k7f1w",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Window length.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gej_gsnv",
                    "encoding": "",
                    "name": "d",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Sample spacing (inverse of the sampling rate). Defaults to 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4e7po54a",
                    "encoding": "",
                    "name": "xp",
                    "value": "",
                    "defaultValue": "",
                    "description": "The namespace for the return array. Default is None, where NumPy is used.",
                    "type": "arraynamespace",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4s8jlouv",
                    "encoding": "",
                    "name": "device",
                    "value": "",
                    "defaultValue": "",
                    "description": "The device for the return array.\nOnly valid when `xp.fft.fftfreq` implements the device parameter.",
                    "type": "device",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8z89h950",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fftfreq",
                    "defaultValue": "scipy.fft.fftfreq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovmj1kks",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5xbw1u9i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pfkk53yg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ecuxbwcy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3pkgg43j",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z5o3ni7a",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "2vjb958a",
            "name": "fft.fftn",
            "description": "Compute the N-D discrete Fourier Transform.\n    \n    This function computes the N-D discrete Fourier Transform over\n    any number of axes in an M-D array by means of the Fast Fourier\n    Transform (FFT).\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, can be complex.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        This corresponds to ``n`` for ``fft(x, n)``.\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped. If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input along the axes specified\n        by `axes` is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` and `x`,\n        as explained in the parameters section above.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    ifftn : The inverse of `fftn`, the inverse N-D FFT.\n    fft : The 1-D FFT, with definitions and conventions used.\n    rfftn : The N-D FFT of real input.\n    fft2 : The 2-D FFT.\n    fftshift : Shifts zero-frequency terms to centre of array.\n    \n    Notes\n    -----\n    The output, analogously to `fft`, contains the term for zero frequency in\n    the low-order corner of all axes, the positive frequency terms in the\n    first half of all axes, the term for the Nyquist frequency in the middle\n    of all axes and the negative frequency terms in the second half of all\n    axes, in order of decreasingly negative frequency.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.mgrid[:3, :3, :3][0]\n    >>> scipy.fft.fftn(x, axes=(1, 2))\n    array([[[ 0.+0.j,   0.+0.j,   0.+0.j], # may vary\n            [ 0.+0.j,   0.+0.j,   0.+0.j],\n            [ 0.+0.j,   0.+0.j,   0.+0.j]],\n           [[ 9.+0.j,   0.+0.j,   0.+0.j],\n            [ 0.+0.j,   0.+0.j,   0.+0.j],\n            [ 0.+0.j,   0.+0.j,   0.+0.j]],\n           [[18.+0.j,   0.+0.j,   0.+0.j],\n            [ 0.+0.j,   0.+0.j,   0.+0.j],\n            [ 0.+0.j,   0.+0.j,   0.+0.j]]])\n    >>> scipy.fft.fftn(x, (2, 2), axes=(0, 1))\n    array([[[ 2.+0.j,  2.+0.j,  2.+0.j], # may vary\n            [ 0.+0.j,  0.+0.j,  0.+0.j]],\n           [[-2.+0.j, -2.+0.j, -2.+0.j],\n            [ 0.+0.j,  0.+0.j,  0.+0.j]]])\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> [X, Y] = np.meshgrid(2 * np.pi * np.arange(200) / 12,\n    ...                      2 * np.pi * np.arange(200) / 34)\n    >>> S = np.sin(X) + np.cos(Y) + rng.uniform(0, 1, X.shape)\n    >>> FS = scipy.fft.fftn(S)\n    >>> plt.imshow(np.log(np.abs(scipy.fft.fftshift(FS))**2))\n    <matplotlib.image.AxesImage object at 0x...>\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0bbc24a069c765e95199d1ff06bb9675f548386a134e952dcdd9ef37c0a16549",
            "fields": [
                {
                    "id": "5_hlq13d",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, can be complex.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "muf0hpxo",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length of each transformed axis) of the output\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\nThis corresponds to ``n`` for ``fft(x, n)``.\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped. If it is larger, the input is padded with zeros.\nif `s` is not given, the shape of the input along the axes specified\nby `axes` is used.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ovrs1uke",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to compute the FFT. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h17ce7oq",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "060lwefi",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j7fvyzpf",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bvkh6dh0",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "smo467p9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fftn",
                    "defaultValue": "scipy.fft.fftn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d26a_pc1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_i939jam",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "bl4gxkyo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uef_cd59",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vm4wd_82",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2y08u7ev",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "akmw9v_d",
            "name": "fft.fftshift",
            "description": "Shift the zero-frequency component to the center of the spectrum.\n    \n    This function swaps half-spaces for all axes listed (defaults to all).\n    Note that ``y[0]`` is the Nyquist component only if ``len(x)`` is even.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    axes : int or shape tuple, optional\n        Axes over which to shift.  Default is None, which shifts all axes.\n    \n    Returns\n    -------\n    y : ndarray\n        The shifted array.\n    \n    See Also\n    --------\n    ifftshift : The inverse of `fftshift`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> freqs = np.fft.fftfreq(10, 0.1)\n    >>> freqs\n    array([ 0.,  1.,  2., ..., -3., -2., -1.])\n    >>> np.fft.fftshift(freqs)\n    array([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n    \n    Shift the zero-frequency component only along the second axis:\n    \n    >>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)\n    >>> freqs\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4., -4.],\n           [-3., -2., -1.]])\n    >>> np.fft.fftshift(freqs, axes=(1,))\n    array([[ 2.,  0.,  1.],\n           [-4.,  3.,  4.],\n           [-1., -3., -2.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "49f65d5c78f341300eab3e50feb65eb66d130e2119f2cc372e82b3ae746a0085",
            "fields": [
                {
                    "id": "0kuk42fj",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n13moa52",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to shift.  Default is None, which shifts all axes.",
                    "type": "int or shape tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fa58hu3j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fftshift",
                    "defaultValue": "scipy.fft.fftshift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fd1l1bxs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v4l9nwsc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "odu1pjja",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "78alwt0p",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xvexr8g2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kfafn8f4",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "qhp_w3kt",
            "name": "fft.fht",
            "description": "Compute the fast Hankel transform.\n    \n    Computes the discrete Hankel transform of a logarithmically spaced periodic\n    sequence using the FFTLog algorithm [1]_, [2]_.\n    \n    Parameters\n    ----------\n    a : array_like (..., n)\n        Real periodic input array, uniformly logarithmically spaced.  For\n        multidimensional input, the transform is performed over the last axis.\n    dln : float\n        Uniform logarithmic spacing of the input array.\n    mu : float\n        Order of the Hankel transform, any positive or negative real number.\n    offset : float, optional\n        Offset of the uniform logarithmic spacing of the output array.\n    bias : float, optional\n        Exponent of power law bias, any positive or negative real number.\n    \n    Returns\n    -------\n    A : array_like (..., n)\n        The transformed output array, which is real, periodic, uniformly\n        logarithmically spaced, and of the same shape as the input array.\n    \n    See Also\n    --------\n    ifht : The inverse of `fht`.\n    fhtoffset : Return an optimal offset for `fht`.\n    \n    Notes\n    -----\n    This function computes a discrete version of the Hankel transform\n    \n    .. math::\n    \n        A(k) = \\int_{0}^{\\infty} \\! a(r) \\, J_\\mu(kr) \\, k \\, dr \\;,\n    \n    where :math:`J_\\mu` is the Bessel function of order :math:`\\mu`.  The index\n    :math:`\\mu` may be any real number, positive or negative.  Note that the\n    numerical Hankel transform uses an integrand of :math:`k \\, dr`, while the\n    mathematical Hankel transform is commonly defined using :math:`r \\, dr`.\n    \n    The input array `a` is a periodic sequence of length :math:`n`, uniformly\n    logarithmically spaced with spacing `dln`,\n    \n    .. math::\n    \n        a_j = a(r_j) \\;, \\quad\n        r_j = r_c \\exp[(j-j_c) \\, \\mathtt{dln}]\n    \n    centred about the point :math:`r_c`.  Note that the central index\n    :math:`j_c = (n-1)/2` is half-integral if :math:`n` is even, so that\n    :math:`r_c` falls between two input elements.  Similarly, the output\n    array `A` is a periodic sequence of length :math:`n`, also uniformly\n    logarithmically spaced with spacing `dln`\n    \n    .. math::\n    \n       A_j = A(k_j) \\;, \\quad\n       k_j = k_c \\exp[(j-j_c) \\, \\mathtt{dln}]\n    \n    centred about the point :math:`k_c`.\n    \n    The centre points :math:`r_c` and :math:`k_c` of the periodic intervals may\n    be chosen arbitrarily, but it would be usual to choose the product\n    :math:`k_c r_c = k_j r_{n-1-j} = k_{n-1-j} r_j` to be unity.  This can be\n    changed using the `offset` parameter, which controls the logarithmic offset\n    :math:`\\log(k_c) = \\mathtt{offset} - \\log(r_c)` of the output array.\n    Choosing an optimal value for `offset` may reduce ringing of the discrete\n    Hankel transform.\n    \n    If the `bias` parameter is nonzero, this function computes a discrete\n    version of the biased Hankel transform\n    \n    .. math::\n    \n        A(k) = \\int_{0}^{\\infty} \\! a_q(r) \\, (kr)^q \\, J_\\mu(kr) \\, k \\, dr\n    \n    where :math:`q` is the value of `bias`, and a power law bias\n    :math:`a_q(r) = a(r) \\, (kr)^{-q}` is applied to the input sequence.\n    Biasing the transform can help approximate the continuous transform of\n    :math:`a(r)` if there is a value :math:`q` such that :math:`a_q(r)` is\n    close to a periodic sequence, in which case the resulting :math:`A(k)` will\n    be close to the continuous transform.\n    \n    References\n    ----------\n    .. [1] Talman J. D., 1978, J. Comp. Phys., 29, 35\n    .. [2] Hamilton A. J. S., 2000, MNRAS, 312, 257 (astro-ph/9905191)\n    \n    Examples\n    --------\n    \n    This example is the adapted version of ``fftlogtest.f`` which is provided\n    in [2]_. It evaluates the integral\n    \n    .. math::\n    \n        \\int^\\infty_0 r^{\\mu+1} \\exp(-r^2/2) J_\\mu(kr) k dr\n        = k^{\\mu+1} \\exp(-k^2/2) .\n    \n    >>> import numpy as np\n    >>> from scipy import fft\n    >>> import matplotlib.pyplot as plt\n    \n    Parameters for the transform.\n    \n    >>> mu = 0.0                     # Order mu of Bessel function\n    >>> r = np.logspace(-7, 1, 128)  # Input evaluation points\n    >>> dln = np.log(r[1]/r[0])      # Step size\n    >>> offset = fft.fhtoffset(dln, initial=-6*np.log(10), mu=mu)\n    >>> k = np.exp(offset)/r[::-1]   # Output evaluation points\n    \n    Define the analytical function.\n    \n    >>> def f(x, mu):\n    ...     \"\"\"Analytical function: x^(mu+1) exp(-x^2/2).\"\"\"\n    ...     return x**(mu + 1)*np.exp(-x**2/2)\n    \n    Evaluate the function at ``r`` and compute the corresponding values at\n    ``k`` using FFTLog.\n    \n    >>> a_r = f(r, mu)\n    >>> fht = fft.fht(a_r, dln, mu=mu, offset=offset)\n    \n    For this example we can actually compute the analytical response (which in\n    this case is the same as the input function) for comparison and compute the\n    relative error.\n    \n    >>> a_k = f(k, mu)\n    >>> rel_err = abs((fht-a_k)/a_k)\n    \n    Plot the result.\n    \n    >>> figargs = {'sharex': True, 'sharey': True, 'constrained_layout': True}\n    >>> fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4), **figargs)\n    >>> ax1.set_title(r'$r^{\\mu+1}\\ \\exp(-r^2/2)$')\n    >>> ax1.loglog(r, a_r, 'k', lw=2)\n    >>> ax1.set_xlabel('r')\n    >>> ax2.set_title(r'$k^{\\mu+1} \\exp(-k^2/2)$')\n    >>> ax2.loglog(k, a_k, 'k', lw=2, label='Analytical')\n    >>> ax2.loglog(k, fht, 'C3--', lw=2, label='FFTLog')\n    >>> ax2.set_xlabel('k')\n    >>> ax2.legend(loc=3, framealpha=1)\n    >>> ax2.set_ylim([1e-10, 1e1])\n    >>> ax2b = ax2.twinx()\n    >>> ax2b.loglog(k, rel_err, 'C0', label='Rel. Error (-)')\n    >>> ax2b.set_ylabel('Rel. Error (-)', color='C0')\n    >>> ax2b.tick_params(axis='y', labelcolor='C0')\n    >>> ax2b.legend(loc=4, framealpha=1)\n    >>> ax2b.set_ylim([1e-9, 1e-3])\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5022569ac702013480aacc73baf0990a293fe2eefe9d3e66dc48a6f08a2a5cf0",
            "fields": [
                {
                    "id": "9rrflg_8",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real periodic input array, uniformly logarithmically spaced.  For\nmultidimensional input, the transform is performed over the last axis.",
                    "type": "arraylike (..., n)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "odezsuzv",
                    "encoding": "",
                    "name": "dln",
                    "value": "",
                    "defaultValue": "",
                    "description": "Uniform logarithmic spacing of the input array.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8dfhemw",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the Hankel transform, any positive or negative real number.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3kn8kchb",
                    "encoding": "",
                    "name": "offset",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Offset of the uniform logarithmic spacing of the output array.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kbqs60h8",
                    "encoding": "",
                    "name": "bias",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Exponent of power law bias, any positive or negative real number.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ru523og2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fht",
                    "defaultValue": "scipy.fft.fht",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pw73xowj",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vr2b_7nj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "h9bcakzz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1lvz9yb1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mh54nasj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uh45g4wh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "drg7jnsy",
            "name": "fft.fhtoffset",
            "description": "Return optimal offset for a fast Hankel transform.\n    \n    Returns an offset close to `initial` that fulfils the low-ringing\n    condition of [1]_ for the fast Hankel transform `fht` with logarithmic\n    spacing `dln`, order `mu` and bias `bias`.\n    \n    Parameters\n    ----------\n    dln : float\n        Uniform logarithmic spacing of the transform.\n    mu : float\n        Order of the Hankel transform, any positive or negative real number.\n    initial : float, optional\n        Initial value for the offset. Returns the closest value that fulfils\n        the low-ringing condition.\n    bias : float, optional\n        Exponent of power law bias, any positive or negative real number.\n    \n    Returns\n    -------\n    offset : float\n        Optimal offset of the uniform logarithmic spacing of the transform that\n        fulfils a low-ringing condition.\n    \n    Examples\n    --------\n    >>> from scipy.fft import fhtoffset\n    >>> dln = 0.1\n    >>> mu = 2.0\n    >>> initial = 0.5\n    >>> bias = 0.0\n    >>> offset = fhtoffset(dln, mu, initial, bias)\n    >>> offset\n    0.5454581477676637\n    \n    See Also\n    --------\n    fht : Definition of the fast Hankel transform.\n    \n    References\n    ----------\n    .. [1] Hamilton A. J. S., 2000, MNRAS, 312, 257 (astro-ph/9905191)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "31f2ec3c2bb2efe1769f6d6a2cd396abe581da0acf509fd502ba929d3b799f74",
            "fields": [
                {
                    "id": "xvmp0wh3",
                    "encoding": "",
                    "name": "dln",
                    "value": "",
                    "defaultValue": "",
                    "description": "Uniform logarithmic spacing of the transform.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zd1xr9sr",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the Hankel transform, any positive or negative real number.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mp2n134f",
                    "encoding": "",
                    "name": "initial",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Initial value for the offset. Returns the closest value that fulfils\nthe low-ringing condition.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s31397vi",
                    "encoding": "",
                    "name": "bias",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Exponent of power law bias, any positive or negative real number.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9saxyzvr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.fhtoffset",
                    "defaultValue": "scipy.fft.fhtoffset",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh1jz0h2",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8m2arknu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0xjk4vl2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7xt9kz5r",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cofx8dh5",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zcatpdf1",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g4r9k_49",
            "name": "fft.get_workers",
            "description": "Returns the default number of workers within the current context\n    \n    Examples\n    --------\n    >>> from scipy import fft\n    >>> fft.get_workers()\n    1\n    >>> with fft.set_workers(4):\n    ...     fft.get_workers()\n    4",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "820768bac11c9f172c462d19e9da8a00632abd83b8e90c4ca43102f729042e59",
            "fields": [
                {
                    "id": "wu5bnq1o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.get_workers",
                    "defaultValue": "scipy.fft.get_workers",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y1b7o_vg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp1ly5pb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "dask1aj0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cel0yfh_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40j1yu7h",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ncvf0zi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "cob1i5id",
            "name": "fft.hfft",
            "description": "Compute the FFT of a signal that has Hermitian symmetry, i.e., a real\n    spectrum.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    n : int, optional\n        Length of the transformed axis of the output. For `n` output\n        points, ``n//2 + 1`` input points are necessary. If the input is\n        longer than this, it is cropped. If it is shorter than this, it is\n        padded with zeros. If `n` is not given, it is taken to be ``2*(m-1)``,\n        where ``m`` is the length of the input along the axis specified by\n        `axis`.\n    axis : int, optional\n        Axis over which to compute the FFT. If not given, the last\n        axis is used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See `fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n        The length of the transformed axis is `n`, or, if `n` is not given,\n        ``2*m - 2``, where ``m`` is the length of the transformed axis of\n        the input. To get an odd number of output points, `n` must be\n        specified, for instance, as ``2*m - 1`` in the typical case,\n    \n    Raises\n    ------\n    IndexError\n        If `axis` is larger than the last axis of `a`.\n    \n    See Also\n    --------\n    rfft : Compute the 1-D FFT for real input.\n    ihfft : The inverse of `hfft`.\n    hfftn : Compute the N-D FFT of a Hermitian signal.\n    \n    Notes\n    -----\n    `hfft`/`ihfft` are a pair analogous to `rfft`/`irfft`, but for the\n    opposite case: here the signal has Hermitian symmetry in the time\n    domain and is real in the frequency domain. So, here, it's `hfft`, for\n    which you must supply the length of the result if it is to be odd.\n    * even: ``ihfft(hfft(a, 2*len(a) - 2) == a``, within roundoff error,\n    * odd: ``ihfft(hfft(a, 2*len(a) - 1) == a``, within roundoff error.\n    \n    Examples\n    --------\n    >>> from scipy.fft import fft, hfft\n    >>> import numpy as np\n    >>> a = 2 * np.pi * np.arange(10) / 10\n    >>> signal = np.cos(a) + 3j * np.sin(3 * a)\n    >>> fft(signal).round(10)\n    array([ -0.+0.j,   5.+0.j,  -0.+0.j,  15.-0.j,   0.+0.j,   0.+0.j,\n            -0.+0.j, -15.-0.j,   0.+0.j,   5.+0.j])\n    >>> hfft(signal[:6]).round(10) # Input first half of signal\n    array([  0.,   5.,   0.,  15.,  -0.,   0.,   0., -15.,  -0.,   5.])\n    >>> hfft(signal, 10)  # Input entire signal and truncate\n    array([  0.,   5.,   0.,  15.,  -0.,   0.,   0., -15.,  -0.,   5.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d45fcaf9a9cb64919ce8381fe64b02b240028219c709f69f28b3e60d6751ada8",
            "fields": [
                {
                    "id": "m6qbw8cm",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xaw7am2z",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transformed axis of the output. For `n` output\npoints, ``n//2 + 1`` input points are necessary. If the input is\nlonger than this, it is cropped. If it is shorter than this, it is\npadded with zeros. If `n` is not given, it is taken to be ``2*(m-1)``,\nwhere ``m`` is the length of the input along the axis specified by\n`axis`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "876xqvnw",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis over which to compute the FFT. If not given, the last\naxis is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i_jmcg6p",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlcnr73u",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee `fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mgthcduw",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gx3qq6i0",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ym6qdcrj",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.hfft",
                    "defaultValue": "scipy.fft.hfft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9anq8k_4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v2ay82yy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qqc0siar",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6z8l7fjo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9j798q9s",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xsui28ek",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "seywxexl",
            "name": "fft.hfft2",
            "description": "Compute the 2-D FFT of a Hermitian complex array.\n    \n    Parameters\n    ----------\n    x : array\n        Input array, taken to be Hermitian complex.\n    s : sequence of ints, optional\n        Shape of the real output.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See `fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The real result of the 2-D Hermitian complex real FFT.\n    \n    See Also\n    --------\n    hfftn : Compute the N-D discrete Fourier Transform for Hermitian\n            complex input.\n    \n    Notes\n    -----\n    This is really just `hfftn` with different default behavior.\n    For more details see `hfftn`.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.array([[1+0j, 2+0j], [2+0j, 1+0j]])  # Hermitian-symmetric input\n    >>> scipy.fft.hfft2(x, s=(2, 2))\n    array([[ 6.,  0.],\n           [ 0., -2.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ed07ede01210399485153f1d3c57de78e0bb4730b0569e4e61e99e7fea2d5698",
            "fields": [
                {
                    "id": "oqnxr1px",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, taken to be Hermitian complex.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q01uak96",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the real output.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nrvlextp",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Axes over which to compute the FFT.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "poct7vnr",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "juvo280z",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee `fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rkdz0l4m",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q03r1ng6",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2je71vg",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.hfft2",
                    "defaultValue": "scipy.fft.hfft2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "77u_uxii",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5r8ut9f5",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e7yl4v7s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qaqvkgso",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwkq4zkg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5opgftrj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "i9b7_8pn",
            "name": "fft.hfftn",
            "description": "Compute the N-D FFT of Hermitian symmetric complex input, i.e., a\n    signal with a real spectrum.\n    \n    This function computes the N-D discrete Fourier Transform for a\n    Hermitian symmetric complex input over any number of axes in an\n    M-D array by means of the Fast Fourier Transform (FFT). In other\n    words, ``ihfftn(hfftn(x, s)) == x`` to within numerical accuracy. (``s``\n    here is ``x.shape`` with ``s[-1] = x.shape[-1] * 2 - 1``, this is necessary\n    for the same reason ``x.shape`` would be necessary for `irfft`.)\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). `s` is also the\n        number of input points used along this axis, except for the last axis,\n        where ``s[-1]//2+1`` points of the input are used.\n        Along any axis, if the shape indicated by `s` is smaller than that of\n        the input, the input is cropped. If it is larger, the input is padded\n        with zeros. If `s` is not given, the shape of the input along the axes\n        specified by axes is used. Except for the last axis which is taken to be\n        ``2*(m-1)`` where ``m`` is the length of the input along that axis.\n    axes : sequence of ints, optional\n        Axes over which to compute the inverse FFT. If not given, the last\n        `len(s)` axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` or `x`,\n        as explained in the parameters section above.\n        The length of each transformed axis is as given by the corresponding\n        element of `s`, or the length of the input in every axis except for the\n        last one if `s` is not given.  In the final transformed axis the length\n        of the output when `s` is not given is ``2*(m-1)`` where ``m`` is the\n        length of the final transformed axis of the input.  To get an odd\n        number of output points in the final axis, `s` must be specified.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    ihfftn : The inverse N-D FFT with real spectrum. Inverse of `hfftn`.\n    fft : The 1-D FFT, with definitions and conventions used.\n    rfft : Forward FFT of real input.\n    \n    Notes\n    -----\n    For a 1-D signal ``x`` to have a real spectrum, it must satisfy\n    the Hermitian property::\n    \n        x[i] == np.conj(x[-i]) for all i\n    \n    This generalizes into higher dimensions by reflecting over each axis in\n    turn::\n    \n        x[i, j, k, ...] == np.conj(x[-i, -j, -k, ...]) for all i, j, k, ...\n    \n    This should not be confused with a Hermitian matrix, for which the\n    transpose is its own conjugate::\n    \n        x[i, j] == np.conj(x[j, i]) for all i, j\n    \n    \n    The default value of `s` assumes an even output length in the final\n    transformation axis. When performing the final complex to real\n    transformation, the Hermitian symmetry requires that the last imaginary\n    component along that axis must be 0 and so it is ignored. To avoid losing\n    information, the correct length of the real input *must* be given.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.ones((3, 2, 2))\n    >>> scipy.fft.hfftn(x)\n    array([[[12.,  0.],\n            [ 0.,  0.]],\n           [[ 0.,  0.],\n            [ 0.,  0.]],\n           [[ 0.,  0.],\n            [ 0.,  0.]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "190340876d90987cd3e7afa1575aba2f97761492d550b94a8046e6c1950f9993",
            "fields": [
                {
                    "id": "7yy2ri99",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08uqhv52",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length of each transformed axis) of the output\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). `s` is also the\nnumber of input points used along this axis, except for the last axis,\nwhere ``s[-1]//2+1`` points of the input are used.\nAlong any axis, if the shape indicated by `s` is smaller than that of\nthe input, the input is cropped. If it is larger, the input is padded\nwith zeros. If `s` is not given, the shape of the input along the axes\nspecified by axes is used. Except for the last axis which is taken to be\n``2*(m-1)`` where ``m`` is the length of the input along that axis.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udlgi2n4",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to compute the inverse FFT. If not given, the last\n`len(s)` axes are used, or all axes if `s` is also not specified.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n2eq22gg",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l8vlf99d",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59sjeqdl",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fauyc9re",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "atjluqbr",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.hfftn",
                    "defaultValue": "scipy.fft.hfftn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "olqc2h0z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "11krb37j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kx1vfnpj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0xqur4h",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "husc0d7f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtbr4ksm",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bqodcw4k",
            "name": "fft.idct",
            "description": "Return the Inverse Discrete Cosine Transform of an arbitrary type sequence.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DCT (see Notes). Default type is 2.\n    n : int, optional\n        Length of the transform.  If ``n < x.shape[axis]``, `x` is\n        truncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\n        default results in ``n = x.shape[axis]``.\n    axis : int, optional\n        Axis along which the idct is computed; the default is over the\n        last axis (i.e., ``axis=-1``).\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized IDCT variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    idct : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    dct : Forward DCT\n    \n    Notes\n    -----\n    For a single dimension array `x`, ``idct(x, norm='ortho')`` is equal to\n    MATLAB ``idct(x)``.\n    \n    .. warning:: For ``type in {1, 2, 3}``, ``norm=\"ortho\"`` breaks the direct\n                 correspondence with the inverse direct Fourier transform. To\n                 recover it you must specify ``orthogonalize=False``.\n    \n    For ``norm=\"ortho\"`` both the `dct` and `idct` are scaled by the same\n    overall factor in both directions. By default, the transform is also\n    orthogonalized which for types 1, 2 and 3 means the transform definition is\n    modified to give orthogonality of the IDCT matrix (see `dct` for the full\n    definitions).\n    \n    'The' IDCT is the IDCT-II, which is the same as the normalized DCT-III.\n    \n    The IDCT is equivalent to a normal DCT except for the normalization and\n    type. DCT type 1 and 4 are their own inverse and DCTs 2 and 3 are each\n    other's inverses.\n    \n    Examples\n    --------\n    The Type 1 DCT is equivalent to the DFT for real, even-symmetrical\n    inputs. The output is also real and even-symmetrical. Half of the IFFT\n    input is used to generate half of the IFFT output:\n    \n    >>> from scipy.fft import ifft, idct\n    >>> import numpy as np\n    >>> ifft(np.array([ 30.,  -8.,   6.,  -2.,   6.,  -8.])).real\n    array([  4.,   3.,   5.,  10.,   5.,   3.])\n    >>> idct(np.array([ 30.,  -8.,   6.,  -2.]), 1)\n    array([  4.,   3.,   5.,  10.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a6b20abdda4688ff19114d98fe5e50e45fe998d4baf95d5bdb867381e006e98",
            "fields": [
                {
                    "id": "znxt4o9z",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sbjikdev",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DCT (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm0nd5v9",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transform.  If ``n < x.shape[axis]``, `x` is\ntruncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\ndefault results in ``n = x.shape[axis]``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j_0col4w",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis along which the idct is computed; the default is over the\nlast axis (i.e., ``axis=-1``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qqcv_t03",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ym1vfcd8",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxptviij",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rc_rq46h",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized IDCT variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "on1axx7w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.idct",
                    "defaultValue": "scipy.fft.idct",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "57nkbwkw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_up_jyb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gsl3bkt2",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0sf5874",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pt9w_8wp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_l87pztu",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4jpoqbrg",
            "name": "fft.idctn",
            "description": "Return multidimensional Inverse Discrete Cosine Transform along the specified axes.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DCT (see Notes). Default type is 2.\n    s : int or array_like of ints or None, optional\n        The shape of the result.  If both `s` and `axes` (see below) are\n        None, `s` is ``x.shape``; if `s` is None but `axes` is\n        not None, then `s` is ``numpy.take(x.shape, axes, axis=0)``.\n        If ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\n        If ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n        ``s[i]``.\n        If any element of `s` is -1, the size of the corresponding dimension of\n        `x` is used.\n    axes : int or array_like of ints or None, optional\n        Axes over which the IDCT is computed. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized IDCT variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    y : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    dctn : multidimensional DCT\n    \n    Notes\n    -----\n    For full details of the IDCT types and normalization modes, as well as\n    references, see `idct`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.fft import dctn, idctn\n    >>> rng = np.random.default_rng()\n    >>> y = rng.standard_normal((16, 16))\n    >>> np.allclose(y, idctn(dctn(y)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "25bb669f02e18e00629fa26b12ae3c1e2619babde738d06971a89fe4fbc9bc8c",
            "fields": [
                {
                    "id": "jc9j62gy",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "huvz40ge",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DCT (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nwq7oap3",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the result.  If both `s` and `axes` (see below) are\nNone, `s` is ``x.shape``; if `s` is None but `axes` is\nnot None, then `s` is ``numpy.take(x.shape, axes, axis=0)``.\nIf ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\nIf ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n``s[i]``.\nIf any element of `s` is -1, the size of the corresponding dimension of\n`x` is used.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2zyot3i",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which the IDCT is computed. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q0bjgvc_",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r26g9z80",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uw740q7i",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bdwkby0h",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized IDCT variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2rzpmv1u",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.idctn",
                    "defaultValue": "scipy.fft.idctn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uos2kym",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svm_upa0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "km3aahko",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2g0_tcar",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b55v78rf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlo73kcd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "njiz88pv",
            "name": "fft.idst",
            "description": "Return the Inverse Discrete Sine Transform of an arbitrary type sequence.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DST (see Notes). Default type is 2.\n    n : int, optional\n        Length of the transform. If ``n < x.shape[axis]``, `x` is\n        truncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\n        default results in ``n = x.shape[axis]``.\n    axis : int, optional\n        Axis along which the idst is computed; the default is over the\n        last axis (i.e., ``axis=-1``).\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized IDST variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    idst : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    dst : Forward DST\n    \n    Notes\n    -----\n    .. warning:: For ``type in {2, 3}``, ``norm=\"ortho\"`` breaks the direct\n                 correspondence with the inverse direct Fourier transform.\n    \n    For ``norm=\"ortho\"`` both the `dst` and `idst` are scaled by the same\n    overall factor in both directions. By default, the transform is also\n    orthogonalized which for types 2 and 3 means the transform definition is\n    modified to give orthogonality of the DST matrix (see `dst` for the full\n    definitions).\n    \n    'The' IDST is the IDST-II, which is the same as the normalized DST-III.\n    \n    The IDST is equivalent to a normal DST except for the normalization and\n    type. DST type 1 and 4 are their own inverse and DSTs 2 and 3 are each\n    other's inverses.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "410d2de8409da1e8c9d9e21cd67f99473045102bb99e1fdac422ada2d0c49f89",
            "fields": [
                {
                    "id": "f3yfxo_m",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ijd1dhl",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DST (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ik6l30r",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transform. If ``n < x.shape[axis]``, `x` is\ntruncated.  If ``n > x.shape[axis]``, `x` is zero-padded. The\ndefault results in ``n = x.shape[axis]``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3rxnghfj",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis along which the idst is computed; the default is over the\nlast axis (i.e., ``axis=-1``).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zdyhez71",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g5skk72l",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "805oyotz",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i8nscc7r",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized IDST variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hfvjg557",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.idst",
                    "defaultValue": "scipy.fft.idst",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4nydrlox",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6_5cqjo3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "740pvz_s",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e9q3tr4i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "27d13u_n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2ygqf5g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1qi80md7",
            "name": "fft.idstn",
            "description": "Return multidimensional Inverse Discrete Sine Transform along the specified axes.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    type : {1, 2, 3, 4}, optional\n        Type of the DST (see Notes). Default type is 2.\n    s : int or array_like of ints or None, optional\n        The shape of the result.  If both `s` and `axes` (see below) are None,\n        `s` is ``x.shape``; if `s` is None but `axes` is not None, then `s` is\n        ``numpy.take(x.shape, axes, axis=0)``.\n        If ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\n        If ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n        ``s[i]``.\n        If any element of `s` is -1, the size of the corresponding dimension of\n        `x` is used.\n    axes : int or array_like of ints or None, optional\n        Axes over which the IDST is computed. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see Notes). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    orthogonalize : bool, optional\n        Whether to use the orthogonalized IDST variant (see Notes).\n        Defaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    y : ndarray of real\n        The transformed input array.\n    \n    See Also\n    --------\n    dstn : multidimensional DST\n    \n    Notes\n    -----\n    For full details of the IDST types and normalization modes, as well as\n    references, see `idst`.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy.fft import dstn, idstn\n    >>> rng = np.random.default_rng()\n    >>> y = rng.standard_normal((16, 16))\n    >>> np.allclose(y, idstn(dstn(y)))\n    True",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b57c5133e6a16f9eefe78bde05688ae4b91c994c86b0a9ad8de1863ad70b53ba",
            "fields": [
                {
                    "id": "fw6vokhz",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kdh1va8q",
                    "encoding": "",
                    "name": "type",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Type of the DST (see Notes). Default type is 2.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ip4sdyoh",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "The shape of the result.  If both `s` and `axes` (see below) are None,\n`s` is ``x.shape``; if `s` is None but `axes` is not None, then `s` is\n``numpy.take(x.shape, axes, axis=0)``.\nIf ``s[i] > x.shape[i]``, the ith dimension of the input is padded with zeros.\nIf ``s[i] < x.shape[i]``, the ith dimension of the input is truncated to length\n``s[i]``.\nIf any element of `s` is -1, the size of the corresponding dimension of\n`x` is used.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_vz0w9i",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which the IDST is computed. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "int or arraylike of ints or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lqbe70_k",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see Notes). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ka79k4cz",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u_7c3fh3",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uyizp6x6",
                    "encoding": "",
                    "name": "orthogonalize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether to use the orthogonalized IDST variant (see Notes).\nDefaults to ``True`` when ``norm=\"ortho\"`` and ``False`` otherwise.\n\n.. versionadded:: 1.8.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zo26b2u_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.idstn",
                    "defaultValue": "scipy.fft.idstn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rdipvcrp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fgz438h8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9dbssmad",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2f0y7nih",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qzqv0gwh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sfmsog8i",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "c9_noyfg",
            "name": "fft.ifft",
            "description": "Compute the 1-D inverse discrete Fourier Transform.\n    \n    This function computes the inverse of the 1-D *n*-point\n    discrete Fourier transform computed by `fft`.  In other words,\n    ``ifft(fft(x)) == x`` to within numerical accuracy.\n    \n    The input should be ordered in the same way as is returned by `fft`,\n    i.e.,\n    \n    * ``x[0]`` should contain the zero frequency term,\n    * ``x[1:n//2]`` should contain the positive-frequency terms,\n    * ``x[n//2 + 1:]`` should contain the negative-frequency terms, in\n      increasing order starting from the most negative frequency.\n    \n    For an even number of input points, ``x[n//2]`` represents the sum of\n    the values at the positive and negative Nyquist frequencies, as the two\n    are aliased together. See `fft` for details.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, can be complex.\n    n : int, optional\n        Length of the transformed axis of the output.\n        If `n` is smaller than the length of the input, the input is cropped.\n        If it is larger, the input is padded with zeros. If `n` is not given,\n        the length of the input along the axis specified by `axis` is used.\n        See notes about padding issues.\n    axis : int, optional\n        Axis over which to compute the inverse DFT. If not given, the last\n        axis is used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n    \n    Raises\n    ------\n    IndexError\n        If `axes` is larger than the last axis of `x`.\n    \n    See Also\n    --------\n    fft : The 1-D (forward) FFT, of which `ifft` is the inverse.\n    ifft2 : The 2-D inverse FFT.\n    ifftn : The N-D inverse FFT.\n    \n    Notes\n    -----\n    If the input parameter `n` is larger than the size of the input, the input\n    is padded by appending zeros at the end. Even though this is the common\n    approach, it might lead to surprising results. If a different padding is\n    desired, it must be performed before calling `ifft`.\n    \n    If ``x`` is a 1-D array, then the `ifft` is equivalent to ::\n    \n        y[k] = np.sum(x * np.exp(2j * np.pi * k * np.arange(n)/n)) / len(x)\n    \n    As with `fft`, `ifft` has support for all floating point types and is\n    optimized for real input.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> scipy.fft.ifft([0, 4, 0, 0])\n    array([ 1.+0.j,  0.+1.j, -1.+0.j,  0.-1.j]) # may vary\n    \n    Create and plot a band-limited signal with random phases:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> t = np.arange(400)\n    >>> n = np.zeros((400,), dtype=complex)\n    >>> n[40:60] = np.exp(1j*rng.uniform(0, 2*np.pi, (20,)))\n    >>> s = scipy.fft.ifft(n)\n    >>> plt.plot(t, s.real, 'b-', t, s.imag, 'r--')\n    [<matplotlib.lines.Line2D object at ...>, <matplotlib.lines.Line2D object at ...>]\n    >>> plt.legend(('real', 'imaginary'))\n    <matplotlib.legend.Legend object at ...>\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "58d4f329348343477c4a6ad3da75b13746fb8487d37f682033123e39a7b5c277",
            "fields": [
                {
                    "id": "5gbyhk7q",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, can be complex.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oyy8pcm9",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transformed axis of the output.\nIf `n` is smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros. If `n` is not given,\nthe length of the input along the axis specified by `axis` is used.\nSee notes about padding issues.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yvt40o09",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis over which to compute the inverse DFT. If not given, the last\naxis is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hecr1s3_",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5k_a325f",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s6dqee9o",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "naz817ea",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5igswi6g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ifft",
                    "defaultValue": "scipy.fft.ifft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3sy01ijt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cm2oduop",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "214ovqlo",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5_qdhhnp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mksofdyo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_p9is1e8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "s1srqwh9",
            "name": "fft.ifft2",
            "description": "Compute the 2-D inverse discrete Fourier Transform.\n    \n    This function computes the inverse of the 2-D discrete Fourier\n    Transform over any number of axes in an M-D array by means of\n    the Fast Fourier Transform (FFT). In other words, ``ifft2(fft2(x)) == x``\n    to within numerical accuracy. By default, the inverse transform is\n    computed over the last two axes of the input array.\n    \n    The input, analogously to `ifft`, should be ordered in the same way as is\n    returned by `fft2`, i.e., it should have the term for zero frequency\n    in the low-order corner of the two axes, the positive frequency terms in\n    the first half of these axes, the term for the Nyquist frequency in the\n    middle of the axes and the negative frequency terms in the second half of\n    both axes, in order of decreasingly negative frequency.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, can be complex.\n    s : sequence of ints, optional\n        Shape (length of each axis) of the output (``s[0]`` refers to axis 0,\n        ``s[1]`` to axis 1, etc.). This corresponds to `n` for ``ifft(x, n)``.\n        Along each axis, if the given shape is smaller than that of the input,\n        the input is cropped. If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input along the axes specified\n        by `axes` is used.  See notes for issue on `ifft` zero padding.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT. If not given, the last two\n        axes are used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or the last two axes if `axes` is not given.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length, or `axes` not given and\n        ``len(s) != 2``.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    fft2 : The forward 2-D FFT, of which `ifft2` is the inverse.\n    ifftn : The inverse of the N-D FFT.\n    fft : The 1-D FFT.\n    ifft : The 1-D inverse FFT.\n    \n    Notes\n    -----\n    `ifft2` is just `ifftn` with a different default for `axes`.\n    \n    See `ifftn` for details and a plotting example, and `fft` for\n    definition and conventions used.\n    \n    Zero-padding, analogously with `ifft`, is performed by appending zeros to\n    the input along the specified dimension. Although this is the common\n    approach, it might lead to surprising results. If another form of zero\n    padding is desired, it must be performed before `ifft2` is called.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = 4 * np.eye(4)\n    >>> scipy.fft.ifft2(x)\n    array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary\n           [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],\n           [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n           [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ef95da3753487c43e3b2419d841fcafc4c2b6f2efb6861d459422fbaddcf7002",
            "fields": [
                {
                    "id": "gadt90n3",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, can be complex.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4l_anhpp",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length of each axis) of the output (``s[0]`` refers to axis 0,\n``s[1]`` to axis 1, etc.). This corresponds to `n` for ``ifft(x, n)``.\nAlong each axis, if the given shape is smaller than that of the input,\nthe input is cropped. If it is larger, the input is padded with zeros.\nif `s` is not given, the shape of the input along the axes specified\nby `axes` is used.  See notes for issue on `ifft` zero padding.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fvi5c7y3",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Axes over which to compute the FFT. If not given, the last two\naxes are used.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ney8k_dq",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35ijlwyo",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0d2evj35",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "29wyhk9q",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fp2g7o23",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ifft2",
                    "defaultValue": "scipy.fft.ifft2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "04qnt6uz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2tsl3nl8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "med89pdn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wkchsetr",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5vs27brg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3_oi0bu0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f3loyfed",
            "name": "fft.ifftn",
            "description": "Compute the N-D inverse discrete Fourier Transform.\n    \n    This function computes the inverse of the N-D discrete\n    Fourier Transform over any number of axes in an M-D array by\n    means of the Fast Fourier Transform (FFT).  In other words,\n    ``ifftn(fftn(x)) == x`` to within numerical accuracy.\n    \n    The input, analogously to `ifft`, should be ordered in the same way as is\n    returned by `fftn`, i.e., it should have the term for zero frequency\n    in all axes in the low-order corner, the positive frequency terms in the\n    first half of all axes, the term for the Nyquist frequency in the middle\n    of all axes and the negative frequency terms in the second half of all\n    axes, in order of decreasingly negative frequency.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, can be complex.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        This corresponds to ``n`` for ``ifft(x, n)``.\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped. If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input along the axes specified\n        by `axes` is used. See notes for issue on `ifft` zero padding.\n    axes : sequence of ints, optional\n        Axes over which to compute the IFFT.  If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` or `x`,\n        as explained in the parameters section above.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    fftn : The forward N-D FFT, of which `ifftn` is the inverse.\n    ifft : The 1-D inverse FFT.\n    ifft2 : The 2-D inverse FFT.\n    ifftshift : Undoes `fftshift`, shifts zero-frequency terms to beginning\n        of array.\n    \n    Notes\n    -----\n    Zero-padding, analogously with `ifft`, is performed by appending zeros to\n    the input along the specified dimension. Although this is the common\n    approach, it might lead to surprising results. If another form of zero\n    padding is desired, it must be performed before `ifftn` is called.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.eye(4)\n    >>> scipy.fft.ifftn(scipy.fft.fftn(x, axes=(0,)), axes=(1,))\n    array([[1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j], # may vary\n           [0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],\n           [0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n           [0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])\n    \n    \n    Create and plot an image with band-limited frequency content:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.default_rng()\n    >>> n = np.zeros((200,200), dtype=complex)\n    >>> n[60:80, 20:40] = np.exp(1j*rng.uniform(0, 2*np.pi, (20, 20)))\n    >>> im = scipy.fft.ifftn(n).real\n    >>> plt.imshow(im)\n    <matplotlib.image.AxesImage object at 0x...>\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7fe4e029bc82157a476b380c385aa5a34904e4854bdc5344ae68800c8ae37194",
            "fields": [
                {
                    "id": "rug7jwoy",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, can be complex.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ny8ni4y",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length of each transformed axis) of the output\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\nThis corresponds to ``n`` for ``ifft(x, n)``.\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped. If it is larger, the input is padded with zeros.\nif `s` is not given, the shape of the input along the axes specified\nby `axes` is used. See notes for issue on `ifft` zero padding.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rta627o7",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to compute the IFFT.  If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wtmawtcm",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zadv4lcv",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mazd4u43",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j2r3gnho",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "91tilljp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ifftn",
                    "defaultValue": "scipy.fft.ifftn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4lsyd_ow",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nn7ucyob",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hlqgg997",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05487l_4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "te2e5683",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ac88kx_s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "dy9kcj7g",
            "name": "fft.ifftshift",
            "description": "The inverse of `fftshift`. Although identical for even-length `x`, the\n    functions differ by one sample for odd-length `x`.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    axes : int or shape tuple, optional\n        Axes over which to calculate.  Defaults to None, which shifts all axes.\n    \n    Returns\n    -------\n    y : ndarray\n        The shifted array.\n    \n    See Also\n    --------\n    fftshift : Shift zero-frequency component to the center of the spectrum.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)\n    >>> freqs\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4., -4.],\n           [-3., -2., -1.]])\n    >>> np.fft.ifftshift(np.fft.fftshift(freqs))\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4., -4.],\n           [-3., -2., -1.]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d16e45c75f0f7a80b052efd50fdc512d6c2e5b5467374d1fa55bd05941ef99b3",
            "fields": [
                {
                    "id": "fdx8s95f",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydi43snz",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to calculate.  Defaults to None, which shifts all axes.",
                    "type": "int or shape tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jml0d3hy",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ifftshift",
                    "defaultValue": "scipy.fft.ifftshift",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nj01w73n",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rk96uu9i",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u7jk7hbt",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gzgiwy4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mv_bry5u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agurxrsd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "t0ao71l0",
            "name": "fft.ifht",
            "description": "Compute the inverse fast Hankel transform.\n    \n    Computes the discrete inverse Hankel transform of a logarithmically spaced\n    periodic sequence. This is the inverse operation to `fht`.\n    \n    Parameters\n    ----------\n    A : array_like (..., n)\n        Real periodic input array, uniformly logarithmically spaced.  For\n        multidimensional input, the transform is performed over the last axis.\n    dln : float\n        Uniform logarithmic spacing of the input array.\n    mu : float\n        Order of the Hankel transform, any positive or negative real number.\n    offset : float, optional\n        Offset of the uniform logarithmic spacing of the output array.\n    bias : float, optional\n        Exponent of power law bias, any positive or negative real number.\n    \n    Returns\n    -------\n    a : array_like (..., n)\n        The transformed output array, which is real, periodic, uniformly\n        logarithmically spaced, and of the same shape as the input array.\n    \n    See Also\n    --------\n    fht : Definition of the fast Hankel transform.\n    fhtoffset : Return an optimal offset for `ifht`.\n    \n    Notes\n    -----\n    This function computes a discrete version of the Hankel transform\n    \n    .. math::\n    \n        a(r) = \\int_{0}^{\\infty} \\! A(k) \\, J_\\mu(kr) \\, r \\, dk \\;,\n    \n    where :math:`J_\\mu` is the Bessel function of order :math:`\\mu`.  The index\n    :math:`\\mu` may be any real number, positive or negative. Note that the\n    numerical inverse Hankel transform uses an integrand of :math:`r \\, dk`, while the\n    mathematical inverse Hankel transform is commonly defined using :math:`k \\, dk`.\n    \n    See `fht` for further details.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5b2da9e94f18ed84ce36916ecced92ba555288c2d0dfed4c20e04d6a9a671385",
            "fields": [
                {
                    "id": "xmh36f_c",
                    "encoding": "",
                    "name": "A",
                    "value": "",
                    "defaultValue": "",
                    "description": "Real periodic input array, uniformly logarithmically spaced.  For\nmultidimensional input, the transform is performed over the last axis.",
                    "type": "arraylike (..., n)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a3k5cnno",
                    "encoding": "",
                    "name": "dln",
                    "value": "",
                    "defaultValue": "",
                    "description": "Uniform logarithmic spacing of the input array.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m1svjh5b",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "Order of the Hankel transform, any positive or negative real number.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0cmp5fzj",
                    "encoding": "",
                    "name": "offset",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Offset of the uniform logarithmic spacing of the output array.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8x3p5_m",
                    "encoding": "",
                    "name": "bias",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Exponent of power law bias, any positive or negative real number.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjjxec54",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ifht",
                    "defaultValue": "scipy.fft.ifht",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e6j0pvas",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "exy_l0gc",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "nnz91odu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufqbbxwh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8nlx07n7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nw0g8nyc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ij93s6nm",
            "name": "fft.ihfft",
            "description": "Compute the inverse FFT of a signal that has Hermitian symmetry.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    n : int, optional\n        Length of the inverse FFT, the number of points along\n        transformation axis in the input to use.  If `n` is smaller than\n        the length of the input, the input is cropped. If it is larger,\n        the input is padded with zeros. If `n` is not given, the length of\n        the input along the axis specified by `axis` is used.\n    axis : int, optional\n        Axis over which to compute the inverse FFT. If not given, the last\n        axis is used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See `fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n        The length of the transformed axis is ``n//2 + 1``.\n    \n    See Also\n    --------\n    hfft, irfft\n    \n    Notes\n    -----\n    `hfft`/`ihfft` are a pair analogous to `rfft`/`irfft`, but for the\n    opposite case: here, the signal has Hermitian symmetry in the time\n    domain and is real in the frequency domain. So, here, it's `hfft`, for\n    which you must supply the length of the result if it is to be odd:\n    * even: ``ihfft(hfft(a, 2*len(a) - 2) == a``, within roundoff error,\n    * odd: ``ihfft(hfft(a, 2*len(a) - 1) == a``, within roundoff error.\n    \n    Examples\n    --------\n    >>> from scipy.fft import ifft, ihfft\n    >>> import numpy as np\n    >>> spectrum = np.array([ 15, -4, 0, -1, 0, -4])\n    >>> ifft(spectrum)\n    array([1.+0.j,  2.+0.j,  3.+0.j,  4.+0.j,  3.+0.j,  2.+0.j]) # may vary\n    >>> ihfft(spectrum)\n    array([ 1.-0.j,  2.-0.j,  3.-0.j,  4.-0.j]) # may vary",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c9276682e8630acc4863399c17c1135ee93a3104ca51431696cc567f25ed0970",
            "fields": [
                {
                    "id": "44eqv9pk",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zrr61mvt",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the inverse FFT, the number of points along\ntransformation axis in the input to use.  If `n` is smaller than\nthe length of the input, the input is cropped. If it is larger,\nthe input is padded with zeros. If `n` is not given, the length of\nthe input along the axis specified by `axis` is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3t381viw",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis over which to compute the inverse FFT. If not given, the last\naxis is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5ovp3xzu",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cfy0q4_9",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee `fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1o97t8xb",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "un06f29o",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rbwr6xk6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ihfft",
                    "defaultValue": "scipy.fft.ihfft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zhnrwcff",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tk9juieq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_o0jc0e4",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3kw9_e4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ndxplmgo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "spcnyf2s",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "mua0up2v",
            "name": "fft.ihfft2",
            "description": "Compute the 2-D inverse FFT of a real spectrum.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array\n    s : sequence of ints, optional\n        Shape of the real input to the inverse FFT.\n    axes : sequence of ints, optional\n        The axes over which to compute the inverse fft.\n        Default is the last two axes.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The result of the inverse real 2-D FFT.\n    \n    See Also\n    --------\n    ihfftn : Compute the inverse of the N-D FFT of Hermitian input.\n    \n    Notes\n    -----\n    This is really `ihfftn` with different defaults.\n    For more details see `ihfftn`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9a9f8d3aa1e3624d3088a1c6f5d9a83919488aeb9a42e3bdbe2deeb0d693568b",
            "fields": [
                {
                    "id": "0bbsw1ep",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2npwxrka",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the real input to the inverse FFT.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u6lh9b2k",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "The axes over which to compute the inverse fft.\nDefault is the last two axes.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "skzte2ud",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6v3dn1jj",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qwg_nmax",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "99umr2fa",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p83vk__j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ihfft2",
                    "defaultValue": "scipy.fft.ihfft2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t2dgjm5u",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "avj5yw4y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tz6s4186",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "467bsd58",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p6omljfu",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p017z49o",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "gtzq3jc4",
            "name": "fft.ihfftn",
            "description": "Compute the N-D inverse discrete Fourier Transform for a real\n    spectrum.\n    \n    This function computes the N-D inverse discrete Fourier Transform\n    over any number of axes in an M-D real array by means of the Fast\n    Fourier Transform (FFT). By default, all axes are transformed, with the\n    real transform performed over the last axis, while the remaining transforms\n    are complex.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, taken to be real.\n    s : sequence of ints, optional\n        Shape (length along each transformed axis) to use from the input.\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped. If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input along the axes specified\n        by `axes` is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` and `x`,\n        as explained in the parameters section above.\n        The length of the last axis transformed will be ``s[-1]//2+1``,\n        while the remaining transformed axes will have lengths according to\n        `s`, or unchanged from the input.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    hfftn : The forward N-D FFT of Hermitian input.\n    hfft : The 1-D FFT of Hermitian input.\n    fft : The 1-D FFT, with definitions and conventions used.\n    fftn : The N-D FFT.\n    hfft2 : The 2-D FFT of Hermitian input.\n    \n    Notes\n    -----\n    The transform for real input is performed over the last transformation\n    axis, as by `ihfft`, then the transform over the remaining axes is\n    performed as by `ifftn`. The order of the output is the positive part of\n    the Hermitian output signal, in the same format as `rfft`.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.ones((2, 2, 2))\n    >>> scipy.fft.ihfftn(x)\n    array([[[1.+0.j,  0.+0.j], # may vary\n            [0.+0.j,  0.+0.j]],\n           [[0.+0.j,  0.+0.j],\n            [0.+0.j,  0.+0.j]]])\n    >>> scipy.fft.ihfftn(x, axes=(2, 0))\n    array([[[1.+0.j,  0.+0.j], # may vary\n            [1.+0.j,  0.+0.j]],\n           [[0.+0.j,  0.+0.j],\n            [0.+0.j,  0.+0.j]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f1768348294caf6c087c1f0f85cdf77a84fd83959bcf9e257dda7d2d3a24cce6",
            "fields": [
                {
                    "id": "5168dqd0",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, taken to be real.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hl8k7n0q",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length along each transformed axis) to use from the input.\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped. If it is larger, the input is padded with zeros.\nif `s` is not given, the shape of the input along the axes specified\nby `axes` is used.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9hjphlye",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to compute the FFT. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6cwf3jfl",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zd1_kwm1",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ne24w5bg",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_85_p008",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhkhfkzb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.ihfftn",
                    "defaultValue": "scipy.fft.ihfftn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l49sno94",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ikdn2s9v",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "u9fo9_ky",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sggp52pn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lonk2f45",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jdukli7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "1xr6tnjy",
            "name": "fft.irfft",
            "description": "Computes the inverse of `rfft`.\n    \n    This function computes the inverse of the 1-D *n*-point\n    discrete Fourier Transform of real input computed by `rfft`.\n    In other words, ``irfft(rfft(x), len(x)) == x`` to within numerical\n    accuracy. (See Notes below for why ``len(a)`` is necessary here.)\n    \n    The input is expected to be in the form returned by `rfft`, i.e., the\n    real zero-frequency term followed by the complex positive frequency terms\n    in order of increasing frequency. Since the discrete Fourier Transform of\n    real input is Hermitian-symmetric, the negative frequency terms are taken\n    to be the complex conjugates of the corresponding positive frequency terms.\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    n : int, optional\n        Length of the transformed axis of the output.\n        For `n` output points, ``n//2+1`` input points are necessary. If the\n        input is longer than this, it is cropped. If it is shorter than this,\n        it is padded with zeros. If `n` is not given, it is taken to be\n        ``2*(m-1)``, where ``m`` is the length of the input along the axis\n        specified by `axis`.\n    axis : int, optional\n        Axis over which to compute the inverse FFT. If not given, the last\n        axis is used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n        The length of the transformed axis is `n`, or, if `n` is not given,\n        ``2*(m-1)`` where ``m`` is the length of the transformed axis of the\n        input. To get an odd number of output points, `n` must be specified.\n    \n    Raises\n    ------\n    IndexError\n        If `axis` is larger than the last axis of `x`.\n    \n    See Also\n    --------\n    rfft : The 1-D FFT of real input, of which `irfft` is inverse.\n    fft : The 1-D FFT.\n    irfft2 : The inverse of the 2-D FFT of real input.\n    irfftn : The inverse of the N-D FFT of real input.\n    \n    Notes\n    -----\n    Returns the real valued `n`-point inverse discrete Fourier transform\n    of `x`, where `x` contains the non-negative frequency terms of a\n    Hermitian-symmetric sequence. `n` is the length of the result, not the\n    input.\n    \n    If you specify an `n` such that `a` must be zero-padded or truncated, the\n    extra/removed values will be added/removed at high frequencies. One can\n    thus resample a series to `m` points via Fourier interpolation by:\n    ``a_resamp = irfft(rfft(a), m)``.\n    \n    The default value of `n` assumes an even output length. By the Hermitian\n    symmetry, the last imaginary component must be 0 and so is ignored. To\n    avoid losing information, the correct length of the real input *must* be\n    given.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> scipy.fft.ifft([1, -1j, -1, 1j])\n    array([0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]) # may vary\n    >>> scipy.fft.irfft([1, -1j, -1])\n    array([0.,  1.,  0.,  0.])\n    \n    Notice how the last term in the input to the ordinary `ifft` is the\n    complex conjugate of the second term, and the output has zero imaginary\n    part everywhere. When calling `irfft`, the negative frequencies are not\n    specified, and the output array is purely real.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "80803fbda5c2fa06ae992d6d732c8af9513ab51e5dc51688fe4893efa00dc490",
            "fields": [
                {
                    "id": "59l0xk7y",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z8zg766t",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length of the transformed axis of the output.\nFor `n` output points, ``n//2+1`` input points are necessary. If the\ninput is longer than this, it is cropped. If it is shorter than this,\nit is padded with zeros. If `n` is not given, it is taken to be\n``2*(m-1)``, where ``m`` is the length of the input along the axis\nspecified by `axis`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wdk0t59z",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis over which to compute the inverse FFT. If not given, the last\naxis is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0mu4amu",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ysukonz6",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "95fpy62p",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s1m22oho",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "oyiilsj3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.irfft",
                    "defaultValue": "scipy.fft.irfft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d60x7tj3",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2c7x9ia",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oy00jfoi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n4lyc3ui",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c7y8_95v",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbtsa55z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "28aqryq6",
            "name": "fft.irfft2",
            "description": "Computes the inverse of `rfft2`\n    \n    Parameters\n    ----------\n    x : array_like\n        The input array\n    s : sequence of ints, optional\n        Shape of the real output to the inverse FFT.\n    axes : sequence of ints, optional\n        The axes over which to compute the inverse fft.\n        Default is the last two axes.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The result of the inverse real 2-D FFT.\n    \n    See Also\n    --------\n    rfft2 : The 2-D FFT of real input.\n    irfft : The inverse of the 1-D FFT of real input.\n    irfftn : The inverse of the N-D FFT of real input.\n    \n    Notes\n    -----\n    This is really `irfftn` with different defaults.\n    For more details see `irfftn`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aba42a10e02247c4156dfdee8592b5354b5985f0a6ecafa10a254c72556ac59f",
            "fields": [
                {
                    "id": "uc7ivxsz",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The input array",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kzuiguqt",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the real output to the inverse FFT.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "px8f1equ",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "The axes over which to compute the inverse fft.\nDefault is the last two axes.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p1iosi95",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1c4vng9",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0agdp7e",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_6sglraf",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e1l50g49",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.irfft2",
                    "defaultValue": "scipy.fft.irfft2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "39povwb_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5wo74gv",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yw17d8_u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c73l91az",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "go8prsi2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6d915_gs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "iff8nzl7",
            "name": "fft.irfftn",
            "description": "Computes the inverse of `rfftn`\n    \n    This function computes the inverse of the N-D discrete\n    Fourier Transform for real input over any number of axes in an\n    M-D array by means of the Fast Fourier Transform (FFT). In\n    other words, ``irfftn(rfftn(x), x.shape) == x`` to within numerical\n    accuracy. (The ``a.shape`` is necessary like ``len(a)`` is for `irfft`,\n    and for the same reason.)\n    \n    The input should be ordered in the same way as is returned by `rfftn`,\n    i.e., as for `irfft` for the final transformation axis, and as for `ifftn`\n    along all the other axes.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). `s` is also the\n        number of input points used along this axis, except for the last axis,\n        where ``s[-1]//2+1`` points of the input are used.\n        Along any axis, if the shape indicated by `s` is smaller than that of\n        the input, the input is cropped. If it is larger, the input is padded\n        with zeros. If `s` is not given, the shape of the input along the axes\n        specified by axes is used. Except for the last axis which is taken to be\n        ``2*(m-1)``, where ``m`` is the length of the input along that axis.\n    axes : sequence of ints, optional\n        Axes over which to compute the inverse FFT. If not given, the last\n        `len(s)` axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` or `x`,\n        as explained in the parameters section above.\n        The length of each transformed axis is as given by the corresponding\n        element of `s`, or the length of the input in every axis except for the\n        last one if `s` is not given. In the final transformed axis the length\n        of the output when `s` is not given is ``2*(m-1)``, where ``m`` is the\n        length of the final transformed axis of the input. To get an odd\n        number of output points in the final axis, `s` must be specified.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    rfftn : The forward N-D FFT of real input,\n            of which `ifftn` is the inverse.\n    fft : The 1-D FFT, with definitions and conventions used.\n    irfft : The inverse of the 1-D FFT of real input.\n    irfft2 : The inverse of the 2-D FFT of real input.\n    \n    Notes\n    -----\n    See `fft` for definitions and conventions used.\n    \n    See `rfft` for definitions and conventions used for real input.\n    \n    The default value of `s` assumes an even output length in the final\n    transformation axis. When performing the final complex to real\n    transformation, the Hermitian symmetry requires that the last imaginary\n    component along that axis must be 0 and so it is ignored. To avoid losing\n    information, the correct length of the real input *must* be given.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.zeros((3, 2, 2))\n    >>> x[0, 0, 0] = 3 * 2 * 2\n    >>> scipy.fft.irfftn(x)\n    array([[[1.,  1.],\n            [1.,  1.]],\n           [[1.,  1.],\n            [1.,  1.]],\n           [[1.,  1.],\n            [1.,  1.]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "408a1bc3a6815ebb0a36c21da8bdf34ec950bec9715b9621d408dfcf5ece0f5f",
            "fields": [
                {
                    "id": "xu3d8t1e",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r_zrp0kw",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length of each transformed axis) of the output\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). `s` is also the\nnumber of input points used along this axis, except for the last axis,\nwhere ``s[-1]//2+1`` points of the input are used.\nAlong any axis, if the shape indicated by `s` is smaller than that of\nthe input, the input is cropped. If it is larger, the input is padded\nwith zeros. If `s` is not given, the shape of the input along the axes\nspecified by axes is used. Except for the last axis which is taken to be\n``2*(m-1)``, where ``m`` is the length of the input along that axis.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "060rdhdh",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to compute the inverse FFT. If not given, the last\n`len(s)` axes are used, or all axes if `s` is also not specified.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "63j__hs2",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l4ii0thc",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "94oygjl3",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_d4oe8v0",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68xa0or_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.irfftn",
                    "defaultValue": "scipy.fft.irfftn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "47n2afbk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "flhbdbb1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oeh1q7se",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kfypwlvy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3tysv4gj",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "svdzg9jv",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "0il6o5_b",
            "name": "fft.next_fast_len",
            "description": "Find the next fast size of input data to ``fft``, for zero-padding, etc.\n    \n    SciPy's FFT algorithms gain their speed by a recursive divide and conquer\n    strategy. This relies on efficient functions for small prime factors of the\n    input length. Thus, the transforms are fastest when using composites of the\n    prime factors handled by the fft implementation. If there are efficient\n    functions for all radices <= `n`, then the result will be a number `x`\n    >= ``target`` with only prime factors < `n`. (Also known as `n`-smooth\n    numbers)\n    \n    Parameters\n    ----------\n    target : int\n        Length to start searching from. Must be a positive integer.\n    real : bool, optional\n        True if the FFT involves real input or output (e.g., `rfft` or `hfft`\n        but not `fft`). Defaults to False.\n    \n    Returns\n    -------\n    out : int\n        The smallest fast length greater than or equal to ``target``.\n    \n    Notes\n    -----\n    The result of this function may change in future as performance\n    considerations change, for example, if new prime factors are added.\n    \n    Calling `fft` or `ifft` with real input data performs an ``'R2C'``\n    transform internally.\n    \n    Examples\n    --------\n    On a particular machine, an FFT of prime length takes 11.4 ms:\n    \n    >>> from scipy import fft\n    >>> import numpy as np\n    >>> rng = np.random.default_rng()\n    >>> min_len = 93059  # prime length is worst case for speed\n    >>> a = rng.standard_normal(min_len)\n    >>> b = fft.fft(a)\n    \n    Zero-padding to the next regular length reduces computation time to\n    1.6 ms, a speedup of 7.3 times:\n    \n    >>> fft.next_fast_len(min_len, real=True)\n    93312\n    >>> b = fft.fft(a, 93312)\n    \n    Rounding up to the next power of 2 is not optimal, taking 3.0 ms to\n    compute; 1.9 times longer than the size given by ``next_fast_len``:\n    \n    >>> b = fft.fft(a, 131072)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bf4d69fc73610538cbae592142d3b10b22a50dd4077840d3147928fb29367845",
            "fields": [
                {
                    "id": "dap7_ewb",
                    "encoding": "",
                    "name": "target",
                    "value": "",
                    "defaultValue": "",
                    "description": "Length to start searching from. Must be a positive integer.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jwgnr6ox",
                    "encoding": "",
                    "name": "real",
                    "value": false,
                    "defaultValue": false,
                    "description": "True if the FFT involves real input or output (e.g., `rfft` or `hfft`\nbut not `fft`). Defaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "61uvg3_a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.next_fast_len",
                    "defaultValue": "scipy.fft.next_fast_len",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsa801oe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ful7575b",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "fv71r8ei",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "weq09pot",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1alxf1f1",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dtzbhjom",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9ui2bqc8",
            "name": "fft.prev_fast_len",
            "description": "Find the previous fast size of input data to ``fft``.\n    Useful for discarding a minimal number of samples before FFT.\n    \n    SciPy's FFT algorithms gain their speed by a recursive divide and conquer\n    strategy. This relies on efficient functions for small prime factors of the\n    input length. Thus, the transforms are fastest when using composites of the\n    prime factors handled by the fft implementation. If there are efficient\n    functions for all radices <= `n`, then the result will be a number `x`\n    <= ``target`` with only prime factors <= `n`. (Also known as `n`-smooth\n    numbers)\n    \n    Parameters\n    ----------\n    target : int\n        Maximum length to search until. Must be a positive integer.\n    real : bool, optional\n        True if the FFT involves real input or output (e.g., `rfft` or `hfft`\n        but not `fft`). Defaults to False.\n    \n    Returns\n    -------\n    out : int\n        The largest fast length less than or equal to ``target``.\n    \n    Notes\n    -----\n    The result of this function may change in future as performance\n    considerations change, for example, if new prime factors are added.\n    \n    Calling `fft` or `ifft` with real input data performs an ``'R2C'``\n    transform internally.\n    \n    In the current implementation, prev_fast_len assumes radices of\n    2,3,5,7,11 for complex FFT and 2,3,5 for real FFT.\n    \n    Examples\n    --------\n    On a particular machine, an FFT of prime length takes 16.2 ms:\n    \n    >>> from scipy import fft\n    >>> import numpy as np\n    >>> rng = np.random.default_rng()\n    >>> max_len = 93059  # prime length is worst case for speed\n    >>> a = rng.standard_normal(max_len)\n    >>> b = fft.fft(a)\n    \n    Performing FFT on the maximum fast length less than max_len\n    reduces the computation time to 1.5 ms, a speedup of 10.5 times:\n    \n    >>> fft.prev_fast_len(max_len, real=True)\n    92160\n    >>> c = fft.fft(a[:92160]) # discard last 899 samples",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "800b5d31f565d907c8f96f5c9ec04dbbcbcce13dbba520505f9ae7163e305f1c",
            "fields": [
                {
                    "id": "d15_e8yx",
                    "encoding": "",
                    "name": "target",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum length to search until. Must be a positive integer.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9einx90h",
                    "encoding": "",
                    "name": "real",
                    "value": false,
                    "defaultValue": false,
                    "description": "True if the FFT involves real input or output (e.g., `rfft` or `hfft`\nbut not `fft`). Defaults to False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gvrkv8jk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.prev_fast_len",
                    "defaultValue": "scipy.fft.prev_fast_len",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kx2woqbm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05xrfa9o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "njgla50u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8d1gnmqv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etvdbrvs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n5u2v74g",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "w3sh8gek",
            "name": "fft.register_backend",
            "description": "Register a backend for permanent use.\n    \n    Registered backends have the lowest priority and will be tried after the\n    global backend.\n    \n    Parameters\n    ----------\n    backend : {object, 'scipy'}\n        The backend to use.\n        Can either be a ``str`` containing the name of a known backend\n        {'scipy'} or an object that implements the uarray protocol.\n    \n    Raises\n    ------\n    ValueError: If the backend does not implement ``numpy.scipy.fft``.\n    \n    Examples\n    --------\n    We can register a new fft backend:\n    \n    >>> from scipy.fft import fft, register_backend, set_global_backend\n    >>> class NoopBackend:  # Define an invalid Backend\n    ...     __ua_domain__ = \"numpy.scipy.fft\"\n    ...     def __ua_function__(self, func, args, kwargs):\n    ...          return NotImplemented\n    >>> set_global_backend(NoopBackend())  # Set the invalid backend as global\n    >>> register_backend(\"scipy\")  # Register a new backend\n    # The registered backend is called because\n    # the global backend returns `NotImplemented`\n    >>> fft([1])\n    array([1.+0.j])\n    >>> set_global_backend(\"scipy\")  # Restore global backend to default",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3e6d11266f3c8f52be95d95362a78da6e75c74de6793120d8f50178288fe6522",
            "fields": [
                {
                    "id": "u_2z_vx2",
                    "encoding": "",
                    "name": "backend",
                    "value": "",
                    "defaultValue": "",
                    "description": "The backend to use.\nCan either be a ``str`` containing the name of a known backend\n{'scipy'} or an object that implements the uarray protocol.",
                    "type": "{object, 'scipy'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5x_0rj_o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.register_backend",
                    "defaultValue": "scipy.fft.register_backend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u99ho_xk",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x28tt1s2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b0okjghl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "804sqovz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gvu4b9cl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "msubeafi",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "nvq8drl6",
            "name": "fft.rfft",
            "description": "Compute the 1-D discrete Fourier Transform for real input.\n    \n    This function computes the 1-D *n*-point discrete Fourier\n    Transform (DFT) of a real-valued array by means of an efficient algorithm\n    called the Fast Fourier Transform (FFT).\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array\n    n : int, optional\n        Number of points along transformation axis in the input to use.\n        If `n` is smaller than the length of the input, the input is cropped.\n        If it is larger, the input is padded with zeros. If `n` is not given,\n        the length of the input along the axis specified by `axis` is used.\n    axis : int, optional\n        Axis over which to compute the FFT. If not given, the last axis is\n        used.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n        If `n` is even, the length of the transformed axis is ``(n/2)+1``.\n        If `n` is odd, the length is ``(n+1)/2``.\n    \n    Raises\n    ------\n    IndexError\n        If `axis` is larger than the last axis of `a`.\n    \n    See Also\n    --------\n    irfft : The inverse of `rfft`.\n    fft : The 1-D FFT of general (complex) input.\n    fftn : The N-D FFT.\n    rfft2 : The 2-D FFT of real input.\n    rfftn : The N-D FFT of real input.\n    \n    Notes\n    -----\n    When the DFT is computed for purely real input, the output is\n    Hermitian-symmetric, i.e., the negative frequency terms are just the complex\n    conjugates of the corresponding positive-frequency terms, and the\n    negative-frequency terms are therefore redundant. This function does not\n    compute the negative frequency terms, and the length of the transformed\n    axis of the output is therefore ``n//2 + 1``.\n    \n    When ``X = rfft(x)`` and fs is the sampling frequency, ``X[0]`` contains\n    the zero-frequency term 0*fs, which is real due to Hermitian symmetry.\n    \n    If `n` is even, ``A[-1]`` contains the term representing both positive\n    and negative Nyquist frequency (+fs/2 and -fs/2), and must also be purely\n    real. If `n` is odd, there is no term at fs/2; ``A[-1]`` contains\n    the largest positive frequency (fs/2*(n-1)/n), and is complex in the\n    general case.\n    \n    If the input `a` contains an imaginary part, it is silently discarded.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> scipy.fft.fft([0, 1, 0, 0])\n    array([ 1.+0.j,  0.-1.j, -1.+0.j,  0.+1.j]) # may vary\n    >>> scipy.fft.rfft([0, 1, 0, 0])\n    array([ 1.+0.j,  0.-1.j, -1.+0.j]) # may vary\n    \n    Notice how the final element of the `fft` output is the complex conjugate\n    of the second element, for real input. For `rfft`, this symmetry is\n    exploited to compute only the non-negative frequency terms.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f95777273bfa296d5f7e7c00da33a6b01c14b9941e9ccd11980baa8d40df7812",
            "fields": [
                {
                    "id": "fpov_ubb",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ue5gaen2",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of points along transformation axis in the input to use.\nIf `n` is smaller than the length of the input, the input is cropped.\nIf it is larger, the input is padded with zeros. If `n` is not given,\nthe length of the input along the axis specified by `axis` is used.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "197nhs__",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis over which to compute the FFT. If not given, the last axis is\nused.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x09p1gcr",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b7o2c0dw",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rsd06q6x",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mjws1gt8",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "580tg4wu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.rfft",
                    "defaultValue": "scipy.fft.rfft",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nqhdn6sp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ffsvxai8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zxc0erwl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cwixudx0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "81ed33r2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jom7jnhr",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "swoq6i71",
            "name": "fft.rfft2",
            "description": "Compute the 2-D FFT of a real array.\n    \n    Parameters\n    ----------\n    x : array\n        Input array, taken to be real.\n    s : sequence of ints, optional\n        Shape of the FFT.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : ndarray\n        The result of the real 2-D FFT.\n    \n    See Also\n    --------\n    irfft2 : The inverse of the 2-D FFT of real input.\n    rfft : The 1-D FFT of real input.\n    rfftn : Compute the N-D discrete Fourier Transform for real\n            input.\n    \n    Notes\n    -----\n    This is really just `rfftn` with different default behavior.\n    For more details see `rfftn`.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.broadcast_to([1, 0, -1, 0], (4, 4))\n    >>> scipy.fft.rfft2(x)\n    array([[0.+0.j, 8.+0.j, 0.+0.j],\n           [0.+0.j, 0.+0.j, 0.+0.j],\n           [0.+0.j, 0.+0.j, 0.+0.j],\n           [0.+0.j, 0.+0.j, 0.+0.j]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b417195a8382b27557c1b22678ff7c0c7470635eb1b811017bf89e3799a951c0",
            "fields": [
                {
                    "id": "x7ibai50",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, taken to be real.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "knbi5a1h",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape of the FFT.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f57yc1sr",
                    "encoding": "",
                    "name": "axes",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Axes over which to compute the FFT.",
                    "type": "builtins.tuple",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "na02mkcx",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "msh2453t",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6tfxnt0n",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2fjnj_b3",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "95b1onph",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.rfft2",
                    "defaultValue": "scipy.fft.rfft2",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3dxa_j3c",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tj0kp2ci",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "3uk57svu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c4azx8m9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2a3ns5fv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "umchtbmc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "bxb9rjar",
            "name": "fft.rfftfreq",
            "description": "Return the Discrete Fourier Transform sample frequencies\n    (for usage with rfft, irfft).\n    \n    The returned float array `f` contains the frequency bin centers in cycles\n    per unit of the sample spacing (with zero at the start).  For instance, if\n    the sample spacing is in seconds, then the frequency unit is cycles/second.\n    \n    Given a window length `n` and a sample spacing `d`::\n    \n      f = [0, 1, ...,     n/2-1,     n/2] / (d*n)   if n is even\n      f = [0, 1, ..., (n-1)/2-1, (n-1)/2] / (d*n)   if n is odd\n    \n    Unlike `fftfreq` (but like `scipy.fftpack.rfftfreq`)\n    the Nyquist frequency component is considered to be positive.\n    \n    Parameters\n    ----------\n    n : int\n        Window length.\n    d : scalar, optional\n        Sample spacing (inverse of the sampling rate). Defaults to 1.\n    xp : array_namespace, optional\n        The namespace for the return array. Default is None, where NumPy is used.\n    device : device, optional\n        The device for the return array.\n        Only valid when `xp.fft.rfftfreq` implements the device parameter.\n    \n    Returns\n    -------\n    f : ndarray\n        Array of length ``n//2 + 1`` containing the sample frequencies.\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> import scipy.fft\n    >>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5, -3, 4], dtype=float)\n    >>> fourier = scipy.fft.rfft(signal)\n    >>> n = signal.size\n    >>> sample_rate = 100\n    >>> freq = scipy.fft.fftfreq(n, d=1./sample_rate)\n    >>> freq\n    array([  0.,  10.,  20., ..., -30., -20., -10.])\n    >>> freq = scipy.fft.rfftfreq(n, d=1./sample_rate)\n    >>> freq\n    array([  0.,  10.,  20.,  30.,  40.,  50.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8dafb93f10a1b728ea6c36689ace27bebc56258ce8d87e3e12bb06534dd0c140",
            "fields": [
                {
                    "id": "bckjxn76",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Window length.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9z4l1zhs",
                    "encoding": "",
                    "name": "d",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Sample spacing (inverse of the sampling rate). Defaults to 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udnd7uvn",
                    "encoding": "",
                    "name": "xp",
                    "value": "",
                    "defaultValue": "",
                    "description": "The namespace for the return array. Default is None, where NumPy is used.",
                    "type": "arraynamespace",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zaczi7ed",
                    "encoding": "",
                    "name": "device",
                    "value": "",
                    "defaultValue": "",
                    "description": "The device for the return array.\nOnly valid when `xp.fft.rfftfreq` implements the device parameter.",
                    "type": "device",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zisw5p6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.rfftfreq",
                    "defaultValue": "scipy.fft.rfftfreq",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qsystjoz",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jcoiak9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e52_kf3a",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nc05uz8q",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yua8chxa",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mdlrdypy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sfsqoj2w",
            "name": "fft.rfftn",
            "description": "Compute the N-D discrete Fourier Transform for real input.\n    \n    This function computes the N-D discrete Fourier Transform over\n    any number of axes in an M-D real array by means of the Fast\n    Fourier Transform (FFT). By default, all axes are transformed, with the\n    real transform performed over the last axis, while the remaining\n    transforms are complex.\n    \n    Parameters\n    ----------\n    x : array_like\n        Input array, taken to be real.\n    s : sequence of ints, optional\n        Shape (length along each transformed axis) to use from the input.\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        The final element of `s` corresponds to `n` for ``rfft(x, n)``, while\n        for the remaining axes, it corresponds to `n` for ``fft(x, n)``.\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped. If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input along the axes specified\n        by `axes` is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT. If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n    norm : {\"backward\", \"ortho\", \"forward\"}, optional\n        Normalization mode (see `fft`). Default is \"backward\".\n    overwrite_x : bool, optional\n        If True, the contents of `x` can be destroyed; the default is False.\n        See :func:`fft` for more details.\n    workers : int, optional\n        Maximum number of workers to use for parallel computation. If negative,\n        the value wraps around from ``os.cpu_count()``.\n        See :func:`~scipy.fft.fft` for more details.\n    plan : object, optional\n        This argument is reserved for passing in a precomputed plan provided\n        by downstream FFT vendors. It is currently not used in SciPy.\n    \n        .. versionadded:: 1.5.0\n    \n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` and `x`,\n        as explained in the parameters section above.\n        The length of the last axis transformed will be ``s[-1]//2+1``,\n        while the remaining transformed axes will have lengths according to\n        `s`, or unchanged from the input.\n    \n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than the number of axes of `x`.\n    \n    See Also\n    --------\n    irfftn : The inverse of `rfftn`, i.e., the inverse of the N-D FFT\n         of real input.\n    fft : The 1-D FFT, with definitions and conventions used.\n    rfft : The 1-D FFT of real input.\n    fftn : The N-D FFT.\n    rfft2 : The 2-D FFT of real input.\n    \n    Notes\n    -----\n    The transform for real input is performed over the last transformation\n    axis, as by `rfft`, then the transform over the remaining axes is\n    performed as by `fftn`. The order of the output is as for `rfft` for the\n    final transformation axis, and as for `fftn` for the remaining\n    transformation axes.\n    \n    See `fft` for details, definitions and conventions used.\n    \n    Examples\n    --------\n    >>> import scipy.fft\n    >>> import numpy as np\n    >>> x = np.ones((2, 2, 2))\n    >>> scipy.fft.rfftn(x)\n    array([[[8.+0.j,  0.+0.j], # may vary\n            [0.+0.j,  0.+0.j]],\n           [[0.+0.j,  0.+0.j],\n            [0.+0.j,  0.+0.j]]])\n    \n    >>> scipy.fft.rfftn(x, axes=(2, 0))\n    array([[[4.+0.j,  0.+0.j], # may vary\n            [4.+0.j,  0.+0.j]],\n           [[0.+0.j,  0.+0.j],\n            [0.+0.j,  0.+0.j]]])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0561863f585841750a24a7cbcf371c595c78084687f857b141d2e24aa5a50daf",
            "fields": [
                {
                    "id": "5d633zni",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array, taken to be real.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vhqlz0kb",
                    "encoding": "",
                    "name": "s",
                    "value": "",
                    "defaultValue": "",
                    "description": "Shape (length along each transformed axis) to use from the input.\n(``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\nThe final element of `s` corresponds to `n` for ``rfft(x, n)``, while\nfor the remaining axes, it corresponds to `n` for ``fft(x, n)``.\nAlong any axis, if the given shape is smaller than that of the input,\nthe input is cropped. If it is larger, the input is padded with zeros.\nif `s` is not given, the shape of the input along the axes specified\nby `axes` is used.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u3uhdowh",
                    "encoding": "",
                    "name": "axes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Axes over which to compute the FFT. If not given, the last ``len(s)``\naxes are used, or all axes if `s` is also not specified.",
                    "type": "sequence of ints",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8hgt21j5",
                    "encoding": "",
                    "name": "norm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Normalization mode (see `fft`). Default is \"backward\".",
                    "type": "{\"backward\", \"ortho\", \"forward\"}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6dyzcbl4",
                    "encoding": "",
                    "name": "overwrite_x",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the contents of `x` can be destroyed; the default is False.\nSee :func:`fft` for more details.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ybp_1g7g",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum number of workers to use for parallel computation. If negative,\nthe value wraps around from ``os.cpu_count()``.\nSee :func:`~scipy.fft.fft` for more details.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uty5tkig",
                    "encoding": "",
                    "name": "plan",
                    "value": "",
                    "defaultValue": "",
                    "description": "This argument is reserved for passing in a precomputed plan provided\nby downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0",
                    "type": "object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kttin00d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.rfftn",
                    "defaultValue": "scipy.fft.rfftn",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wqw0emj8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7y7ej0a0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "f5j0sehi",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nlq_y6kv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fjzgzkb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nfrzflbd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "yjm2gqpc",
            "name": "fft.set_backend",
            "description": "Context manager to set the backend within a fixed scope.\n    \n    Upon entering the ``with`` statement, the given backend will be added to\n    the list of available backends with the highest priority. Upon exit, the\n    backend is reset to the state before entering the scope.\n    \n    Parameters\n    ----------\n    backend : {object, 'scipy'}\n        The backend to use.\n        Can either be a ``str`` containing the name of a known backend\n        {'scipy'} or an object that implements the uarray protocol.\n    coerce : bool, optional\n        Whether to allow expensive conversions for the ``x`` parameter. e.g.,\n        copying a NumPy array to the GPU for a CuPy backend. Implies ``only``.\n    only : bool, optional\n        If only is ``True`` and this backend returns ``NotImplemented``, then a\n        BackendNotImplemented error will be raised immediately. Ignoring any\n        lower priority backends.\n    \n    Examples\n    --------\n    >>> import scipy.fft as fft\n    >>> with fft.set_backend('scipy', only=True):\n    ...     fft.fft([1])  # Always calls the scipy implementation\n    array([1.+0.j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "dfc6a04ecce4599317c3f432d39e0907da9b58082545d1d4e69b8a3572a7006a",
            "fields": [
                {
                    "id": "b93068n3",
                    "encoding": "",
                    "name": "backend",
                    "value": "",
                    "defaultValue": "",
                    "description": "The backend to use.\nCan either be a ``str`` containing the name of a known backend\n{'scipy'} or an object that implements the uarray protocol.",
                    "type": "{object, 'scipy'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t5g9_ito",
                    "encoding": "",
                    "name": "coerce",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to allow expensive conversions for the ``x`` parameter. e.g.,\ncopying a NumPy array to the GPU for a CuPy backend. Implies ``only``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fd2s72cd",
                    "encoding": "",
                    "name": "only",
                    "value": false,
                    "defaultValue": false,
                    "description": "If only is ``True`` and this backend returns ``NotImplemented``, then a\nBackendNotImplemented error will be raised immediately. Ignoring any\nlower priority backends.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "alw_m8zh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.set_backend",
                    "defaultValue": "scipy.fft.set_backend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bhjsgd5i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ldv50egq",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "q2j51riv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n2s8q5ip",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_1n1lse3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cn4jncds",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "y1vsmc3r",
            "name": "fft.set_global_backend",
            "description": "Sets the global fft backend\n    \n    This utility method replaces the default backend for permanent use. It\n    will be tried in the list of backends automatically, unless the\n    ``only`` flag is set on a backend. This will be the first tried\n    backend outside the :obj:`set_backend` context manager.\n    \n    Parameters\n    ----------\n    backend : {object, 'scipy'}\n        The backend to use.\n        Can either be a ``str`` containing the name of a known backend\n        {'scipy'} or an object that implements the uarray protocol.\n    coerce : bool\n        Whether to coerce input types when trying this backend.\n    only : bool\n        If ``True``, no more backends will be tried if this fails.\n        Implied by ``coerce=True``.\n    try_last : bool\n        If ``True``, the global backend is tried after registered backends.\n    \n    Raises\n    ------\n    ValueError: If the backend does not implement ``numpy.scipy.fft``.\n    \n    Notes\n    -----\n    This will overwrite the previously set global backend, which, by default, is\n    the SciPy implementation.\n    \n    Examples\n    --------\n    We can set the global fft backend:\n    \n    >>> from scipy.fft import fft, set_global_backend\n    >>> set_global_backend(\"scipy\")  # Sets global backend (default is \"scipy\").\n    >>> fft([1])  # Calls the global backend\n    array([1.+0.j])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c0f16af589290e7bc274bf7e8cf4f56b38df7962a0a5e1c100cc883e989b2465",
            "fields": [
                {
                    "id": "qtvmazhg",
                    "encoding": "",
                    "name": "backend",
                    "value": "",
                    "defaultValue": "",
                    "description": "The backend to use.\nCan either be a ``str`` containing the name of a known backend\n{'scipy'} or an object that implements the uarray protocol.",
                    "type": "{object, 'scipy'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e2dgvvu9",
                    "encoding": "",
                    "name": "coerce",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to coerce input types when trying this backend.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eks50so4",
                    "encoding": "",
                    "name": "only",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True``, no more backends will be tried if this fails.\nImplied by ``coerce=True``.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hdjhits0",
                    "encoding": "",
                    "name": "try_last",
                    "value": false,
                    "defaultValue": false,
                    "description": "If ``True``, the global backend is tried after registered backends.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m2npdu0a",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.set_global_backend",
                    "defaultValue": "scipy.fft.set_global_backend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yt1gu5yd",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vynktgqk",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "o0cs3945",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lv9rm9rz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59wjoqbb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fhbtkrs_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "x87g9a6k",
            "name": "fft.set_workers",
            "description": "Context manager for the default number of workers used in `scipy.fft`\n    \n    Parameters\n    ----------\n    workers : int\n        The default number of workers to use\n    \n    Examples\n    --------\n    >>> import numpy as np\n    >>> from scipy import fft, signal\n    >>> rng = np.random.default_rng()\n    >>> x = rng.standard_normal((128, 64))\n    >>> with fft.set_workers(4):\n    ...     y = signal.fftconvolve(x, x)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b5bb84fb47be67ad95afc0bac022d89776f01bf0895b64fdb668626a01f75eda",
            "fields": [
                {
                    "id": "lg9_7shl",
                    "encoding": "",
                    "name": "workers",
                    "value": "",
                    "defaultValue": "",
                    "description": "The default number of workers to use",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "59jfvhba",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.set_workers",
                    "defaultValue": "scipy.fft.set_workers",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ktbteu0j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nlr0fk9k",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zlmml4w3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "an3l_2n8",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4i7s520_",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vq0etko7",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "aos2jed1",
            "name": "fft.skip_backend",
            "description": "Context manager to skip a backend within a fixed scope.\n    \n    Within the context of a ``with`` statement, the given backend will not be\n    called. This covers backends registered both locally and globally. Upon\n    exit, the backend will again be considered.\n    \n    Parameters\n    ----------\n    backend : {object, 'scipy'}\n        The backend to skip.\n        Can either be a ``str`` containing the name of a known backend\n        {'scipy'} or an object that implements the uarray protocol.\n    \n    Examples\n    --------\n    >>> import scipy.fft as fft\n    >>> fft.fft([1])  # Calls default SciPy backend\n    array([1.+0.j])\n    >>> with fft.skip_backend('scipy'):  # We explicitly skip the SciPy backend\n    ...     fft.fft([1])                 # leaving no implementation available\n    Traceback (most recent call last):\n        ...\n    BackendNotImplementedError: No selected backends had an implementation ...",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "aec392fcca9cae49a2fa1783edd853f3f7bc1e3a440d2a39ca872880b760327e",
            "fields": [
                {
                    "id": "xcgdplh5",
                    "encoding": "",
                    "name": "backend",
                    "value": "",
                    "defaultValue": "",
                    "description": "The backend to skip.\nCan either be a ``str`` containing the name of a known backend\n{'scipy'} or an object that implements the uarray protocol.",
                    "type": "{object, 'scipy'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "afbijoa_",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.fft.skip_backend",
                    "defaultValue": "scipy.fft.skip_backend",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8dty_sa8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xyelsyo4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "rgkrpjes",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7gvnyvbz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.fft",
                    "defaultValue": "scipy.fft",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1sdg8o95",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ce8q37ji",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}