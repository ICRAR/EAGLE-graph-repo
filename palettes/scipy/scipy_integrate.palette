{
    "modelData": {
        "filePath": "scipy_integrate.palette",
        "fileType": "Palette",
        "shortDescription": "",
        "detailedDescription": "=============================================\nIntegration and ODEs (:mod:`scipy.integrate`)\n=============================================\n\n.. currentmodule:: scipy.integrate\n\nIntegrating functions, given function object\n============================================\n\n.. autosummary::\n   :toctree: generated/\n\n   quad          -- General purpose integration\n   quad_vec      -- General purpose integration of vector-valued functions\n   cubature      -- General purpose multi-dimensional integration of array-valued functions\n   dblquad       -- General purpose double integration\n   tplquad       -- General purpose triple integration\n   nquad         -- General purpose N-D integration\n   tanhsinh      -- General purpose elementwise integration\n   fixed_quad    -- Integrate func(x) using Gaussian quadrature of order n\n   newton_cotes  -- Weights and error coefficient for Newton-Cotes integration\n   lebedev_rule\n   qmc_quad      -- N-D integration using Quasi-Monte Carlo quadrature\n   IntegrationWarning -- Warning on issues during integration\n\n\nIntegrating functions, given fixed samples\n==========================================\n\n.. autosummary::\n   :toctree: generated/\n\n   trapezoid            -- Use trapezoidal rule to compute integral.\n   cumulative_trapezoid -- Use trapezoidal rule to cumulatively compute integral.\n   simpson              -- Use Simpson's rule to compute integral from samples.\n   cumulative_simpson   -- Use Simpson's rule to cumulatively compute integral from samples.\n   romb                 -- Use Romberg Integration to compute integral from\n                        -- (2**k + 1) evenly-spaced samples.\n\n.. seealso::\n\n   :mod:`scipy.special` for orthogonal polynomials (special) for Gaussian\n   quadrature roots and weights for other weighting factors and regions.\n\nSummation\n=========\n\n.. autosummary::\n   :toctree: generated/\n\n   nsum\n\nSolving initial value problems for ODE systems\n==============================================\n\nThe solvers are implemented as individual classes, which can be used directly\n(low-level usage) or through a convenience function.\n\n.. autosummary::\n   :toctree: generated/\n\n   solve_ivp     -- Convenient function for ODE integration.\n   RK23          -- Explicit Runge-Kutta solver of order 3(2).\n   RK45          -- Explicit Runge-Kutta solver of order 5(4).\n   DOP853        -- Explicit Runge-Kutta solver of order 8.\n   Radau         -- Implicit Runge-Kutta solver of order 5.\n   BDF           -- Implicit multi-step variable order (1 to 5) solver.\n   LSODA         -- LSODA solver from ODEPACK Fortran package.\n   OdeSolver     -- Base class for ODE solvers.\n   DenseOutput   -- Local interpolant for computing a dense output.\n   OdeSolution   -- Class which represents a continuous ODE solution.\n\n\nOld API\n-------\n\nThese are the routines developed earlier for SciPy. They wrap older solvers\nimplemented in Fortran (mostly ODEPACK). While the interface to them is not\nparticularly convenient and certain features are missing compared to the new\nAPI, the solvers themselves are of good quality and work fast as compiled\nFortran code. In some cases, it might be worth using this old API.\n\n.. autosummary::\n   :toctree: generated/\n\n   odeint        -- General integration of ordinary differential equations.\n   ode           -- Integrate ODE using VODE and ZVODE routines.\n   complex_ode   -- Convert a complex-valued ODE to real-valued and integrate.\n   ODEintWarning -- Warning raised during the execution of `odeint`.\n\n\nSolving boundary value problems for ODE systems\n===============================================\n\n.. autosummary::\n   :toctree: generated/\n\n   solve_bvp     -- Solve a boundary value problem for a system of ODEs.",
        "repoService": "",
        "repoBranch": "",
        "repo": "",
        "generatorName": "dlg_paletteGen",
        "generatorVersion": "0.6.3",
        "generatorCommitHash": "",
        "schemaVersion": "AppRef",
        "readonly": true,
        "repositoryUrl": "scipy",
        "commitHash": "0.1",
        "downloadUrl": "",
        "signature": "48dd9bf89c85d0020d8d2f9f4746997357e2fc9021b20f18e4cc92ca7f2efe58",
        "lastModifiedName": "wici",
        "lastModifiedEmail": "",
        "lastModifiedDatetime": 1755100436.291454,
        "numLGNodes": 69
    },
    "nodeDataArray": [
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xkd0g_w6",
            "name": "BDF.__init__",
            "description": "\nImplicit method based on backward-differentiation formulas.\n    \n    This is a variable order method with the order varying automatically from\n    1 to 5. The general framework of the BDF algorithm is described in [1]_.\n    This class implements a quasi-constant step size as explained in [2]_.\n    The error estimation strategy for the constant-step BDF is derived in [3]_.\n    An accuracy enhancement using modified formulas (NDF) [2]_ is also implemented.\n    \n    Can be applied in the complex domain.\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system: the time derivative of the state ``y``\n        at time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\n        scalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\n        return an array of the same shape as ``y``. See `vectorized` for more\n        information.\n    t0 : float\n        Initial time.\n    y0 : array_like, shape (n,)\n        Initial state.\n    t_bound : float\n        Boundary time - the integration won't continue beyond it. It also\n        determines the direction of the integration.\n    first_step : float or None, optional\n        Initial step size. Default is ``None`` which means that the algorithm\n        should choose.\n    max_step : float, optional\n        Maximum allowed step size. Default is np.inf, i.e., the step size is not\n        bounded and determined solely by the solver.\n    rtol, atol : float and array_like, optional\n        Relative and absolute tolerances. The solver keeps the local error\n        estimates less than ``atol + rtol * abs(y)``. Here `rtol` controls a\n        relative accuracy (number of correct digits), while `atol` controls\n        absolute accuracy (number of correct decimal places). To achieve the\n        desired `rtol`, set `atol` to be smaller than the smallest value that\n        can be expected from ``rtol * abs(y)`` so that `rtol` dominates the\n        allowable error. If `atol` is larger than ``rtol * abs(y)`` the\n        number of correct digits is not guaranteed. Conversely, to achieve the\n        desired `atol` set `rtol` such that ``rtol * abs(y)`` is always smaller\n        than `atol`. If components of y have different scales, it might be\n        beneficial to set different `atol` values for different components by\n        passing array_like with shape (n,) for `atol`. Default values are\n        1e-3 for `rtol` and 1e-6 for `atol`.\n    jac : {None, array_like, sparse_matrix, callable}, optional\n        Jacobian matrix of the right-hand side of the system with respect to y,\n        required by this method. The Jacobian matrix has shape (n, n) and its\n        element (i, j) is equal to ``d f_i / d y_j``.\n        There are three ways to define the Jacobian:\n    \n            * If array_like or sparse_matrix, the Jacobian is assumed to\n              be constant.\n            * If callable, the Jacobian is assumed to depend on both\n              t and y; it will be called as ``jac(t, y)`` as necessary.\n              For the 'Radau' and 'BDF' methods, the return value might be a\n              sparse matrix.\n            * If None (default), the Jacobian will be approximated by\n              finite differences.\n    \n        It is generally recommended to provide the Jacobian rather than\n        relying on a finite-difference approximation.\n    jac_sparsity : {None, array_like, sparse matrix}, optional\n        Defines a sparsity structure of the Jacobian matrix for a\n        finite-difference approximation. Its shape must be (n, n). This argument\n        is ignored if `jac` is not `None`. If the Jacobian has only few non-zero\n        elements in *each* row, providing the sparsity structure will greatly\n        speed up the computations [4]_. A zero entry means that a corresponding\n        element in the Jacobian is always zero. If None (default), the Jacobian\n        is assumed to be dense.\n    vectorized : bool, optional\n        Whether `fun` can be called in a vectorized fashion. Default is False.\n    \n        If ``vectorized`` is False, `fun` will always be called with ``y`` of\n        shape ``(n,)``, where ``n = len(y0)``.\n    \n        If ``vectorized`` is True, `fun` may be called with ``y`` of shape\n        ``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\n        such that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\n        the returned array is the time derivative of the state corresponding\n        with a column of ``y``).\n    \n        Setting ``vectorized=True`` allows for faster finite difference\n        approximation of the Jacobian by this method, but may result in slower\n        execution overall in some circumstances (e.g. small ``len(y0)``).\n    \n    Attributes\n    ----------\n    n : int\n        Number of equations.\n    status : string\n        Current status of the solver: 'running', 'finished' or 'failed'.\n    t_bound : float\n        Boundary time.\n    direction : float\n        Integration direction: +1 or -1.\n    t : float\n        Current time.\n    y : ndarray\n        Current state.\n    t_old : float\n        Previous time. None if no steps were made yet.\n    step_size : float\n        Size of the last successful step. None if no steps were made yet.\n    nfev : int\n        Number of evaluations of the right-hand side.\n    njev : int\n        Number of evaluations of the Jacobian.\n    nlu : int\n        Number of LU decompositions.\n    \n    References\n    ----------\n    .. [1] G. D. Byrne, A. C. Hindmarsh, \"A Polyalgorithm for the Numerical\n           Solution of Ordinary Differential Equations\", ACM Transactions on\n           Mathematical Software, Vol. 1, No. 1, pp. 71-96, March 1975.\n    .. [2] L. F. Shampine, M. W. Reichelt, \"THE MATLAB ODE SUITE\", SIAM J. SCI.\n           COMPUTE., Vol. 18, No. 1, pp. 1-22, January 1997.\n    .. [3] E. Hairer, G. Wanner, \"Solving Ordinary Differential Equations I:\n           Nonstiff Problems\", Sec. III.2.\n    .. [4] A. Curtis, M. J. D. Powell, and J. Reid, \"On the estimation of\n           sparse Jacobian matrices\", Journal of the Institute of Mathematics\n           and its Applications, 13, pp. 117-120, 1974.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "41ce5c6664ee430f84f51217d33b28837d9672ed8c88929120b5e9597467145c",
            "fields": [
                {
                    "id": "odxnojg5",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to BDF object",
                    "type": "Object:scipy.integrate._ivp.bdf.BDF",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9qj2soio",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system: the time derivative of the state ``y``\nat time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\nscalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\nreturn an array of the same shape as ``y``. See `vectorized` for more\ninformation.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0pk7_z86",
                    "encoding": "",
                    "name": "t0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3a6ul1f1",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial state.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5gm58bjk",
                    "encoding": "",
                    "name": "t_bound",
                    "value": "",
                    "defaultValue": "",
                    "description": "Boundary time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zxd5gqwd",
                    "encoding": "",
                    "name": "max_step",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Maximum allowed step size. Default is np.inf, i.e., the step size is not\nbounded and determined solely by the solver.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "himyvpsh",
                    "encoding": "",
                    "name": "rtol",
                    "value": 0.001,
                    "defaultValue": 0.001,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0pnnc8k2",
                    "encoding": "",
                    "name": "atol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozfe9ga4",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Jacobian matrix of the right-hand side of the system with respect to y,\nrequired by this method. The Jacobian matrix has shape (n, n) and its\nelement (i, j) is equal to ``d f_i / d y_j``.\nThere are three ways to define the Jacobian:\n\n    * If array_like or sparse_matrix, the Jacobian is assumed to\n      be constant.\n    * If callable, the Jacobian is assumed to depend on both\n      t and y; it will be called as ``jac(t, y)`` as necessary.\n      For the 'Radau' and 'BDF' methods, the return value might be a\n      sparse matrix.\n    * If None (default), the Jacobian will be approximated by\n      finite differences.\n\nIt is generally recommended to provide the Jacobian rather than\nrelying on a finite-difference approximation.",
                    "type": "{None, arraylike, sparsematrix, callable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "riwbfap5",
                    "encoding": "",
                    "name": "jac_sparsity",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines a sparsity structure of the Jacobian matrix for a\nfinite-difference approximation. Its shape must be (n, n). This argument\nis ignored if `jac` is not `None`. If the Jacobian has only few non-zero\nelements in *each* row, providing the sparsity structure will greatly\nspeed up the computations [4]_. A zero entry means that a corresponding\nelement in the Jacobian is always zero. If None (default), the Jacobian\nis assumed to be dense.",
                    "type": "{None, arraylike, sparse matrix}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "doy9b7hf",
                    "encoding": "",
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether `fun` can be called in a vectorized fashion. Default is False.\n\nIf ``vectorized`` is False, `fun` will always be called with ``y`` of\nshape ``(n,)``, where ``n = len(y0)``.\n\nIf ``vectorized`` is True, `fun` may be called with ``y`` of shape\n``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\nsuch that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\nthe returned array is the time derivative of the state corresponding\nwith a column of ``y``).\n\nSetting ``vectorized=True`` allows for faster finite difference\napproximation of the Jacobian by this method, but may result in slower\nexecution overall in some circumstances (e.g. small ``len(y0)``).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqem3a0f",
                    "encoding": "",
                    "name": "first_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial step size. Default is ``None`` which means that the algorithm\nshould choose.",
                    "type": "float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zu5oxffy",
                    "encoding": "",
                    "name": "extraneous",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6kxmhvot",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.bdf.BDF.__init__",
                    "defaultValue": "scipy.integrate._ivp.bdf.BDF.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bslyilf7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q3nojx2e",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7tw5x7li",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nlu5_foi",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.bdf.BDF",
                    "defaultValue": "scipy.integrate._ivp.bdf.BDF",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "y7tpef9u",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p3g0yiit",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "74d73c6z",
            "name": "BDF.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c92143550deb5919d6f57bb8c85c6a2142700ba70b203f2f13c172f3f494f5cb",
            "fields": [
                {
                    "id": "b2yg6j_d",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.bdf.BDF.dense_output object",
                    "type": "Object:scipy.integrate._ivp.bdf.BDF",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0epiio31",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.bdf.BDF.dense_output",
                    "defaultValue": "scipy.integrate._ivp.bdf.BDF.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j57wxj99",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lezy919o",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yhcenysb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j4c1hfe4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.bdf.BDF",
                    "defaultValue": "scipy.integrate._ivp.bdf.BDF",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eplnnwmr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "urfpj7sg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "59xdllxf",
            "name": "BDF.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e34d5d0100c4cdbae5deae0e9c1058a42f70ba97791fdde2fe454a9cf65d507d",
            "fields": [
                {
                    "id": "ahpbjodh",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.bdf.BDF.step object",
                    "type": "Object:scipy.integrate._ivp.bdf.BDF",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j6i_hl2x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.bdf.BDF.step",
                    "defaultValue": "scipy.integrate._ivp.bdf.BDF.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ckg49xoq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "knpr3hr7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "tzb2vxem",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ytdkxuni",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.bdf.BDF",
                    "defaultValue": "scipy.integrate._ivp.bdf.BDF",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e4mcp0a7",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7aqfaaye",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "ueny5824",
            "name": "DOP853.__init__",
            "description": "\nExplicit Runge-Kutta method of order 8.\n    \n    This is a Python implementation of \"DOP853\" algorithm originally written\n    in Fortran [1]_, [2]_. Note that this is not a literal translation, but\n    the algorithmic core and coefficients are the same.\n    \n    Can be applied in the complex domain.\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system. The calling signature is ``fun(t, y)``.\n        Here, ``t`` is a scalar, and there are two options for the ndarray ``y``:\n        It can either have shape (n,); then ``fun`` must return array_like with\n        shape (n,). Alternatively it can have shape (n, k); then ``fun``\n        must return an array_like with shape (n, k), i.e. each column\n        corresponds to a single column in ``y``. The choice between the two\n        options is determined by `vectorized` argument (see below).\n    t0 : float\n        Initial time.\n    y0 : array_like, shape (n,)\n        Initial state.\n    t_bound : float\n        Boundary time - the integration won't continue beyond it. It also\n        determines the direction of the integration.\n    first_step : float or None, optional\n        Initial step size. Default is ``None`` which means that the algorithm\n        should choose.\n    max_step : float, optional\n        Maximum allowed step size. Default is np.inf, i.e. the step size is not\n        bounded and determined solely by the solver.\n    rtol, atol : float and array_like, optional\n        Relative and absolute tolerances. The solver keeps the local error\n        estimates less than ``atol + rtol * abs(y)``. Here `rtol` controls a\n        relative accuracy (number of correct digits), while `atol` controls\n        absolute accuracy (number of correct decimal places). To achieve the\n        desired `rtol`, set `atol` to be smaller than the smallest value that\n        can be expected from ``rtol * abs(y)`` so that `rtol` dominates the\n        allowable error. If `atol` is larger than ``rtol * abs(y)`` the\n        number of correct digits is not guaranteed. Conversely, to achieve the\n        desired `atol` set `rtol` such that ``rtol * abs(y)`` is always smaller\n        than `atol`. If components of y have different scales, it might be\n        beneficial to set different `atol` values for different components by\n        passing array_like with shape (n,) for `atol`. Default values are\n        1e-3 for `rtol` and 1e-6 for `atol`.\n    vectorized : bool, optional\n        Whether `fun` is implemented in a vectorized fashion. Default is False.\n    \n    Attributes\n    ----------\n    n : int\n        Number of equations.\n    status : string\n        Current status of the solver: 'running', 'finished' or 'failed'.\n    t_bound : float\n        Boundary time.\n    direction : float\n        Integration direction: +1 or -1.\n    t : float\n        Current time.\n    y : ndarray\n        Current state.\n    t_old : float\n        Previous time. None if no steps were made yet.\n    step_size : float\n        Size of the last successful step. None if no steps were made yet.\n    nfev : int\n        Number evaluations of the system's right-hand side.\n    njev : int\n        Number of evaluations of the Jacobian. Is always 0 for this solver\n        as it does not use the Jacobian.\n    nlu : int\n        Number of LU decompositions. Is always 0 for this solver.\n    \n    References\n    ----------\n    .. [1] E. Hairer, S. P. Norsett G. Wanner, \"Solving Ordinary Differential\n           Equations I: Nonstiff Problems\", Sec. II.\n    .. [2] `Page with original Fortran code of DOP853\n            <http://www.unige.ch/~hairer/software.html>`_.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "38601f58d76cf0fadc6c607d78e62c17e86afe8ec8bfd88d96d6cb9a0ccbf1a8",
            "fields": [
                {
                    "id": "ju0gv56q",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to DOP853 object",
                    "type": "Object:scipy.integrate._ivp.rk.DOP853",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i54ehq70",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system. The calling signature is ``fun(t, y)``.\nHere, ``t`` is a scalar, and there are two options for the ndarray ``y``:\nIt can either have shape (n,); then ``fun`` must return array_like with\nshape (n,). Alternatively it can have shape (n, k); then ``fun``\nmust return an array_like with shape (n, k), i.e. each column\ncorresponds to a single column in ``y``. The choice between the two\noptions is determined by `vectorized` argument (see below).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "useqy8hm",
                    "encoding": "",
                    "name": "t0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i2r_ssrc",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial state.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wqjwgjux",
                    "encoding": "",
                    "name": "t_bound",
                    "value": "",
                    "defaultValue": "",
                    "description": "Boundary time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dwbrijuu",
                    "encoding": "",
                    "name": "max_step",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Maximum allowed step size. Default is np.inf, i.e. the step size is not\nbounded and determined solely by the solver.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68d_v82e",
                    "encoding": "",
                    "name": "rtol",
                    "value": 0.001,
                    "defaultValue": 0.001,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5n4lgl1v",
                    "encoding": "",
                    "name": "atol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zb9b_gs6",
                    "encoding": "",
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether `fun` is implemented in a vectorized fashion. Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ucicxqcr",
                    "encoding": "",
                    "name": "first_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial step size. Default is ``None`` which means that the algorithm\nshould choose.",
                    "type": "float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dkmoekaq",
                    "encoding": "",
                    "name": "extraneous",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mxq3atw9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.DOP853.__init__",
                    "defaultValue": "scipy.integrate._ivp.rk.DOP853.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "821u1_zy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4j127ia",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "g3u2ywxd",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wz128oy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.DOP853",
                    "defaultValue": "scipy.integrate._ivp.rk.DOP853",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1uup0ctm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_27i8771",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "pskx0y6p",
            "name": "DOP853.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "33b583de00c50154cad2da23d20f6f585b3eaedb36af438f74c84892773768da",
            "fields": [
                {
                    "id": "1ue1ipft",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.rk.DOP853.dense_output object",
                    "type": "Object:scipy.integrate._ivp.rk.DOP853",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "adm9ancw",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.DOP853.dense_output",
                    "defaultValue": "scipy.integrate._ivp.rk.DOP853.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xu_k79bx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b5k5cef4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "i79tojgf",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9z3vqo7n",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.DOP853",
                    "defaultValue": "scipy.integrate._ivp.rk.DOP853",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0asjtp82",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ff0m6gwb",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "d2u_etgx",
            "name": "DOP853.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2beae666df26f93e550b3d107a4b3d7aa2f496f8883e382428088b861a94c65a",
            "fields": [
                {
                    "id": "mhgqw721",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.rk.DOP853.step object",
                    "type": "Object:scipy.integrate._ivp.rk.DOP853",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cjm7iuq9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.DOP853.step",
                    "defaultValue": "scipy.integrate._ivp.rk.DOP853.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wrhl8ruc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aw2pvlo8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "lb18zocr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "805kxqct",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.DOP853",
                    "defaultValue": "scipy.integrate._ivp.rk.DOP853",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1clnwjmb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rq9pwles",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "n62t3gdl",
            "name": "DenseOutput.__init__",
            "description": "\nBase class for local interpolant over step made by an ODE solver.\n    \n    It interpolates between `t_min` and `t_max` (see Attributes below).\n    Evaluation outside this interval is not forbidden, but the accuracy is not\n    guaranteed.\n    \n    Attributes\n    ----------\n    t_min, t_max : float\n        Time range of the interpolation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ef3f20b9eb6ba3af55cbb5589087149678fb73f89694f4880745df835b0d0ec1",
            "fields": [
                {
                    "id": "y3j8jfip",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to DenseOutput object",
                    "type": "Object:scipy.integrate._ivp.base.DenseOutput",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kcoghmva",
                    "encoding": "",
                    "name": "t_old",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "90iuf6qh",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mqqa8jfp",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.base.DenseOutput.__init__",
                    "defaultValue": "scipy.integrate._ivp.base.DenseOutput.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "858hney9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uvu7hqwd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4p_5r9sb",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2xs5ymx6",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.base.DenseOutput",
                    "defaultValue": "scipy.integrate._ivp.base.DenseOutput",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbyjyj0o",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bbkyymdn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "08bgo1om",
            "name": "IntegrationWarning.add_note",
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d11526d6df50ab97c6b10b03560b0ac5d0eeea7a0ba16b1e3be497cd3004ac77",
            "fields": [
                {
                    "id": "36aqzxvf",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._quadpack_py.IntegrationWarning.add_note object",
                    "type": "Object:scipy.integrate._quadpack_py.IntegrationWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1o4jhbs7",
                    "encoding": "",
                    "name": "note",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gm8qdywk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._quadpack_py.IntegrationWarning.add_note",
                    "defaultValue": "scipy.integrate._quadpack_py.IntegrationWarning.add_note",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "avgj2381",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jqe6s6u_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xtaox90v",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ljawb9rq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._quadpack_py.IntegrationWarning",
                    "defaultValue": "scipy.integrate._quadpack_py.IntegrationWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3wt54s83",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tsfcsicn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "36nlpop8",
            "name": "IntegrationWarning.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6a711689f3b63329ee72868ab2ea5655fe62b17b8f87bb9db05fdf1e77550a8a",
            "fields": [
                {
                    "id": "ydk2tged",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._quadpack_py.IntegrationWarning.with_traceback object",
                    "type": "Object:scipy.integrate._quadpack_py.IntegrationWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t3fgm3z3",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qg5r_5a9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._quadpack_py.IntegrationWarning.with_traceback",
                    "defaultValue": "scipy.integrate._quadpack_py.IntegrationWarning.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jqwacfyn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6ijonkp1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "63wv89gc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "06jyl9i1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._quadpack_py.IntegrationWarning",
                    "defaultValue": "scipy.integrate._quadpack_py.IntegrationWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zpqjiv7e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ydevv4ef",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "lg3n38i9",
            "name": "LSODA.__init__",
            "description": "\nAdams/BDF method with automatic stiffness detection and switching.\n    \n    This is a wrapper to the Fortran solver from ODEPACK [1]_. It switches\n    automatically between the nonstiff Adams method and the stiff BDF method.\n    The method was originally detailed in [2]_.\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system: the time derivative of the state ``y``\n        at time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\n        scalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\n        return an array of the same shape as ``y``. See `vectorized` for more\n        information.\n    t0 : float\n        Initial time.\n    y0 : array_like, shape (n,)\n        Initial state.\n    t_bound : float\n        Boundary time - the integration won't continue beyond it. It also\n        determines the direction of the integration.\n    first_step : float or None, optional\n        Initial step size. Default is ``None`` which means that the algorithm\n        should choose.\n    min_step : float, optional\n        Minimum allowed step size. Default is 0.0, i.e., the step size is not\n        bounded and determined solely by the solver.\n    max_step : float, optional\n        Maximum allowed step size. Default is np.inf, i.e., the step size is not\n        bounded and determined solely by the solver.\n    rtol, atol : float and array_like, optional\n        Relative and absolute tolerances. The solver keeps the local error\n        estimates less than ``atol + rtol * abs(y)``. Here `rtol` controls a\n        relative accuracy (number of correct digits), while `atol` controls\n        absolute accuracy (number of correct decimal places). To achieve the\n        desired `rtol`, set `atol` to be smaller than the smallest value that\n        can be expected from ``rtol * abs(y)`` so that `rtol` dominates the\n        allowable error. If `atol` is larger than ``rtol * abs(y)`` the\n        number of correct digits is not guaranteed. Conversely, to achieve the\n        desired `atol` set `rtol` such that ``rtol * abs(y)`` is always smaller\n        than `atol`. If components of y have different scales, it might be\n        beneficial to set different `atol` values for different components by\n        passing array_like with shape (n,) for `atol`. Default values are\n        1e-3 for `rtol` and 1e-6 for `atol`.\n    jac : None or callable, optional\n        Jacobian matrix of the right-hand side of the system with respect to\n        ``y``. The Jacobian matrix has shape (n, n) and its element (i, j) is\n        equal to ``d f_i / d y_j``. The function will be called as\n        ``jac(t, y)``. If None (default), the Jacobian will be\n        approximated by finite differences. It is generally recommended to\n        provide the Jacobian rather than relying on a finite-difference\n        approximation.\n    lband, uband : int or None\n        Parameters defining the bandwidth of the Jacobian,\n        i.e., ``jac[i, j] != 0 only for i - lband <= j <= i + uband``. Setting\n        these requires your jac routine to return the Jacobian in the packed format:\n        the returned array must have ``n`` columns and ``uband + lband + 1``\n        rows in which Jacobian diagonals are written. Specifically\n        ``jac_packed[uband + i - j , j] = jac[i, j]``. The same format is used\n        in `scipy.linalg.solve_banded` (check for an illustration).\n        These parameters can be also used with ``jac=None`` to reduce the\n        number of Jacobian elements estimated by finite differences.\n    vectorized : bool, optional\n        Whether `fun` may be called in a vectorized fashion. False (default)\n        is recommended for this solver.\n    \n        If ``vectorized`` is False, `fun` will always be called with ``y`` of\n        shape ``(n,)``, where ``n = len(y0)``.\n    \n        If ``vectorized`` is True, `fun` may be called with ``y`` of shape\n        ``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\n        such that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\n        the returned array is the time derivative of the state corresponding\n        with a column of ``y``).\n    \n        Setting ``vectorized=True`` allows for faster finite difference\n        approximation of the Jacobian by methods 'Radau' and 'BDF', but\n        will result in slower execution for this solver.\n    \n    Attributes\n    ----------\n    n : int\n        Number of equations.\n    status : string\n        Current status of the solver: 'running', 'finished' or 'failed'.\n    t_bound : float\n        Boundary time.\n    direction : float\n        Integration direction: +1 or -1.\n    t : float\n        Current time.\n    y : ndarray\n        Current state.\n    t_old : float\n        Previous time. None if no steps were made yet.\n    nfev : int\n        Number of evaluations of the right-hand side.\n    njev : int\n        Number of evaluations of the Jacobian.\n    \n    References\n    ----------\n    .. [1] A. C. Hindmarsh, \"ODEPACK, A Systematized Collection of ODE\n           Solvers,\" IMACS Transactions on Scientific Computation, Vol 1.,\n           pp. 55-64, 1983.\n    .. [2] L. Petzold, \"Automatic selection of methods for solving stiff and\n           nonstiff systems of ordinary differential equations\", SIAM Journal\n           on Scientific and Statistical Computing, Vol. 4, No. 1, pp. 136-148,\n           1983.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "98de7c657c95b11228bfffdda209922c2de7262f29f4012c111a78d069c63b99",
            "fields": [
                {
                    "id": "wt7hs9g0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to LSODA object",
                    "type": "Object:scipy.integrate._ivp.lsoda.LSODA",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i7zuf1fh",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system: the time derivative of the state ``y``\nat time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\nscalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\nreturn an array of the same shape as ``y``. See `vectorized` for more\ninformation.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_od115f1",
                    "encoding": "",
                    "name": "t0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d2g83cdr",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial state.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "amioa874",
                    "encoding": "",
                    "name": "t_bound",
                    "value": "",
                    "defaultValue": "",
                    "description": "Boundary time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w4l2aodq",
                    "encoding": "",
                    "name": "first_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial step size. Default is ``None`` which means that the algorithm\nshould choose.",
                    "type": "float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_bn8qkl1",
                    "encoding": "",
                    "name": "min_step",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "Minimum allowed step size. Default is 0.0, i.e., the step size is not\nbounded and determined solely by the solver.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ghkoq5xx",
                    "encoding": "",
                    "name": "max_step",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Maximum allowed step size. Default is np.inf, i.e., the step size is not\nbounded and determined solely by the solver.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "txwl36v3",
                    "encoding": "",
                    "name": "rtol",
                    "value": 0.001,
                    "defaultValue": 0.001,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9mpsds68",
                    "encoding": "",
                    "name": "atol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vzfz62md",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Jacobian matrix of the right-hand side of the system with respect to\n``y``. The Jacobian matrix has shape (n, n) and its element (i, j) is\nequal to ``d f_i / d y_j``. The function will be called as\n``jac(t, y)``. If None (default), the Jacobian will be\napproximated by finite differences. It is generally recommended to\nprovide the Jacobian rather than relying on a finite-difference\napproximation.",
                    "type": "None or callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4fwfffo8",
                    "encoding": "",
                    "name": "lband",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8c7cwvy5",
                    "encoding": "",
                    "name": "uband",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dmbasgb8",
                    "encoding": "",
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether `fun` may be called in a vectorized fashion. False (default)\nis recommended for this solver.\n\nIf ``vectorized`` is False, `fun` will always be called with ``y`` of\nshape ``(n,)``, where ``n = len(y0)``.\n\nIf ``vectorized`` is True, `fun` may be called with ``y`` of shape\n``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\nsuch that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\nthe returned array is the time derivative of the state corresponding\nwith a column of ``y``).\n\nSetting ``vectorized=True`` allows for faster finite difference\napproximation of the Jacobian by methods 'Radau' and 'BDF', but\nwill result in slower execution for this solver.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g3zjucx5",
                    "encoding": "",
                    "name": "extraneous",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vw0rt94x",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.lsoda.LSODA.__init__",
                    "defaultValue": "scipy.integrate._ivp.lsoda.LSODA.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k1tnwd0l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4bw035l_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jdqxhjav",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3341gx1l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.lsoda.LSODA",
                    "defaultValue": "scipy.integrate._ivp.lsoda.LSODA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3i_q568r",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zszi8wmx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "rxouvtr_",
            "name": "LSODA.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "96370c8982a71ad8f82d5782d720ca1cd411cba6f950caf39664ecc005eb9f63",
            "fields": [
                {
                    "id": "u3ti52p0",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.lsoda.LSODA.dense_output object",
                    "type": "Object:scipy.integrate._ivp.lsoda.LSODA",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "95re6e7z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.lsoda.LSODA.dense_output",
                    "defaultValue": "scipy.integrate._ivp.lsoda.LSODA.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xy5natxt",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5q2cmx37",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4k01e8wr",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyl6745e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.lsoda.LSODA",
                    "defaultValue": "scipy.integrate._ivp.lsoda.LSODA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68bbt90t",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8jaoes17",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "yatj43rl",
            "name": "LSODA.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ad14dd01d829349fb1babd604c307bfddb6941d873c7092a453860480bf95ec3",
            "fields": [
                {
                    "id": "a_j4v2ij",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.lsoda.LSODA.step object",
                    "type": "Object:scipy.integrate._ivp.lsoda.LSODA",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wfnhuc4z",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.lsoda.LSODA.step",
                    "defaultValue": "scipy.integrate._ivp.lsoda.LSODA.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wwsomcim",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uu5xh5gs",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7ums282c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fr1ucyl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.lsoda.LSODA",
                    "defaultValue": "scipy.integrate._ivp.lsoda.LSODA",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bizjg64e",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9xgz3zba",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "t2o41b8z",
            "name": "ODEintWarning.add_note",
            "description": "Exception.add_note(note) --\nadd a note to the exception",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b7e8a8bfa063c81719b6516113aee745b0d13c854387da92a9b978899e168404",
            "fields": [
                {
                    "id": "ml6ub0di",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._odepack_py.ODEintWarning.add_note object",
                    "type": "Object:scipy.integrate._odepack_py.ODEintWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hc9s99el",
                    "encoding": "",
                    "name": "note",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k7asfdzi",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._odepack_py.ODEintWarning.add_note",
                    "defaultValue": "scipy.integrate._odepack_py.ODEintWarning.add_note",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d_7av114",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nxsbvp2a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "z6_59kx9",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n8hmy9b5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._odepack_py.ODEintWarning",
                    "defaultValue": "scipy.integrate._odepack_py.ODEintWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sd7ehc02",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fbd9hv46",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "k_efgcet",
            "name": "ODEintWarning.with_traceback",
            "description": "Exception.with_traceback(tb) --\nset self.__traceback__ to tb and return self.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bce4874669284d8d270dfbe8af2d126ca224b55d88765884a1d635d6a1a46d35",
            "fields": [
                {
                    "id": "epmrdni3",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._odepack_py.ODEintWarning.with_traceback object",
                    "type": "Object:scipy.integrate._odepack_py.ODEintWarning",
                    "parameterType": "ComponentParameter",
                    "usage": "InputOutput",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbkzlawy",
                    "encoding": "",
                    "name": "tb",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p8afp3pa",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._odepack_py.ODEintWarning.with_traceback",
                    "defaultValue": "scipy.integrate._odepack_py.ODEintWarning.with_traceback",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "85zj06z8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nyxi7f36",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4298uopg",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fzjfvym9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._odepack_py.ODEintWarning",
                    "defaultValue": "scipy.integrate._odepack_py.ODEintWarning",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h9x28kkp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p86gpb7x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "i1lkyfvu",
            "name": "OdeSolution.__init__",
            "description": "\nContinuous ODE solution.\n    \n    It is organized as a collection of `DenseOutput` objects which represent\n    local interpolants. It provides an algorithm to select a right interpolant\n    for each given point.\n    \n    The interpolants cover the range between `t_min` and `t_max` (see\n    Attributes below). Evaluation outside this interval is not forbidden, but\n    the accuracy is not guaranteed.\n    \n    When evaluating at a breakpoint (one of the values in `ts`) a segment with\n    the lower index is selected.\n    \n    Parameters\n    ----------\n    ts : array_like, shape (n_segments + 1,)\n        Time instants between which local interpolants are defined. Must\n        be strictly increasing or decreasing (zero segment with two points is\n        also allowed).\n    interpolants : list of DenseOutput with n_segments elements\n        Local interpolants. An i-th interpolant is assumed to be defined\n        between ``ts[i]`` and ``ts[i + 1]``.\n    alt_segment : boolean\n        Requests the alternative interpolant segment selection scheme. At each\n        solver integration point, two interpolant segments are available. The\n        default (False) and alternative (True) behaviours select the segment\n        for which the requested time corresponded to ``t`` and ``t_old``,\n        respectively. This functionality is only relevant for testing the\n        interpolants' accuracy: different integrators use different\n        construction strategies.\n    \n    Attributes\n    ----------\n    t_min, t_max : float\n        Time range of the interpolation.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5a87b67f5cfb07919b9e39b6a8a641f5c3cf044a26d65cdfbfb288867ff61683",
            "fields": [
                {
                    "id": "rx3iq4op",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to OdeSolution object",
                    "type": "Object:scipy.integrate._ivp.common.OdeSolution",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gp_uldb_",
                    "encoding": "",
                    "name": "ts",
                    "value": "",
                    "defaultValue": "",
                    "description": "Time instants between which local interpolants are defined. Must\nbe strictly increasing or decreasing (zero segment with two points is\nalso allowed).",
                    "type": "arraylike, shape (nsegments + 1,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1u3mj3lu",
                    "encoding": "",
                    "name": "interpolants",
                    "value": "",
                    "defaultValue": "",
                    "description": "Local interpolants. An i-th interpolant is assumed to be defined\nbetween ``ts[i]`` and ``ts[i + 1]``.",
                    "type": "list of DenseOutput with nsegments elements",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mi972zq",
                    "encoding": "",
                    "name": "alt_segment",
                    "value": false,
                    "defaultValue": false,
                    "description": "Requests the alternative interpolant segment selection scheme. At each\nsolver integration point, two interpolant segments are available. The\ndefault (False) and alternative (True) behaviours select the segment\nfor which the requested time corresponded to ``t`` and ``t_old``,\nrespectively. This functionality is only relevant for testing the\ninterpolants' accuracy: different integrators use different\nconstruction strategies.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "of1keops",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.common.OdeSolution.__init__",
                    "defaultValue": "scipy.integrate._ivp.common.OdeSolution.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tld6j6is",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fz4o7y_g",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "x0931f9c",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3h1di6gx",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.common.OdeSolution",
                    "defaultValue": "scipy.integrate._ivp.common.OdeSolution",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rh4m3nny",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgufar_n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "896znc47",
            "name": "OdeSolver.__init__",
            "description": "\nBase class for ODE solvers.\n    \n    In order to implement a new solver you need to follow the guidelines:\n    \n        1. A constructor must accept parameters presented in the base class\n           (listed below) along with any other parameters specific to a solver.\n        2. A constructor must accept arbitrary extraneous arguments\n           ``**extraneous``, but warn that these arguments are irrelevant\n           using `common.warn_extraneous` function. Do not pass these\n           arguments to the base class.\n        3. A solver must implement a private method `_step_impl(self)` which\n           propagates a solver one step further. It must return tuple\n           ``(success, message)``, where ``success`` is a boolean indicating\n           whether a step was successful, and ``message`` is a string\n           containing description of a failure if a step failed or None\n           otherwise.\n        4. A solver must implement a private method `_dense_output_impl(self)`,\n           which returns a `DenseOutput` object covering the last successful\n           step.\n        5. A solver must have attributes listed below in Attributes section.\n           Note that ``t_old`` and ``step_size`` are updated automatically.\n        6. Use `fun(self, t, y)` method for the system rhs evaluation, this\n           way the number of function evaluations (`nfev`) will be tracked\n           automatically.\n        7. For convenience, a base class provides `fun_single(self, t, y)` and\n           `fun_vectorized(self, t, y)` for evaluating the rhs in\n           non-vectorized and vectorized fashions respectively (regardless of\n           how `fun` from the constructor is implemented). These calls don't\n           increment `nfev`.\n        8. If a solver uses a Jacobian matrix and LU decompositions, it should\n           track the number of Jacobian evaluations (`njev`) and the number of\n           LU decompositions (`nlu`).\n        9. By convention, the function evaluations used to compute a finite\n           difference approximation of the Jacobian should not be counted in\n           `nfev`, thus use `fun_single(self, t, y)` or\n           `fun_vectorized(self, t, y)` when computing a finite difference\n           approximation of the Jacobian.\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system: the time derivative of the state ``y``\n        at time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\n        scalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\n        return an array of the same shape as ``y``. See `vectorized` for more\n        information.\n    t0 : float\n        Initial time.\n    y0 : array_like, shape (n,)\n        Initial state.\n    t_bound : float\n        Boundary time --- the integration won't continue beyond it. It also\n        determines the direction of the integration.\n    vectorized : bool\n        Whether `fun` can be called in a vectorized fashion. Default is False.\n    \n        If ``vectorized`` is False, `fun` will always be called with ``y`` of\n        shape ``(n,)``, where ``n = len(y0)``.\n    \n        If ``vectorized`` is True, `fun` may be called with ``y`` of shape\n        ``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\n        such that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\n        the returned array is the time derivative of the state corresponding\n        with a column of ``y``).\n    \n        Setting ``vectorized=True`` allows for faster finite difference\n        approximation of the Jacobian by methods 'Radau' and 'BDF', but\n        will result in slower execution for other methods. It can also\n        result in slower overall execution for 'Radau' and 'BDF' in some\n        circumstances (e.g. small ``len(y0)``).\n    support_complex : bool, optional\n        Whether integration in a complex domain should be supported.\n        Generally determined by a derived solver class capabilities.\n        Default is False.\n    \n    Attributes\n    ----------\n    n : int\n        Number of equations.\n    status : string\n        Current status of the solver: 'running', 'finished' or 'failed'.\n    t_bound : float\n        Boundary time.\n    direction : float\n        Integration direction: +1 or -1.\n    t : float\n        Current time.\n    y : ndarray\n        Current state.\n    t_old : float\n        Previous time. None if no steps were made yet.\n    step_size : float\n        Size of the last successful step. None if no steps were made yet.\n    nfev : int\n        Number of the system's rhs evaluations.\n    njev : int\n        Number of the Jacobian evaluations.\n    nlu : int\n        Number of LU decompositions.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "96e4fe84225937ca1bc67060af8410a73441bb06b93310cfa648ba02e3b50732",
            "fields": [
                {
                    "id": "4octpwxp",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to OdeSolver object",
                    "type": "Object:scipy.integrate._ivp.base.OdeSolver",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5hpixb9z",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system: the time derivative of the state ``y``\nat time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\nscalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\nreturn an array of the same shape as ``y``. See `vectorized` for more\ninformation.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ffo02_x",
                    "encoding": "",
                    "name": "t0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6f5mcu_w",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial state.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ulf1v5t",
                    "encoding": "",
                    "name": "t_bound",
                    "value": "",
                    "defaultValue": "",
                    "description": "Boundary time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6mzujao3",
                    "encoding": "",
                    "name": "vectorized",
                    "value": "",
                    "defaultValue": "",
                    "description": "Whether `fun` can be called in a vectorized fashion. Default is False.\n\nIf ``vectorized`` is False, `fun` will always be called with ``y`` of\nshape ``(n,)``, where ``n = len(y0)``.\n\nIf ``vectorized`` is True, `fun` may be called with ``y`` of shape\n``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\nsuch that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\nthe returned array is the time derivative of the state corresponding\nwith a column of ``y``).\n\nSetting ``vectorized=True`` allows for faster finite difference\napproximation of the Jacobian by methods 'Radau' and 'BDF', but\nwill result in slower execution for other methods. It can also\nresult in slower overall execution for 'Radau' and 'BDF' in some\ncircumstances (e.g. small ``len(y0)``).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqoi0d9_",
                    "encoding": "",
                    "name": "support_complex",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether integration in a complex domain should be supported.\nGenerally determined by a derived solver class capabilities.\nDefault is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cf0r8i_4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.base.OdeSolver.__init__",
                    "defaultValue": "scipy.integrate._ivp.base.OdeSolver.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ygwa2kzn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m0t7v8c_",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "_84_ggge",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gkx5ivb_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.base.OdeSolver",
                    "defaultValue": "scipy.integrate._ivp.base.OdeSolver",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c_ooeavy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6g0x5pze",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "q_vqr60k",
            "name": "OdeSolver.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "a6dba660f7d6ca06b00ae71d8d95bbd938f0e14107b45e1ca35cbde03af8bde1",
            "fields": [
                {
                    "id": "8a2hj4x7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.base.OdeSolver.dense_output object",
                    "type": "Object:scipy.integrate._ivp.base.OdeSolver",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fn17l5w2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.base.OdeSolver.dense_output",
                    "defaultValue": "scipy.integrate._ivp.base.OdeSolver.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8cpkva3y",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bh9o7tgh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pk0az9bv",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0dmhzvq9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.base.OdeSolver",
                    "defaultValue": "scipy.integrate._ivp.base.OdeSolver",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rpw90pmm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0p5artnj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "kj0t8_te",
            "name": "OdeSolver.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "63521af5e0fb0eb2314f9e63fa1da6b9ee9e262037980f1e78087af1e39c2939",
            "fields": [
                {
                    "id": "cl24fg0h",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.base.OdeSolver.step object",
                    "type": "Object:scipy.integrate._ivp.base.OdeSolver",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g7f1s47i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.base.OdeSolver.step",
                    "defaultValue": "scipy.integrate._ivp.base.OdeSolver.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3qxjreo8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70ysm038",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wqi8rpfj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kvhupjx4",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.base.OdeSolver",
                    "defaultValue": "scipy.integrate._ivp.base.OdeSolver",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pc4qgsv",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "35hh0tx2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "n9lwn2_6",
            "name": "RK23.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "3f16b5b47da11417e682f8dfc0389efc7452750547448b882c1d873f0d43c3f6",
            "fields": [
                {
                    "id": "8yabm119",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.rk.RK23.dense_output object",
                    "type": "Object:scipy.integrate._ivp.rk.RK23",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fcbt1250",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.RK23.dense_output",
                    "defaultValue": "scipy.integrate._ivp.rk.RK23.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b001i5ac",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h5vbdv5n",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "hcl6o9n3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7op5iotg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.RK23",
                    "defaultValue": "scipy.integrate._ivp.rk.RK23",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ra355wzp",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "slur4jx9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "_nz00wo_",
            "name": "RK23.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "6305ad6d17356ead3fa866077e5749fa23347113fc1c41c3c7503cf8841b94bd",
            "fields": [
                {
                    "id": "t_mn3ntv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.rk.RK23.step object",
                    "type": "Object:scipy.integrate._ivp.rk.RK23",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ivigyvm4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.RK23.step",
                    "defaultValue": "scipy.integrate._ivp.rk.RK23.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0s2fiehe",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a8q0uc93",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "e6co9di_",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7dmnlqdb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.RK23",
                    "defaultValue": "scipy.integrate._ivp.rk.RK23",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "klcw_4t2",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "erv18g5q",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2j6pqsel",
            "name": "RK45.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "24994cc0f6c9e6edb3d604f67766c02ad65bf1a2a8acd03fc72c223c00bcd626",
            "fields": [
                {
                    "id": "s9mcm_6n",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.rk.RK45.dense_output object",
                    "type": "Object:scipy.integrate._ivp.rk.RK45",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xh5zd1ox",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.RK45.dense_output",
                    "defaultValue": "scipy.integrate._ivp.rk.RK45.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x_ee5kpy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tbh24bz9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "y05wok11",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "llt1i03i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.RK45",
                    "defaultValue": "scipy.integrate._ivp.rk.RK45",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ftenxowg",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3drlwuwx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xlm05nyn",
            "name": "RK45.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "0f4859d940ad532cc7186ffe7c608da8193f62ce19b9d8fea04ad81bc3655b04",
            "fields": [
                {
                    "id": "hgdr84ix",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.rk.RK45.step object",
                    "type": "Object:scipy.integrate._ivp.rk.RK45",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xny1ybue",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.rk.RK45.step",
                    "defaultValue": "scipy.integrate._ivp.rk.RK45.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gfpvjwa5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "akn8qnb7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oflbsc4m",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djo18ous",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.rk.RK45",
                    "defaultValue": "scipy.integrate._ivp.rk.RK45",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cm_x1ri8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l2mgxypw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "doa0yzgs",
            "name": "Radau.__init__",
            "description": "\nImplicit Runge-Kutta method of Radau IIA family of order 5.\n    \n    The implementation follows [1]_. The error is controlled with a\n    third-order accurate embedded formula. A cubic polynomial which satisfies\n    the collocation conditions is used for the dense output.\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system: the time derivative of the state ``y``\n        at time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\n        scalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\n        return an array of the same shape as ``y``. See `vectorized` for more\n        information.\n    t0 : float\n        Initial time.\n    y0 : array_like, shape (n,)\n        Initial state.\n    t_bound : float\n        Boundary time - the integration won't continue beyond it. It also\n        determines the direction of the integration.\n    first_step : float or None, optional\n        Initial step size. Default is ``None`` which means that the algorithm\n        should choose.\n    max_step : float, optional\n        Maximum allowed step size. Default is np.inf, i.e., the step size is not\n        bounded and determined solely by the solver.\n    rtol, atol : float and array_like, optional\n        Relative and absolute tolerances. The solver keeps the local error\n        estimates less than ``atol + rtol * abs(y)``. HHere `rtol` controls a\n        relative accuracy (number of correct digits), while `atol` controls\n        absolute accuracy (number of correct decimal places). To achieve the\n        desired `rtol`, set `atol` to be smaller than the smallest value that\n        can be expected from ``rtol * abs(y)`` so that `rtol` dominates the\n        allowable error. If `atol` is larger than ``rtol * abs(y)`` the\n        number of correct digits is not guaranteed. Conversely, to achieve the\n        desired `atol` set `rtol` such that ``rtol * abs(y)`` is always smaller\n        than `atol`. If components of y have different scales, it might be\n        beneficial to set different `atol` values for different components by\n        passing array_like with shape (n,) for `atol`. Default values are\n        1e-3 for `rtol` and 1e-6 for `atol`.\n    jac : {None, array_like, sparse_matrix, callable}, optional\n        Jacobian matrix of the right-hand side of the system with respect to\n        y, required by this method. The Jacobian matrix has shape (n, n) and\n        its element (i, j) is equal to ``d f_i / d y_j``.\n        There are three ways to define the Jacobian:\n    \n            * If array_like or sparse_matrix, the Jacobian is assumed to\n              be constant.\n            * If callable, the Jacobian is assumed to depend on both\n              t and y; it will be called as ``jac(t, y)`` as necessary.\n              For the 'Radau' and 'BDF' methods, the return value might be a\n              sparse matrix.\n            * If None (default), the Jacobian will be approximated by\n              finite differences.\n    \n        It is generally recommended to provide the Jacobian rather than\n        relying on a finite-difference approximation.\n    jac_sparsity : {None, array_like, sparse matrix}, optional\n        Defines a sparsity structure of the Jacobian matrix for a\n        finite-difference approximation. Its shape must be (n, n). This argument\n        is ignored if `jac` is not `None`. If the Jacobian has only few non-zero\n        elements in *each* row, providing the sparsity structure will greatly\n        speed up the computations [2]_. A zero entry means that a corresponding\n        element in the Jacobian is always zero. If None (default), the Jacobian\n        is assumed to be dense.\n    vectorized : bool, optional\n        Whether `fun` can be called in a vectorized fashion. Default is False.\n    \n        If ``vectorized`` is False, `fun` will always be called with ``y`` of\n        shape ``(n,)``, where ``n = len(y0)``.\n    \n        If ``vectorized`` is True, `fun` may be called with ``y`` of shape\n        ``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\n        such that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\n        the returned array is the time derivative of the state corresponding\n        with a column of ``y``).\n    \n        Setting ``vectorized=True`` allows for faster finite difference\n        approximation of the Jacobian by this method, but may result in slower\n        execution overall in some circumstances (e.g. small ``len(y0)``).\n    \n    Attributes\n    ----------\n    n : int\n        Number of equations.\n    status : string\n        Current status of the solver: 'running', 'finished' or 'failed'.\n    t_bound : float\n        Boundary time.\n    direction : float\n        Integration direction: +1 or -1.\n    t : float\n        Current time.\n    y : ndarray\n        Current state.\n    t_old : float\n        Previous time. None if no steps were made yet.\n    step_size : float\n        Size of the last successful step. None if no steps were made yet.\n    nfev : int\n        Number of evaluations of the right-hand side.\n    njev : int\n        Number of evaluations of the Jacobian.\n    nlu : int\n        Number of LU decompositions.\n    \n    References\n    ----------\n    .. [1] E. Hairer, G. Wanner, \"Solving Ordinary Differential Equations II:\n           Stiff and Differential-Algebraic Problems\", Sec. IV.8.\n    .. [2] A. Curtis, M. J. D. Powell, and J. Reid, \"On the estimation of\n           sparse Jacobian matrices\", Journal of the Institute of Mathematics\n           and its Applications, 13, pp. 117-120, 1974.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e004f8e67da2bb654ddddcf6508408b52798d8e67aa8bd076323e1580328f63e",
            "fields": [
                {
                    "id": "e8e0twiq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to Radau object",
                    "type": "Object:scipy.integrate._ivp.radau.Radau",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hmkg90c1",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system: the time derivative of the state ``y``\nat time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\nscalar and ``y`` is an ndarray with ``len(y) = len(y0)``. ``fun`` must\nreturn an array of the same shape as ``y``. See `vectorized` for more\ninformation.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jxabmh4w",
                    "encoding": "",
                    "name": "t0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hwx78e5x",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial state.",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "00ak061h",
                    "encoding": "",
                    "name": "t_bound",
                    "value": "",
                    "defaultValue": "",
                    "description": "Boundary time.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hu_sdque",
                    "encoding": "",
                    "name": "max_step",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Maximum allowed step size. Default is np.inf, i.e., the step size is not\nbounded and determined solely by the solver.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "re_hwwpx",
                    "encoding": "",
                    "name": "rtol",
                    "value": 0.001,
                    "defaultValue": 0.001,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iha_gwz5",
                    "encoding": "",
                    "name": "atol",
                    "value": 1e-06,
                    "defaultValue": 1e-06,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xs3afic_",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Jacobian matrix of the right-hand side of the system with respect to\ny, required by this method. The Jacobian matrix has shape (n, n) and\nits element (i, j) is equal to ``d f_i / d y_j``.\nThere are three ways to define the Jacobian:\n\n    * If array_like or sparse_matrix, the Jacobian is assumed to\n      be constant.\n    * If callable, the Jacobian is assumed to depend on both\n      t and y; it will be called as ``jac(t, y)`` as necessary.\n      For the 'Radau' and 'BDF' methods, the return value might be a\n      sparse matrix.\n    * If None (default), the Jacobian will be approximated by\n      finite differences.\n\nIt is generally recommended to provide the Jacobian rather than\nrelying on a finite-difference approximation.",
                    "type": "{None, arraylike, sparsematrix, callable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8eqhyja1",
                    "encoding": "",
                    "name": "jac_sparsity",
                    "value": "",
                    "defaultValue": "",
                    "description": "Defines a sparsity structure of the Jacobian matrix for a\nfinite-difference approximation. Its shape must be (n, n). This argument\nis ignored if `jac` is not `None`. If the Jacobian has only few non-zero\nelements in *each* row, providing the sparsity structure will greatly\nspeed up the computations [2]_. A zero entry means that a corresponding\nelement in the Jacobian is always zero. If None (default), the Jacobian\nis assumed to be dense.",
                    "type": "{None, arraylike, sparse matrix}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ani7fwu",
                    "encoding": "",
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether `fun` can be called in a vectorized fashion. Default is False.\n\nIf ``vectorized`` is False, `fun` will always be called with ``y`` of\nshape ``(n,)``, where ``n = len(y0)``.\n\nIf ``vectorized`` is True, `fun` may be called with ``y`` of shape\n``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\nsuch that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\nthe returned array is the time derivative of the state corresponding\nwith a column of ``y``).\n\nSetting ``vectorized=True`` allows for faster finite difference\napproximation of the Jacobian by this method, but may result in slower\nexecution overall in some circumstances (e.g. small ``len(y0)``).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "faap9b90",
                    "encoding": "",
                    "name": "first_step",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial step size. Default is ``None`` which means that the algorithm\nshould choose.",
                    "type": "float or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7d8ga_rf",
                    "encoding": "",
                    "name": "extraneous",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "93ej_696",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.radau.Radau.__init__",
                    "defaultValue": "scipy.integrate._ivp.radau.Radau.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "40q1f9h1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "al_p84hu",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jgjmw58q",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ck0kgffa",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.radau.Radau",
                    "defaultValue": "scipy.integrate._ivp.radau.Radau",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brxspyhh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x3bkbgo8",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "bmlgz76m",
            "name": "Radau.dense_output",
            "description": "Compute a local interpolant over the last successful step.\n    \n    Returns\n    -------\n    sol : `DenseOutput`\n        Local interpolant over the last successful step.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9d162a48627326d39b2b267b2a2d0b74455d3830b1966dd1afa71559caa3a9a4",
            "fields": [
                {
                    "id": "xwqdgl9l",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.radau.Radau.dense_output object",
                    "type": "Object:scipy.integrate._ivp.radau.Radau",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v7uoc050",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.radau.Radau.dense_output",
                    "defaultValue": "scipy.integrate._ivp.radau.Radau.dense_output",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2aw7263_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s_e8_7sh",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yjwvy4pj",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ylva8zny",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.radau.Radau",
                    "defaultValue": "scipy.integrate._ivp.radau.Radau",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x5za15vb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tpvlolqo",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "z1938_b7",
            "name": "Radau.step",
            "description": "Perform one integration step.\n    \n    Returns\n    -------\n    message : string or None\n        Report from the solver. Typically a reason for a failure if\n        `self.status` is 'failed' after the step was taken or None\n        otherwise.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cde072357d8dad136f3def65cabd4d55203bb1c894ae0b2432ae7c6225df31e3",
            "fields": [
                {
                    "id": "p3bc60q2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ivp.radau.Radau.step object",
                    "type": "Object:scipy.integrate._ivp.radau.Radau",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmkmtl2d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ivp.radau.Radau.step",
                    "defaultValue": "scipy.integrate._ivp.radau.Radau.step",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4oyepdq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "crc4vd88",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "b9v_ns9y",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "brqjl1qw",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ivp.radau.Radau",
                    "defaultValue": "scipy.integrate._ivp.radau.Radau",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5p5ln70n",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "awd1ndhg",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "1zlopui2",
            "name": "complex_ode.__init__",
            "description": "\nA wrapper of ode for complex systems.\n    \n    This functions similarly as `ode`, but re-maps a complex-valued\n    equation system to a real-valued one before using the integrators.\n    \n    Parameters\n    ----------\n    f : callable ``f(t, y, *f_args)``\n        Rhs of the equation. t is a scalar, ``y.shape == (n,)``.\n        ``f_args`` is set by calling ``set_f_params(*args)``.\n    jac : callable ``jac(t, y, *jac_args)``\n        Jacobian of the rhs, ``jac[i,j] = d f[i] / d y[j]``.\n        ``jac_args`` is set by calling ``set_f_params(*args)``.\n    \n    Attributes\n    ----------\n    t : float\n        Current time.\n    y : ndarray\n        Current variable values.\n    \n    Examples\n    --------\n    For usage examples, see `ode`.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ac6a0213ef4b2034e061c639456c977e7013944fe3b8d18d6d61730c4f51fd36",
            "fields": [
                {
                    "id": "s78rrzw4",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to complex_ode object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pk7j4umt",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rhs of the equation. t is a scalar, ``y.shape == (n,)``.\n``f_args`` is set by calling ``set_f_params(*args)``.",
                    "type": "callable f(t, y, *fargs)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xm128i94",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Jacobian of the rhs, ``jac[i,j] = d f[i] / d y[j]``.\n``jac_args`` is set by calling ``set_f_params(*args)``.",
                    "type": "callable jac(t, y, *jacargs)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5a3m7izq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.__init__",
                    "defaultValue": "scipy.integrate._ode.complex_ode.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zsxoeaq",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7r6k7ng1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "132sw728",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aj82k0it",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qve4jou",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8gpl9b8d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "jt5trmq_",
            "name": "complex_ode.get_return_code",
            "description": "Extracts the return code for the integration to enable better control\n    if the integration fails.\n    \n    In general, a return code > 0 implies success, while a return code < 0\n    implies failure.\n    \n    Notes\n    -----\n    This section describes possible return codes and their meaning, for available\n    integrators that can be selected by `set_integrator` method.\n    \n    \"vode\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    2            Integration successful.\n    -1           Excess work done on this call. (Perhaps wrong MF.)\n    -2           Excess accuracy requested. (Tolerances too small.)\n    -3           Illegal input detected. (See printed message.)\n    -4           Repeated error test failures. (Check all input.)\n    -5           Repeated convergence failures. (Perhaps bad Jacobian\n                 supplied or wrong choice of MF or tolerances.)\n    -6           Error weight became zero during problem. (Solution\n                 component i vanished, and ATOL or ATOL(i) = 0.)\n    ===========  =======\n    \n    \"zvode\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    2            Integration successful.\n    -1           Excess work done on this call. (Perhaps wrong MF.)\n    -2           Excess accuracy requested. (Tolerances too small.)\n    -3           Illegal input detected. (See printed message.)\n    -4           Repeated error test failures. (Check all input.)\n    -5           Repeated convergence failures. (Perhaps bad Jacobian\n                 supplied or wrong choice of MF or tolerances.)\n    -6           Error weight became zero during problem. (Solution\n                 component i vanished, and ATOL or ATOL(i) = 0.)\n    ===========  =======\n    \n    \"dopri5\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    1            Integration successful.\n    2            Integration successful (interrupted by solout).\n    -1           Input is not consistent.\n    -2           Larger nsteps is needed.\n    -3           Step size becomes too small.\n    -4           Problem is probably stiff (interrupted).\n    ===========  =======\n    \n    \"dop853\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    1            Integration successful.\n    2            Integration successful (interrupted by solout).\n    -1           Input is not consistent.\n    -2           Larger nsteps is needed.\n    -3           Step size becomes too small.\n    -4           Problem is probably stiff (interrupted).\n    ===========  =======\n    \n    \"lsoda\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    2            Integration successful.\n    -1           Excess work done on this call (perhaps wrong Dfun type).\n    -2           Excess accuracy requested (tolerances too small).\n    -3           Illegal input detected (internal error).\n    -4           Repeated error test failures (internal error).\n    -5           Repeated convergence failures (perhaps bad Jacobian or tolerances).\n    -6           Error weight became zero during problem.\n    -7           Internal workspace insufficient to finish (internal error).\n    ===========  =======",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "da7d0bf26e3caad3c495d6786eff872239c98dd2da632cfcec5f796d7f2e3a6b",
            "fields": [
                {
                    "id": "z8l89h94",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.get_return_code object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ytfrk8q",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.get_return_code",
                    "defaultValue": "scipy.integrate._ode.complex_ode.get_return_code",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i3rp33jx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d6xoh5r0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7rb1bcfx",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wad0g9gp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6_uxuiz",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uwsaqt62",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "mqnka3lg",
            "name": "complex_ode.integrate",
            "description": "Find y=y(t), set y as an initial condition, and return y.\n    \n    Parameters\n    ----------\n    t : float\n        The endpoint of the integration step.\n    step : bool\n        If True, and if the integrator supports the step method,\n        then perform a single integration step and return.\n        This parameter is provided in order to expose internals of\n        the implementation, and should not be changed from its default\n        value in most cases.\n    relax : bool\n        If True and if the integrator supports the run_relax method,\n        then integrate until t_1 >= t and return. ``relax`` is not\n        referenced if ``step=True``.\n        This parameter is provided in order to expose internals of\n        the implementation, and should not be changed from its default\n        value in most cases.\n    \n    Returns\n    -------\n    y : float\n        The integrated value at t",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cb0f33ac662fd4ec773b78a6e15f3fbdc01bd3ac367441a052267f839e181139",
            "fields": [
                {
                    "id": "19a0ndr1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.integrate object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z4dm5rve",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The endpoint of the integration step.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dskhq0d_",
                    "encoding": "",
                    "name": "step",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, and if the integrator supports the step method,\nthen perform a single integration step and return.\nThis parameter is provided in order to expose internals of\nthe implementation, and should not be changed from its default\nvalue in most cases.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "52b4k86j",
                    "encoding": "",
                    "name": "relax",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True and if the integrator supports the run_relax method,\nthen integrate until t_1 >= t and return. ``relax`` is not\nreferenced if ``step=True``.\nThis parameter is provided in order to expose internals of\nthe implementation, and should not be changed from its default\nvalue in most cases.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2r2eap3w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.integrate",
                    "defaultValue": "scipy.integrate._ode.complex_ode.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fjq59vf5",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ietmn8dl",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "l02jqzj6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1lxbfw8l",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ez28mz68",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ilxyuqws",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "36pvj9v1",
            "name": "complex_ode.set_f_params",
            "description": "Set extra parameters for user-supplied function f.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5cf8d3a730470634d551ca0da612a9066491532ac231d63c0cbdca24c925ef3d",
            "fields": [
                {
                    "id": "v_sw8o2h",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.set_f_params object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "af6zga23",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_14fupc5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.set_f_params",
                    "defaultValue": "scipy.integrate._ode.complex_ode.set_f_params",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhppb89e",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5zsonc1a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ueklw8l7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nhddk8gq",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05i5sa2m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "guvoxijf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "5b1pwdow",
            "name": "complex_ode.set_initial_value",
            "description": "Set initial conditions y(t) = y.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "9fa5db9f5e62222ce254e675ddc67e29fdde3895968f21fed07b0aea2fe096b3",
            "fields": [
                {
                    "id": "jymmkzqv",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.set_initial_value object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d37y2d_w",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1oi0ozmv",
                    "encoding": "",
                    "name": "t",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f70op3q5",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.set_initial_value",
                    "defaultValue": "scipy.integrate._ode.complex_ode.set_initial_value",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zxqvtf2h",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v6st1hho",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7_xsoboz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5fmt58rj",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wcgwq4dd",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1jqq6ykw",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "x9d_6cop",
            "name": "complex_ode.set_integrator",
            "description": "Set integrator by name.\n    \n    Parameters\n    ----------\n    name : str\n        Name of the integrator\n    **integrator_params\n        Additional parameters for the integrator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "2eaa416eef1a9f987d168bd491af6dd1d98017a1df2ee1c91e87805acad9fab3",
            "fields": [
                {
                    "id": "foceol6f",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.set_integrator object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_p1o7o02",
                    "encoding": "",
                    "name": "name",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the integrator",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2m3lwh5f",
                    "encoding": "",
                    "name": "integrator_params",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sugmv7er",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.set_integrator",
                    "defaultValue": "scipy.integrate._ode.complex_ode.set_integrator",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_g9nj91",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jqxpfy_z",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "kwcbk8wl",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3zu2rqix",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w2b_1xvt",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h7uajkes",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qe84ne7g",
            "name": "complex_ode.set_jac_params",
            "description": "Set extra parameters for user-supplied function jac.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4029d535a7e882eba444934ec6cdeee086d4031c0ea5844d92bc711a9cab0ad3",
            "fields": [
                {
                    "id": "l4o4hm0t",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.set_jac_params object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o84xi5_j",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yzxt48ze",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.set_jac_params",
                    "defaultValue": "scipy.integrate._ode.complex_ode.set_jac_params",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2zgdcjlp",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1euwxf46",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wf3bv9cw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4trdke_m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k23wvxqq",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ry71xudz",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "xfp95emm",
            "name": "complex_ode.set_solout",
            "description": "Set callable to be called at every successful integration step.\n    \n    Parameters\n    ----------\n    solout : callable\n        ``solout(t, y)`` is called at each internal integrator step,\n        t is a scalar providing the current independent position\n        y is the current solution ``y.shape == (n,)``\n        solout should return -1 to stop integration\n        otherwise it should return None or 0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b9c1123e631d620188a53e8fd7a262c0ff30cd2b7e56fbb91ee43da97b578e69",
            "fields": [
                {
                    "id": "8c5ylsrq",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.set_solout object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8_4zpnej",
                    "encoding": "",
                    "name": "solout",
                    "value": "",
                    "defaultValue": "",
                    "description": "``solout(t, y)`` is called at each internal integrator step,\nt is a scalar providing the current independent position\ny is the current solution ``y.shape == (n,)``\nsolout should return -1 to stop integration\notherwise it should return None or 0",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fqelprsq",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.set_solout",
                    "defaultValue": "scipy.integrate._ode.complex_ode.set_solout",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3s7oijom",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bk_vu081",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mrep5470",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4a9yfk29",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vcxqi2fo",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9j938ep",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "oa1dmcpv",
            "name": "complex_ode.successful",
            "description": "Check if integration was successful.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "bd047364f1cd16ab333d4feefa452329068aa33cb905992820f72c7f8e347bf8",
            "fields": [
                {
                    "id": "ud817n2m",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.complex_ode.successful object",
                    "type": "Object:scipy.integrate._ode.complex_ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_y0oy0nu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.complex_ode.successful",
                    "defaultValue": "scipy.integrate._ode.complex_ode.successful",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l6588d9i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b3uec6v9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9cw_7jp5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_b3_6r_b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.complex_ode",
                    "defaultValue": "scipy.integrate._ode.complex_ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "huj5wwpr",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9ob8z472",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "g0bkx_ud",
            "name": "integrate.cubature",
            "description": "Adaptive cubature of multidimensional array-valued function.\n    \n    Given an arbitrary integration rule, this function returns an estimate of the\n    integral to the requested tolerance over the region defined by the arrays `a` and\n    `b` specifying the corners of a hypercube.\n    \n    Convergence is not guaranteed for all integrals.\n    \n    Parameters\n    ----------\n    f : callable\n        Function to integrate. `f` must have the signature::\n    \n            f(x : ndarray, *args) -> ndarray\n    \n        `f` should accept arrays ``x`` of shape::\n    \n            (npoints, ndim)\n    \n        and output arrays of shape::\n    \n            (npoints, output_dim_1, ..., output_dim_n)\n    \n        In this case, `cubature` will return arrays of shape::\n    \n            (output_dim_1, ..., output_dim_n)\n    a, b : array_like\n        Lower and upper limits of integration as 1D arrays specifying the left and right\n        endpoints of the intervals being integrated over. Limits can be infinite.\n    rule : str, optional\n        Rule used to estimate the integral. If passing a string, the options are\n        \"gauss-kronrod\" (21 node), or \"genz-malik\" (degree 7). If a rule like\n        \"gauss-kronrod\" is specified for an ``n``-dim integrand, the corresponding\n        Cartesian product rule is used. \"gk21\", \"gk15\" are also supported for\n        compatibility with `quad_vec`. See Notes.\n    rtol, atol : float, optional\n        Relative and absolute tolerances. Iterations are performed until the error is\n        estimated to be less than ``atol + rtol * abs(est)``. Here `rtol` controls\n        relative accuracy (number of correct digits), while `atol` controls absolute\n        accuracy (number of correct decimal places). To achieve the desired `rtol`, set\n        `atol` to be smaller than the smallest value that can be expected from\n        ``rtol * abs(y)`` so that `rtol` dominates the allowable error. If `atol` is\n        larger than ``rtol * abs(y)`` the number of correct digits is not guaranteed.\n        Conversely, to achieve the desired `atol`, set `rtol` such that\n        ``rtol * abs(y)`` is always smaller than `atol`. Default values are 1e-8 for\n        `rtol` and 0 for `atol`.\n    max_subdivisions : int, optional\n        Upper bound on the number of subdivisions to perform. Default is 10,000.\n    args : tuple, optional\n        Additional positional args passed to `f`, if any.\n    workers : int or map-like callable, optional\n        If `workers` is an integer, part of the computation is done in parallel\n        subdivided to this many tasks (using :class:`python:multiprocessing.pool.Pool`).\n        Supply `-1` to use all cores available to the Process. Alternatively, supply a\n        map-like callable, such as :meth:`python:multiprocessing.pool.Pool.map` for\n        evaluating the population in parallel. This evaluation is carried out as\n        ``workers(func, iterable)``.\n    points : list of array_like, optional\n        List of points to avoid evaluating `f` at, under the condition that the rule\n        being used does not evaluate `f` on the boundary of a region (which is the\n        case for all Genz-Malik and Gauss-Kronrod rules). This can be useful if `f` has\n        a singularity at the specified point. This should be a list of array-likes where\n        each element has length ``ndim``. Default is empty. See Examples.\n    \n    Returns\n    -------\n    res : object\n        Object containing the results of the estimation. It has the following\n        attributes:\n    \n        estimate : ndarray\n            Estimate of the value of the integral over the overall region specified.\n        error : ndarray\n            Estimate of the error of the approximation over the overall region\n            specified.\n        status : str\n            Whether the estimation was successful. Can be either: \"converged\",\n            \"not_converged\".\n        subdivisions : int\n            Number of subdivisions performed.\n        atol, rtol : float\n            Requested tolerances for the approximation.\n        regions: list of object\n            List of objects containing the estimates of the integral over smaller\n            regions of the domain.\n    \n        Each object in ``regions`` has the following attributes:\n    \n        a, b : ndarray\n            Points describing the corners of the region. If the original integral\n            contained infinite limits or was over a region described by `region`,\n            then `a` and `b` are in the transformed coordinates.\n        estimate : ndarray\n            Estimate of the value of the integral over this region.\n        error : ndarray\n            Estimate of the error of the approximation over this region.\n    \n    Notes\n    -----\n    The algorithm uses a similar algorithm to `quad_vec`, which itself is based on the\n    implementation of QUADPACK's DQAG* algorithms, implementing global error control and\n    adaptive subdivision.\n    \n    The source of the nodes and weights used for Gauss-Kronrod quadrature can be found\n    in [1]_, and the algorithm for calculating the nodes and weights in Genz-Malik\n    cubature can be found in [2]_.\n    \n    The rules currently supported via the `rule` argument are:\n    \n    - ``\"gauss-kronrod\"``, 21-node Gauss-Kronrod\n    - ``\"genz-malik\"``, n-node Genz-Malik\n    \n    If using Gauss-Kronrod for an ``n``-dim integrand where ``n > 2``, then the\n    corresponding Cartesian product rule will be found by taking the Cartesian product\n    of the nodes in the 1D case. This means that the number of nodes scales\n    exponentially as ``21^n`` in the Gauss-Kronrod case, which may be problematic in a\n    moderate number of dimensions.\n    \n    Genz-Malik is typically less accurate than Gauss-Kronrod but has much fewer nodes,\n    so in this situation using \"genz-malik\" might be preferable.\n    \n    Infinite limits are handled with an appropriate variable transformation. Assuming\n    ``a = [a_1, ..., a_n]`` and ``b = [b_1, ..., b_n]``:\n    \n    If :math:`a_i = -\\infty` and :math:`b_i = \\infty`, the i-th integration variable\n    will use the transformation :math:`x = \\frac{1-|t|}{t}` and :math:`t \\in (-1, 1)`.\n    \n    If :math:`a_i \\ne \\pm\\infty` and :math:`b_i = \\infty`, the i-th integration variable\n    will use the transformation :math:`x = a_i + \\frac{1-t}{t}` and\n    :math:`t \\in (0, 1)`.\n    \n    If :math:`a_i = -\\infty` and :math:`b_i \\ne \\pm\\infty`, the i-th integration\n    variable will use the transformation :math:`x = b_i - \\frac{1-t}{t}` and\n    :math:`t \\in (0, 1)`.\n    \n    References\n    ----------\n    .. [1] R. Piessens, E. de Doncker, Quadpack: A Subroutine Package for Automatic\n        Integration, files: dqk21.f, dqk15.f (1983).\n    \n    .. [2] A.C. Genz, A.A. Malik, Remarks on algorithm 006: An adaptive algorithm for\n        numerical integration over an N-dimensional rectangular region, Journal of\n        Computational and Applied Mathematics, Volume 6, Issue 4, 1980, Pages 295-302,\n        ISSN 0377-0427\n        :doi:`10.1016/0771-050X(80)90039-X`\n    \n    Examples\n    --------\n    **1D integral with vector output**:\n    \n    .. math::\n    \n        \\int^1_0 \\mathbf f(x) \\text dx\n    \n    Where ``f(x) = x^n`` and ``n = np.arange(10)`` is a vector. Since no rule is\n    specified, the default \"gk21\" is used, which corresponds to Gauss-Kronrod\n    integration with 21 nodes.\n    \n    >>> import numpy as np\n    >>> from scipy.integrate import cubature\n    >>> def f(x, n):\n    ...    # Make sure x and n are broadcastable\n    ...    return x[:, np.newaxis]**n[np.newaxis, :]\n    >>> res = cubature(\n    ...     f,\n    ...     a=[0],\n    ...     b=[1],\n    ...     args=(np.arange(10),),\n    ... )\n    >>> res.estimate\n     array([1.        , 0.5       , 0.33333333, 0.25      , 0.2       ,\n            0.16666667, 0.14285714, 0.125     , 0.11111111, 0.1       ])\n    \n    **7D integral with arbitrary-shaped array output**::\n    \n        f(x) = cos(2*pi*r + alphas @ x)\n    \n    for some ``r`` and ``alphas``, and the integral is performed over the unit\n    hybercube, :math:`[0, 1]^7`. Since the integral is in a moderate number of\n    dimensions, \"genz-malik\" is used rather than the default \"gauss-kronrod\" to\n    avoid constructing a product rule with :math:`21^7 \\approx 2 \\times 10^9` nodes.\n    \n    >>> import numpy as np\n    >>> from scipy.integrate import cubature\n    >>> def f(x, r, alphas):\n    ...     # f(x) = cos(2*pi*r + alphas @ x)\n    ...     # Need to allow r and alphas to be arbitrary shape\n    ...     npoints, ndim = x.shape[0], x.shape[-1]\n    ...     alphas = alphas[np.newaxis, ...]\n    ...     x = x.reshape(npoints, *([1]*(len(alphas.shape) - 1)), ndim)\n    ...     return np.cos(2*np.pi*r + np.sum(alphas * x, axis=-1))\n    >>> rng = np.random.default_rng()\n    >>> r, alphas = rng.random((2, 3)), rng.random((2, 3, 7))\n    >>> res = cubature(\n    ...     f=f,\n    ...     a=np.array([0, 0, 0, 0, 0, 0, 0]),\n    ...     b=np.array([1, 1, 1, 1, 1, 1, 1]),\n    ...     rtol=1e-5,\n    ...     rule=\"genz-malik\",\n    ...     args=(r, alphas),\n    ... )\n    >>> res.estimate\n     array([[-0.79812452,  0.35246913, -0.52273628],\n            [ 0.88392779,  0.59139899,  0.41895111]])\n    \n    **Parallel computation with** `workers`:\n    \n    >>> from concurrent.futures import ThreadPoolExecutor\n    >>> with ThreadPoolExecutor() as executor:\n    ...     res = cubature(\n    ...         f=f,\n    ...         a=np.array([0, 0, 0, 0, 0, 0, 0]),\n    ...         b=np.array([1, 1, 1, 1, 1, 1, 1]),\n    ...         rtol=1e-5,\n    ...         rule=\"genz-malik\",\n    ...         args=(r, alphas),\n    ...         workers=executor.map,\n    ...      )\n    >>> res.estimate\n     array([[-0.79812452,  0.35246913, -0.52273628],\n            [ 0.88392779,  0.59139899,  0.41895111]])\n    \n    **2D integral with infinite limits**:\n    \n    .. math::\n    \n        \\int^{ \\infty }_{ -\\infty }\n        \\int^{ \\infty }_{ -\\infty }\n            e^{-x^2-y^2}\n        \\text dy\n        \\text dx\n    \n    >>> def gaussian(x):\n    ...     return np.exp(-np.sum(x**2, axis=-1))\n    >>> res = cubature(gaussian, [-np.inf, -np.inf], [np.inf, np.inf])\n    >>> res.estimate\n     3.1415926\n    \n    **1D integral with singularities avoided using** `points`:\n    \n    .. math::\n    \n        \\int^{ 1 }_{ -1 }\n          \\frac{\\sin(x)}{x}\n        \\text dx\n    \n    It is necessary to use the `points` parameter to avoid evaluating `f` at the origin.\n    \n    >>> def sinc(x):\n    ...     return np.sin(x)/x\n    >>> res = cubature(sinc, [-1], [1], points=[[0]])\n    >>> res.estimate\n     1.8921661",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "18f059fa83850819f4d2309805161e57bf020a568db75474842a21b69ba0c4d7",
            "fields": [
                {
                    "id": "xwurml73",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function to integrate. `f` must have the signature::\n\n    f(x : ndarray, *args) -> ndarray\n\n`f` should accept arrays ``x`` of shape::\n\n    (npoints, ndim)\n\nand output arrays of shape::\n\n    (npoints, output_dim_1, ..., output_dim_n)\n\nIn this case, `cubature` will return arrays of shape::\n\n    (output_dim_1, ..., output_dim_n)",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a93q6ufx",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q2uij84f",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r5nclulh",
                    "encoding": "",
                    "name": "rule",
                    "value": "gk21",
                    "defaultValue": "gk21",
                    "description": "Rule used to estimate the integral. If passing a string, the options are\n\"gauss-kronrod\" (21 node), or \"genz-malik\" (degree 7). If a rule like\n\"gauss-kronrod\" is specified for an ``n``-dim integrand, the corresponding\nCartesian product rule is used. \"gk21\", \"gk15\" are also supported for\ncompatibility with `quad_vec`. See Notes.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "udpanbnu",
                    "encoding": "",
                    "name": "rtol",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "w8e85c04",
                    "encoding": "",
                    "name": "atol",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbvk1ngo",
                    "encoding": "",
                    "name": "max_subdivisions",
                    "value": 10000,
                    "defaultValue": 10000,
                    "description": "Upper bound on the number of subdivisions to perform. Default is 10,000.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "arvz8bt6",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional args passed to `f`, if any.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wsj8q1wh",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If `workers` is an integer, part of the computation is done in parallel\nsubdivided to this many tasks (using :class:`python:multiprocessing.pool.Pool`).\nSupply `-1` to use all cores available to the Process. Alternatively, supply a\nmap-like callable, such as :meth:`python:multiprocessing.pool.Pool.map` for\nevaluating the population in parallel. This evaluation is carried out as\n``workers(func, iterable)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qy357tar",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "List of points to avoid evaluating `f` at, under the condition that the rule\nbeing used does not evaluate `f` on the boundary of a region (which is the\ncase for all Genz-Malik and Gauss-Kronrod rules). This can be useful if `f` has\na singularity at the specified point. This should be a list of array-likes where\neach element has length ``ndim``. Default is empty. See Examples.",
                    "type": "list of arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g975pnuh",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.cubature",
                    "defaultValue": "scipy.integrate.cubature",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9qalamb4",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ihtbqvk2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jf8s0xij",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_z3ei635",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mq8po1sk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "68mwqjvl",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "swf6rdbv",
            "name": "integrate.cumulative_simpson",
            "description": "Cumulatively integrate y(x) using the composite Simpson's 1/3 rule.\n    The integral of the samples at every point is calculated by assuming a \n    quadratic relationship between each point and the two adjacent points.\n    \n    Parameters\n    ----------\n    y : array_like\n        Values to integrate. Requires at least one point along `axis`. If two or fewer\n        points are provided along `axis`, Simpson's integration is not possible and the\n        result is calculated with `cumulative_trapezoid`.\n    x : array_like, optional\n        The coordinate to integrate along. Must have the same shape as `y` or\n        must be 1D with the same length as `y` along `axis`. `x` must also be\n        strictly increasing along `axis`.\n        If `x` is None (default), integration is performed using spacing `dx`\n        between consecutive elements in `y`.\n    dx : scalar or array_like, optional\n        Spacing between elements of `y`. Only used if `x` is None. Can either \n        be a float, or an array with the same shape as `y`, but of length one along\n        `axis`. Default is 1.0.\n    axis : int, optional\n        Specifies the axis to integrate along. Default is -1 (last axis).\n    initial : scalar or array_like, optional\n        If given, insert this value at the beginning of the returned result,\n        and add it to the rest of the result. Default is None, which means no\n        value at ``x[0]`` is returned and `res` has one element less than `y`\n        along the axis of integration. Can either be a float, or an array with\n        the same shape as `y`, but of length one along `axis`.\n    \n    Returns\n    -------\n    res : ndarray\n        The result of cumulative integration of `y` along `axis`.\n        If `initial` is None, the shape is such that the axis of integration\n        has one less value than `y`. If `initial` is given, the shape is equal\n        to that of `y`.\n    \n    See Also\n    --------\n    numpy.cumsum\n    cumulative_trapezoid : cumulative integration using the composite \n        trapezoidal rule\n    simpson : integrator for sampled data using the Composite Simpson's Rule\n    \n    Notes\n    -----\n    \n    .. versionadded:: 1.12.0\n    \n    The composite Simpson's 1/3 method can be used to approximate the definite \n    integral of a sampled input function :math:`y(x)` [1]_. The method assumes \n    a quadratic relationship over the interval containing any three consecutive\n    sampled points.\n    \n    Consider three consecutive points: \n    :math:`(x_1, y_1), (x_2, y_2), (x_3, y_3)`.\n    \n    Assuming a quadratic relationship over the three points, the integral over\n    the subinterval between :math:`x_1` and :math:`x_2` is given by formula\n    (8) of [2]_:\n    \n    .. math::\n        \\int_{x_1}^{x_2} y(x) dx\\ &= \\frac{x_2-x_1}{6}\\left[\\\n        \\left\\{3-\\frac{x_2-x_1}{x_3-x_1}\\right\\} y_1 + \\\n        \\left\\{3 + \\frac{(x_2-x_1)^2}{(x_3-x_2)(x_3-x_1)} + \\\n        \\frac{x_2-x_1}{x_3-x_1}\\right\\} y_2\\\\\n        - \\frac{(x_2-x_1)^2}{(x_3-x_2)(x_3-x_1)} y_3\\right]\n    \n    The integral between :math:`x_2` and :math:`x_3` is given by swapping\n    appearances of :math:`x_1` and :math:`x_3`. The integral is estimated\n    separately for each subinterval and then cumulatively summed to obtain\n    the final result.\n    \n    For samples that are equally spaced, the result is exact if the function\n    is a polynomial of order three or less [1]_ and the number of subintervals\n    is even. Otherwise, the integral is exact for polynomials of order two or\n    less. \n    \n    References\n    ----------\n    .. [1] Wikipedia page: https://en.wikipedia.org/wiki/Simpson's_rule\n    .. [2] Cartwright, Kenneth V. Simpson's Rule Cumulative Integration with\n            MS Excel and Irregularly-spaced Data. Journal of Mathematical\n            Sciences and Mathematics Education. 12 (2): 1-9\n    \n    Examples\n    --------\n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> x = np.linspace(-2, 2, num=20)\n    >>> y = x**2\n    >>> y_int = integrate.cumulative_simpson(y, x=x, initial=0)\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(x, y_int, 'ro', x, x**3/3 - (x[0])**3/3, 'b-')\n    >>> ax.grid()\n    >>> plt.show()\n    \n    The output of `cumulative_simpson` is similar to that of iteratively\n    calling `simpson` with successively higher upper limits of integration, but\n    not identical.\n    \n    >>> def cumulative_simpson_reference(y, x):\n    ...     return np.asarray([integrate.simpson(y[:i], x=x[:i])\n    ...                        for i in range(2, len(y) + 1)])\n    >>>\n    >>> rng = np.random.default_rng(354673834679465)\n    >>> x, y = rng.random(size=(2, 10))\n    >>> x.sort()\n    >>>\n    >>> res = integrate.cumulative_simpson(y, x=x)\n    >>> ref = cumulative_simpson_reference(y, x)\n    >>> equal = np.abs(res - ref) < 1e-15\n    >>> equal  # not equal when `simpson` has even number of subintervals\n    array([False,  True, False,  True, False,  True, False,  True,  True])\n    \n    This is expected: because `cumulative_simpson` has access to more\n    information than `simpson`, it can typically produce more accurate\n    estimates of the underlying integral over subintervals.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "7fa6c8c93956904d923159da24e45fe4b30daa9f10ab930d9b4daee286d4e440",
            "fields": [
                {
                    "id": "_6_8fod0",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Values to integrate. Requires at least one point along `axis`. If two or fewer\npoints are provided along `axis`, Simpson's integration is not possible and the\nresult is calculated with `cumulative_trapezoid`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0uqrv0lg",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinate to integrate along. Must have the same shape as `y` or\nmust be 1D with the same length as `y` along `axis`. `x` must also be\nstrictly increasing along `axis`.\nIf `x` is None (default), integration is performed using spacing `dx`\nbetween consecutive elements in `y`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "khi8rf0t",
                    "encoding": "",
                    "name": "dx",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Spacing between elements of `y`. Only used if `x` is None. Can either \nbe a float, or an array with the same shape as `y`, but of length one along\n`axis`. Default is 1.0.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gphba5_9",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Specifies the axis to integrate along. Default is -1 (last axis).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bqqgyvxa",
                    "encoding": "",
                    "name": "initial",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, insert this value at the beginning of the returned result,\nand add it to the rest of the result. Default is None, which means no\nvalue at ``x[0]`` is returned and `res` has one element less than `y`\nalong the axis of integration. Can either be a float, or an array with\nthe same shape as `y`, but of length one along `axis`.",
                    "type": "scalar or arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nx_w050i",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.cumulative_simpson",
                    "defaultValue": "scipy.integrate.cumulative_simpson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "adqs58so",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3285dh1j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qjtpgf08",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "38kbrnul",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "85k93r88",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mggp2bdj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e8sdfiya",
            "name": "integrate.cumulative_trapezoid",
            "description": "Cumulatively integrate y(x) using the composite trapezoidal rule.\n    \n    Parameters\n    ----------\n    y : array_like\n        Values to integrate.\n    x : array_like, optional\n        The coordinate to integrate along. If None (default), use spacing `dx`\n        between consecutive elements in `y`.\n    dx : float, optional\n        Spacing between elements of `y`. Only used if `x` is None.\n    axis : int, optional\n        Specifies the axis to cumulate. Default is -1 (last axis).\n    initial : scalar, optional\n        If given, insert this value at the beginning of the returned result.\n        0 or None are the only values accepted. Default is None, which means\n        `res` has one element less than `y` along the axis of integration.\n    \n    Returns\n    -------\n    res : ndarray\n        The result of cumulative integration of `y` along `axis`.\n        If `initial` is None, the shape is such that the axis of integration\n        has one less value than `y`. If `initial` is given, the shape is equal\n        to that of `y`.\n    \n    See Also\n    --------\n    numpy.cumsum, numpy.cumprod\n    cumulative_simpson : cumulative integration using Simpson's 1/3 rule\n    quad : adaptive quadrature using QUADPACK\n    fixed_quad : fixed-order Gaussian quadrature\n    dblquad : double integrals\n    tplquad : triple integrals\n    romb : integrators for sampled data\n    \n    Examples\n    --------\n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    \n    >>> x = np.linspace(-2, 2, num=20)\n    >>> y = x\n    >>> y_int = integrate.cumulative_trapezoid(y, x, initial=0)\n    >>> plt.plot(x, y_int, 'ro', x, y[0] + 0.5 * x**2, 'b-')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "875fdac02b561cb49c5e9ec8e5c77bd08a69aef87fc7f4689a22a7747b7f4062",
            "fields": [
                {
                    "id": "25fjchsp",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Values to integrate.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lc8xxize",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The coordinate to integrate along. If None (default), use spacing `dx`\nbetween consecutive elements in `y`.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5evrqqkw",
                    "encoding": "",
                    "name": "dx",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Spacing between elements of `y`. Only used if `x` is None.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0t8q5beu",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Specifies the axis to cumulate. Default is -1 (last axis).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5eja668y",
                    "encoding": "",
                    "name": "initial",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, insert this value at the beginning of the returned result.\n0 or None are the only values accepted. Default is None, which means\n`res` has one element less than `y` along the axis of integration.",
                    "type": "scalar",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p_y0qroz",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.cumulative_trapezoid",
                    "defaultValue": "scipy.integrate.cumulative_trapezoid",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rjsg2wa_",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tgm71fy3",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "txbu2v7u",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ftyrrvjh",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ufptlzsm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xpv9zuno",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ignehdb4",
            "name": "integrate.dblquad",
            "description": "Compute a double integral.\n    \n    Return the double (definite) integral of ``func(y, x)`` from ``x = a..b``\n    and ``y = gfun(x)..hfun(x)``.\n    \n    Parameters\n    ----------\n    func : callable\n        A Python function or method of at least two variables: y must be the\n        first argument and x the second argument.\n    a, b : float\n        The limits of integration in x: `a` < `b`\n    gfun : callable or float\n        The lower boundary curve in y which is a function taking a single\n        floating point argument (x) and returning a floating point result\n        or a float indicating a constant boundary curve.\n    hfun : callable or float\n        The upper boundary curve in y (same requirements as `gfun`).\n    args : sequence, optional\n        Extra arguments to pass to `func`.\n    epsabs : float, optional\n        Absolute tolerance passed directly to the inner 1-D quadrature\n        integration. Default is 1.49e-8. ``dblquad`` tries to obtain\n        an accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\n        where ``i`` = inner integral of ``func(y, x)`` from ``gfun(x)``\n        to ``hfun(x)``, and ``result`` is the numerical approximation.\n        See `epsrel` below.\n    epsrel : float, optional\n        Relative tolerance of the inner 1-D integrals. Default is 1.49e-8.\n        If ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\n        and ``50 * (machine epsilon)``. See `epsabs` above.\n    \n    Returns\n    -------\n    y : float\n        The resultant integral.\n    abserr : float\n        An estimate of the error.\n    \n    See Also\n    --------\n    quad : single integral\n    tplquad : triple integral\n    nquad : N-dimensional integrals\n    fixed_quad : fixed-order Gaussian quadrature\n    simpson : integrator for sampled data\n    romb : integrator for sampled data\n    scipy.special : for coefficients and roots of orthogonal polynomials\n    \n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Details of QUADPACK level routines**\n    \n    `quad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. For each level of integration, ``qagse``\n    is used for finite limits or ``qagie`` is used if either limit (or both!)\n    are infinite. The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    Examples\n    --------\n    Compute the double integral of ``x * y**2`` over the box\n    ``x`` ranging from 0 to 2 and ``y`` ranging from 0 to 1.\n    That is, :math:`\\int^{x=2}_{x=0} \\int^{y=1}_{y=0} x y^2 \\,dy \\,dx`.\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> f = lambda y, x: x*y**2\n    >>> integrate.dblquad(f, 0, 2, 0, 1)\n        (0.6666666666666667, 7.401486830834377e-15)\n    \n    Calculate :math:`\\int^{x=\\pi/4}_{x=0} \\int^{y=\\cos(x)}_{y=\\sin(x)} 1\n    \\,dy \\,dx`.\n    \n    >>> f = lambda y, x: 1\n    >>> integrate.dblquad(f, 0, np.pi/4, np.sin, np.cos)\n        (0.41421356237309503, 1.1083280054755938e-14)\n    \n    Calculate :math:`\\int^{x=1}_{x=0} \\int^{y=2-x}_{y=x} a x y \\,dy \\,dx`\n    for :math:`a=1, 3`.\n    \n    >>> f = lambda y, x, a: a*x*y\n    >>> integrate.dblquad(f, 0, 1, lambda x: x, lambda x: 2-x, args=(1,))\n        (0.33333333333333337, 5.551115123125783e-15)\n    >>> integrate.dblquad(f, 0, 1, lambda x: x, lambda x: 2-x, args=(3,))\n        (0.9999999999999999, 1.6653345369377348e-14)\n    \n    Compute the two-dimensional Gaussian Integral, which is the integral of the\n    Gaussian function :math:`f(x,y) = e^{-(x^{2} + y^{2})}`, over\n    :math:`(-\\infty,+\\infty)`. That is, compute the integral\n    :math:`\\iint^{+\\infty}_{-\\infty} e^{-(x^{2} + y^{2})} \\,dy\\,dx`.\n    \n    >>> f = lambda x, y: np.exp(-(x ** 2 + y ** 2))\n    >>> integrate.dblquad(f, -np.inf, np.inf, -np.inf, np.inf)\n        (3.141592653589777, 2.5173086737433208e-08)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "5d1ea704f0267f80f67bbcd6322b5eae86a351fabbd095ebd6e52f41707985ed",
            "fields": [
                {
                    "id": "4m3fe69q",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method of at least two variables: y must be the\nfirst argument and x the second argument.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_9lb501e",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dhdlt281",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ub5nogp",
                    "encoding": "",
                    "name": "gfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower boundary curve in y which is a function taking a single\nfloating point argument (x) and returning a floating point result\nor a float indicating a constant boundary curve.",
                    "type": "callable or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6int29b",
                    "encoding": "",
                    "name": "hfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The upper boundary curve in y (same requirements as `gfun`).",
                    "type": "callable or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1yb9sgym",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_4gr__uv",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Absolute tolerance passed directly to the inner 1-D quadrature\nintegration. Default is 1.49e-8. ``dblquad`` tries to obtain\nan accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\nwhere ``i`` = inner integral of ``func(y, x)`` from ``gfun(x)``\nto ``hfun(x)``, and ``result`` is the numerical approximation.\nSee `epsrel` below.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "70c5kd3l",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Relative tolerance of the inner 1-D integrals. Default is 1.49e-8.\nIf ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\nand ``50 * (machine epsilon)``. See `epsabs` above.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_gm13q1k",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.dblquad",
                    "defaultValue": "scipy.integrate.dblquad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7qnzne16",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q_kp8s6h",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8d9uz46h",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o3lwa7ne",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tfk0dprs",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7_mjpjh9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "_ttzy8j2",
            "name": "integrate.fixed_quad",
            "description": "Compute a definite integral using fixed-order Gaussian quadrature.\n    \n    Integrate `func` from `a` to `b` using Gaussian quadrature of\n    order `n`.\n    \n    Parameters\n    ----------\n    func : callable\n        A Python function or method to integrate (must accept vector inputs).\n        If integrating a vector-valued function, the returned array must have\n        shape ``(..., len(x))``.\n    a : float\n        Lower limit of integration.\n    b : float\n        Upper limit of integration.\n    args : tuple, optional\n        Extra arguments to pass to function, if any.\n    n : int, optional\n        Order of quadrature integration. Default is 5.\n    \n    Returns\n    -------\n    val : float\n        Gaussian quadrature approximation to the integral\n    none : None\n        Statically returned value of None\n    \n    See Also\n    --------\n    quad : adaptive quadrature using QUADPACK\n    dblquad : double integrals\n    tplquad : triple integrals\n    romb : integrators for sampled data\n    simpson : integrators for sampled data\n    cumulative_trapezoid : cumulative integration for sampled data\n    \n    Examples\n    --------\n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> f = lambda x: x**8\n    >>> integrate.fixed_quad(f, 0.0, 1.0, n=4)\n    (0.1110884353741496, None)\n    >>> integrate.fixed_quad(f, 0.0, 1.0, n=5)\n    (0.11111111111111102, None)\n    >>> print(1/9.0)  # analytical result\n    0.1111111111111111\n    \n    >>> integrate.fixed_quad(np.cos, 0.0, np.pi/2, n=4)\n    (0.9999999771971152, None)\n    >>> integrate.fixed_quad(np.cos, 0.0, np.pi/2, n=5)\n    (1.000000000039565, None)\n    >>> np.sin(np.pi/2)-np.sin(0)  # analytical result\n    1.0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4612fef87fdc00cd1c74afb65e17e871d8732b4ce83f4e507827534c37dabbab",
            "fields": [
                {
                    "id": "qkqti8cn",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method to integrate (must accept vector inputs).\nIf integrating a vector-valued function, the returned array must have\nshape ``(..., len(x))``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2pze08qp",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jf8muqhm",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "14p6y5ov",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to function, if any.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7otlaet0",
                    "encoding": "",
                    "name": "n",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "Order of quadrature integration. Default is 5.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nf_xl2s2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.fixed_quad",
                    "defaultValue": "scipy.integrate.fixed_quad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i81ftsse",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zurwd91q",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "qpc7sb9z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yl6y776o",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50ax06dk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8you5e_z",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6s7et10z",
            "name": "integrate.lebedev_rule",
            "description": "Lebedev quadrature.\n    \n    Compute the sample points and weights for Lebedev quadrature [1]_\n    for integration of a function over the surface of a unit sphere.\n    \n    Parameters\n    ----------\n    n : int\n        Quadrature order. See Notes for supported values.\n    \n    Returns\n    -------\n    x : ndarray of shape ``(3, m)``\n        Sample points on the unit sphere in Cartesian coordinates.\n        ``m`` is the \"degree\" corresponding with the specified order; see Notes.\n    w : ndarray of shape ``(m,)``\n        Weights\n    \n    Notes\n    -----\n    Implemented by translating the Matlab code of [2]_ to Python.\n    \n    The available orders (argument `n`) are::\n    \n        3, 5, 7, 9, 11, 13, 15, 17,\n        19, 21, 23, 25, 27, 29, 31, 35,\n        41, 47, 53, 59, 65, 71, 77, 83,\n        89, 95, 101, 107, 113, 119, 125, 131\n    \n    The corresponding degrees ``m`` are::\n    \n        6, 14, 26, 38, 50, 74, 86, 110,\n        146, 170, 194, 230, 266, 302, 350, 434,\n        590, 770, 974, 1202, 1454, 1730, 2030, 2354,\n        2702, 3074, 3470, 3890, 4334, 4802, 5294, 5810\n    \n    References\n    ----------\n    .. [1] V.I. Lebedev, and D.N. Laikov. \"A quadrature formula for the sphere of\n           the 131st algebraic order of accuracy\". Doklady Mathematics, Vol. 59,\n           No. 3, 1999, pp. 477-481.\n    .. [2] R. Parrish. ``getLebedevSphere``. Matlab Central File Exchange.\n           https://www.mathworks.com/matlabcentral/fileexchange/27097-getlebedevsphere.\n    .. [3] Bellet, Jean-Baptiste, Matthieu Brachet, and Jean-Pierre Croisille.\n           \"Quadrature and symmetry on the Cubed Sphere.\" Journal of Computational and\n           Applied Mathematics 409 (2022): 114142. :doi:`10.1016/j.cam.2022.114142`.\n    \n    Examples\n    --------\n    An example given in [3]_ is integration of :math:`f(x, y, z) = \\exp(x)` over a\n    sphere of radius :math:`1`; the reference there is ``14.7680137457653``.\n    Show the convergence to the expected result as the order increases:\n    \n    >>> import matplotlib.pyplot as plt\n    >>> import numpy as np\n    >>> from scipy.integrate import lebedev_rule\n    >>>\n    >>> def f(x):\n    ...     return np.exp(x[0])\n    >>>\n    >>> res = []\n    >>> orders = np.arange(3, 20, 2)\n    >>> for n in orders:\n    ...     x, w = lebedev_rule(n)\n    ...     res.append(w @ f(x))\n    >>>\n    >>> ref = np.full_like(res, 14.7680137457653)\n    >>> err = abs(res - ref)/abs(ref)\n    >>> plt.semilogy(orders, err)\n    >>> plt.xlabel('order $n$')\n    >>> plt.ylabel('relative error')\n    >>> plt.title(r'Convergence for $f(x, y, z) = \\exp(x)$')\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "20d25aaef7342e30a08c6e4c7271aa64a0b856c37686771c187836a263fa5d30",
            "fields": [
                {
                    "id": "73vaa65s",
                    "encoding": "",
                    "name": "n",
                    "value": "",
                    "defaultValue": "",
                    "description": "Quadrature order. See Notes for supported values.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ska_ssm2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.lebedev_rule",
                    "defaultValue": "scipy.integrate.lebedev_rule",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ep60lk0i",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nomas0en",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "4r4dxm7w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_tqs5ngb",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ij28oq12",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mr33bd2_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "xf70hjc5",
            "name": "integrate.newton_cotes",
            "description": "Return weights and error coefficient for Newton-Cotes integration.\n    \n    Suppose we have (N+1) samples of f at the positions\n    x_0, x_1, ..., x_N. Then an N-point Newton-Cotes formula for the\n    integral between x_0 and x_N is:\n    \n    :math:`\\int_{x_0}^{x_N} f(x)dx = \\Delta x \\sum_{i=0}^{N} a_i f(x_i)\n    + B_N (\\Delta x)^{N+2} f^{N+1} (\\xi)`\n    \n    where :math:`\\xi \\in [x_0,x_N]`\n    and :math:`\\Delta x = \\frac{x_N-x_0}{N}` is the average samples spacing.\n    \n    If the samples are equally-spaced and N is even, then the error\n    term is :math:`B_N (\\Delta x)^{N+3} f^{N+2}(\\xi)`.\n    \n    Parameters\n    ----------\n    rn : int\n        The integer order for equally-spaced data or the relative positions of\n        the samples with the first sample at 0 and the last at N, where N+1 is\n        the length of `rn`. N is the order of the Newton-Cotes integration.\n    equal : int, optional\n        Set to 1 to enforce equally spaced data.\n    \n    Returns\n    -------\n    an : ndarray\n        1-D array of weights to apply to the function at the provided sample\n        positions.\n    B : float\n        Error coefficient.\n    \n    Notes\n    -----\n    Normally, the Newton-Cotes rules are used on smaller integration\n    regions and a composite rule is used to return the total integral.\n    \n    Examples\n    --------\n    Compute the integral of sin(x) in [0, :math:`\\pi`]:\n    \n    >>> from scipy.integrate import newton_cotes\n    >>> import numpy as np\n    >>> def f(x):\n    ...     return np.sin(x)\n    >>> a = 0\n    >>> b = np.pi\n    >>> exact = 2\n    >>> for N in [2, 4, 6, 8, 10]:\n    ...     x = np.linspace(a, b, N + 1)\n    ...     an, B = newton_cotes(N, 1)\n    ...     dx = (b - a) / N\n    ...     quad = dx * np.sum(an * f(x))\n    ...     error = abs(quad - exact)\n    ...     print('{:2d}  {:10.9f}  {:.5e}'.format(N, quad, error))\n    ...\n     2   2.094395102   9.43951e-02\n     4   1.998570732   1.42927e-03\n     6   2.000017814   1.78136e-05\n     8   1.999999835   1.64725e-07\n    10   2.000000001   1.14677e-09",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "83750ff410c2e8951adbe22cb49bb6e48b993d53c381ef9e98f091928b927a1e",
            "fields": [
                {
                    "id": "zle1nilf",
                    "encoding": "",
                    "name": "rn",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integer order for equally-spaced data or the relative positions of\nthe samples with the first sample at 0 and the last at N, where N+1 is\nthe length of `rn`. N is the order of the Newton-Cotes integration.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ktgq2cp",
                    "encoding": "",
                    "name": "equal",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Set to 1 to enforce equally spaced data.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3rrcvtey",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.newton_cotes",
                    "defaultValue": "scipy.integrate.newton_cotes",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "84zwbdtv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvra4qi2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ste88pfk",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wx6e3tkk",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jt6kd__f",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34cid4ae",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "6301tth6",
            "name": "integrate.nquad",
            "description": "Integration over multiple variables.\n    \n    Wraps `quad` to enable integration over multiple variables.\n    Various options allow improved integration of discontinuous functions, as\n    well as the use of weighted integration, and generally finer control of the\n    integration process.\n    \n    Parameters\n    ----------\n    func : {callable, scipy.LowLevelCallable}\n        The function to be integrated. Has arguments of ``x0, ... xn``,\n        ``t0, ... tm``, where integration is carried out over ``x0, ... xn``,\n        which must be floats.  Where ``t0, ... tm`` are extra arguments\n        passed in args.\n        Function signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``.\n        Integration is carried out in order.  That is, integration over ``x0``\n        is the innermost integral, and ``xn`` is the outermost.\n    \n        If the user desires improved integration performance, then `f` may\n        be a `scipy.LowLevelCallable` with one of the signatures::\n    \n            double func(int n, double *xx)\n            double func(int n, double *xx, void *user_data)\n    \n        where ``n`` is the number of variables and args.  The ``xx`` array\n        contains the coordinates and extra arguments. ``user_data`` is the data\n        contained in the `scipy.LowLevelCallable`.\n    ranges : iterable object\n        Each element of ranges may be either a sequence  of 2 numbers, or else\n        a callable that returns such a sequence. ``ranges[0]`` corresponds to\n        integration over x0, and so on. If an element of ranges is a callable,\n        then it will be called with all of the integration arguments available,\n        as well as any parametric arguments. e.g., if\n        ``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as\n        either ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``.\n    args : iterable object, optional\n        Additional arguments ``t0, ... tn``, required by ``func``, ``ranges``,\n        and ``opts``.\n    opts : iterable object or dict, optional\n        Options to be passed to `quad`. May be empty, a dict, or\n        a sequence of dicts or functions that return a dict. If empty, the\n        default options from scipy.integrate.quad are used. If a dict, the same\n        options are used for all levels of integraion. If a sequence, then each\n        element of the sequence corresponds to a particular integration. e.g.,\n        ``opts[0]`` corresponds to integration over ``x0``, and so on. If a\n        callable, the signature must be the same as for ``ranges``. The\n        available options together with their default values are:\n    \n          - epsabs = 1.49e-08\n          - epsrel = 1.49e-08\n          - limit  = 50\n          - points = None\n          - weight = None\n          - wvar   = None\n          - wopts  = None\n    \n        For more information on these options, see `quad`.\n    \n    full_output : bool, optional\n        Partial implementation of ``full_output`` from scipy.integrate.quad.\n        The number of integrand function evaluations ``neval`` can be obtained\n        by setting ``full_output=True`` when calling nquad.\n    \n    Returns\n    -------\n    result : float\n        The result of the integration.\n    abserr : float\n        The maximum of the estimates of the absolute error in the various\n        integration results.\n    out_dict : dict, optional\n        A dict containing additional information on the integration.\n    \n    See Also\n    --------\n    quad : 1-D numerical integration\n    dblquad, tplquad : double and triple integrals\n    fixed_quad : fixed-order Gaussian quadrature\n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Details of QUADPACK level routines**\n    \n    `nquad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. The routine called depends on\n    `weight`, `points` and the integration limits `a` and `b`.\n    \n    ================  ==============  ==========  =====================\n    QUADPACK routine  `weight`        `points`    infinite bounds\n    ================  ==============  ==========  =====================\n    qagse             None            No          No\n    qagie             None            No          Yes\n    qagpe             None            Yes         No\n    qawoe             'sin', 'cos'    No          No\n    qawfe             'sin', 'cos'    No          either `a` or `b`\n    qawse             'alg*'          No          No\n    qawce             'cauchy'        No          No\n    ================  ==============  ==========  =====================\n    \n    The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    qagpe\n        serves the same purposes as QAGS, but also allows the\n        user to provide explicit information about the location\n        and type of trouble-spots i.e. the abscissae of internal\n        singularities, discontinuities and other difficulties of\n        the integrand function.\n    qawoe\n        is an integrator for the evaluation of\n        :math:`\\int^b_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^b_a \\sin(\\omega x)f(x)dx`\n        over a finite interval [a,b], where :math:`\\omega` and :math:`f`\n        are specified by the user. The rule evaluation component is based\n        on the modified Clenshaw-Curtis technique\n    \n        An adaptive subdivision scheme is used in connection\n        with an extrapolation procedure, which is a modification\n        of that in ``QAGS`` and allows the algorithm to deal with\n        singularities in :math:`f(x)`.\n    qawfe\n        calculates the Fourier transform\n        :math:`\\int^\\infty_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^\\infty_a \\sin(\\omega x)f(x)dx`\n        for user-provided :math:`\\omega` and :math:`f`. The procedure of\n        ``QAWO`` is applied on successive finite intervals, and convergence\n        acceleration by means of the :math:`\\varepsilon`-algorithm is applied\n        to the series of integral approximations.\n    qawse\n        approximate :math:`\\int^b_a w(x)f(x)dx`, with :math:`a < b` where\n        :math:`w(x) = (x-a)^{\\alpha}(b-x)^{\\beta}v(x)` with\n        :math:`\\alpha,\\beta > -1`, where :math:`v(x)` may be one of the\n        following functions: :math:`1`, :math:`\\log(x-a)`, :math:`\\log(b-x)`,\n        :math:`\\log(x-a)\\log(b-x)`.\n    \n        The user specifies :math:`\\alpha`, :math:`\\beta` and the type of the\n        function :math:`v`. A globally adaptive subdivision strategy is\n        applied, with modified Clenshaw-Curtis integration on those\n        subintervals which contain `a` or `b`.\n    qawce\n        compute :math:`\\int^b_a f(x) / (x-c)dx` where the integral must be\n        interpreted as a Cauchy principal value integral, for user specified\n        :math:`c` and :math:`f`. The strategy is globally adaptive. Modified\n        Clenshaw-Curtis integration is used on those intervals containing the\n        point :math:`x = c`.\n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    Examples\n    --------\n    Calculate\n    \n    .. math::\n    \n        \\int^{1}_{-0.15} \\int^{0.8}_{0.13} \\int^{1}_{-1} \\int^{1}_{0}\n        f(x_0, x_1, x_2, x_3) \\,dx_0 \\,dx_1 \\,dx_2 \\,dx_3 ,\n    \n    where\n    \n    .. math::\n    \n        f(x_0, x_1, x_2, x_3) = \\begin{cases}\n          x_0^2+x_1 x_2-x_3^3+ \\sin{x_0}+1 & (x_0-0.2 x_3-0.5-0.25 x_1 > 0) \\\\\n          x_0^2+x_1 x_2-x_3^3+ \\sin{x_0}+0 & (x_0-0.2 x_3-0.5-0.25 x_1 \\leq 0)\n        \\end{cases} .\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> func = lambda x0,x1,x2,x3 : x0**2 + x1*x2 - x3**3 + np.sin(x0) + (\n    ...                                 1 if (x0-.2*x3-.5-.25*x1>0) else 0)\n    >>> def opts0(*args, **kwargs):\n    ...     return {'points':[0.2*args[2] + 0.5 + 0.25*args[0]]}\n    >>> integrate.nquad(func, [[0,1], [-1,1], [.13,.8], [-.15,1]],\n    ...                 opts=[opts0,{},{},{}], full_output=True)\n    (1.5267454070738633, 2.9437360001402324e-14, {'neval': 388962})\n    \n    Calculate\n    \n    .. math::\n    \n        \\int^{t_0+t_1+1}_{t_0+t_1-1}\n        \\int^{x_2+t_0^2 t_1^3+1}_{x_2+t_0^2 t_1^3-1}\n        \\int^{t_0 x_1+t_1 x_2+1}_{t_0 x_1+t_1 x_2-1}\n        f(x_0,x_1, x_2,t_0,t_1)\n        \\,dx_0 \\,dx_1 \\,dx_2,\n    \n    where\n    \n    .. math::\n    \n        f(x_0, x_1, x_2, t_0, t_1) = \\begin{cases}\n          x_0 x_2^2 + \\sin{x_1}+2 & (x_0+t_1 x_1-t_0 > 0) \\\\\n          x_0 x_2^2 +\\sin{x_1}+1 & (x_0+t_1 x_1-t_0 \\leq 0)\n        \\end{cases}\n    \n    and :math:`(t_0, t_1) = (0, 1)` .\n    \n    >>> def func2(x0, x1, x2, t0, t1):\n    ...     return x0*x2**2 + np.sin(x1) + 1 + (1 if x0+t1*x1-t0>0 else 0)\n    >>> def lim0(x1, x2, t0, t1):\n    ...     return [t0*x1 + t1*x2 - 1, t0*x1 + t1*x2 + 1]\n    >>> def lim1(x2, t0, t1):\n    ...     return [x2 + t0**2*t1**3 - 1, x2 + t0**2*t1**3 + 1]\n    >>> def lim2(t0, t1):\n    ...     return [t0 + t1 - 1, t0 + t1 + 1]\n    >>> def opts0(x1, x2, t0, t1):\n    ...     return {'points' : [t0 - t1*x1]}\n    >>> def opts1(x2, t0, t1):\n    ...     return {}\n    >>> def opts2(t0, t1):\n    ...     return {}\n    >>> integrate.nquad(func2, [lim0, lim1, lim2], args=(0,1),\n    ...                 opts=[opts0, opts1, opts2])\n    (36.099919226771625, 1.8546948553373528e-07)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b684a4710d4ea506663d17d31315c32eb4254e93aba811d62c53685dcfdcd377",
            "fields": [
                {
                    "id": "e6g3tdl8",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function to be integrated. Has arguments of ``x0, ... xn``,\n``t0, ... tm``, where integration is carried out over ``x0, ... xn``,\nwhich must be floats.  Where ``t0, ... tm`` are extra arguments\npassed in args.\nFunction signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``.\nIntegration is carried out in order.  That is, integration over ``x0``\nis the innermost integral, and ``xn`` is the outermost.\n\nIf the user desires improved integration performance, then `f` may\nbe a `scipy.LowLevelCallable` with one of the signatures::\n\n    double func(int n, double *xx)\n    double func(int n, double *xx, void *user_data)\n\nwhere ``n`` is the number of variables and args.  The ``xx`` array\ncontains the coordinates and extra arguments. ``user_data`` is the data\ncontained in the `scipy.LowLevelCallable`.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8xgrygpl",
                    "encoding": "",
                    "name": "ranges",
                    "value": "",
                    "defaultValue": "",
                    "description": "Each element of ranges may be either a sequence  of 2 numbers, or else\na callable that returns such a sequence. ``ranges[0]`` corresponds to\nintegration over x0, and so on. If an element of ranges is a callable,\nthen it will be called with all of the integration arguments available,\nas well as any parametric arguments. e.g., if\n``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as\neither ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``.",
                    "type": "iterable object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_x9iow12",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional arguments ``t0, ... tn``, required by ``func``, ``ranges``,\nand ``opts``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3fffwkjx",
                    "encoding": "",
                    "name": "opts",
                    "value": "",
                    "defaultValue": "",
                    "description": "Options to be passed to `quad`. May be empty, a dict, or\na sequence of dicts or functions that return a dict. If empty, the\ndefault options from scipy.integrate.quad are used. If a dict, the same\noptions are used for all levels of integraion. If a sequence, then each\nelement of the sequence corresponds to a particular integration. e.g.,\n``opts[0]`` corresponds to integration over ``x0``, and so on. If a\ncallable, the signature must be the same as for ``ranges``. The\navailable options together with their default values are:\n\n  - epsabs = 1.49e-08\n  - epsrel = 1.49e-08\n  - limit  = 50\n  - points = None\n  - weight = None\n  - wvar   = None\n  - wopts  = None\n\nFor more information on these options, see `quad`.",
                    "type": "iterable object or dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x1i_4p7u",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "Partial implementation of ``full_output`` from scipy.integrate.quad.\nThe number of integrand function evaluations ``neval`` can be obtained\nby setting ``full_output=True`` when calling nquad.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0mevq6w",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.nquad",
                    "defaultValue": "scipy.integrate.nquad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "itrwvg8j",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q8r6vzal",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "ngr5grld",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rrqwebjy",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u7_ijdz3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "agp7vmuj",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "p9aakmai",
            "name": "integrate.nsum",
            "description": "Evaluate a convergent finite or infinite series.\n    \n    For finite `a` and `b`, this evaluates::\n    \n        f(a + np.arange(n)*step).sum()\n    \n    where ``n = int((b - a) / step) + 1``, where `f` is smooth, positive, and\n    unimodal. The number of terms in the sum may be very large or infinite,\n    in which case a partial sum is evaluated directly and the remainder is\n    approximated using integration.\n    \n    Parameters\n    ----------\n    f : callable\n        The function that evaluates terms to be summed. The signature must be::\n    \n            f(x: ndarray, *args) -> ndarray\n    \n        where each element of ``x`` is a finite real and ``args`` is a tuple,\n        which may contain an arbitrary number of arrays that are broadcastable\n        with ``x``.\n    \n        `f` must be an elementwise function: each element ``f(x)[i]``\n        must equal ``f(x[i])`` for all indices ``i``. It must not mutate the\n        array ``x`` or the arrays in ``args``, and it must return NaN where\n        the argument is NaN.\n    \n        `f` must represent a smooth, positive, unimodal function of `x` defined at\n        *all reals* between `a` and `b`.\n    a, b : float array_like\n        Real lower and upper limits of summed terms. Must be broadcastable.\n        Each element of `a` must be less than the corresponding element in `b`.\n    step : float array_like\n        Finite, positive, real step between summed terms. Must be broadcastable\n        with `a` and `b`. Note that the number of terms included in the sum will\n        be ``floor((b - a) / step)`` + 1; adjust `b` accordingly to ensure\n        that ``f(b)`` is included if intended.\n    args : tuple of array_like, optional\n        Additional positional arguments to be passed to `f`. Must be arrays\n        broadcastable with `a`, `b`, and `step`. If the callable to be summed\n        requires arguments that are not broadcastable with `a`, `b`, and `step`,\n        wrap that callable with `f` such that `f` accepts only `x` and\n        broadcastable ``*args``. See Examples.\n    log : bool, default: False\n        Setting to True indicates that `f` returns the log of the terms\n        and that `atol` and `rtol` are expressed as the logs of the absolute\n        and relative errors. In this case, the result object will contain the\n        log of the sum and error. This is useful for summands for which\n        numerical underflow or overflow would lead to inaccuracies.\n    maxterms : int, default: 2**20\n        The maximum number of terms to evaluate for direct summation.\n        Additional function evaluations may be performed for input\n        validation and integral evaluation.\n    atol, rtol : float, optional\n        Absolute termination tolerance (default: 0) and relative termination\n        tolerance (default: ``eps**0.5``, where ``eps`` is the precision of\n        the result dtype), respectively. Must be non-negative\n        and finite if `log` is False, and must be expressed as the log of a\n        non-negative and finite number if `log` is True.\n    \n    Returns\n    -------\n    res : _RichResult\n        An object similar to an instance of `scipy.optimize.OptimizeResult` with the\n        following attributes. (The descriptions are written as though the values will\n        be scalars; however, if `f` returns an array, the outputs will be\n        arrays of the same shape.)\n    \n        success : bool\n            ``True`` when the algorithm terminated successfully (status ``0``);\n            ``False`` otherwise.\n        status : int array\n            An integer representing the exit status of the algorithm.\n    \n            - ``0`` : The algorithm converged to the specified tolerances.\n            - ``-1`` : Element(s) of `a`, `b`, or `step` are invalid\n            - ``-2`` : Numerical integration reached its iteration limit;\n              the sum may be divergent.\n            - ``-3`` : A non-finite value was encountered.\n            - ``-4`` : The magnitude of the last term of the partial sum exceeds\n              the tolerances, so the error estimate exceeds the tolerances.\n              Consider increasing `maxterms` or loosening `tolerances`.\n              Alternatively, the callable may not be unimodal, or the limits of\n              summation may be too far from the function maximum. Consider\n              increasing `maxterms` or breaking the sum into pieces.\n    \n        sum : float array\n            An estimate of the sum.\n        error : float array\n            An estimate of the absolute error, assuming all terms are non-negative,\n            the function is computed exactly, and direct summation is accurate to\n            the precision of the result dtype.\n        nfev : int array\n            The number of points at which `f` was evaluated.\n    \n    See Also\n    --------\n    mpmath.nsum\n    \n    Notes\n    -----\n    The method implemented for infinite summation is related to the integral\n    test for convergence of an infinite series: assuming `step` size 1 for\n    simplicity of exposition, the sum of a monotone decreasing function is bounded by\n    \n    .. math::\n    \n        \\int_u^\\infty f(x) dx \\leq \\sum_{k=u}^\\infty f(k) \\leq \\int_u^\\infty f(x) dx + f(u)\n    \n    Let :math:`a` represent  `a`, :math:`n` represent `maxterms`, :math:`\\epsilon_a`\n    represent `atol`, and :math:`\\epsilon_r` represent `rtol`.\n    The implementation first evaluates the integral :math:`S_l=\\int_a^\\infty f(x) dx`\n    as a lower bound of the infinite sum. Then, it seeks a value :math:`c > a` such\n    that :math:`f(c) < \\epsilon_a + S_l \\epsilon_r`, if it exists; otherwise,\n    let :math:`c = a + n`. Then the infinite sum is approximated as\n    \n    .. math::\n    \n        \\sum_{k=a}^{c-1} f(k) + \\int_c^\\infty f(x) dx + f(c)/2\n    \n    and the reported error is :math:`f(c)/2` plus the error estimate of\n    numerical integration. Note that the integral approximations may require\n    evaluation of the function at points besides those that appear in the sum,\n    so `f` must be a continuous and monotonically decreasing function defined\n    for all reals within the integration interval. However, due to the nature\n    of the integral approximation, the shape of the function between points\n    that appear in the sum has little effect. If there is not a natural\n    extension of the function to all reals, consider using linear interpolation,\n    which is easy to evaluate and preserves monotonicity.\n    \n    The approach described above is generalized for non-unit\n    `step` and finite `b` that is too large for direct evaluation of the sum,\n    i.e. ``b - a + 1 > maxterms``. It is further generalized to unimodal\n    functions by directly summing terms surrounding the maximum.\n    This strategy may fail:\n    \n    - If the left limit is finite and the maximum is far from it.\n    - If the right limit is finite and the maximum is far from it.\n    - If both limits are finite and the maximum is far from the origin.\n    \n    In these cases, accuracy may be poor, and `nsum` may return status code ``4``.\n    \n    Although the callable `f` must be non-negative and unimodal,\n    `nsum` can be used to evaluate more general forms of series. For instance, to\n    evaluate an alternating series, pass a callable that returns the difference\n    between pairs of adjacent terms, and adjust `step` accordingly. See Examples.\n    \n    References\n    ----------\n    .. [1] Wikipedia. \"Integral test for convergence.\"\n           https://en.wikipedia.org/wiki/Integral_test_for_convergence\n    \n    Examples\n    --------\n    Compute the infinite sum of the reciprocals of squared integers.\n    \n    >>> import numpy as np\n    >>> from scipy.integrate import nsum\n    >>> res = nsum(lambda k: 1/k**2, 1, np.inf)\n    >>> ref = np.pi**2/6  # true value\n    >>> res.error  # estimated error\n    np.float64(7.448762306416137e-09)\n    >>> (res.sum - ref)/ref  # true error\n    np.float64(-1.839871898894426e-13)\n    >>> res.nfev  # number of points at which callable was evaluated\n    np.int32(8561)\n    \n    Compute the infinite sums of the reciprocals of integers raised to powers ``p``,\n    where ``p`` is an array.\n    \n    >>> from scipy import special\n    >>> p = np.arange(3, 10)\n    >>> res = nsum(lambda k, p: 1/k**p, 1, np.inf, maxterms=1e3, args=(p,))\n    >>> ref = special.zeta(p, 1)\n    >>> np.allclose(res.sum, ref)\n    True\n    \n    Evaluate the alternating harmonic series.\n    \n    >>> res = nsum(lambda x: 1/x - 1/(x+1), 1, np.inf, step=2)\n    >>> res.sum, res.sum - np.log(2)  # result, difference vs analytical sum\n    (np.float64(0.6931471805598691), np.float64(-7.616129948928574e-14))",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "67056adddaa2035ae74c20f8ca273a0cf6ed9eac83a6ecfaab9171a02640fa13",
            "fields": [
                {
                    "id": "tz40jbu1",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function that evaluates terms to be summed. The signature must be::\n\n    f(x: ndarray, *args) -> ndarray\n\nwhere each element of ``x`` is a finite real and ``args`` is a tuple,\nwhich may contain an arbitrary number of arrays that are broadcastable\nwith ``x``.\n\n`f` must be an elementwise function: each element ``f(x)[i]``\nmust equal ``f(x[i])`` for all indices ``i``. It must not mutate the\narray ``x`` or the arrays in ``args``, and it must return NaN where\nthe argument is NaN.\n\n`f` must represent a smooth, positive, unimodal function of `x` defined at\n*all reals* between `a` and `b`.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "uwoymtkm",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zvug1j8l",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "av06vg8l",
                    "encoding": "",
                    "name": "step",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Finite, positive, real step between summed terms. Must be broadcastable\nwith `a` and `b`. Note that the number of terms included in the sum will\nbe ``floor((b - a) / step)`` + 1; adjust `b` accordingly to ensure\nthat ``f(b)`` is included if intended.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b0u_5i_n",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional arguments to be passed to `f`. Must be arrays\nbroadcastable with `a`, `b`, and `step`. If the callable to be summed\nrequires arguments that are not broadcastable with `a`, `b`, and `step`,\nwrap that callable with `f` such that `f` accepts only `x` and\nbroadcastable ``*args``. See Examples.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c9k9ybpp",
                    "encoding": "",
                    "name": "log",
                    "value": false,
                    "defaultValue": false,
                    "description": "Setting to True indicates that `f` returns the log of the terms\nand that `atol` and `rtol` are expressed as the logs of the absolute\nand relative errors. In this case, the result object will contain the\nlog of the sum and error. This is useful for summands for which\nnumerical underflow or overflow would lead to inaccuracies.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9kwyuzvt",
                    "encoding": "",
                    "name": "maxterms",
                    "value": 1048576,
                    "defaultValue": 1048576,
                    "description": "The maximum number of terms to evaluate for direct summation.\nAdditional function evaluations may be performed for input\nvalidation and integral evaluation.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f0aym5oa",
                    "encoding": "",
                    "name": "tolerances",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2uv9nyl4",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.nsum",
                    "defaultValue": "scipy.integrate.nsum",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "munwz0pm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6o54iinb",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "2u8hrn_3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2vg6tkb9",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z7v4tfee",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7uc8153x",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "fu3pfqww",
            "name": "ode.__init__",
            "description": "\nA generic interface class to numeric integrators.\n    \n    Solve an equation system :math:`y'(t) = f(t,y)` with (optional) ``jac = df/dy``.\n    \n    *Note*: The first two arguments of ``f(t, y, ...)`` are in the\n    opposite order of the arguments in the system definition function used\n    by `scipy.integrate.odeint`.\n    \n    Parameters\n    ----------\n    f : callable ``f(t, y, *f_args)``\n        Right-hand side of the differential equation. t is a scalar,\n        ``y.shape == (n,)``.\n        ``f_args`` is set by calling ``set_f_params(*args)``.\n        `f` should return a scalar, array or list (not a tuple).\n    jac : callable ``jac(t, y, *jac_args)``, optional\n        Jacobian of the right-hand side, ``jac[i,j] = d f[i] / d y[j]``.\n        ``jac_args`` is set by calling ``set_jac_params(*args)``.\n    \n    Attributes\n    ----------\n    t : float\n        Current time.\n    y : ndarray\n        Current variable values.\n    \n    See also\n    --------\n    odeint : an integrator with a simpler interface based on lsoda from ODEPACK\n    quad : for finding the area under a curve\n    \n    Notes\n    -----\n    Available integrators are listed below. They can be selected using\n    the `set_integrator` method.\n    \n    \"vode\"\n    \n        Real-valued Variable-coefficient Ordinary Differential Equation\n        solver, with fixed-leading-coefficient implementation. It provides\n        implicit Adams method (for non-stiff problems) and a method based on\n        backward differentiation formulas (BDF) (for stiff problems).\n    \n        Source: http://www.netlib.org/ode/vode.f\n    \n        .. warning::\n    \n           This integrator is not re-entrant. You cannot have two `ode`\n           instances using the \"vode\" integrator at the same time.\n    \n        This integrator accepts the following parameters in `set_integrator`\n        method of the `ode` class:\n    \n        - atol : float or sequence\n          absolute tolerance for solution\n        - rtol : float or sequence\n          relative tolerance for solution\n        - lband : None or int\n        - uband : None or int\n          Jacobian band width, jac[i,j] != 0 for i-lband <= j <= i+uband.\n          Setting these requires your jac routine to return the jacobian\n          in packed format, jac_packed[i-j+uband, j] = jac[i,j]. The\n          dimension of the matrix must be (lband+uband+1, len(y)).\n        - method: 'adams' or 'bdf'\n          Which solver to use, Adams (non-stiff) or BDF (stiff)\n        - with_jacobian : bool\n          This option is only considered when the user has not supplied a\n          Jacobian function and has not indicated (by setting either band)\n          that the Jacobian is banded. In this case, `with_jacobian` specifies\n          whether the iteration method of the ODE solver's correction step is\n          chord iteration with an internally generated full Jacobian or\n          functional iteration with no Jacobian.\n        - nsteps : int\n          Maximum number of (internally defined) steps allowed during one\n          call to the solver.\n        - first_step : float\n        - min_step : float\n        - max_step : float\n          Limits for the step sizes used by the integrator.\n        - order : int\n          Maximum order used by the integrator,\n          order <= 12 for Adams, <= 5 for BDF.\n    \n    \"zvode\"\n    \n        Complex-valued Variable-coefficient Ordinary Differential Equation\n        solver, with fixed-leading-coefficient implementation. It provides\n        implicit Adams method (for non-stiff problems) and a method based on\n        backward differentiation formulas (BDF) (for stiff problems).\n    \n        Source: http://www.netlib.org/ode/zvode.f\n    \n        .. warning::\n    \n           This integrator is not re-entrant. You cannot have two `ode`\n           instances using the \"zvode\" integrator at the same time.\n    \n        This integrator accepts the same parameters in `set_integrator`\n        as the \"vode\" solver.\n    \n        .. note::\n    \n            When using ZVODE for a stiff system, it should only be used for\n            the case in which the function f is analytic, that is, when each f(i)\n            is an analytic function of each y(j). Analyticity means that the\n            partial derivative df(i)/dy(j) is a unique complex number, and this\n            fact is critical in the way ZVODE solves the dense or banded linear\n            systems that arise in the stiff case. For a complex stiff ODE system\n            in which f is not analytic, ZVODE is likely to have convergence\n            failures, and for this problem one should instead use DVODE on the\n            equivalent real system (in the real and imaginary parts of y).\n    \n    \"lsoda\"\n    \n        Real-valued Variable-coefficient Ordinary Differential Equation\n        solver, with fixed-leading-coefficient implementation. It provides\n        automatic method switching between implicit Adams method (for non-stiff\n        problems) and a method based on backward differentiation formulas (BDF)\n        (for stiff problems).\n    \n        Source: http://www.netlib.org/odepack\n    \n        .. warning::\n    \n           This integrator is not re-entrant. You cannot have two `ode`\n           instances using the \"lsoda\" integrator at the same time.\n    \n        This integrator accepts the following parameters in `set_integrator`\n        method of the `ode` class:\n    \n        - atol : float or sequence\n          absolute tolerance for solution\n        - rtol : float or sequence\n          relative tolerance for solution\n        - lband : None or int\n        - uband : None or int\n          Jacobian band width, jac[i,j] != 0 for i-lband <= j <= i+uband.\n          Setting these requires your jac routine to return the jacobian\n          in packed format, jac_packed[i-j+uband, j] = jac[i,j].\n        - with_jacobian : bool\n          *Not used.*\n        - nsteps : int\n          Maximum number of (internally defined) steps allowed during one\n          call to the solver.\n        - first_step : float\n        - min_step : float\n        - max_step : float\n          Limits for the step sizes used by the integrator.\n        - max_order_ns : int\n          Maximum order used in the nonstiff case (default 12).\n        - max_order_s : int\n          Maximum order used in the stiff case (default 5).\n        - max_hnil : int\n          Maximum number of messages reporting too small step size (t + h = t)\n          (default 0)\n        - ixpr : int\n          Whether to generate extra printing at method switches (default False).\n    \n    \"dopri5\"\n    \n        This is an explicit runge-kutta method of order (4)5 due to Dormand &\n        Prince (with stepsize control and dense output).\n    \n        Authors:\n    \n            E. Hairer and G. Wanner\n            Universite de Geneve, Dept. de Mathematiques\n            CH-1211 Geneve 24, Switzerland\n            e-mail:  ernst.hairer@math.unige.ch, gerhard.wanner@math.unige.ch\n    \n        This code is described in [HNW93]_.\n    \n        This integrator accepts the following parameters in set_integrator()\n        method of the ode class:\n    \n        - atol : float or sequence\n          absolute tolerance for solution\n        - rtol : float or sequence\n          relative tolerance for solution\n        - nsteps : int\n          Maximum number of (internally defined) steps allowed during one\n          call to the solver.\n        - first_step : float\n        - max_step : float\n        - safety : float\n          Safety factor on new step selection (default 0.9)\n        - ifactor : float\n        - dfactor : float\n          Maximum factor to increase/decrease step size by in one step\n        - beta : float\n          Beta parameter for stabilised step size control.\n        - verbosity : int\n          Switch for printing messages (< 0 for no messages).\n    \n    \"dop853\"\n    \n        This is an explicit runge-kutta method of order 8(5,3) due to Dormand\n        & Prince (with stepsize control and dense output).\n    \n        Options and references the same as \"dopri5\".\n    \n    Examples\n    --------\n    \n    A problem to integrate and the corresponding jacobian:\n    \n    >>> from scipy.integrate import ode\n    >>>\n    >>> y0, t0 = [1.0j, 2.0], 0\n    >>>\n    >>> def f(t, y, arg1):\n    ...     return [1j*arg1*y[0] + y[1], -arg1*y[1]**2]\n    >>> def jac(t, y, arg1):\n    ...     return [[1j*arg1, 1], [0, -arg1*2*y[1]]]\n    \n    The integration:\n    \n    >>> r = ode(f, jac).set_integrator('zvode', method='bdf')\n    >>> r.set_initial_value(y0, t0).set_f_params(2.0).set_jac_params(2.0)\n    >>> t1 = 10\n    >>> dt = 1\n    >>> while r.successful() and r.t < t1:\n    ...     print(r.t+dt, r.integrate(r.t+dt))\n    1 [-0.71038232+0.23749653j  0.40000271+0.j        ]\n    2.0 [0.19098503-0.52359246j 0.22222356+0.j        ]\n    3.0 [0.47153208+0.52701229j 0.15384681+0.j        ]\n    4.0 [-0.61905937+0.30726255j  0.11764744+0.j        ]\n    5.0 [0.02340997-0.61418799j 0.09523835+0.j        ]\n    6.0 [0.58643071+0.339819j 0.08000018+0.j      ]\n    7.0 [-0.52070105+0.44525141j  0.06896565+0.j        ]\n    8.0 [-0.15986733-0.61234476j  0.06060616+0.j        ]\n    9.0 [0.64850462+0.15048982j 0.05405414+0.j        ]\n    10.0 [-0.38404699+0.56382299j  0.04878055+0.j        ]\n    \n    References\n    ----------\n    .. [HNW93] E. Hairer, S.P. Norsett and G. Wanner, Solving Ordinary\n        Differential Equations i. Nonstiff Problems. 2nd edition.\n        Springer Series in Computational Mathematics,\n        Springer-Verlag (1993)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fffa377797f9e839cb6f83a645ce6c1126ab13f8c2aca2b986e2b8cb219245f3",
            "fields": [
                {
                    "id": "r52jk5lj",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to ode object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "OutputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qe8a2x7x",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the differential equation. t is a scalar,\n``y.shape == (n,)``.\n``f_args`` is set by calling ``set_f_params(*args)``.\n`f` should return a scalar, array or list (not a tuple).",
                    "type": "callable f(t, y, *fargs)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vwp4vs_x",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Jacobian of the right-hand side, ``jac[i,j] = d f[i] / d y[j]``.\n``jac_args`` is set by calling ``set_jac_params(*args)``.",
                    "type": "callable jac(t, y, *jacargs)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dtjkrvjx",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.__init__",
                    "defaultValue": "scipy.integrate._ode.ode.__init__",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hptfsfwm",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4dmnue_8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "pwmb6kuw",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ozjcziwp",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kusmwlkb",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e_xbiqpy",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "4b6n_e2s",
            "name": "ode.get_return_code",
            "description": "Extracts the return code for the integration to enable better control\n    if the integration fails.\n    \n    In general, a return code > 0 implies success, while a return code < 0\n    implies failure.\n    \n    Notes\n    -----\n    This section describes possible return codes and their meaning, for available\n    integrators that can be selected by `set_integrator` method.\n    \n    \"vode\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    2            Integration successful.\n    -1           Excess work done on this call. (Perhaps wrong MF.)\n    -2           Excess accuracy requested. (Tolerances too small.)\n    -3           Illegal input detected. (See printed message.)\n    -4           Repeated error test failures. (Check all input.)\n    -5           Repeated convergence failures. (Perhaps bad Jacobian\n                 supplied or wrong choice of MF or tolerances.)\n    -6           Error weight became zero during problem. (Solution\n                 component i vanished, and ATOL or ATOL(i) = 0.)\n    ===========  =======\n    \n    \"zvode\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    2            Integration successful.\n    -1           Excess work done on this call. (Perhaps wrong MF.)\n    -2           Excess accuracy requested. (Tolerances too small.)\n    -3           Illegal input detected. (See printed message.)\n    -4           Repeated error test failures. (Check all input.)\n    -5           Repeated convergence failures. (Perhaps bad Jacobian\n                 supplied or wrong choice of MF or tolerances.)\n    -6           Error weight became zero during problem. (Solution\n                 component i vanished, and ATOL or ATOL(i) = 0.)\n    ===========  =======\n    \n    \"dopri5\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    1            Integration successful.\n    2            Integration successful (interrupted by solout).\n    -1           Input is not consistent.\n    -2           Larger nsteps is needed.\n    -3           Step size becomes too small.\n    -4           Problem is probably stiff (interrupted).\n    ===========  =======\n    \n    \"dop853\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    1            Integration successful.\n    2            Integration successful (interrupted by solout).\n    -1           Input is not consistent.\n    -2           Larger nsteps is needed.\n    -3           Step size becomes too small.\n    -4           Problem is probably stiff (interrupted).\n    ===========  =======\n    \n    \"lsoda\"\n    \n    ===========  =======\n    Return Code  Message\n    ===========  =======\n    2            Integration successful.\n    -1           Excess work done on this call (perhaps wrong Dfun type).\n    -2           Excess accuracy requested (tolerances too small).\n    -3           Illegal input detected (internal error).\n    -4           Repeated error test failures (internal error).\n    -5           Repeated convergence failures (perhaps bad Jacobian or tolerances).\n    -6           Error weight became zero during problem.\n    -7           Internal workspace insufficient to finish (internal error).\n    ===========  =======",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d43af25b9c77480ed1c6ca719ab7c08233dbd81cb68696befc399792ebe9448f",
            "fields": [
                {
                    "id": "f29s8in7",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.get_return_code object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jiih9hki",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.get_return_code",
                    "defaultValue": "scipy.integrate._ode.ode.get_return_code",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8n9tj1_z",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "euccre_p",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mu0gifzu",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "754uppn5",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0_0hg8np",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2ggbo0s9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "eqaem6oz",
            "name": "ode.integrate",
            "description": "Find y=y(t), set y as an initial condition, and return y.\n    \n    Parameters\n    ----------\n    t : float\n        The endpoint of the integration step.\n    step : bool\n        If True, and if the integrator supports the step method,\n        then perform a single integration step and return.\n        This parameter is provided in order to expose internals of\n        the implementation, and should not be changed from its default\n        value in most cases.\n    relax : bool\n        If True and if the integrator supports the run_relax method,\n        then integrate until t_1 >= t and return. ``relax`` is not\n        referenced if ``step=True``.\n        This parameter is provided in order to expose internals of\n        the implementation, and should not be changed from its default\n        value in most cases.\n    \n    Returns\n    -------\n    y : float\n        The integrated value at t",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "c55523543453fe02cbd3efee994b7f86d6b4de18d273d3181fa8c28575443e12",
            "fields": [
                {
                    "id": "sl0gfjy1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.integrate object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g9k068kl",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "The endpoint of the integration step.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6qar2jp8",
                    "encoding": "",
                    "name": "step",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, and if the integrator supports the step method,\nthen perform a single integration step and return.\nThis parameter is provided in order to expose internals of\nthe implementation, and should not be changed from its default\nvalue in most cases.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "frsd0qy_",
                    "encoding": "",
                    "name": "relax",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True and if the integrator supports the run_relax method,\nthen integrate until t_1 >= t and return. ``relax`` is not\nreferenced if ``step=True``.\nThis parameter is provided in order to expose internals of\nthe implementation, and should not be changed from its default\nvalue in most cases.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3v_hnb2o",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.integrate",
                    "defaultValue": "scipy.integrate._ode.ode.integrate",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pcs7efyg",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vyx3yskz",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "xzd4bk2z",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nb9z3n6_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bwy0m14p",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0u0d07ih",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "is5u6xe2",
            "name": "ode.set_f_params",
            "description": "Set extra parameters for user-supplied function f.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "296970d79fe64624151475ee1da06b7a6d6e71d223643857ce8fc5cb0a844ee2",
            "fields": [
                {
                    "id": "eoggh1fb",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.set_f_params object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5a9gajz8",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sh2mxxx0",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.set_f_params",
                    "defaultValue": "scipy.integrate._ode.ode.set_f_params",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xcnptjsw",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "haghbyc1",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "d4c22w5t",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ccaitknm",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s0oj4l9g",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hro51lqs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "qdfaipr4",
            "name": "ode.set_initial_value",
            "description": "Set initial conditions y(t) = y.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1b31b8697573a353f1a6d05c46bcdb2a5a099b4b298ca67a0b72fad2964fcaa5",
            "fields": [
                {
                    "id": "dlkdif_z",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.set_initial_value object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dubsg9rj",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z5057u1a",
                    "encoding": "",
                    "name": "t",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vu6n8cg9",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.set_initial_value",
                    "defaultValue": "scipy.integrate._ode.ode.set_initial_value",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mwc73ke8",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "r4tn9qj4",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jtfsw5c0",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zco9_zky",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8m76tvf",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9h3w924r",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "l17scuf9",
            "name": "ode.set_integrator",
            "description": "Set integrator by name.\n    \n    Parameters\n    ----------\n    name : str\n        Name of the integrator.\n    **integrator_params\n        Additional parameters for the integrator.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "455453c39746422d56df336ec20c6019106605f43e0741ae8abd122cf6292cec",
            "fields": [
                {
                    "id": "sdve1szr",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.set_integrator object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8fas_ua8",
                    "encoding": "",
                    "name": "name",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the integrator.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vrns9afs",
                    "encoding": "",
                    "name": "integrator_params",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9vt17l_s",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.set_integrator",
                    "defaultValue": "scipy.integrate._ode.ode.set_integrator",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a07420if",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0n_labhj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "9l9n2man",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "76hd9lxf",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vsh4r3zl",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z0a_6sqs",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "1te5h6vl",
            "name": "ode.set_jac_params",
            "description": "Set extra parameters for user-supplied function jac.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "4b76c3a1f01a91cebcd790d4ce2b686801e47d2c8e2ff2caa072d428247f3c7b",
            "fields": [
                {
                    "id": "av3_ntw1",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.set_jac_params object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8bybvfix",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aeyztb04",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.set_jac_params",
                    "defaultValue": "scipy.integrate._ode.ode.set_jac_params",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reg07s_x",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g_4hclle",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "gxq801fp",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "na0o4opo",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pxjd_dk3",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nknbcjs3",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "sovi1svb",
            "name": "ode.set_solout",
            "description": "Set callable to be called at every successful integration step.\n    \n    Parameters\n    ----------\n    solout : callable\n        ``solout(t, y)`` is called at each internal integrator step,\n        t is a scalar providing the current independent position\n        y is the current solution ``y.shape == (n,)``\n        solout should return -1 to stop integration\n        otherwise it should return None or 0",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8ceba24df6aa650c30f9dae23c06a572f728c41004065fe2268ad3c936b0d439",
            "fields": [
                {
                    "id": "pgvo_xis",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.set_solout object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kevohjdh",
                    "encoding": "",
                    "name": "solout",
                    "value": "",
                    "defaultValue": "",
                    "description": "``solout(t, y)`` is called at each internal integrator step,\nt is a scalar providing the current independent position\ny is the current solution ``y.shape == (n,)``\nsolout should return -1 to stop integration\notherwise it should return None or 0",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pz3cperm",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.set_solout",
                    "defaultValue": "scipy.integrate._ode.ode.set_solout",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5jz6p0j1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zn1qc5a9",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "7vker7_w",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "beb8r5pz",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ivr89rmx",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qhw4wzxd",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PythonMemberFunction",
            "categoryType": "Application",
            "id": "2xjmz5mx",
            "name": "ode.successful",
            "description": "Check if integration was successful.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "061f3ea18c9e08531362b4639889227aa4383ae9704183c3cf77131b1eb07654",
            "fields": [
                {
                    "id": "fxtnubb2",
                    "encoding": "",
                    "name": "self",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference to scipy.integrate._ode.ode.successful object",
                    "type": "Object:scipy.integrate._ode.ode",
                    "parameterType": "ComponentParameter",
                    "usage": "InputPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zxb9gfur",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate._ode.ode.successful",
                    "defaultValue": "scipy.integrate._ode.ode.successful",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yxc7e5x7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "u9_u4aw8",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "6gstsd59",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ssi3ul4e",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate._ode.ode",
                    "defaultValue": "scipy.integrate._ode.ode",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wmnwl3em",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2l2qbh7d",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "fig9zij6",
            "name": "integrate.odeint",
            "description": "Integrate a system of ordinary differential equations.\n    \n    .. note:: For new code, use `scipy.integrate.solve_ivp` to solve a\n              differential equation.\n    \n    Solve a system of ordinary differential equations using lsoda from the\n    FORTRAN library odepack.\n    \n    Solves the initial value problem for stiff or non-stiff systems\n    of first order ode-s::\n    \n        dy/dt = func(y, t, ...)  [or func(t, y, ...)]\n    \n    where y can be a vector.\n    \n    .. note:: By default, the required order of the first two arguments of\n              `func` are in the opposite order of the arguments in the system\n              definition function used by the `scipy.integrate.ode` class and\n              the function `scipy.integrate.solve_ivp`. To use a function with\n              the signature ``func(t, y, ...)``, the argument `tfirst` must be\n              set to ``True``.\n    \n    Parameters\n    ----------\n    func : callable(y, t, ...) or callable(t, y, ...)\n        Computes the derivative of y at t.\n        If the signature is ``callable(t, y, ...)``, then the argument\n        `tfirst` must be set ``True``.\n        `func` must not modify the data in `y`, as it is a\n        view of the data used internally by the ODE solver.\n    y0 : array\n        Initial condition on y (can be a vector).\n    t : array\n        A sequence of time points for which to solve for y. The initial\n        value point should be the first element of this sequence.\n        This sequence must be monotonically increasing or monotonically\n        decreasing; repeated values are allowed.\n    args : tuple, optional\n        Extra arguments to pass to function.\n    Dfun : callable(y, t, ...) or callable(t, y, ...)\n        Gradient (Jacobian) of `func`.\n        If the signature is ``callable(t, y, ...)``, then the argument\n        `tfirst` must be set ``True``.\n        `Dfun` must not modify the data in `y`, as it is a\n        view of the data used internally by the ODE solver.\n    col_deriv : bool, optional\n        True if `Dfun` defines derivatives down columns (faster),\n        otherwise `Dfun` should define derivatives across rows.\n    full_output : bool, optional\n        True if to return a dictionary of optional outputs as the second output\n    printmessg : bool, optional\n        Whether to print the convergence message\n    tfirst : bool, optional\n        If True, the first two arguments of `func` (and `Dfun`, if given)\n        must ``t, y`` instead of the default ``y, t``.\n    \n        .. versionadded:: 1.1.0\n    \n    Returns\n    -------\n    y : array, shape (len(t), len(y0))\n        Array containing the value of y for each desired time in t,\n        with the initial value `y0` in the first row.\n    infodict : dict, only returned if full_output == True\n        Dictionary containing additional output information\n    \n        =======  ============================================================\n        key      meaning\n        =======  ============================================================\n        'hu'     vector of step sizes successfully used for each time step\n        'tcur'   vector with the value of t reached for each time step\n                 (will always be at least as large as the input times)\n        'tolsf'  vector of tolerance scale factors, greater than 1.0,\n                 computed when a request for too much accuracy was detected\n        'tsw'    value of t at the time of the last method switch\n                 (given for each time step)\n        'nst'    cumulative number of time steps\n        'nfe'    cumulative number of function evaluations for each time step\n        'nje'    cumulative number of jacobian evaluations for each time step\n        'nqu'    a vector of method orders for each successful step\n        'imxer'  index of the component of largest magnitude in the\n                 weighted local error vector (e / ewt) on an error return, -1\n                 otherwise\n        'lenrw'  the length of the double work array required\n        'leniw'  the length of integer work array required\n        'mused'  a vector of method indicators for each successful time step:\n                 1: adams (nonstiff), 2: bdf (stiff)\n        =======  ============================================================\n    \n    Other Parameters\n    ----------------\n    ml, mu : int, optional\n        If either of these are not None or non-negative, then the\n        Jacobian is assumed to be banded. These give the number of\n        lower and upper non-zero diagonals in this banded matrix.\n        For the banded case, `Dfun` should return a matrix whose\n        rows contain the non-zero bands (starting with the lowest diagonal).\n        Thus, the return matrix `jac` from `Dfun` should have shape\n        ``(ml + mu + 1, len(y0))`` when ``ml >=0`` or ``mu >=0``.\n        The data in `jac` must be stored such that ``jac[i - j + mu, j]``\n        holds the derivative of the ``i``\\ th equation with respect to the\n        ``j``\\ th state variable.  If `col_deriv` is True, the transpose of\n        this `jac` must be returned.\n    rtol, atol : float, optional\n        The input parameters `rtol` and `atol` determine the error\n        control performed by the solver.  The solver will control the\n        vector, e, of estimated local errors in y, according to an\n        inequality of the form ``max-norm of (e / ewt) <= 1``,\n        where ewt is a vector of positive error weights computed as\n        ``ewt = rtol * abs(y) + atol``.\n        rtol and atol can be either vectors the same length as y or scalars.\n        Defaults to 1.49012e-8.\n    tcrit : ndarray, optional\n        Vector of critical points (e.g., singularities) where integration\n        care should be taken.\n    h0 : float, (0: solver-determined), optional\n        The step size to be attempted on the first step.\n    hmax : float, (0: solver-determined), optional\n        The maximum absolute step size allowed.\n    hmin : float, (0: solver-determined), optional\n        The minimum absolute step size allowed.\n    ixpr : bool, optional\n        Whether to generate extra printing at method switches.\n    mxstep : int, (0: solver-determined), optional\n        Maximum number of (internally defined) steps allowed for each\n        integration point in t.\n    mxhnil : int, (0: solver-determined), optional\n        Maximum number of messages printed.\n    mxordn : int, (0: solver-determined), optional\n        Maximum order to be allowed for the non-stiff (Adams) method.\n    mxords : int, (0: solver-determined), optional\n        Maximum order to be allowed for the stiff (BDF) method.\n    \n    See Also\n    --------\n    solve_ivp : solve an initial value problem for a system of ODEs\n    ode : a more object-oriented integrator based on VODE\n    quad : for finding the area under a curve\n    \n    Examples\n    --------\n    The second order differential equation for the angle `theta` of a\n    pendulum acted on by gravity with friction can be written::\n    \n        theta''(t) + b*theta'(t) + c*sin(theta(t)) = 0\n    \n    where `b` and `c` are positive constants, and a prime (') denotes a\n    derivative. To solve this equation with `odeint`, we must first convert\n    it to a system of first order equations. By defining the angular\n    velocity ``omega(t) = theta'(t)``, we obtain the system::\n    \n        theta'(t) = omega(t)\n        omega'(t) = -b*omega(t) - c*sin(theta(t))\n    \n    Let `y` be the vector [`theta`, `omega`]. We implement this system\n    in Python as:\n    \n    >>> import numpy as np\n    >>> def pend(y, t, b, c):\n    ...     theta, omega = y\n    ...     dydt = [omega, -b*omega - c*np.sin(theta)]\n    ...     return dydt\n    ...\n    \n    We assume the constants are `b` = 0.25 and `c` = 5.0:\n    \n    >>> b = 0.25\n    >>> c = 5.0\n    \n    For initial conditions, we assume the pendulum is nearly vertical\n    with `theta(0)` = `pi` - 0.1, and is initially at rest, so\n    `omega(0)` = 0.  Then the vector of initial conditions is\n    \n    >>> y0 = [np.pi - 0.1, 0.0]\n    \n    We will generate a solution at 101 evenly spaced samples in the interval\n    0 <= `t` <= 10.  So our array of times is:\n    \n    >>> t = np.linspace(0, 10, 101)\n    \n    Call `odeint` to generate the solution. To pass the parameters\n    `b` and `c` to `pend`, we give them to `odeint` using the `args`\n    argument.\n    \n    >>> from scipy.integrate import odeint\n    >>> sol = odeint(pend, y0, t, args=(b, c))\n    \n    The solution is an array with shape (101, 2). The first column\n    is `theta(t)`, and the second is `omega(t)`. The following code\n    plots both components.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t, sol[:, 0], 'b', label='theta(t)')\n    >>> plt.plot(t, sol[:, 1], 'g', label='omega(t)')\n    >>> plt.legend(loc='best')\n    >>> plt.xlabel('t')\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "17f29072a364c92d8713515acf9765f05e7ad1a0b9a93c090d04fa090d3c2e80",
            "fields": [
                {
                    "id": "ng2t5nph",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Computes the derivative of y at t.\nIf the signature is ``callable(t, y, ...)``, then the argument\n`tfirst` must be set ``True``.\n`func` must not modify the data in `y`, as it is a\nview of the data used internally by the ODE solver.",
                    "type": "callable(y, t, ...) or callable(t, y, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a49zh60z",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial condition on y (can be a vector).",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mutyxvk6",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sequence of time points for which to solve for y. The initial\nvalue point should be the first element of this sequence.\nThis sequence must be monotonically increasing or monotonically\ndecreasing; repeated values are allowed.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fcpi8_3q",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wemevv5l",
                    "encoding": "",
                    "name": "Dfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient (Jacobian) of `func`.\nIf the signature is ``callable(t, y, ...)``, then the argument\n`tfirst` must be set ``True``.\n`Dfun` must not modify the data in `y`, as it is a\nview of the data used internally by the ODE solver.",
                    "type": "callable(y, t, ...) or callable(t, y, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s9m9o2m4",
                    "encoding": "",
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "True if `Dfun` defines derivatives down columns (faster),\notherwise `Dfun` should define derivatives across rows.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_eakd30y",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "True if to return a dictionary of optional outputs as the second output",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rmgxww2h",
                    "encoding": "",
                    "name": "ml",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vqgmohzn",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h6hmg4fp",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "up31qpo8",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6fr5v8l1",
                    "encoding": "",
                    "name": "tcrit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector of critical points (e.g., singularities) where integration\ncare should be taken.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xkcp3n80",
                    "encoding": "",
                    "name": "h0",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The step size to be attempted on the first step.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "523uj938",
                    "encoding": "",
                    "name": "hmax",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The maximum absolute step size allowed.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dl1zoroe",
                    "encoding": "",
                    "name": "hmin",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The minimum absolute step size allowed.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gjo7d3ux",
                    "encoding": "",
                    "name": "ixpr",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Whether to generate extra printing at method switches.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0wi4rlsy",
                    "encoding": "",
                    "name": "mxstep",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum number of (internally defined) steps allowed for each\nintegration point in t.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4ucswrba",
                    "encoding": "",
                    "name": "mxhnil",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum number of messages printed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jlhw_5tc",
                    "encoding": "",
                    "name": "mxordn",
                    "value": 12,
                    "defaultValue": 12,
                    "description": "Maximum order to be allowed for the non-stiff (Adams) method.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_cprk41",
                    "encoding": "",
                    "name": "mxords",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "Maximum order to be allowed for the stiff (BDF) method.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "34eq3sm9",
                    "encoding": "",
                    "name": "printmessg",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Whether to print the convergence message",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2yb3dez_",
                    "encoding": "",
                    "name": "tfirst",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the first two arguments of `func` (and `Dfun`, if given)\nmust ``t, y`` instead of the default ``y, t``.\n\n.. versionadded:: 1.1.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o7hg1jwb",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.odeint",
                    "defaultValue": "scipy.integrate.odeint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ga2915ev",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3nm1sf4a",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "w1x042_o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sho8nvv1",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "542dibkh",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5t4kpgvx",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ibnpldhz",
            "name": "integrate.qmc_quad",
            "description": "Compute an integral in N-dimensions using Quasi-Monte Carlo quadrature.\n    \n    Parameters\n    ----------\n    func : callable\n        The integrand. Must accept a single argument ``x``, an array which\n        specifies the point(s) at which to evaluate the scalar-valued\n        integrand, and return the value(s) of the integrand.\n        For efficiency, the function should be vectorized to accept an array of\n        shape ``(d, n_points)``, where ``d`` is the number of variables (i.e.\n        the dimensionality of the function domain) and `n_points` is the number\n        of quadrature points, and return an array of shape ``(n_points,)``,\n        the integrand at each quadrature point.\n    a, b : array-like\n        One-dimensional arrays specifying the lower and upper integration\n        limits, respectively, of each of the ``d`` variables.\n    n_estimates, n_points : int, optional\n        `n_estimates` (default: 8) statistically independent QMC samples, each\n        of `n_points` (default: 1024) points, will be generated by `qrng`.\n        The total number of points at which the integrand `func` will be\n        evaluated is ``n_points * n_estimates``. See Notes for details.\n    qrng : `~scipy.stats.qmc.QMCEngine`, optional\n        An instance of the QMCEngine from which to sample QMC points.\n        The QMCEngine must be initialized to a number of dimensions ``d``\n        corresponding with the number of variables ``x1, ..., xd`` passed to\n        `func`.\n        The provided QMCEngine is used to produce the first integral estimate.\n        If `n_estimates` is greater than one, additional QMCEngines are\n        spawned from the first (with scrambling enabled, if it is an option.)\n        If a QMCEngine is not provided, the default `scipy.stats.qmc.Halton`\n        will be initialized with the number of dimensions determine from\n        the length of `a`.\n    log : boolean, default: False\n        When set to True, `func` returns the log of the integrand, and\n        the result object contains the log of the integral.\n    \n    Returns\n    -------\n    result : object\n        A result object with attributes:\n    \n        integral : float\n            The estimate of the integral.\n        standard_error :\n            The error estimate. See Notes for interpretation.\n    \n    Notes\n    -----\n    Values of the integrand at each of the `n_points` points of a QMC sample\n    are used to produce an estimate of the integral. This estimate is drawn\n    from a population of possible estimates of the integral, the value of\n    which we obtain depends on the particular points at which the integral\n    was evaluated. We perform this process `n_estimates` times, each time\n    evaluating the integrand at different scrambled QMC points, effectively\n    drawing i.i.d. random samples from the population of integral estimates.\n    The sample mean :math:`m` of these integral estimates is an\n    unbiased estimator of the true value of the integral, and the standard\n    error of the mean :math:`s` of these estimates may be used to generate\n    confidence intervals using the t distribution with ``n_estimates - 1``\n    degrees of freedom. Perhaps counter-intuitively, increasing `n_points`\n    while keeping the total number of function evaluation points\n    ``n_points * n_estimates`` fixed tends to reduce the actual error, whereas\n    increasing `n_estimates` tends to decrease the error estimate.\n    \n    Examples\n    --------\n    QMC quadrature is particularly useful for computing integrals in higher\n    dimensions. An example integrand is the probability density function\n    of a multivariate normal distribution.\n    \n    >>> import numpy as np\n    >>> from scipy import stats\n    >>> dim = 8\n    >>> mean = np.zeros(dim)\n    >>> cov = np.eye(dim)\n    >>> def func(x):\n    ...     # `multivariate_normal` expects the _last_ axis to correspond with\n    ...     # the dimensionality of the space, so `x` must be transposed\n    ...     return stats.multivariate_normal.pdf(x.T, mean, cov)\n    \n    To compute the integral over the unit hypercube:\n    \n    >>> from scipy.integrate import qmc_quad\n    >>> a = np.zeros(dim)\n    >>> b = np.ones(dim)\n    >>> rng = np.random.default_rng()\n    >>> qrng = stats.qmc.Halton(d=dim, seed=rng)\n    >>> n_estimates = 8\n    >>> res = qmc_quad(func, a, b, n_estimates=n_estimates, qrng=qrng)\n    >>> res.integral, res.standard_error\n    (0.00018429555666024108, 1.0389431116001344e-07)\n    \n    A two-sided, 99% confidence interval for the integral may be estimated\n    as:\n    \n    >>> t = stats.t(df=n_estimates-1, loc=res.integral,\n    ...             scale=res.standard_error)\n    >>> t.interval(0.99)\n    (0.0001839319802536469, 0.00018465913306683527)\n    \n    Indeed, the value reported by `scipy.stats.multivariate_normal` is\n    within this range.\n    \n    >>> stats.multivariate_normal.cdf(b, mean, cov, lower_limit=a)\n    0.00018430867675187443",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "20ae945fd72254ef9481e95b2eb84397476ab1c697210524717b38115ddca3e8",
            "fields": [
                {
                    "id": "k5hx46sx",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The integrand. Must accept a single argument ``x``, an array which\nspecifies the point(s) at which to evaluate the scalar-valued\nintegrand, and return the value(s) of the integrand.\nFor efficiency, the function should be vectorized to accept an array of\nshape ``(d, n_points)``, where ``d`` is the number of variables (i.e.\nthe dimensionality of the function domain) and `n_points` is the number\nof quadrature points, and return an array of shape ``(n_points,)``,\nthe integrand at each quadrature point.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z29e29um",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pb3mrgx5",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ok7766hz",
                    "encoding": "",
                    "name": "n_estimates",
                    "value": 8,
                    "defaultValue": 8,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6dk0zigy",
                    "encoding": "",
                    "name": "n_points",
                    "value": 1024,
                    "defaultValue": 1024,
                    "description": "",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g8r8aycr",
                    "encoding": "",
                    "name": "qrng",
                    "value": "",
                    "defaultValue": "",
                    "description": "An instance of the QMCEngine from which to sample QMC points.\nThe QMCEngine must be initialized to a number of dimensions ``d``\ncorresponding with the number of variables ``x1, ..., xd`` passed to\n`func`.\nThe provided QMCEngine is used to produce the first integral estimate.\nIf `n_estimates` is greater than one, additional QMCEngines are\nspawned from the first (with scrambling enabled, if it is an option.)\nIf a QMCEngine is not provided, the default `scipy.stats.qmc.Halton`\nwill be initialized with the number of dimensions determine from\nthe length of `a`.",
                    "type": "scipy.stats.qmc.QMCEngine",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o3fdz65g",
                    "encoding": "",
                    "name": "log",
                    "value": false,
                    "defaultValue": false,
                    "description": "When set to True, `func` returns the log of the integrand, and\nthe result object contains the log of the integral.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7zeikd_j",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.qmc_quad",
                    "defaultValue": "scipy.integrate.qmc_quad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mbcut6hn",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n7a8swgx",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0to_f0oc",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "go5n1i67",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eagvcrq9",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1n_38cw0",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "9nd09whq",
            "name": "integrate.quad",
            "description": "Compute a definite integral.\n    \n    Integrate func from `a` to `b` (possibly infinite interval) using a\n    technique from the Fortran library QUADPACK.\n    \n    Parameters\n    ----------\n    func : {function, scipy.LowLevelCallable}\n        A Python function or method to integrate. If `func` takes many\n        arguments, it is integrated along the axis corresponding to the\n        first argument.\n    \n        If the user desires improved integration performance, then `f` may\n        be a `scipy.LowLevelCallable` with one of the signatures::\n    \n            double func(double x)\n            double func(double x, void *user_data)\n            double func(int n, double *xx)\n            double func(int n, double *xx, void *user_data)\n    \n        The ``user_data`` is the data contained in the `scipy.LowLevelCallable`.\n        In the call forms with ``xx``,  ``n`` is the length of the ``xx``\n        array which contains ``xx[0] == x`` and the rest of the items are\n        numbers contained in the ``args`` argument of quad.\n    \n        In addition, certain ctypes call signatures are supported for\n        backward compatibility, but those should not be used in new code.\n    a : float\n        Lower limit of integration (use -numpy.inf for -infinity).\n    b : float\n        Upper limit of integration (use numpy.inf for +infinity).\n    args : tuple, optional\n        Extra arguments to pass to `func`.\n    full_output : int, optional\n        Non-zero to return a dictionary of integration information.\n        If non-zero, warning messages are also suppressed and the\n        message is appended to the output tuple.\n    complex_func : bool, optional\n        Indicate if the function's (`func`) return type is real\n        (``complex_func=False``: default) or complex (``complex_func=True``).\n        In both cases, the function's argument is real.\n        If full_output is also non-zero, the `infodict`, `message`, and\n        `explain` for the real and complex components are returned in\n        a dictionary with keys \"real output\" and \"imag output\".\n    \n    Returns\n    -------\n    y : float\n        The integral of func from `a` to `b`.\n    abserr : float\n        An estimate of the absolute error in the result.\n    infodict : dict\n        A dictionary containing additional information.\n    message\n        A convergence message.\n    explain\n        Appended only with 'cos' or 'sin' weighting and infinite\n        integration limits, it contains an explanation of the codes in\n        infodict['ierlst']\n    \n    Other Parameters\n    ----------------\n    epsabs : float or int, optional\n        Absolute error tolerance. Default is 1.49e-8. `quad` tries to obtain\n        an accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\n        where ``i`` = integral of `func` from `a` to `b`, and ``result`` is the\n        numerical approximation. See `epsrel` below.\n    epsrel : float or int, optional\n        Relative error tolerance. Default is 1.49e-8.\n        If ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\n        and ``50 * (machine epsilon)``. See `epsabs` above.\n    limit : float or int, optional\n        An upper bound on the number of subintervals used in the adaptive\n        algorithm.\n    points : (sequence of floats,ints), optional\n        A sequence of break points in the bounded integration interval\n        where local difficulties of the integrand may occur (e.g.,\n        singularities, discontinuities). The sequence does not have\n        to be sorted. Note that this option cannot be used in conjunction\n        with ``weight``.\n    weight : float or int, optional\n        String indicating weighting function. Full explanation for this\n        and the remaining arguments can be found below.\n    wvar : optional\n        Variables for use with weighting functions.\n    wopts : optional\n        Optional input for reusing Chebyshev moments.\n    maxp1 : float or int, optional\n        An upper bound on the number of Chebyshev moments.\n    limlst : int, optional\n        Upper bound on the number of cycles (>=3) for use with a sinusoidal\n        weighting and an infinite end-point.\n    \n    See Also\n    --------\n    dblquad : double integral\n    tplquad : triple integral\n    nquad : n-dimensional integrals (uses `quad` recursively)\n    fixed_quad : fixed-order Gaussian quadrature\n    simpson : integrator for sampled data\n    romb : integrator for sampled data\n    scipy.special : for coefficients and roots of orthogonal polynomials\n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Extra information for quad() inputs and outputs**\n    \n    If full_output is non-zero, then the third output argument\n    (infodict) is a dictionary with entries as tabulated below. For\n    infinite limits, the range is transformed to (0,1) and the\n    optional outputs are given with respect to this transformed range.\n    Let M be the input argument limit and let K be infodict['last'].\n    The entries are:\n    \n    'neval'\n        The number of function evaluations.\n    'last'\n        The number, K, of subintervals produced in the subdivision process.\n    'alist'\n        A rank-1 array of length M, the first K elements of which are the\n        left end points of the subintervals in the partition of the\n        integration range.\n    'blist'\n        A rank-1 array of length M, the first K elements of which are the\n        right end points of the subintervals.\n    'rlist'\n        A rank-1 array of length M, the first K elements of which are the\n        integral approximations on the subintervals.\n    'elist'\n        A rank-1 array of length M, the first K elements of which are the\n        moduli of the absolute error estimates on the subintervals.\n    'iord'\n        A rank-1 integer array of length M, the first L elements of\n        which are pointers to the error estimates over the subintervals\n        with ``L=K`` if ``K<=M/2+2`` or ``L=M+1-K`` otherwise. Let I be the\n        sequence ``infodict['iord']`` and let E be the sequence\n        ``infodict['elist']``.  Then ``E[I[1]], ..., E[I[L]]`` forms a\n        decreasing sequence.\n    \n    If the input argument points is provided (i.e., it is not None),\n    the following additional outputs are placed in the output\n    dictionary. Assume the points sequence is of length P.\n    \n    'pts'\n        A rank-1 array of length P+2 containing the integration limits\n        and the break points of the intervals in ascending order.\n        This is an array giving the subintervals over which integration\n        will occur.\n    'level'\n        A rank-1 integer array of length M (=limit), containing the\n        subdivision levels of the subintervals, i.e., if (aa,bb) is a\n        subinterval of ``(pts[1], pts[2])`` where ``pts[0]`` and ``pts[2]``\n        are adjacent elements of ``infodict['pts']``, then (aa,bb) has level l\n        if ``|bb-aa| = |pts[2]-pts[1]| * 2**(-l)``.\n    'ndin'\n        A rank-1 integer array of length P+2. After the first integration\n        over the intervals (pts[1], pts[2]), the error estimates over some\n        of the intervals may have been increased artificially in order to\n        put their subdivision forward. This array has ones in slots\n        corresponding to the subintervals for which this happens.\n    \n    **Weighting the integrand**\n    \n    The input variables, *weight* and *wvar*, are used to weight the\n    integrand by a select list of functions. Different integration\n    methods are used to compute the integral with these weighting\n    functions, and these do not support specifying break points. The\n    possible values of weight and the corresponding weighting functions are.\n    \n    ==========  ===================================   =====================\n    ``weight``  Weight function used                  ``wvar``\n    ==========  ===================================   =====================\n    'cos'       cos(w*x)                              wvar = w\n    'sin'       sin(w*x)                              wvar = w\n    'alg'       g(x) = ((x-a)**alpha)*((b-x)**beta)   wvar = (alpha, beta)\n    'alg-loga'  g(x)*log(x-a)                         wvar = (alpha, beta)\n    'alg-logb'  g(x)*log(b-x)                         wvar = (alpha, beta)\n    'alg-log'   g(x)*log(x-a)*log(b-x)                wvar = (alpha, beta)\n    'cauchy'    1/(x-c)                               wvar = c\n    ==========  ===================================   =====================\n    \n    wvar holds the parameter w, (alpha, beta), or c depending on the weight\n    selected. In these expressions, a and b are the integration limits.\n    \n    For the 'cos' and 'sin' weighting, additional inputs and outputs are\n    available.\n    \n    For weighted integrals with finite integration limits, the integration\n    is performed using a Clenshaw-Curtis method, which uses Chebyshev moments.\n    For repeated calculations, these moments are saved in the output dictionary:\n    \n    'momcom'\n        The maximum level of Chebyshev moments that have been computed,\n        i.e., if ``M_c`` is ``infodict['momcom']`` then the moments have been\n        computed for intervals of length ``|b-a| * 2**(-l)``,\n        ``l=0,1,...,M_c``.\n    'nnlog'\n        A rank-1 integer array of length M(=limit), containing the\n        subdivision levels of the subintervals, i.e., an element of this\n        array is equal to l if the corresponding subinterval is\n        ``|b-a|* 2**(-l)``.\n    'chebmo'\n        A rank-2 array of shape (25, maxp1) containing the computed\n        Chebyshev moments. These can be passed on to an integration\n        over the same interval by passing this array as the second\n        element of the sequence wopts and passing infodict['momcom'] as\n        the first element.\n    \n    If one of the integration limits is infinite, then a Fourier integral is\n    computed (assuming w neq 0). If full_output is 1 and a numerical error\n    is encountered, besides the error message attached to the output tuple,\n    a dictionary is also appended to the output tuple which translates the\n    error codes in the array ``info['ierlst']`` to English messages. The\n    output information dictionary contains the following entries instead of\n    'last', 'alist', 'blist', 'rlist', and 'elist':\n    \n    'lst'\n        The number of subintervals needed for the integration (call it ``K_f``).\n    'rslst'\n        A rank-1 array of length M_f=limlst, whose first ``K_f`` elements\n        contain the integral contribution over the interval\n        ``(a+(k-1)c, a+kc)`` where ``c = (2*floor(|w|) + 1) * pi / |w|``\n        and ``k=1,2,...,K_f``.\n    'erlst'\n        A rank-1 array of length ``M_f`` containing the error estimate\n        corresponding to the interval in the same position in\n        ``infodict['rslist']``.\n    'ierlst'\n        A rank-1 integer array of length ``M_f`` containing an error flag\n        corresponding to the interval in the same position in\n        ``infodict['rslist']``.  See the explanation dictionary (last entry\n        in the output tuple) for the meaning of the codes.\n    \n    \n    **Details of QUADPACK level routines**\n    \n    `quad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. The routine called depends on\n    `weight`, `points` and the integration limits `a` and `b`.\n    \n    ================  ==============  ==========  =====================\n    QUADPACK routine  `weight`        `points`    infinite bounds\n    ================  ==============  ==========  =====================\n    qagse             None            No          No\n    qagie             None            No          Yes\n    qagpe             None            Yes         No\n    qawoe             'sin', 'cos'    No          No\n    qawfe             'sin', 'cos'    No          either `a` or `b`\n    qawse             'alg*'          No          No\n    qawce             'cauchy'        No          No\n    ================  ==============  ==========  =====================\n    \n    The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    qagpe\n        serves the same purposes as QAGS, but also allows the\n        user to provide explicit information about the location\n        and type of trouble-spots i.e. the abscissae of internal\n        singularities, discontinuities and other difficulties of\n        the integrand function.\n    qawoe\n        is an integrator for the evaluation of\n        :math:`\\int^b_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^b_a \\sin(\\omega x)f(x)dx`\n        over a finite interval [a,b], where :math:`\\omega` and :math:`f`\n        are specified by the user. The rule evaluation component is based\n        on the modified Clenshaw-Curtis technique\n    \n        An adaptive subdivision scheme is used in connection\n        with an extrapolation procedure, which is a modification\n        of that in ``QAGS`` and allows the algorithm to deal with\n        singularities in :math:`f(x)`.\n    qawfe\n        calculates the Fourier transform\n        :math:`\\int^\\infty_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^\\infty_a \\sin(\\omega x)f(x)dx`\n        for user-provided :math:`\\omega` and :math:`f`. The procedure of\n        ``QAWO`` is applied on successive finite intervals, and convergence\n        acceleration by means of the :math:`\\varepsilon`-algorithm is applied\n        to the series of integral approximations.\n    qawse\n        approximate :math:`\\int^b_a w(x)f(x)dx`, with :math:`a < b` where\n        :math:`w(x) = (x-a)^{\\alpha}(b-x)^{\\beta}v(x)` with\n        :math:`\\alpha,\\beta > -1`, where :math:`v(x)` may be one of the\n        following functions: :math:`1`, :math:`\\log(x-a)`, :math:`\\log(b-x)`,\n        :math:`\\log(x-a)\\log(b-x)`.\n    \n        The user specifies :math:`\\alpha`, :math:`\\beta` and the type of the\n        function :math:`v`. A globally adaptive subdivision strategy is\n        applied, with modified Clenshaw-Curtis integration on those\n        subintervals which contain `a` or `b`.\n    qawce\n        compute :math:`\\int^b_a f(x) / (x-c)dx` where the integral must be\n        interpreted as a Cauchy principal value integral, for user specified\n        :math:`c` and :math:`f`. The strategy is globally adaptive. Modified\n        Clenshaw-Curtis integration is used on those intervals containing the\n        point :math:`x = c`.\n    \n    **Integration of Complex Function of a Real Variable**\n    \n    A complex valued function, :math:`f`, of a real variable can be written as\n    :math:`f = g + ih`.  Similarly, the integral of :math:`f` can be\n    written as\n    \n    .. math::\n        \\int_a^b f(x) dx = \\int_a^b g(x) dx + i\\int_a^b h(x) dx\n    \n    assuming that the integrals of :math:`g` and :math:`h` exist\n    over the interval :math:`[a,b]` [2]_. Therefore, ``quad`` integrates\n    complex-valued functions by integrating the real and imaginary components\n    separately.\n    \n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    .. [2] McCullough, Thomas; Phillips, Keith (1973).\n           Foundations of Analysis in the Complex Plane.\n           Holt Rinehart Winston.\n           ISBN 0-03-086370-8\n    \n    Examples\n    --------\n    Calculate :math:`\\int^4_0 x^2 dx` and compare with an analytic result\n    \n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> x2 = lambda x: x**2\n    >>> integrate.quad(x2, 0, 4)\n    (21.333333333333332, 2.3684757858670003e-13)\n    >>> print(4**3 / 3.)  # analytical result\n    21.3333333333\n    \n    Calculate :math:`\\int^\\infty_0 e^{-x} dx`\n    \n    >>> invexp = lambda x: np.exp(-x)\n    >>> integrate.quad(invexp, 0, np.inf)\n    (1.0, 5.842605999138044e-11)\n    \n    Calculate :math:`\\int^1_0 a x \\,dx` for :math:`a = 1, 3`\n    \n    >>> f = lambda x, a: a*x\n    >>> y, err = integrate.quad(f, 0, 1, args=(1,))\n    >>> y\n    0.5\n    >>> y, err = integrate.quad(f, 0, 1, args=(3,))\n    >>> y\n    1.5\n    \n    Calculate :math:`\\int^1_0 x^2 + y^2 dx` with ctypes, holding\n    y parameter as 1::\n    \n        testlib.c =>\n            double func(int n, double args[n]){\n                return args[0]*args[0] + args[1]*args[1];}\n        compile to library testlib.*\n    \n    ::\n    \n       from scipy import integrate\n       import ctypes\n       lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path\n       lib.func.restype = ctypes.c_double\n       lib.func.argtypes = (ctypes.c_int,ctypes.c_double)\n       integrate.quad(lib.func,0,1,(1))\n       #(1.3333333333333333, 1.4802973661668752e-14)\n       print((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result\n       # 1.3333333333333333\n    \n    Be aware that pulse shapes and other sharp features as compared to the\n    size of the integration interval may not be integrated correctly using\n    this method. A simplified example of this limitation is integrating a\n    y-axis reflected step function with many zero values within the integrals\n    bounds.\n    \n    >>> y = lambda x: 1 if x<=0 else 0\n    >>> integrate.quad(y, -1, 1)\n    (1.0, 1.1102230246251565e-14)\n    >>> integrate.quad(y, -1, 100)\n    (1.0000000002199108, 1.0189464580163188e-08)\n    >>> integrate.quad(y, -1, 10000)\n    (0.0, 0.0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "cb709402a6cf1e4170865015bc1858633aed1549fafc192ae77f79b7da9f9ef1",
            "fields": [
                {
                    "id": "p8hr0bvx",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method to integrate. If `func` takes many\narguments, it is integrated along the axis corresponding to the\nfirst argument.\n\nIf the user desires improved integration performance, then `f` may\nbe a `scipy.LowLevelCallable` with one of the signatures::\n\n    double func(double x)\n    double func(double x, void *user_data)\n    double func(int n, double *xx)\n    double func(int n, double *xx, void *user_data)\n\nThe ``user_data`` is the data contained in the `scipy.LowLevelCallable`.\nIn the call forms with ``xx``,  ``n`` is the length of the ``xx``\narray which contains ``xx[0] == x`` and the rest of the items are\nnumbers contained in the ``args`` argument of quad.\n\nIn addition, certain ctypes call signatures are supported for\nbackward compatibility, but those should not be used in new code.",
                    "type": "{function, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qi59dtqj",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration (use -numpy.inf for -infinity).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zmx1b74s",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration (use numpy.inf for +infinity).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vkpkwo6s",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xqxngedy",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Non-zero to return a dictionary of integration information.\nIf non-zero, warning messages are also suppressed and the\nmessage is appended to the output tuple.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "72jhpyhd",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Absolute error tolerance. Default is 1.49e-8. `quad` tries to obtain\nan accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\nwhere ``i`` = integral of `func` from `a` to `b`, and ``result`` is the\nnumerical approximation. See `epsrel` below.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pjwmt24a",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Relative error tolerance. Default is 1.49e-8.\nIf ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\nand ``50 * (machine epsilon)``. See `epsabs` above.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z_i22yyi",
                    "encoding": "",
                    "name": "limit",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "An upper bound on the number of subintervals used in the adaptive\nalgorithm.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sgnf45gs",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sequence of break points in the bounded integration interval\nwhere local difficulties of the integrand may occur (e.g.,\nsingularities, discontinuities). The sequence does not have\nto be sorted. Note that this option cannot be used in conjunction\nwith ``weight``.",
                    "type": "(sequence of floats,ints)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2daho92f",
                    "encoding": "",
                    "name": "weight",
                    "value": "",
                    "defaultValue": "",
                    "description": "String indicating weighting function. Full explanation for this\nand the remaining arguments can be found below.",
                    "type": "float or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsmyj4ii",
                    "encoding": "",
                    "name": "wvar",
                    "value": "",
                    "defaultValue": "",
                    "description": "Variables for use with weighting functions.",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kurjzlgk",
                    "encoding": "",
                    "name": "wopts",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional input for reusing Chebyshev moments.",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d8cem836",
                    "encoding": "",
                    "name": "maxp1",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "An upper bound on the number of Chebyshev moments.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mznffdej",
                    "encoding": "",
                    "name": "limlst",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "Upper bound on the number of cycles (>=3) for use with a sinusoidal\nweighting and an infinite end-point.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "okhcdwbm",
                    "encoding": "",
                    "name": "complex_func",
                    "value": false,
                    "defaultValue": false,
                    "description": "Indicate if the function's (`func`) return type is real\n(``complex_func=False``: default) or complex (``complex_func=True``).\nIn both cases, the function's argument is real.\nIf full_output is also non-zero, the `infodict`, `message`, and\n`explain` for the real and complex components are returned in\na dictionary with keys \"real output\" and \"imag output\".",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lyocnii6",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.quad",
                    "defaultValue": "scipy.integrate.quad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wzd_5c7l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7rqwj94j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "yjeug8ry",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_zmi84y",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6c8mw22m",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "drq0q8r2",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "l57nnpwf",
            "name": "integrate.quad_vec",
            "description": "Adaptive integration of a vector-valued function.\n    \n    Parameters\n    ----------\n    f : callable\n        Vector-valued function f(x) to integrate.\n    a : float\n        Initial point.\n    b : float\n        Final point.\n    epsabs : float, optional\n        Absolute tolerance.\n    epsrel : float, optional\n        Relative tolerance.\n    norm : {'max', '2'}, optional\n        Vector norm to use for error estimation.\n    cache_size : int, optional\n        Number of bytes to use for memoization.\n    limit : float or int, optional\n        An upper bound on the number of subintervals used in the adaptive\n        algorithm.\n    workers : int or map-like callable, optional\n        If `workers` is an integer, part of the computation is done in\n        parallel subdivided to this many tasks (using\n        :class:`python:multiprocessing.pool.Pool`).\n        Supply `-1` to use all cores available to the Process.\n        Alternatively, supply a map-like callable, such as\n        :meth:`python:multiprocessing.pool.Pool.map` for evaluating the\n        population in parallel.\n        This evaluation is carried out as ``workers(func, iterable)``.\n    points : list, optional\n        List of additional breakpoints.\n    quadrature : {'gk21', 'gk15', 'trapezoid'}, optional\n        Quadrature rule to use on subintervals.\n        Options: 'gk21' (Gauss-Kronrod 21-point rule),\n        'gk15' (Gauss-Kronrod 15-point rule),\n        'trapezoid' (composite trapezoid rule).\n        Default: 'gk21' for finite intervals and 'gk15' for (semi-)infinite.\n    full_output : bool, optional\n        Return an additional ``info`` object.\n    args : tuple, optional\n        Extra arguments to pass to function, if any.\n    \n        .. versionadded:: 1.8.0\n    \n    Returns\n    -------\n    res : {float, array-like}\n        Estimate for the result\n    err : float\n        Error estimate for the result in the given norm\n    info : object\n        Returned only when ``full_output=True``.\n        Result object with the attributes:\n    \n        success : bool\n            Whether integration reached target precision.\n        status : int\n            Indicator for convergence, success (0),\n            failure (1), and failure due to rounding error (2).\n        neval : int\n            Number of function evaluations.\n        intervals : ndarray, shape (num_intervals, 2)\n            Start and end points of subdivision intervals.\n        integrals : ndarray, shape (num_intervals, ...)\n            Integral for each interval.\n            Note that at most ``cache_size`` values are recorded,\n            and the array may contains *nan* for missing items.\n        errors : ndarray, shape (num_intervals,)\n            Estimated integration error for each interval.\n    \n    Notes\n    -----\n    The algorithm mainly follows the implementation of QUADPACK's\n    DQAG* algorithms, implementing global error control and adaptive\n    subdivision.\n    \n    The algorithm here has some differences to the QUADPACK approach:\n    \n    Instead of subdividing one interval at a time, the algorithm\n    subdivides N intervals with largest errors at once. This enables\n    (partial) parallelization of the integration.\n    \n    The logic of subdividing \"next largest\" intervals first is then\n    not implemented, and we rely on the above extension to avoid\n    concentrating on \"small\" intervals only.\n    \n    The Wynn epsilon table extrapolation is not used (QUADPACK uses it\n    for infinite intervals). This is because the algorithm here is\n    supposed to work on vector-valued functions, in an user-specified\n    norm, and the extension of the epsilon algorithm to this case does\n    not appear to be widely agreed. For max-norm, using elementwise\n    Wynn epsilon could be possible, but we do not do this here with\n    the hope that the epsilon extrapolation is mainly useful in\n    special cases.\n    \n    References\n    ----------\n    [1] R. Piessens, E. de Doncker, QUADPACK (1983).\n    \n    Examples\n    --------\n    We can compute integrations of a vector-valued function:\n    \n    >>> from scipy.integrate import quad_vec\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> alpha = np.linspace(0.0, 2.0, num=30)\n    >>> f = lambda x: x**alpha\n    >>> x0, x1 = 0, 2\n    >>> y, err = quad_vec(f, x0, x1)\n    >>> plt.plot(alpha, y)\n    >>> plt.xlabel(r\"$\\alpha$\")\n    >>> plt.ylabel(r\"$\\int_{0}^{2} x^\\alpha dx$\")\n    >>> plt.show()\n    \n    When using the argument `workers`, one should ensure\n    that the main module is import-safe, for instance\n    by rewriting the example above as:\n    \n    .. code-block:: python\n    \n        from scipy.integrate import quad_vec\n        import numpy as np\n        import matplotlib.pyplot as plt\n    \n        alpha = np.linspace(0.0, 2.0, num=30)\n        x0, x1 = 0, 2\n        def f(x):\n            return x**alpha\n    \n        if __name__ == \"__main__\":\n            y, err = quad_vec(f, x0, x1, workers=2)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d0821dc6f9d2836ee34804428a7dd8d623b011528a315e43879f1f3767800bc3",
            "fields": [
                {
                    "id": "qfb4cgm7",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector-valued function f(x) to integrate.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z1e_4dyr",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial point.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nbyms0af",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Final point.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x2vq4fux",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1e-200,
                    "defaultValue": 1e-200,
                    "description": "Absolute tolerance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9emqgilc",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1e-08,
                    "defaultValue": 1e-08,
                    "description": "Relative tolerance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gylwy8qz",
                    "encoding": "",
                    "name": "norm",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Vector norm to use for error estimation.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0mkvyi2k",
                    "encoding": "",
                    "name": "cache_size",
                    "value": 100000000.0,
                    "defaultValue": 100000000.0,
                    "description": "Number of bytes to use for memoization.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hsglm54l",
                    "encoding": "",
                    "name": "limit",
                    "value": 10000,
                    "defaultValue": 10000,
                    "description": "An upper bound on the number of subintervals used in the adaptive\nalgorithm.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7koimeb",
                    "encoding": "",
                    "name": "workers",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "If `workers` is an integer, part of the computation is done in\nparallel subdivided to this many tasks (using\n:class:`python:multiprocessing.pool.Pool`).\nSupply `-1` to use all cores available to the Process.\nAlternatively, supply a map-like callable, such as\n:meth:`python:multiprocessing.pool.Pool.map` for evaluating the\npopulation in parallel.\nThis evaluation is carried out as ``workers(func, iterable)``.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b63rjgkv",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "List of additional breakpoints.",
                    "type": "list",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "i1ydkidq",
                    "encoding": "",
                    "name": "quadrature",
                    "value": "",
                    "defaultValue": "",
                    "description": "Quadrature rule to use on subintervals.\nOptions: 'gk21' (Gauss-Kronrod 21-point rule),\n'gk15' (Gauss-Kronrod 15-point rule),\n'trapezoid' (composite trapezoid rule).\nDefault: 'gk21' for finite intervals and 'gk15' for (semi-)infinite.",
                    "type": "{'gk21', 'gk15', 'trapezoid'}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ef9ievmw",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "Return an additional ``info`` object.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xhntmdbj",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to function, if any.\n\n.. versionadded:: 1.8.0",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n6i6wfw2",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.quad_vec",
                    "defaultValue": "scipy.integrate.quad_vec",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jjkkngbv",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "su0ympwr",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "khuim2vs",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1ut7hg7j",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s25vk267",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_8o46vs9",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "e2fv4wml",
            "name": "integrate.romb",
            "description": "Romberg integration using samples of a function.\n    \n    Parameters\n    ----------\n    y : array_like\n        A vector of ``2**k + 1`` equally-spaced samples of a function.\n    dx : float, optional\n        The sample spacing. Default is 1.\n    axis : int, optional\n        The axis along which to integrate. Default is -1 (last axis).\n    show : bool, optional\n        When `y` is a single 1-D array, then if this argument is True\n        print the table showing Richardson extrapolation from the\n        samples. Default is False.\n    \n    Returns\n    -------\n    romb : ndarray\n        The integrated result for `axis`.\n    \n    See Also\n    --------\n    quad : adaptive quadrature using QUADPACK\n    fixed_quad : fixed-order Gaussian quadrature\n    dblquad : double integrals\n    tplquad : triple integrals\n    simpson : integrators for sampled data\n    cumulative_trapezoid : cumulative integration for sampled data\n    \n    Examples\n    --------\n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> x = np.arange(10, 14.25, 0.25)\n    >>> y = np.arange(3, 12)\n    \n    >>> integrate.romb(y)\n    56.0\n    \n    >>> y = np.sin(np.power(x, 2.5))\n    >>> integrate.romb(y)\n    -0.742561336672229\n    \n    >>> integrate.romb(y, show=True)\n    Richardson Extrapolation Table for Romberg Integration\n    ======================================================\n    -0.81576\n     4.63862  6.45674\n    -1.10581 -3.02062 -3.65245\n    -2.57379 -3.06311 -3.06595 -3.05664\n    -1.34093 -0.92997 -0.78776 -0.75160 -0.74256\n    ======================================================\n    -0.742561336672229  # may vary",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "b4b26fe77f7a24e08954333354d04b42876af2c582311760d4c76106c054cd31",
            "fields": [
                {
                    "id": "vz4k6v33",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "A vector of ``2**k + 1`` equally-spaced samples of a function.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4jrfprj",
                    "encoding": "",
                    "name": "dx",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The sample spacing. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "92bpjwql",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis along which to integrate. Default is -1 (last axis).",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vc60u_j4",
                    "encoding": "",
                    "name": "show",
                    "value": false,
                    "defaultValue": false,
                    "description": "When `y` is a single 1-D array, then if this argument is True\nprint the table showing Richardson extrapolation from the\nsamples. Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "eap5mx85",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.romb",
                    "defaultValue": "scipy.integrate.romb",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ha_a1hcy",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "08kq9atf",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wsl8pxim",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2w16gtdg",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yspabkwm",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0y05v_mh",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "a65611ez",
            "name": "integrate.simpson",
            "description": "Integrate y(x) using samples along the given axis and the composite\n    Simpson's rule. If x is None, spacing of dx is assumed.\n    \n    Parameters\n    ----------\n    y : array_like\n        Array to be integrated.\n    x : array_like, optional\n        If given, the points at which `y` is sampled.\n    dx : float, optional\n        Spacing of integration points along axis of `x`. Only used when\n        `x` is None. Default is 1.\n    axis : int, optional\n        Axis along which to integrate. Default is the last axis.\n    \n    Returns\n    -------\n    float\n        The estimated integral computed with the composite Simpson's rule.\n    \n    See Also\n    --------\n    quad : adaptive quadrature using QUADPACK\n    fixed_quad : fixed-order Gaussian quadrature\n    dblquad : double integrals\n    tplquad : triple integrals\n    romb : integrators for sampled data\n    cumulative_trapezoid : cumulative integration for sampled data\n    cumulative_simpson : cumulative integration using Simpson's 1/3 rule\n    \n    Notes\n    -----\n    For an odd number of samples that are equally spaced the result is\n    exact if the function is a polynomial of order 3 or less. If\n    the samples are not equally spaced, then the result is exact only\n    if the function is a polynomial of order 2 or less.\n    \n    References\n    ----------\n    .. [1] Cartwright, Kenneth V. Simpson's Rule Cumulative Integration with\n           MS Excel and Irregularly-spaced Data. Journal of Mathematical\n           Sciences and Mathematics Education. 12 (2): 1-9\n    \n    Examples\n    --------\n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> x = np.arange(0, 10)\n    >>> y = np.arange(0, 10)\n    \n    >>> integrate.simpson(y, x=x)\n    40.5\n    \n    >>> y = np.power(x, 3)\n    >>> integrate.simpson(y, x=x)\n    1640.5\n    >>> integrate.quad(lambda x: x**3, 0, 9)[0]\n    1640.25",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "e33130e64b1db4afa0d1b46e2509241c168559d9407e405dd2634da667b84bec",
            "fields": [
                {
                    "id": "jx0ul6gh",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array to be integrated.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5nskbr6j",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "If given, the points at which `y` is sampled.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t8zgsosl",
                    "encoding": "",
                    "name": "dx",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "Spacing of integration points along axis of `x`. Only used when\n`x` is None. Default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "sqrfp5hk",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "Axis along which to integrate. Default is the last axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "owy3ab0g",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.simpson",
                    "defaultValue": "scipy.integrate.simpson",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a6s0vhl0",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "se35pemi",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "oteu6qw3",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1pdjq59z",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "mft66h37",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1csteojf",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f6ke8gbm",
            "name": "integrate.solve_bvp",
            "description": "Solve a boundary value problem for a system of ODEs.\n    \n    This function numerically solves a first order system of ODEs subject to\n    two-point boundary conditions::\n    \n        dy / dx = f(x, y, p) + S * y / (x - a), a <= x <= b\n        bc(y(a), y(b), p) = 0\n    \n    Here x is a 1-D independent variable, y(x) is an n-D\n    vector-valued function and p is a k-D vector of unknown\n    parameters which is to be found along with y(x). For the problem to be\n    determined, there must be n + k boundary conditions, i.e., bc must be an\n    (n + k)-D function.\n    \n    The last singular term on the right-hand side of the system is optional.\n    It is defined by an n-by-n matrix S, such that the solution must satisfy\n    S y(a) = 0. This condition will be forced during iterations, so it must not\n    contradict boundary conditions. See [2]_ for the explanation how this term\n    is handled when solving BVPs numerically.\n    \n    Problems in a complex domain can be solved as well. In this case, y and p\n    are considered to be complex, and f and bc are assumed to be complex-valued\n    functions, but x stays real. Note that f and bc must be complex\n    differentiable (satisfy Cauchy-Riemann equations [4]_), otherwise you\n    should rewrite your problem for real and imaginary parts separately. To\n    solve a problem in a complex domain, pass an initial guess for y with a\n    complex data type (see below).\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system. The calling signature is ``fun(x, y)``,\n        or ``fun(x, y, p)`` if parameters are present. All arguments are\n        ndarray: ``x`` with shape (m,), ``y`` with shape (n, m), meaning that\n        ``y[:, i]`` corresponds to ``x[i]``, and ``p`` with shape (k,). The\n        return value must be an array with shape (n, m) and with the same\n        layout as ``y``.\n    bc : callable\n        Function evaluating residuals of the boundary conditions. The calling\n        signature is ``bc(ya, yb)``, or ``bc(ya, yb, p)`` if parameters are\n        present. All arguments are ndarray: ``ya`` and ``yb`` with shape (n,),\n        and ``p`` with shape (k,). The return value must be an array with\n        shape (n + k,).\n    x : array_like, shape (m,)\n        Initial mesh. Must be a strictly increasing sequence of real numbers\n        with ``x[0]=a`` and ``x[-1]=b``.\n    y : array_like, shape (n, m)\n        Initial guess for the function values at the mesh nodes, ith column\n        corresponds to ``x[i]``. For problems in a complex domain pass `y`\n        with a complex data type (even if the initial guess is purely real).\n    p : array_like with shape (k,) or None, optional\n        Initial guess for the unknown parameters. If None (default), it is\n        assumed that the problem doesn't depend on any parameters.\n    S : array_like with shape (n, n) or None\n        Matrix defining the singular term. If None (default), the problem is\n        solved without the singular term.\n    fun_jac : callable or None, optional\n        Function computing derivatives of f with respect to y and p. The\n        calling signature is ``fun_jac(x, y)``, or ``fun_jac(x, y, p)`` if\n        parameters are present. The return must contain 1 or 2 elements in the\n        following order:\n    \n            * df_dy : array_like with shape (n, n, m), where an element\n              (i, j, q) equals to d f_i(x_q, y_q, p) / d (y_q)_j.\n            * df_dp : array_like with shape (n, k, m), where an element\n              (i, j, q) equals to d f_i(x_q, y_q, p) / d p_j.\n    \n        Here q numbers nodes at which x and y are defined, whereas i and j\n        number vector components. If the problem is solved without unknown\n        parameters, df_dp should not be returned.\n    \n        If `fun_jac` is None (default), the derivatives will be estimated\n        by the forward finite differences.\n    bc_jac : callable or None, optional\n        Function computing derivatives of bc with respect to ya, yb, and p.\n        The calling signature is ``bc_jac(ya, yb)``, or ``bc_jac(ya, yb, p)``\n        if parameters are present. The return must contain 2 or 3 elements in\n        the following order:\n    \n            * dbc_dya : array_like with shape (n, n), where an element (i, j)\n              equals to d bc_i(ya, yb, p) / d ya_j.\n            * dbc_dyb : array_like with shape (n, n), where an element (i, j)\n              equals to d bc_i(ya, yb, p) / d yb_j.\n            * dbc_dp : array_like with shape (n, k), where an element (i, j)\n              equals to d bc_i(ya, yb, p) / d p_j.\n    \n        If the problem is solved without unknown parameters, dbc_dp should not\n        be returned.\n    \n        If `bc_jac` is None (default), the derivatives will be estimated by\n        the forward finite differences.\n    tol : float, optional\n        Desired tolerance of the solution. If we define ``r = y' - f(x, y)``,\n        where y is the found solution, then the solver tries to achieve on each\n        mesh interval ``norm(r / (1 + abs(f)) < tol``, where ``norm`` is\n        estimated in a root mean squared sense (using a numerical quadrature\n        formula). Default is 1e-3.\n    max_nodes : int, optional\n        Maximum allowed number of the mesh nodes. If exceeded, the algorithm\n        terminates. Default is 1000.\n    verbose : {0, 1, 2}, optional\n        Level of algorithm's verbosity:\n    \n            * 0 (default) : work silently.\n            * 1 : display a termination report.\n            * 2 : display progress during iterations.\n    bc_tol : float, optional\n        Desired absolute tolerance for the boundary condition residuals: `bc`\n        value should satisfy ``abs(bc) < bc_tol`` component-wise.\n        Equals to `tol` by default. Up to 10 iterations are allowed to achieve this\n        tolerance.\n    \n    Returns\n    -------\n    Bunch object with the following fields defined:\n    sol : PPoly\n        Found solution for y as `scipy.interpolate.PPoly` instance, a C1\n        continuous cubic spline.\n    p : ndarray or None, shape (k,)\n        Found parameters. None, if the parameters were not present in the\n        problem.\n    x : ndarray, shape (m,)\n        Nodes of the final mesh.\n    y : ndarray, shape (n, m)\n        Solution values at the mesh nodes.\n    yp : ndarray, shape (n, m)\n        Solution derivatives at the mesh nodes.\n    rms_residuals : ndarray, shape (m - 1,)\n        RMS values of the relative residuals over each mesh interval (see the\n        description of `tol` parameter).\n    niter : int\n        Number of completed iterations.\n    status : int\n        Reason for algorithm termination:\n    \n            * 0: The algorithm converged to the desired accuracy.\n            * 1: The maximum number of mesh nodes is exceeded.\n            * 2: A singular Jacobian encountered when solving the collocation\n              system.\n    \n    message : string\n        Verbal description of the termination reason.\n    success : bool\n        True if the algorithm converged to the desired accuracy (``status=0``).\n    \n    Notes\n    -----\n    This function implements a 4th order collocation algorithm with the\n    control of residuals similar to [1]_. A collocation system is solved\n    by a damped Newton method with an affine-invariant criterion function as\n    described in [3]_.\n    \n    Note that in [1]_  integral residuals are defined without normalization\n    by interval lengths. So, their definition is different by a multiplier of\n    h**0.5 (h is an interval length) from the definition used here.\n    \n    .. versionadded:: 0.18.0\n    \n    References\n    ----------\n    .. [1] J. Kierzenka, L. F. Shampine, \"A BVP Solver Based on Residual\n           Control and the Maltab PSE\", ACM Trans. Math. Softw., Vol. 27,\n           Number 3, pp. 299-316, 2001.\n    .. [2] L.F. Shampine, P. H. Muir and H. Xu, \"A User-Friendly Fortran BVP\n           Solver\", J. Numer. Anal., Ind. Appl. Math. (JNAIAM), Vol. 1, \n           Number 2, pp. 201-217, 2006.\n    .. [3] U. Ascher, R. Mattheij and R. Russell \"Numerical Solution of\n           Boundary Value Problems for Ordinary Differential Equations\",\n           Philidelphia, PA: Society for Industrial and Applied Mathematics,\n           1995.\n           :doi:`10.1137/1.9781611971231`\n    .. [4] `Cauchy-Riemann equations\n            <https://en.wikipedia.org/wiki/Cauchy-Riemann_equations>`_ on\n            Wikipedia.\n    \n    Examples\n    --------\n    In the first example, we solve Bratu's problem::\n    \n        y'' + k * exp(y) = 0\n        y(0) = y(1) = 0\n    \n    for k = 1.\n    \n    We rewrite the equation as a first-order system and implement its\n    right-hand side evaluation::\n    \n        y1' = y2\n        y2' = -exp(y1)\n    \n    >>> import numpy as np\n    >>> def fun(x, y):\n    ...     return np.vstack((y[1], -np.exp(y[0])))\n    \n    Implement evaluation of the boundary condition residuals:\n    \n    >>> def bc(ya, yb):\n    ...     return np.array([ya[0], yb[0]])\n    \n    Define the initial mesh with 5 nodes:\n    \n    >>> x = np.linspace(0, 1, 5)\n    \n    This problem is known to have two solutions. To obtain both of them, we\n    use two different initial guesses for y. We denote them by subscripts\n    a and b.\n    \n    >>> y_a = np.zeros((2, x.size))\n    >>> y_b = np.zeros((2, x.size))\n    >>> y_b[0] = 3\n    \n    Now we are ready to run the solver.\n    \n    >>> from scipy.integrate import solve_bvp\n    >>> res_a = solve_bvp(fun, bc, x, y_a)\n    >>> res_b = solve_bvp(fun, bc, x, y_b)\n    \n    Let's plot the two found solutions. We take an advantage of having the\n    solution in a spline form to produce a smooth plot.\n    \n    >>> x_plot = np.linspace(0, 1, 100)\n    >>> y_plot_a = res_a.sol(x_plot)[0]\n    >>> y_plot_b = res_b.sol(x_plot)[0]\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x_plot, y_plot_a, label='y_a')\n    >>> plt.plot(x_plot, y_plot_b, label='y_b')\n    >>> plt.legend()\n    >>> plt.xlabel(\"x\")\n    >>> plt.ylabel(\"y\")\n    >>> plt.show()\n    \n    We see that the two solutions have similar shape, but differ in scale\n    significantly.\n    \n    In the second example, we solve a simple Sturm-Liouville problem::\n    \n        y'' + k**2 * y = 0\n        y(0) = y(1) = 0\n    \n    It is known that a non-trivial solution y = A * sin(k * x) is possible for\n    k = pi * n, where n is an integer. To establish the normalization constant\n    A = 1 we add a boundary condition::\n    \n        y'(0) = k\n    \n    Again, we rewrite our equation as a first-order system and implement its\n    right-hand side evaluation::\n    \n        y1' = y2\n        y2' = -k**2 * y1\n    \n    >>> def fun(x, y, p):\n    ...     k = p[0]\n    ...     return np.vstack((y[1], -k**2 * y[0]))\n    \n    Note that parameters p are passed as a vector (with one element in our\n    case).\n    \n    Implement the boundary conditions:\n    \n    >>> def bc(ya, yb, p):\n    ...     k = p[0]\n    ...     return np.array([ya[0], yb[0], ya[1] - k])\n    \n    Set up the initial mesh and guess for y. We aim to find the solution for\n    k = 2 * pi, to achieve that we set values of y to approximately follow\n    sin(2 * pi * x):\n    \n    >>> x = np.linspace(0, 1, 5)\n    >>> y = np.zeros((2, x.size))\n    >>> y[0, 1] = 1\n    >>> y[0, 3] = -1\n    \n    Run the solver with 6 as an initial guess for k.\n    \n    >>> sol = solve_bvp(fun, bc, x, y, p=[6])\n    \n    We see that the found k is approximately correct:\n    \n    >>> sol.p[0]\n    6.28329460046\n    \n    And, finally, plot the solution to see the anticipated sinusoid:\n    \n    >>> x_plot = np.linspace(0, 1, 100)\n    >>> y_plot = sol.sol(x_plot)[0]\n    >>> plt.plot(x_plot, y_plot)\n    >>> plt.xlabel(\"x\")\n    >>> plt.ylabel(\"y\")\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "50001391367f397d54ad505fe4a7504f236a834fbed790dea7c98014bd1adaf4",
            "fields": [
                {
                    "id": "144uetrg",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system. The calling signature is ``fun(x, y)``,\nor ``fun(x, y, p)`` if parameters are present. All arguments are\nndarray: ``x`` with shape (m,), ``y`` with shape (n, m), meaning that\n``y[:, i]`` corresponds to ``x[i]``, and ``p`` with shape (k,). The\nreturn value must be an array with shape (n, m) and with the same\nlayout as ``y``.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "k4pif2p8",
                    "encoding": "",
                    "name": "bc",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function evaluating residuals of the boundary conditions. The calling\nsignature is ``bc(ya, yb)``, or ``bc(ya, yb, p)`` if parameters are\npresent. All arguments are ndarray: ``ya`` and ``yb`` with shape (n,),\nand ``p`` with shape (k,). The return value must be an array with\nshape (n + k,).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8e2a6ghy",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial mesh. Must be a strictly increasing sequence of real numbers\nwith ``x[0]=a`` and ``x[-1]=b``.",
                    "type": "arraylike, shape (m,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05wuwbpz",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the function values at the mesh nodes, ith column\ncorresponds to ``x[i]``. For problems in a complex domain pass `y`\nwith a complex data type (even if the initial guess is purely real).",
                    "type": "arraylike, shape (n, m)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "05lvlr89",
                    "encoding": "",
                    "name": "p",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial guess for the unknown parameters. If None (default), it is\nassumed that the problem doesn't depend on any parameters.",
                    "type": "arraylike with shape (k,) or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "djbk_v40",
                    "encoding": "",
                    "name": "S",
                    "value": "",
                    "defaultValue": "",
                    "description": "Matrix defining the singular term. If None (default), the problem is\nsolved without the singular term.",
                    "type": "arraylike with shape (n, n) or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imk8czqk",
                    "encoding": "",
                    "name": "fun_jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function computing derivatives of f with respect to y and p. The\ncalling signature is ``fun_jac(x, y)``, or ``fun_jac(x, y, p)`` if\nparameters are present. The return must contain 1 or 2 elements in the\nfollowing order:\n\n    * df_dy : array_like with shape (n, n, m), where an element\n      (i, j, q) equals to d f_i(x_q, y_q, p) / d (y_q)_j.\n    * df_dp : array_like with shape (n, k, m), where an element\n      (i, j, q) equals to d f_i(x_q, y_q, p) / d p_j.\n\nHere q numbers nodes at which x and y are defined, whereas i and j\nnumber vector components. If the problem is solved without unknown\nparameters, df_dp should not be returned.\n\nIf `fun_jac` is None (default), the derivatives will be estimated\nby the forward finite differences.",
                    "type": "callable or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7yj74la4",
                    "encoding": "",
                    "name": "bc_jac",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function computing derivatives of bc with respect to ya, yb, and p.\nThe calling signature is ``bc_jac(ya, yb)``, or ``bc_jac(ya, yb, p)``\nif parameters are present. The return must contain 2 or 3 elements in\nthe following order:\n\n    * dbc_dya : array_like with shape (n, n), where an element (i, j)\n      equals to d bc_i(ya, yb, p) / d ya_j.\n    * dbc_dyb : array_like with shape (n, n), where an element (i, j)\n      equals to d bc_i(ya, yb, p) / d yb_j.\n    * dbc_dp : array_like with shape (n, k), where an element (i, j)\n      equals to d bc_i(ya, yb, p) / d p_j.\n\nIf the problem is solved without unknown parameters, dbc_dp should not\nbe returned.\n\nIf `bc_jac` is None (default), the derivatives will be estimated by\nthe forward finite differences.",
                    "type": "callable or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_ekrrhre",
                    "encoding": "",
                    "name": "tol",
                    "value": 0.001,
                    "defaultValue": 0.001,
                    "description": "Desired tolerance of the solution. If we define ``r = y' - f(x, y)``,\nwhere y is the found solution, then the solver tries to achieve on each\nmesh interval ``norm(r / (1 + abs(f)) < tol``, where ``norm`` is\nestimated in a root mean squared sense (using a numerical quadrature\nformula). Default is 1e-3.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lhr1juf8",
                    "encoding": "",
                    "name": "max_nodes",
                    "value": 1000,
                    "defaultValue": 1000,
                    "description": "Maximum allowed number of the mesh nodes. If exceeded, the algorithm\nterminates. Default is 1000.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "aqrrlvwh",
                    "encoding": "",
                    "name": "verbose",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Level of algorithm's verbosity:\n\n    * 0 (default) : work silently.\n    * 1 : display a termination report.\n    * 2 : display progress during iterations.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b4984o4t",
                    "encoding": "",
                    "name": "bc_tol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Desired absolute tolerance for the boundary condition residuals: `bc`\nvalue should satisfy ``abs(bc) < bc_tol`` component-wise.\nEquals to `tol` by default. Up to 10 iterations are allowed to achieve this\ntolerance.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1izl7u4e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.solve_bvp",
                    "defaultValue": "scipy.integrate.solve_bvp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7ljlhks9",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t0d5025j",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "mv95fyzq",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "bkjgzl3b",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "evx35_ry",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hyi2s39_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "syz22bna",
            "name": "integrate.solve_ivp",
            "description": "Solve an initial value problem for a system of ODEs.\n    \n    This function numerically integrates a system of ordinary differential\n    equations given an initial value::\n    \n        dy / dt = f(t, y)\n        y(t0) = y0\n    \n    Here t is a 1-D independent variable (time), y(t) is an\n    N-D vector-valued function (state), and an N-D\n    vector-valued function f(t, y) determines the differential equations.\n    The goal is to find y(t) approximately satisfying the differential\n    equations, given an initial value y(t0)=y0.\n    \n    Some of the solvers support integration in the complex domain, but note\n    that for stiff ODE solvers, the right-hand side must be\n    complex-differentiable (satisfy Cauchy-Riemann equations [11]_).\n    To solve a problem in the complex domain, pass y0 with a complex data type.\n    Another option always available is to rewrite your problem for real and\n    imaginary parts separately.\n    \n    Parameters\n    ----------\n    fun : callable\n        Right-hand side of the system: the time derivative of the state ``y``\n        at time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\n        scalar and ``y`` is an ndarray with ``len(y) = len(y0)``. Additional\n        arguments need to be passed if ``args`` is used (see documentation of\n        ``args`` argument). ``fun`` must return an array of the same shape as\n        ``y``. See `vectorized` for more information.\n    t_span : 2-member sequence\n        Interval of integration (t0, tf). The solver starts with t=t0 and\n        integrates until it reaches t=tf. Both t0 and tf must be floats\n        or values interpretable by the float conversion function.\n    y0 : array_like, shape (n,)\n        Initial state. For problems in the complex domain, pass `y0` with a\n        complex data type (even if the initial value is purely real).\n    method : string or `OdeSolver`, optional\n        Integration method to use:\n    \n            * 'RK45' (default): Explicit Runge-Kutta method of order 5(4) [1]_.\n              The error is controlled assuming accuracy of the fourth-order\n              method, but steps are taken using the fifth-order accurate\n              formula (local extrapolation is done). A quartic interpolation\n              polynomial is used for the dense output [2]_. Can be applied in\n              the complex domain.\n            * 'RK23': Explicit Runge-Kutta method of order 3(2) [3]_. The error\n              is controlled assuming accuracy of the second-order method, but\n              steps are taken using the third-order accurate formula (local\n              extrapolation is done). A cubic Hermite polynomial is used for the\n              dense output. Can be applied in the complex domain.\n            * 'DOP853': Explicit Runge-Kutta method of order 8 [13]_.\n              Python implementation of the \"DOP853\" algorithm originally\n              written in Fortran [14]_. A 7-th order interpolation polynomial\n              accurate to 7-th order is used for the dense output.\n              Can be applied in the complex domain.\n            * 'Radau': Implicit Runge-Kutta method of the Radau IIA family of\n              order 5 [4]_. The error is controlled with a third-order accurate\n              embedded formula. A cubic polynomial which satisfies the\n              collocation conditions is used for the dense output.\n            * 'BDF': Implicit multi-step variable-order (1 to 5) method based\n              on a backward differentiation formula for the derivative\n              approximation [5]_. The implementation follows the one described\n              in [6]_. A quasi-constant step scheme is used and accuracy is\n              enhanced using the NDF modification. Can be applied in the\n              complex domain.\n            * 'LSODA': Adams/BDF method with automatic stiffness detection and\n              switching [7]_, [8]_. This is a wrapper of the Fortran solver\n              from ODEPACK.\n    \n        Explicit Runge-Kutta methods ('RK23', 'RK45', 'DOP853') should be used\n        for non-stiff problems and implicit methods ('Radau', 'BDF') for\n        stiff problems [9]_. Among Runge-Kutta methods, 'DOP853' is recommended\n        for solving with high precision (low values of `rtol` and `atol`).\n    \n        If not sure, first try to run 'RK45'. If it makes unusually many\n        iterations, diverges, or fails, your problem is likely to be stiff and\n        you should use 'Radau' or 'BDF'. 'LSODA' can also be a good universal\n        choice, but it might be somewhat less convenient to work with as it\n        wraps old Fortran code.\n    \n        You can also pass an arbitrary class derived from `OdeSolver` which\n        implements the solver.\n    t_eval : array_like or None, optional\n        Times at which to store the computed solution, must be sorted and lie\n        within `t_span`. If None (default), use points selected by the solver.\n    dense_output : bool, optional\n        Whether to compute a continuous solution. Default is False.\n    events : callable, or list of callables, optional\n        Events to track. If None (default), no events will be tracked.\n        Each event occurs at the zeros of a continuous function of time and\n        state. Each function must have the signature ``event(t, y)`` where\n        additional argument have to be passed if ``args`` is used (see\n        documentation of ``args`` argument). Each function must return a\n        float. The solver will find an accurate value of `t` at which\n        ``event(t, y(t)) = 0`` using a root-finding algorithm. By default,\n        all zeros will be found. The solver looks for a sign change over\n        each step, so if multiple zero crossings occur within one step,\n        events may be missed. Additionally each `event` function might\n        have the following attributes:\n    \n            terminal: bool or int, optional\n                When boolean, whether to terminate integration if this event occurs.\n                When integral, termination occurs after the specified the number of\n                occurrences of this event.\n                Implicitly False if not assigned.\n            direction: float, optional\n                Direction of a zero crossing. If `direction` is positive,\n                `event` will only trigger when going from negative to positive,\n                and vice versa if `direction` is negative. If 0, then either\n                direction will trigger event. Implicitly 0 if not assigned.\n    \n        You can assign attributes like ``event.terminal = True`` to any\n        function in Python.\n    vectorized : bool, optional\n        Whether `fun` can be called in a vectorized fashion. Default is False.\n    \n        If ``vectorized`` is False, `fun` will always be called with ``y`` of\n        shape ``(n,)``, where ``n = len(y0)``.\n    \n        If ``vectorized`` is True, `fun` may be called with ``y`` of shape\n        ``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\n        such that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\n        the returned array is the time derivative of the state corresponding\n        with a column of ``y``).\n    \n        Setting ``vectorized=True`` allows for faster finite difference\n        approximation of the Jacobian by methods 'Radau' and 'BDF', but\n        will result in slower execution for other methods and for 'Radau' and\n        'BDF' in some circumstances (e.g. small ``len(y0)``).\n    args : tuple, optional\n        Additional arguments to pass to the user-defined functions.  If given,\n        the additional arguments are passed to all user-defined functions.\n        So if, for example, `fun` has the signature ``fun(t, y, a, b, c)``,\n        then `jac` (if given) and any event functions must have the same\n        signature, and `args` must be a tuple of length 3.\n    **options\n        Options passed to a chosen solver. All options available for already\n        implemented solvers are listed below.\n    first_step : float or None, optional\n        Initial step size. Default is `None` which means that the algorithm\n        should choose.\n    max_step : float, optional\n        Maximum allowed step size. Default is np.inf, i.e., the step size is not\n        bounded and determined solely by the solver.\n    rtol, atol : float or array_like, optional\n        Relative and absolute tolerances. The solver keeps the local error\n        estimates less than ``atol + rtol * abs(y)``. Here `rtol` controls a\n        relative accuracy (number of correct digits), while `atol` controls\n        absolute accuracy (number of correct decimal places). To achieve the\n        desired `rtol`, set `atol` to be smaller than the smallest value that\n        can be expected from ``rtol * abs(y)`` so that `rtol` dominates the\n        allowable error. If `atol` is larger than ``rtol * abs(y)`` the\n        number of correct digits is not guaranteed. Conversely, to achieve the\n        desired `atol` set `rtol` such that ``rtol * abs(y)`` is always smaller\n        than `atol`. If components of y have different scales, it might be\n        beneficial to set different `atol` values for different components by\n        passing array_like with shape (n,) for `atol`. Default values are\n        1e-3 for `rtol` and 1e-6 for `atol`.\n    jac : array_like, sparse_matrix, callable or None, optional\n        Jacobian matrix of the right-hand side of the system with respect\n        to y, required by the 'Radau', 'BDF' and 'LSODA' method. The\n        Jacobian matrix has shape (n, n) and its element (i, j) is equal to\n        ``d f_i / d y_j``.  There are three ways to define the Jacobian:\n    \n            * If array_like or sparse_matrix, the Jacobian is assumed to\n              be constant. Not supported by 'LSODA'.\n            * If callable, the Jacobian is assumed to depend on both\n              t and y; it will be called as ``jac(t, y)``, as necessary.\n              Additional arguments have to be passed if ``args`` is\n              used (see documentation of ``args`` argument).\n              For 'Radau' and 'BDF' methods, the return value might be a\n              sparse matrix.\n            * If None (default), the Jacobian will be approximated by\n              finite differences.\n    \n        It is generally recommended to provide the Jacobian rather than\n        relying on a finite-difference approximation.\n    jac_sparsity : array_like, sparse matrix or None, optional\n        Defines a sparsity structure of the Jacobian matrix for a finite-\n        difference approximation. Its shape must be (n, n). This argument\n        is ignored if `jac` is not `None`. If the Jacobian has only few\n        non-zero elements in *each* row, providing the sparsity structure\n        will greatly speed up the computations [10]_. A zero entry means that\n        a corresponding element in the Jacobian is always zero. If None\n        (default), the Jacobian is assumed to be dense.\n        Not supported by 'LSODA', see `lband` and `uband` instead.\n    lband, uband : int or None, optional\n        Parameters defining the bandwidth of the Jacobian for the 'LSODA'\n        method, i.e., ``jac[i, j] != 0 only for i - lband <= j <= i + uband``.\n        Default is None. Setting these requires your jac routine to return the\n        Jacobian in the packed format: the returned array must have ``n``\n        columns and ``uband + lband + 1`` rows in which Jacobian diagonals are\n        written. Specifically ``jac_packed[uband + i - j , j] = jac[i, j]``.\n        The same format is used in `scipy.linalg.solve_banded` (check for an\n        illustration).  These parameters can be also used with ``jac=None`` to\n        reduce the number of Jacobian elements estimated by finite differences.\n    min_step : float, optional\n        The minimum allowed step size for 'LSODA' method.\n        By default `min_step` is zero.\n    \n    Returns\n    -------\n    Bunch object with the following fields defined:\n    t : ndarray, shape (n_points,)\n        Time points.\n    y : ndarray, shape (n, n_points)\n        Values of the solution at `t`.\n    sol : `OdeSolution` or None\n        Found solution as `OdeSolution` instance; None if `dense_output` was\n        set to False.\n    t_events : list of ndarray or None\n        Contains for each event type a list of arrays at which an event of\n        that type event was detected. None if `events` was None.\n    y_events : list of ndarray or None\n        For each value of `t_events`, the corresponding value of the solution.\n        None if `events` was None.\n    nfev : int\n        Number of evaluations of the right-hand side.\n    njev : int\n        Number of evaluations of the Jacobian.\n    nlu : int\n        Number of LU decompositions.\n    status : int\n        Reason for algorithm termination:\n    \n            * -1: Integration step failed.\n            *  0: The solver successfully reached the end of `tspan`.\n            *  1: A termination event occurred.\n    \n    message : string\n        Human-readable description of the termination reason.\n    success : bool\n        True if the solver reached the interval end or a termination event\n        occurred (``status >= 0``).\n    \n    References\n    ----------\n    .. [1] J. R. Dormand, P. J. Prince, \"A family of embedded Runge-Kutta\n           formulae\", Journal of Computational and Applied Mathematics, Vol. 6,\n           No. 1, pp. 19-26, 1980.\n    .. [2] L. W. Shampine, \"Some Practical Runge-Kutta Formulas\", Mathematics\n           of Computation,, Vol. 46, No. 173, pp. 135-150, 1986.\n    .. [3] P. Bogacki, L.F. Shampine, \"A 3(2) Pair of Runge-Kutta Formulas\",\n           Appl. Math. Lett. Vol. 2, No. 4. pp. 321-325, 1989.\n    .. [4] E. Hairer, G. Wanner, \"Solving Ordinary Differential Equations II:\n           Stiff and Differential-Algebraic Problems\", Sec. IV.8.\n    .. [5] `Backward Differentiation Formula\n            <https://en.wikipedia.org/wiki/Backward_differentiation_formula>`_\n            on Wikipedia.\n    .. [6] L. F. Shampine, M. W. Reichelt, \"THE MATLAB ODE SUITE\", SIAM J. SCI.\n           COMPUTE., Vol. 18, No. 1, pp. 1-22, January 1997.\n    .. [7] A. C. Hindmarsh, \"ODEPACK, A Systematized Collection of ODE\n           Solvers,\" IMACS Transactions on Scientific Computation, Vol 1.,\n           pp. 55-64, 1983.\n    .. [8] L. Petzold, \"Automatic selection of methods for solving stiff and\n           nonstiff systems of ordinary differential equations\", SIAM Journal\n           on Scientific and Statistical Computing, Vol. 4, No. 1, pp. 136-148,\n           1983.\n    .. [9] `Stiff equation <https://en.wikipedia.org/wiki/Stiff_equation>`_ on\n           Wikipedia.\n    .. [10] A. Curtis, M. J. D. Powell, and J. Reid, \"On the estimation of\n            sparse Jacobian matrices\", Journal of the Institute of Mathematics\n            and its Applications, 13, pp. 117-120, 1974.\n    .. [11] `Cauchy-Riemann equations\n             <https://en.wikipedia.org/wiki/Cauchy-Riemann_equations>`_ on\n             Wikipedia.\n    .. [12] `Lotka-Volterra equations\n            <https://en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations>`_\n            on Wikipedia.\n    .. [13] E. Hairer, S. P. Norsett G. Wanner, \"Solving Ordinary Differential\n            Equations I: Nonstiff Problems\", Sec. II.\n    .. [14] `Page with original Fortran code of DOP853\n            <http://www.unige.ch/~hairer/software.html>`_.\n    \n    Examples\n    --------\n    Basic exponential decay showing automatically chosen time points.\n    \n    >>> import numpy as np\n    >>> from scipy.integrate import solve_ivp\n    >>> def exponential_decay(t, y): return -0.5 * y\n    >>> sol = solve_ivp(exponential_decay, [0, 10], [2, 4, 8])\n    >>> print(sol.t)\n    [ 0.          0.11487653  1.26364188  3.06061781  4.81611105  6.57445806\n      8.33328988 10.        ]\n    >>> print(sol.y)\n    [[2.         1.88836035 1.06327177 0.43319312 0.18017253 0.07483045\n      0.03107158 0.01350781]\n     [4.         3.7767207  2.12654355 0.86638624 0.36034507 0.14966091\n      0.06214316 0.02701561]\n     [8.         7.5534414  4.25308709 1.73277247 0.72069014 0.29932181\n      0.12428631 0.05403123]]\n    \n    Specifying points where the solution is desired.\n    \n    >>> sol = solve_ivp(exponential_decay, [0, 10], [2, 4, 8],\n    ...                 t_eval=[0, 1, 2, 4, 10])\n    >>> print(sol.t)\n    [ 0  1  2  4 10]\n    >>> print(sol.y)\n    [[2.         1.21305369 0.73534021 0.27066736 0.01350938]\n     [4.         2.42610739 1.47068043 0.54133472 0.02701876]\n     [8.         4.85221478 2.94136085 1.08266944 0.05403753]]\n    \n    Cannon fired upward with terminal event upon impact. The ``terminal`` and\n    ``direction`` fields of an event are applied by monkey patching a function.\n    Here ``y[0]`` is position and ``y[1]`` is velocity. The projectile starts\n    at position 0 with velocity +10. Note that the integration never reaches\n    t=100 because the event is terminal.\n    \n    >>> def upward_cannon(t, y): return [y[1], -0.5]\n    >>> def hit_ground(t, y): return y[0]\n    >>> hit_ground.terminal = True\n    >>> hit_ground.direction = -1\n    >>> sol = solve_ivp(upward_cannon, [0, 100], [0, 10], events=hit_ground)\n    >>> print(sol.t_events)\n    [array([40.])]\n    >>> print(sol.t)\n    [0.00000000e+00 9.99900010e-05 1.09989001e-03 1.10988901e-02\n     1.11088891e-01 1.11098890e+00 1.11099890e+01 4.00000000e+01]\n    \n    Use `dense_output` and `events` to find position, which is 100, at the apex\n    of the cannonball's trajectory. Apex is not defined as terminal, so both\n    apex and hit_ground are found. There is no information at t=20, so the sol\n    attribute is used to evaluate the solution. The sol attribute is returned\n    by setting ``dense_output=True``. Alternatively, the `y_events` attribute\n    can be used to access the solution at the time of the event.\n    \n    >>> def apex(t, y): return y[1]\n    >>> sol = solve_ivp(upward_cannon, [0, 100], [0, 10],\n    ...                 events=(hit_ground, apex), dense_output=True)\n    >>> print(sol.t_events)\n    [array([40.]), array([20.])]\n    >>> print(sol.t)\n    [0.00000000e+00 9.99900010e-05 1.09989001e-03 1.10988901e-02\n     1.11088891e-01 1.11098890e+00 1.11099890e+01 4.00000000e+01]\n    >>> print(sol.sol(sol.t_events[1][0]))\n    [100.   0.]\n    >>> print(sol.y_events)\n    [array([[-5.68434189e-14, -1.00000000e+01]]),\n     array([[1.00000000e+02, 1.77635684e-15]])]\n    \n    As an example of a system with additional parameters, we'll implement\n    the Lotka-Volterra equations [12]_.\n    \n    >>> def lotkavolterra(t, z, a, b, c, d):\n    ...     x, y = z\n    ...     return [a*x - b*x*y, -c*y + d*x*y]\n    ...\n    \n    We pass in the parameter values a=1.5, b=1, c=3 and d=1 with the `args`\n    argument.\n    \n    >>> sol = solve_ivp(lotkavolterra, [0, 15], [10, 5], args=(1.5, 1, 3, 1),\n    ...                 dense_output=True)\n    \n    Compute a dense solution and plot it.\n    \n    >>> t = np.linspace(0, 15, 300)\n    >>> z = sol.sol(t)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t, z.T)\n    >>> plt.xlabel('t')\n    >>> plt.legend(['x', 'y'], shadow=True)\n    >>> plt.title('Lotka-Volterra System')\n    >>> plt.show()\n    \n    A couple examples of using solve_ivp to solve the differential\n    equation ``y' = Ay`` with complex matrix ``A``.\n    \n    >>> A = np.array([[-0.25 + 0.14j, 0, 0.33 + 0.44j],\n    ...               [0.25 + 0.58j, -0.2 + 0.14j, 0],\n    ...               [0, 0.2 + 0.4j, -0.1 + 0.97j]])\n    \n    Solving an IVP with ``A`` from above and ``y`` as 3x1 vector:\n    \n    >>> def deriv_vec(t, y):\n    ...     return A @ y\n    >>> result = solve_ivp(deriv_vec, [0, 25],\n    ...                    np.array([10 + 0j, 20 + 0j, 30 + 0j]),\n    ...                    t_eval=np.linspace(0, 25, 101))\n    >>> print(result.y[:, 0])\n    [10.+0.j 20.+0.j 30.+0.j]\n    >>> print(result.y[:, -1])\n    [18.46291039+45.25653651j 10.01569306+36.23293216j\n     -4.98662741+80.07360388j]\n    \n    Solving an IVP with ``A`` from above with ``y`` as 3x3 matrix :\n    \n    >>> def deriv_mat(t, y):\n    ...     return (A @ y.reshape(3, 3)).flatten()\n    >>> y0 = np.array([[2 + 0j, 3 + 0j, 4 + 0j],\n    ...                [5 + 0j, 6 + 0j, 7 + 0j],\n    ...                [9 + 0j, 34 + 0j, 78 + 0j]])\n    \n    >>> result = solve_ivp(deriv_mat, [0, 25], y0.flatten(),\n    ...                    t_eval=np.linspace(0, 25, 101))\n    >>> print(result.y[:, 0].reshape(3, 3))\n    [[ 2.+0.j  3.+0.j  4.+0.j]\n     [ 5.+0.j  6.+0.j  7.+0.j]\n     [ 9.+0.j 34.+0.j 78.+0.j]]\n    >>> print(result.y[:, -1].reshape(3, 3))\n    [[  5.67451179 +12.07938445j  17.2888073  +31.03278837j\n        37.83405768 +63.25138759j]\n     [  3.39949503 +11.82123994j  21.32530996 +44.88668871j\n        53.17531184+103.80400411j]\n     [ -2.26105874 +22.19277664j -15.1255713  +70.19616341j\n       -38.34616845+153.29039931j]]",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "82a1d052396468fa9a2f7b6b2de33b6c85e4f510b592dc46c7180838c201d640",
            "fields": [
                {
                    "id": "gzbevesm",
                    "encoding": "",
                    "name": "fun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Right-hand side of the system: the time derivative of the state ``y``\nat time ``t``. The calling signature is ``fun(t, y)``, where ``t`` is a\nscalar and ``y`` is an ndarray with ``len(y) = len(y0)``. Additional\narguments need to be passed if ``args`` is used (see documentation of\n``args`` argument). ``fun`` must return an array of the same shape as\n``y``. See `vectorized` for more information.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m5d9n5ai",
                    "encoding": "",
                    "name": "t_span",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interval of integration (t0, tf). The solver starts with t=t0 and\nintegrates until it reaches t=tf. Both t0 and tf must be floats\nor values interpretable by the float conversion function.",
                    "type": "2-member sequence",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ou80wl3k",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial state. For problems in the complex domain, pass `y0` with a\ncomplex data type (even if the initial value is purely real).",
                    "type": "arraylike, shape (n,)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "btaa9g6d",
                    "encoding": "",
                    "name": "method",
                    "value": "RK45",
                    "defaultValue": "RK45",
                    "description": "Integration method to use:\n\n    * 'RK45' (default): Explicit Runge-Kutta method of order 5(4) [1]_.\n      The error is controlled assuming accuracy of the fourth-order\n      method, but steps are taken using the fifth-order accurate\n      formula (local extrapolation is done). A quartic interpolation\n      polynomial is used for the dense output [2]_. Can be applied in\n      the complex domain.\n    * 'RK23': Explicit Runge-Kutta method of order 3(2) [3]_. The error\n      is controlled assuming accuracy of the second-order method, but\n      steps are taken using the third-order accurate formula (local\n      extrapolation is done). A cubic Hermite polynomial is used for the\n      dense output. Can be applied in the complex domain.\n    * 'DOP853': Explicit Runge-Kutta method of order 8 [13]_.\n      Python implementation of the \"DOP853\" algorithm originally\n      written in Fortran [14]_. A 7-th order interpolation polynomial\n      accurate to 7-th order is used for the dense output.\n      Can be applied in the complex domain.\n    * 'Radau': Implicit Runge-Kutta method of the Radau IIA family of\n      order 5 [4]_. The error is controlled with a third-order accurate\n      embedded formula. A cubic polynomial which satisfies the\n      collocation conditions is used for the dense output.\n    * 'BDF': Implicit multi-step variable-order (1 to 5) method based\n      on a backward differentiation formula for the derivative\n      approximation [5]_. The implementation follows the one described\n      in [6]_. A quasi-constant step scheme is used and accuracy is\n      enhanced using the NDF modification. Can be applied in the\n      complex domain.\n    * 'LSODA': Adams/BDF method with automatic stiffness detection and\n      switching [7]_, [8]_. This is a wrapper of the Fortran solver\n      from ODEPACK.\n\nExplicit Runge-Kutta methods ('RK23', 'RK45', 'DOP853') should be used\nfor non-stiff problems and implicit methods ('Radau', 'BDF') for\nstiff problems [9]_. Among Runge-Kutta methods, 'DOP853' is recommended\nfor solving with high precision (low values of `rtol` and `atol`).\n\nIf not sure, first try to run 'RK45'. If it makes unusually many\niterations, diverges, or fails, your problem is likely to be stiff and\nyou should use 'Radau' or 'BDF'. 'LSODA' can also be a good universal\nchoice, but it might be somewhat less convenient to work with as it\nwraps old Fortran code.\n\nYou can also pass an arbitrary class derived from `OdeSolver` which\nimplements the solver.",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kxtk0wmc",
                    "encoding": "",
                    "name": "t_eval",
                    "value": "",
                    "defaultValue": "",
                    "description": "Times at which to store the computed solution, must be sorted and lie\nwithin `t_span`. If None (default), use points selected by the solver.",
                    "type": "arraylike or None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cykjnf6c",
                    "encoding": "",
                    "name": "dense_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether to compute a continuous solution. Default is False.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kmcvs36j",
                    "encoding": "",
                    "name": "events",
                    "value": "",
                    "defaultValue": "",
                    "description": "Events to track. If None (default), no events will be tracked.\nEach event occurs at the zeros of a continuous function of time and\nstate. Each function must have the signature ``event(t, y)`` where\nadditional argument have to be passed if ``args`` is used (see\ndocumentation of ``args`` argument). Each function must return a\nfloat. The solver will find an accurate value of `t` at which\n``event(t, y(t)) = 0`` using a root-finding algorithm. By default,\nall zeros will be found. The solver looks for a sign change over\neach step, so if multiple zero crossings occur within one step,\nevents may be missed. Additionally each `event` function might\nhave the following attributes:\n\n    terminal: bool or int, optional\n        When boolean, whether to terminate integration if this event occurs.\n        When integral, termination occurs after the specified the number of\n        occurrences of this event.\n        Implicitly False if not assigned.\n    direction: float, optional\n        Direction of a zero crossing. If `direction` is positive,\n        `event` will only trigger when going from negative to positive,\n        and vice versa if `direction` is negative. If 0, then either\n        direction will trigger event. Implicitly 0 if not assigned.\n\nYou can assign attributes like ``event.terminal = True`` to any\nfunction in Python.",
                    "type": "callable, or list of callables",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2c94ubsa",
                    "encoding": "",
                    "name": "vectorized",
                    "value": false,
                    "defaultValue": false,
                    "description": "Whether `fun` can be called in a vectorized fashion. Default is False.\n\nIf ``vectorized`` is False, `fun` will always be called with ``y`` of\nshape ``(n,)``, where ``n = len(y0)``.\n\nIf ``vectorized`` is True, `fun` may be called with ``y`` of shape\n``(n, k)``, where ``k`` is an integer. In this case, `fun` must behave\nsuch that ``fun(t, y)[:, i] == fun(t, y[:, i])`` (i.e. each column of\nthe returned array is the time derivative of the state corresponding\nwith a column of ``y``).\n\nSetting ``vectorized=True`` allows for faster finite difference\napproximation of the Jacobian by methods 'Radau' and 'BDF', but\nwill result in slower execution for other methods and for 'Radau' and\n'BDF' in some circumstances (e.g. small ``len(y0)``).",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d28ikc8o",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional arguments to pass to the user-defined functions.  If given,\nthe additional arguments are passed to all user-defined functions.\nSo if, for example, `fun` has the signature ``fun(t, y, a, b, c)``,\nthen `jac` (if given) and any event functions must have the same\nsignature, and `args` must be a tuple of length 3.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9kk9ge9",
                    "encoding": "",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "b16672a1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.solve_ivp",
                    "defaultValue": "scipy.integrate.solve_ivp",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2l2s1h21",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "65e330m2",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "g8m181yz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "76u461jn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tp937fqk",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5xc4x5vn",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "a6s8s9yb",
            "name": "integrate.tanhsinh",
            "description": "Evaluate a convergent integral numerically using tanh-sinh quadrature.\n    \n    In practice, tanh-sinh quadrature achieves quadratic convergence for\n    many integrands: the number of accurate *digits* scales roughly linearly\n    with the number of function evaluations [1]_.\n    \n    Either or both of the limits of integration may be infinite, and\n    singularities at the endpoints are acceptable. Divergent integrals and\n    integrands with non-finite derivatives or singularities within an interval\n    are out of scope, but the latter may be evaluated be calling `tanhsinh` on\n    each sub-interval separately.\n    \n    Parameters\n    ----------\n    f : callable\n        The function to be integrated. The signature must be::\n    \n            f(xi: ndarray, *argsi) -> ndarray\n    \n        where each element of ``xi`` is a finite real number and ``argsi`` is a tuple,\n        which may contain an arbitrary number of arrays that are broadcastable\n        with ``xi``. `f` must be an elementwise function: see documentation of parameter\n        `preserve_shape` for details. It must not mutate the array ``xi`` or the arrays\n        in ``argsi``.\n        If ``f`` returns a value with complex dtype when evaluated at\n        either endpoint, subsequent arguments ``x`` will have complex dtype\n        (but zero imaginary part).\n    a, b : float array_like\n        Real lower and upper limits of integration. Must be broadcastable with one\n        another and with arrays in `args`. Elements may be infinite.\n    args : tuple of array_like, optional\n        Additional positional array arguments to be passed to `f`. Arrays\n        must be broadcastable with one another and the arrays of `a` and `b`.\n        If the callable for which the root is desired requires arguments that are\n        not broadcastable with `x`, wrap that callable with `f` such that `f`\n        accepts only `x` and broadcastable ``*args``.\n    log : bool, default: False\n        Setting to True indicates that `f` returns the log of the integrand\n        and that `atol` and `rtol` are expressed as the logs of the absolute\n        and relative errors. In this case, the result object will contain the\n        log of the integral and error. This is useful for integrands for which\n        numerical underflow or overflow would lead to inaccuracies.\n        When ``log=True``, the integrand (the exponential of `f`) must be real,\n        but it may be negative, in which case the log of the integrand is a\n        complex number with an imaginary part that is an odd multiple of \u03c0.\n    maxlevel : int, default: 10\n        The maximum refinement level of the algorithm.\n    \n        At the zeroth level, `f` is called once, performing 16 function\n        evaluations. At each subsequent level, `f` is called once more,\n        approximately doubling the number of function evaluations that have\n        been performed. Accordingly, for many integrands, each successive level\n        will double the number of accurate digits in the result (up to the\n        limits of floating point precision).\n    \n        The algorithm will terminate after completing level `maxlevel` or after\n        another termination condition is satisfied, whichever comes first.\n    minlevel : int, default: 2\n        The level at which to begin iteration (default: 2). This does not\n        change the total number of function evaluations or the abscissae at\n        which the function is evaluated; it changes only the *number of times*\n        `f` is called. If ``minlevel=k``, then the integrand is evaluated at\n        all abscissae from levels ``0`` through ``k`` in a single call.\n        Note that if `minlevel` exceeds `maxlevel`, the provided `minlevel` is\n        ignored, and `minlevel` is set equal to `maxlevel`.\n    atol, rtol : float, optional\n        Absolute termination tolerance (default: 0) and relative termination\n        tolerance (default: ``eps**0.75``, where ``eps`` is the precision of\n        the result dtype), respectively. Must be non-negative and finite if\n        `log` is False, and must be expressed as the log of a non-negative and\n        finite number if `log` is True. Iteration will stop when\n        ``res.error < atol`` or  ``res.error < res.integral * rtol``.\n    preserve_shape : bool, default: False\n        In the following, \"arguments of `f`\" refers to the array ``xi`` and\n        any arrays within ``argsi``. Let ``shape`` be the broadcasted shape\n        of `a`, `b`, and all elements of `args` (which is conceptually\n        distinct from ``xi` and ``argsi`` passed into `f`).\n    \n        - When ``preserve_shape=False`` (default), `f` must accept arguments\n          of *any* broadcastable shapes.\n    \n        - When ``preserve_shape=True``, `f` must accept arguments of shape\n          ``shape`` *or* ``shape + (n,)``, where ``(n,)`` is the number of\n          abscissae at which the function is being evaluated.\n    \n        In either case, for each scalar element ``xi[j]`` within ``xi``, the array\n        returned by `f` must include the scalar ``f(xi[j])`` at the same index.\n        Consequently, the shape of the output is always the shape of the input\n        ``xi``.\n    \n        See Examples.\n    \n    callback : callable, optional\n        An optional user-supplied function to be called before the first\n        iteration and after each iteration.\n        Called as ``callback(res)``, where ``res`` is a ``_RichResult``\n        similar to that returned by `tanhsinh` (but containing the\n        current iterate's values of all variables). If `callback` raises a\n        ``StopIteration``, the algorithm will terminate immediately and\n        `tanhsinh` will return a result object. `callback` must not mutate\n        `res` or its attributes.\n    \n    Returns\n    -------\n    res : _RichResult\n        An object similar to an instance of `scipy.optimize.OptimizeResult` with the\n        following attributes. (The descriptions are written as though the values will\n        be scalars; however, if `f` returns an array, the outputs will be\n        arrays of the same shape.)\n    \n        success : bool array\n            ``True`` when the algorithm terminated successfully (status ``0``).\n            ``False`` otherwise.\n        status : int array\n            An integer representing the exit status of the algorithm.\n    \n            ``0`` : The algorithm converged to the specified tolerances.\n            ``-1`` : (unused)\n            ``-2`` : The maximum number of iterations was reached.\n            ``-3`` : A non-finite value was encountered.\n            ``-4`` : Iteration was terminated by `callback`.\n            ``1`` : The algorithm is proceeding normally (in `callback` only).\n    \n        integral : float array\n            An estimate of the integral.\n        error : float array\n            An estimate of the error. Only available if level two or higher\n            has been completed; otherwise NaN.\n        maxlevel : int array\n            The maximum refinement level used.\n        nfev : int array\n            The number of points at which `f` was evaluated.\n    \n    See Also\n    --------\n    quad\n    \n    Notes\n    -----\n    Implements the algorithm as described in [1]_ with minor adaptations for\n    finite-precision arithmetic, including some described by [2]_ and [3]_. The\n    tanh-sinh scheme was originally introduced in [4]_.\n    \n    Two error estimation schemes are described in [1]_ Section 5: one attempts to\n    detect and exploit quadratic convergence; the other simply compares the integral\n    estimates at successive levels. While neither is theoretically rigorous or\n    conservative, both work well in practice. Our error estimate uses the minimum of\n    these two schemes with a lower bound of ``eps * res.integral``.\n    \n    Due to floating-point error in the abscissae, the function may be evaluated\n    at the endpoints of the interval during iterations, but the values returned by\n    the function at the endpoints will be ignored.\n    \n    References\n    ----------\n    .. [1] Bailey, David H., Karthik Jeyabalan, and Xiaoye S. Li. \"A comparison of\n           three high-precision quadrature schemes.\" Experimental Mathematics 14.3\n           (2005): 317-329.\n    .. [2] Vanherck, Joren, Bart Sor\u00e9e, and Wim Magnus. \"Tanh-sinh quadrature for\n           single and multiple integration using floating-point arithmetic.\"\n           arXiv preprint arXiv:2007.15057 (2020).\n    .. [3] van Engelen, Robert A.  \"Improving the Double Exponential Quadrature\n           Tanh-Sinh, Sinh-Sinh and Exp-Sinh Formulas.\"\n           https://www.genivia.com/files/qthsh.pdf\n    .. [4] Takahasi, Hidetosi, and Masatake Mori. \"Double exponential formulas for\n           numerical integration.\" Publications of the Research Institute for\n           Mathematical Sciences 9.3 (1974): 721-741.\n    \n    Examples\n    --------\n    Evaluate the Gaussian integral:\n    \n    >>> import numpy as np\n    >>> from scipy.integrate import tanhsinh\n    >>> def f(x):\n    ...     return np.exp(-x**2)\n    >>> res = tanhsinh(f, -np.inf, np.inf)\n    >>> res.integral  # true value is np.sqrt(np.pi), 1.7724538509055159\n    1.7724538509055159\n    >>> res.error  # actual error is 0\n    4.0007963937534104e-16\n    \n    The value of the Gaussian function (bell curve) is nearly zero for\n    arguments sufficiently far from zero, so the value of the integral\n    over a finite interval is nearly the same.\n    \n    >>> tanhsinh(f, -20, 20).integral\n    1.772453850905518\n    \n    However, with unfavorable integration limits, the integration scheme\n    may not be able to find the important region.\n    \n    >>> tanhsinh(f, -np.inf, 1000).integral\n    4.500490856616431\n    \n    In such cases, or when there are singularities within the interval,\n    break the integral into parts with endpoints at the important points.\n    \n    >>> tanhsinh(f, -np.inf, 0).integral + tanhsinh(f, 0, 1000).integral\n    1.772453850905404\n    \n    For integration involving very large or very small magnitudes, use\n    log-integration. (For illustrative purposes, the following example shows a\n    case in which both regular and log-integration work, but for more extreme\n    limits of integration, log-integration would avoid the underflow\n    experienced when evaluating the integral normally.)\n    \n    >>> res = tanhsinh(f, 20, 30, rtol=1e-10)\n    >>> res.integral, res.error\n    (4.7819613911309014e-176, 4.670364401645202e-187)\n    >>> def log_f(x):\n    ...     return -x**2\n    >>> res = tanhsinh(log_f, 20, 30, log=True, rtol=np.log(1e-10))\n    >>> np.exp(res.integral), np.exp(res.error)\n    (4.7819613911306924e-176, 4.670364401645093e-187)\n    \n    The limits of integration and elements of `args` may be broadcastable\n    arrays, and integration is performed elementwise.\n    \n    >>> from scipy import stats\n    >>> dist = stats.gausshyper(13.8, 3.12, 2.51, 5.18)\n    >>> a, b = dist.support()\n    >>> x = np.linspace(a, b, 100)\n    >>> res = tanhsinh(dist.pdf, a, x)\n    >>> ref = dist.cdf(x)\n    >>> np.allclose(res.integral, ref)\n    True\n    \n    By default, `preserve_shape` is False, and therefore the callable\n    `f` may be called with arrays of any broadcastable shapes.\n    For example:\n    \n    >>> shapes = []\n    >>> def f(x, c):\n    ...    shape = np.broadcast_shapes(x.shape, c.shape)\n    ...    shapes.append(shape)\n    ...    return np.sin(c*x)\n    >>>\n    >>> c = [1, 10, 30, 100]\n    >>> res = tanhsinh(f, 0, 1, args=(c,), minlevel=1)\n    >>> shapes\n    [(4,), (4, 34), (4, 32), (3, 64), (2, 128), (1, 256)]\n    \n    To understand where these shapes are coming from - and to better\n    understand how `tanhsinh` computes accurate results - note that\n    higher values of ``c`` correspond with higher frequency sinusoids.\n    The higher frequency sinusoids make the integrand more complicated,\n    so more function evaluations are required to achieve the target\n    accuracy:\n    \n    >>> res.nfev\n    array([ 67, 131, 259, 515], dtype=int32)\n    \n    The initial ``shape``, ``(4,)``, corresponds with evaluating the\n    integrand at a single abscissa and all four frequencies; this is used\n    for input validation and to determine the size and dtype of the arrays\n    that store results. The next shape corresponds with evaluating the\n    integrand at an initial grid of abscissae and all four frequencies.\n    Successive calls to the function double the total number of abscissae at\n    which the function has been evaluated. However, in later function\n    evaluations, the integrand is evaluated at fewer frequencies because\n    the corresponding integral has already converged to the required\n    tolerance. This saves function evaluations to improve performance, but\n    it requires the function to accept arguments of any shape.\n    \n    \"Vector-valued\" integrands, such as those written for use with\n    `scipy.integrate.quad_vec`, are unlikely to satisfy this requirement.\n    For example, consider\n    \n    >>> def f(x):\n    ...    return [x, np.sin(10*x), np.cos(30*x), x*np.sin(100*x)**2]\n    \n    This integrand is not compatible with `tanhsinh` as written; for instance,\n    the shape of the output will not be the same as the shape of ``x``. Such a\n    function *could* be converted to a compatible form with the introduction of\n    additional parameters, but this would be inconvenient. In such cases,\n    a simpler solution would be to use `preserve_shape`.\n    \n    >>> shapes = []\n    >>> def f(x):\n    ...     shapes.append(x.shape)\n    ...     x0, x1, x2, x3 = x\n    ...     return [x0, np.sin(10*x1), np.cos(30*x2), x3*np.sin(100*x3)]\n    >>>\n    >>> a = np.zeros(4)\n    >>> res = tanhsinh(f, a, 1, preserve_shape=True)\n    >>> shapes\n    [(4,), (4, 66), (4, 64), (4, 128), (4, 256)]\n    \n    Here, the broadcasted shape of `a` and `b` is ``(4,)``. With\n    ``preserve_shape=True``, the function may be called with argument\n    ``x`` of shape ``(4,)`` or ``(4, n)``, and this is what we observe.",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "fbd93b9f4326cea7859b736ec60f04f41caa66429b38bb33ed571b16d2688c79",
            "fields": [
                {
                    "id": "jbkx0p7u",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function to be integrated. The signature must be::\n\n    f(xi: ndarray, *argsi) -> ndarray\n\nwhere each element of ``xi`` is a finite real number and ``argsi`` is a tuple,\nwhich may contain an arbitrary number of arrays that are broadcastable\nwith ``xi``. `f` must be an elementwise function: see documentation of parameter\n`preserve_shape` for details. It must not mutate the array ``xi`` or the arrays\nin ``argsi``.\nIf ``f`` returns a value with complex dtype when evaluated at\neither endpoint, subsequent arguments ``x`` will have complex dtype\n(but zero imaginary part).",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "8zqioi4w",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1yxldvs0",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1t1wgolx",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Additional positional array arguments to be passed to `f`. Arrays\nmust be broadcastable with one another and the arrays of `a` and `b`.\nIf the callable for which the root is desired requires arguments that are\nnot broadcastable with `x`, wrap that callable with `f` such that `f`\naccepts only `x` and broadcastable ``*args``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "50rbvzcy",
                    "encoding": "",
                    "name": "log",
                    "value": false,
                    "defaultValue": false,
                    "description": "Setting to True indicates that `f` returns the log of the integrand\nand that `atol` and `rtol` are expressed as the logs of the absolute\nand relative errors. In this case, the result object will contain the\nlog of the integral and error. This is useful for integrands for which\nnumerical underflow or overflow would lead to inaccuracies.\nWhen ``log=True``, the integrand (the exponential of `f`) must be real,\nbut it may be negative, in which case the log of the integrand is a\ncomplex number with an imaginary part that is an odd multiple of \u03c0.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "920h9pti",
                    "encoding": "",
                    "name": "maxlevel",
                    "value": "",
                    "defaultValue": "",
                    "description": "The maximum refinement level of the algorithm.\n\nAt the zeroth level, `f` is called once, performing 16 function\nevaluations. At each subsequent level, `f` is called once more,\napproximately doubling the number of function evaluations that have\nbeen performed. Accordingly, for many integrands, each successive level\nwill double the number of accurate digits in the result (up to the\nlimits of floating point precision).\n\nThe algorithm will terminate after completing level `maxlevel` or after\nanother termination condition is satisfied, whichever comes first.",
                    "type": "int, default: 10",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g6chh3gh",
                    "encoding": "",
                    "name": "minlevel",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "The level at which to begin iteration (default: 2). This does not\nchange the total number of function evaluations or the abscissae at\nwhich the function is evaluated; it changes only the *number of times*\n`f` is called. If ``minlevel=k``, then the integrand is evaluated at\nall abscissae from levels ``0`` through ``k`` in a single call.\nNote that if `minlevel` exceeds `maxlevel`, the provided `minlevel` is\nignored, and `minlevel` is set equal to `maxlevel`.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9l4feo4s",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "37cpqhvo",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gy_hds9l",
                    "encoding": "",
                    "name": "preserve_shape",
                    "value": false,
                    "defaultValue": false,
                    "description": "In the following, \"arguments of `f`\" refers to the array ``xi`` and\nany arrays within ``argsi``. Let ``shape`` be the broadcasted shape\nof `a`, `b`, and all elements of `args` (which is conceptually\ndistinct from ``xi` and ``argsi`` passed into `f`).\n\n- When ``preserve_shape=False`` (default), `f` must accept arguments\n  of *any* broadcastable shapes.\n\n- When ``preserve_shape=True``, `f` must accept arguments of shape\n  ``shape`` *or* ``shape + (n,)``, where ``(n,)`` is the number of\n  abscissae at which the function is being evaluated.\n\nIn either case, for each scalar element ``xi[j]`` within ``xi``, the array\nreturned by `f` must include the scalar ``f(xi[j])`` at the same index.\nConsequently, the shape of the output is always the shape of the input\n``xi``.\n\nSee Examples.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a8ezzkxx",
                    "encoding": "",
                    "name": "callback",
                    "value": "",
                    "defaultValue": "",
                    "description": "An optional user-supplied function to be called before the first\niteration and after each iteration.\nCalled as ``callback(res)``, where ``res`` is a ``_RichResult``\nsimilar to that returned by `tanhsinh` (but containing the\ncurrent iterate's values of all variables). If `callback` raises a\n``StopIteration``, the algorithm will terminate immediately and\n`tanhsinh` will return a result object. `callback` must not mutate\n`res` or its attributes.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lf3xg1a3",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.tanhsinh",
                    "defaultValue": "scipy.integrate.tanhsinh",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "j17lpcjs",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pz74vnyy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "jnkm4sl5",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_gq13b7i",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "skv8yf_y",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "z9wvbftc",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "j_x6k8_e",
            "name": "integrate.tplquad",
            "description": "Compute a triple (definite) integral.\n    \n    Return the triple integral of ``func(z, y, x)`` from ``x = a..b``,\n    ``y = gfun(x)..hfun(x)``, and ``z = qfun(x,y)..rfun(x,y)``.\n    \n    Parameters\n    ----------\n    func : function\n        A Python function or method of at least three variables in the\n        order (z, y, x).\n    a, b : float\n        The limits of integration in x: `a` < `b`\n    gfun : function or float\n        The lower boundary curve in y which is a function taking a single\n        floating point argument (x) and returning a floating point result\n        or a float indicating a constant boundary curve.\n    hfun : function or float\n        The upper boundary curve in y (same requirements as `gfun`).\n    qfun : function or float\n        The lower boundary surface in z.  It must be a function that takes\n        two floats in the order (x, y) and returns a float or a float\n        indicating a constant boundary surface.\n    rfun : function or float\n        The upper boundary surface in z. (Same requirements as `qfun`.)\n    args : tuple, optional\n        Extra arguments to pass to `func`.\n    epsabs : float, optional\n        Absolute tolerance passed directly to the innermost 1-D quadrature\n        integration. Default is 1.49e-8.\n    epsrel : float, optional\n        Relative tolerance of the innermost 1-D integrals. Default is 1.49e-8.\n    \n    Returns\n    -------\n    y : float\n        The resultant integral.\n    abserr : float\n        An estimate of the error.\n    \n    See Also\n    --------\n    quad : Adaptive quadrature using QUADPACK\n    fixed_quad : Fixed-order Gaussian quadrature\n    dblquad : Double integrals\n    nquad : N-dimensional integrals\n    romb : Integrators for sampled data\n    simpson : Integrators for sampled data\n    scipy.special : For coefficients and roots of orthogonal polynomials\n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Details of QUADPACK level routines**\n    \n    `quad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. For each level of integration, ``qagse``\n    is used for finite limits or ``qagie`` is used, if either limit (or both!)\n    are infinite. The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    Examples\n    --------\n    Compute the triple integral of ``x * y * z``, over ``x`` ranging\n    from 1 to 2, ``y`` ranging from 2 to 3, ``z`` ranging from 0 to 1.\n    That is, :math:`\\int^{x=2}_{x=1} \\int^{y=3}_{y=2} \\int^{z=1}_{z=0} x y z\n    \\,dz \\,dy \\,dx`.\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> f = lambda z, y, x: x*y*z\n    >>> integrate.tplquad(f, 1, 2, 2, 3, 0, 1)\n    (1.8749999999999998, 3.3246447942574074e-14)\n    \n    Calculate :math:`\\int^{x=1}_{x=0} \\int^{y=1-2x}_{y=0}\n    \\int^{z=1-x-2y}_{z=0} x y z \\,dz \\,dy \\,dx`.\n    Note: `qfun`/`rfun` takes arguments in the order (x, y), even though ``f``\n    takes arguments in the order (z, y, x).\n    \n    >>> f = lambda z, y, x: x*y*z\n    >>> integrate.tplquad(f, 0, 1, 0, lambda x: 1-2*x, 0, lambda x, y: 1-x-2*y)\n    (0.05416666666666668, 2.1774196738157757e-14)\n    \n    Calculate :math:`\\int^{x=1}_{x=0} \\int^{y=1}_{y=0} \\int^{z=1}_{z=0}\n    a x y z \\,dz \\,dy \\,dx` for :math:`a=1, 3`.\n    \n    >>> f = lambda z, y, x, a: a*x*y*z\n    >>> integrate.tplquad(f, 0, 1, 0, 1, 0, 1, args=(1,))\n        (0.125, 5.527033708952211e-15)\n    >>> integrate.tplquad(f, 0, 1, 0, 1, 0, 1, args=(3,))\n        (0.375, 1.6581101126856635e-14)\n    \n    Compute the three-dimensional Gaussian Integral, which is the integral of\n    the Gaussian function :math:`f(x,y,z) = e^{-(x^{2} + y^{2} + z^{2})}`, over\n    :math:`(-\\infty,+\\infty)`. That is, compute the integral\n    :math:`\\iiint^{+\\infty}_{-\\infty} e^{-(x^{2} + y^{2} + z^{2})} \\,dz\n    \\,dy\\,dx`.\n    \n    >>> f = lambda x, y, z: np.exp(-(x ** 2 + y ** 2 + z ** 2))\n    >>> integrate.tplquad(f, -np.inf, np.inf, -np.inf, np.inf, -np.inf, np.inf)\n        (5.568327996830833, 4.4619078828029765e-08)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8c196d14633fe4bfde10480b49c9d6622e641d89403b714cd034cbcfb5da48c3",
            "fields": [
                {
                    "id": "0qvc2lp4",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method of at least three variables in the\norder (z, y, x).",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "imvwkyl4",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c5hj6__9",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "pwb5ym60",
                    "encoding": "",
                    "name": "gfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower boundary curve in y which is a function taking a single\nfloating point argument (x) and returning a floating point result\nor a float indicating a constant boundary curve.",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_7rz5l82",
                    "encoding": "",
                    "name": "hfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The upper boundary curve in y (same requirements as `gfun`).",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d8p_yqpn",
                    "encoding": "",
                    "name": "qfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower boundary surface in z.  It must be a function that takes\ntwo floats in the order (x, y) and returns a float or a float\nindicating a constant boundary surface.",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "710bsc58",
                    "encoding": "",
                    "name": "rfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The upper boundary surface in z. (Same requirements as `qfun`.)",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ltkxb1vb",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xl8zz1ck",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Absolute tolerance passed directly to the innermost 1-D quadrature\nintegration. Default is 1.49e-8.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kwny08jt",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Relative tolerance of the innermost 1-D integrals. Default is 1.49e-8.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "jaq4s2gk",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.tplquad",
                    "defaultValue": "scipy.integrate.tplquad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "h8g9k9nb",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvy5xcn7",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "5jxgw5g7",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4qxrgw2t",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "krz7e6ia",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f8cgjurp",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "ih9k8mp9",
            "name": "integrate.trapezoid",
            "description": "Integrate along the given axis using the composite trapezoidal rule.\n    \n    If `x` is provided, the integration happens in sequence along its\n    elements - they are not sorted.\n    \n    Integrate `y` (`x`) along each 1d slice on the given axis, compute\n    :math:`\\int y(x) dx`.\n    When `x` is specified, this integrates along the parametric curve,\n    computing :math:`\\int_t y(t) dt =\n    \\int_t y(t) \\left.\\frac{dx}{dt}\\right|_{x=x(t)} dt`.\n    \n    Parameters\n    ----------\n    y : array_like\n        Input array to integrate.\n    x : array_like, optional\n        The sample points corresponding to the `y` values. If `x` is None,\n        the sample points are assumed to be evenly spaced `dx` apart. The\n        default is None.\n    dx : scalar, optional\n        The spacing between sample points when `x` is None. The default is 1.\n    axis : int, optional\n        The axis along which to integrate. The default is the last axis.\n    \n    Returns\n    -------\n    trapezoid : float or ndarray\n        Definite integral of `y` = n-dimensional array as approximated along\n        a single axis by the trapezoidal rule. If `y` is a 1-dimensional array,\n        then the result is a float. If `n` is greater than 1, then the result\n        is an `n`-1 dimensional array.\n    \n    See Also\n    --------\n    cumulative_trapezoid, simpson, romb\n    \n    Notes\n    -----\n    Image [2]_ illustrates trapezoidal rule -- y-axis locations of points\n    will be taken from `y` array, by default x-axis distances between\n    points will be 1.0, alternatively they can be provided with `x` array\n    or with `dx` scalar.  Return value will be equal to combined area under\n    the red lines.\n    \n    References\n    ----------\n    .. [1] Wikipedia page: https://en.wikipedia.org/wiki/Trapezoidal_rule\n    \n    .. [2] Illustration image:\n           https://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png\n    \n    Examples\n    --------\n    Use the trapezoidal rule on evenly spaced points:\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> integrate.trapezoid([1, 2, 3])\n    4.0\n    \n    The spacing between sample points can be selected by either the\n    ``x`` or ``dx`` arguments:\n    \n    >>> integrate.trapezoid([1, 2, 3], x=[4, 6, 8])\n    8.0\n    >>> integrate.trapezoid([1, 2, 3], dx=2)\n    8.0\n    \n    Using a decreasing ``x`` corresponds to integrating in reverse:\n    \n    >>> integrate.trapezoid([1, 2, 3], x=[8, 6, 4])\n    -8.0\n    \n    More generally ``x`` is used to integrate along a parametric curve. We can\n    estimate the integral :math:`\\int_0^1 x^2 = 1/3` using:\n    \n    >>> x = np.linspace(0, 1, num=50)\n    >>> y = x**2\n    >>> integrate.trapezoid(y, x)\n    0.33340274885464394\n    \n    Or estimate the area of a circle, noting we repeat the sample which closes\n    the curve:\n    \n    >>> theta = np.linspace(0, 2 * np.pi, num=1000, endpoint=True)\n    >>> integrate.trapezoid(np.cos(theta), x=np.sin(theta))\n    3.141571941375841\n    \n    ``trapezoid`` can be applied along a specified axis to do multiple\n    computations in one call:\n    \n    >>> a = np.arange(6).reshape(2, 3)\n    >>> a\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> integrate.trapezoid(a, axis=0)\n    array([1.5, 2.5, 3.5])\n    >>> integrate.trapezoid(a, axis=1)\n    array([2.,  8.])",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "ce79f01ff1b203156f666b36cd75d37282d35f2de5eb8ef161f7585d80a30716",
            "fields": [
                {
                    "id": "hbkejj6j",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input array to integrate.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "ngfh_p32",
                    "encoding": "",
                    "name": "x",
                    "value": "",
                    "defaultValue": "",
                    "description": "The sample points corresponding to the `y` values. If `x` is None,\nthe sample points are assumed to be evenly spaced `dx` apart. The\ndefault is None.",
                    "type": "arraylike",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3s_dy_rl",
                    "encoding": "",
                    "name": "dx",
                    "value": 1.0,
                    "defaultValue": 1.0,
                    "description": "The spacing between sample points when `x` is None. The default is 1.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "480d97og",
                    "encoding": "",
                    "name": "axis",
                    "value": -1,
                    "defaultValue": -1,
                    "description": "The axis along which to integrate. The default is the last axis.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vibgml9e",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.trapezoid",
                    "defaultValue": "scipy.integrate.trapezoid",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rxcz4iu7",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lakxv0e6",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "zgknk_id",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dgm0f6mn",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate",
                    "defaultValue": "scipy.integrate",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "iwyhpwe8",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_k70n85n",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "sheptopq",
            "name": "function lsoda",
            "description": "Wrapper for ``lsoda``.\n\nParameters\n----------\nf : call-back function\ny : input rank-1 array('d') with bounds (neq)\nt : input float\ntout : input float\nrtol : input rank-1 array('d') with bounds (*)\natol : input rank-1 array('d') with bounds (*)\nitask : input int\nistate : input int\nrwork : input rank-1 array('d') with bounds (lrw)\niwork : input rank-1 array('i') with bounds (liw)\njac : call-back function\njt : input int\n\nOther Parameters\n----------------\nf_extra_args : input tuple, optional\n    Default: ()\noverwrite_y : input int, optional\n    Default: 0\njac_extra_args : input tuple, optional\n    Default: ()\n\nReturns\n-------\ny : rank-1 array('d') with bounds (neq)\nt : float\nistate : int\n\nNotes\n-----\nCall-back functions::\n\n    def f(t,y): return ydot\n    Required arguments:\n        t : input float\n        y : input rank-1 array('d') with bounds (n)\n    Return objects:\n        ydot : rank-1 array('d') with bounds (n)\n    def jac(t,y): return jac\n    Required arguments:\n        t : input float\n        y : input rank-1 array('d') with bounds (n)\n    Return objects:\n        jac : rank-2 array('d') with bounds (nrowpd,n)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "afb98bb1224626af114d37ea227d37ebfab90da4dce0cda99669b042d7115160",
            "fields": [
                {
                    "id": "03rfahnk",
                    "encoding": "",
                    "name": "f",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kt2ahbxu",
                    "encoding": "",
                    "name": "y",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l5xvd0vy",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nyg_8r_c",
                    "encoding": "",
                    "name": "tout",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "foi81i17",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "q1oc739b",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hrdg09pb",
                    "encoding": "",
                    "name": "itask",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9gkosu_g",
                    "encoding": "",
                    "name": "istate",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qbpf7byo",
                    "encoding": "",
                    "name": "rwork",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "__vauynq",
                    "encoding": "",
                    "name": "iwork",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o821boui",
                    "encoding": "",
                    "name": "jac",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nihpe6op",
                    "encoding": "",
                    "name": "jt",
                    "value": "",
                    "defaultValue": "",
                    "description": null,
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "66xaapqf",
                    "encoding": "",
                    "name": "f_extra_args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: ()",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "suoda2d2",
                    "encoding": "",
                    "name": "overwrite_y",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: 0",
                    "type": "str",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zas5bkfj",
                    "encoding": "",
                    "name": "jac_extra_args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Default: ()",
                    "type": "]",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gyrnm1ha",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.lsoda.function lsoda",
                    "defaultValue": "scipy.integrate.lsoda.function lsoda",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "970ij7kx",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0d0s3h0",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "0ahg1cwy",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kdk4hod0",
                    "encoding": "",
                    "name": "base_name",
                    "value": "",
                    "defaultValue": "",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "_u6dzmig",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lkx7n3ix",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "hc6idlj2",
            "name": "odepack.odeint",
            "description": "Integrate a system of ordinary differential equations.\n    \n    .. note:: For new code, use `scipy.integrate.solve_ivp` to solve a\n              differential equation.\n    \n    Solve a system of ordinary differential equations using lsoda from the\n    FORTRAN library odepack.\n    \n    Solves the initial value problem for stiff or non-stiff systems\n    of first order ode-s::\n    \n        dy/dt = func(y, t, ...)  [or func(t, y, ...)]\n    \n    where y can be a vector.\n    \n    .. note:: By default, the required order of the first two arguments of\n              `func` are in the opposite order of the arguments in the system\n              definition function used by the `scipy.integrate.ode` class and\n              the function `scipy.integrate.solve_ivp`. To use a function with\n              the signature ``func(t, y, ...)``, the argument `tfirst` must be\n              set to ``True``.\n    \n    Parameters\n    ----------\n    func : callable(y, t, ...) or callable(t, y, ...)\n        Computes the derivative of y at t.\n        If the signature is ``callable(t, y, ...)``, then the argument\n        `tfirst` must be set ``True``.\n        `func` must not modify the data in `y`, as it is a\n        view of the data used internally by the ODE solver.\n    y0 : array\n        Initial condition on y (can be a vector).\n    t : array\n        A sequence of time points for which to solve for y. The initial\n        value point should be the first element of this sequence.\n        This sequence must be monotonically increasing or monotonically\n        decreasing; repeated values are allowed.\n    args : tuple, optional\n        Extra arguments to pass to function.\n    Dfun : callable(y, t, ...) or callable(t, y, ...)\n        Gradient (Jacobian) of `func`.\n        If the signature is ``callable(t, y, ...)``, then the argument\n        `tfirst` must be set ``True``.\n        `Dfun` must not modify the data in `y`, as it is a\n        view of the data used internally by the ODE solver.\n    col_deriv : bool, optional\n        True if `Dfun` defines derivatives down columns (faster),\n        otherwise `Dfun` should define derivatives across rows.\n    full_output : bool, optional\n        True if to return a dictionary of optional outputs as the second output\n    printmessg : bool, optional\n        Whether to print the convergence message\n    tfirst : bool, optional\n        If True, the first two arguments of `func` (and `Dfun`, if given)\n        must ``t, y`` instead of the default ``y, t``.\n    \n        .. versionadded:: 1.1.0\n    \n    Returns\n    -------\n    y : array, shape (len(t), len(y0))\n        Array containing the value of y for each desired time in t,\n        with the initial value `y0` in the first row.\n    infodict : dict, only returned if full_output == True\n        Dictionary containing additional output information\n    \n        =======  ============================================================\n        key      meaning\n        =======  ============================================================\n        'hu'     vector of step sizes successfully used for each time step\n        'tcur'   vector with the value of t reached for each time step\n                 (will always be at least as large as the input times)\n        'tolsf'  vector of tolerance scale factors, greater than 1.0,\n                 computed when a request for too much accuracy was detected\n        'tsw'    value of t at the time of the last method switch\n                 (given for each time step)\n        'nst'    cumulative number of time steps\n        'nfe'    cumulative number of function evaluations for each time step\n        'nje'    cumulative number of jacobian evaluations for each time step\n        'nqu'    a vector of method orders for each successful step\n        'imxer'  index of the component of largest magnitude in the\n                 weighted local error vector (e / ewt) on an error return, -1\n                 otherwise\n        'lenrw'  the length of the double work array required\n        'leniw'  the length of integer work array required\n        'mused'  a vector of method indicators for each successful time step:\n                 1: adams (nonstiff), 2: bdf (stiff)\n        =======  ============================================================\n    \n    Other Parameters\n    ----------------\n    ml, mu : int, optional\n        If either of these are not None or non-negative, then the\n        Jacobian is assumed to be banded. These give the number of\n        lower and upper non-zero diagonals in this banded matrix.\n        For the banded case, `Dfun` should return a matrix whose\n        rows contain the non-zero bands (starting with the lowest diagonal).\n        Thus, the return matrix `jac` from `Dfun` should have shape\n        ``(ml + mu + 1, len(y0))`` when ``ml >=0`` or ``mu >=0``.\n        The data in `jac` must be stored such that ``jac[i - j + mu, j]``\n        holds the derivative of the ``i``\\ th equation with respect to the\n        ``j``\\ th state variable.  If `col_deriv` is True, the transpose of\n        this `jac` must be returned.\n    rtol, atol : float, optional\n        The input parameters `rtol` and `atol` determine the error\n        control performed by the solver.  The solver will control the\n        vector, e, of estimated local errors in y, according to an\n        inequality of the form ``max-norm of (e / ewt) <= 1``,\n        where ewt is a vector of positive error weights computed as\n        ``ewt = rtol * abs(y) + atol``.\n        rtol and atol can be either vectors the same length as y or scalars.\n        Defaults to 1.49012e-8.\n    tcrit : ndarray, optional\n        Vector of critical points (e.g., singularities) where integration\n        care should be taken.\n    h0 : float, (0: solver-determined), optional\n        The step size to be attempted on the first step.\n    hmax : float, (0: solver-determined), optional\n        The maximum absolute step size allowed.\n    hmin : float, (0: solver-determined), optional\n        The minimum absolute step size allowed.\n    ixpr : bool, optional\n        Whether to generate extra printing at method switches.\n    mxstep : int, (0: solver-determined), optional\n        Maximum number of (internally defined) steps allowed for each\n        integration point in t.\n    mxhnil : int, (0: solver-determined), optional\n        Maximum number of messages printed.\n    mxordn : int, (0: solver-determined), optional\n        Maximum order to be allowed for the non-stiff (Adams) method.\n    mxords : int, (0: solver-determined), optional\n        Maximum order to be allowed for the stiff (BDF) method.\n    \n    See Also\n    --------\n    solve_ivp : solve an initial value problem for a system of ODEs\n    ode : a more object-oriented integrator based on VODE\n    quad : for finding the area under a curve\n    \n    Examples\n    --------\n    The second order differential equation for the angle `theta` of a\n    pendulum acted on by gravity with friction can be written::\n    \n        theta''(t) + b*theta'(t) + c*sin(theta(t)) = 0\n    \n    where `b` and `c` are positive constants, and a prime (') denotes a\n    derivative. To solve this equation with `odeint`, we must first convert\n    it to a system of first order equations. By defining the angular\n    velocity ``omega(t) = theta'(t)``, we obtain the system::\n    \n        theta'(t) = omega(t)\n        omega'(t) = -b*omega(t) - c*sin(theta(t))\n    \n    Let `y` be the vector [`theta`, `omega`]. We implement this system\n    in Python as:\n    \n    >>> import numpy as np\n    >>> def pend(y, t, b, c):\n    ...     theta, omega = y\n    ...     dydt = [omega, -b*omega - c*np.sin(theta)]\n    ...     return dydt\n    ...\n    \n    We assume the constants are `b` = 0.25 and `c` = 5.0:\n    \n    >>> b = 0.25\n    >>> c = 5.0\n    \n    For initial conditions, we assume the pendulum is nearly vertical\n    with `theta(0)` = `pi` - 0.1, and is initially at rest, so\n    `omega(0)` = 0.  Then the vector of initial conditions is\n    \n    >>> y0 = [np.pi - 0.1, 0.0]\n    \n    We will generate a solution at 101 evenly spaced samples in the interval\n    0 <= `t` <= 10.  So our array of times is:\n    \n    >>> t = np.linspace(0, 10, 101)\n    \n    Call `odeint` to generate the solution. To pass the parameters\n    `b` and `c` to `pend`, we give them to `odeint` using the `args`\n    argument.\n    \n    >>> from scipy.integrate import odeint\n    >>> sol = odeint(pend, y0, t, args=(b, c))\n    \n    The solution is an array with shape (101, 2). The first column\n    is `theta(t)`, and the second is `omega(t)`. The following code\n    plots both components.\n    \n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t, sol[:, 0], 'b', label='theta(t)')\n    >>> plt.plot(t, sol[:, 1], 'g', label='omega(t)')\n    >>> plt.legend(loc='best')\n    >>> plt.xlabel('t')\n    >>> plt.grid()\n    >>> plt.show()",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "f9d30f126ff5b61a5521316a02a88269786dd71553e22130e99a439b322085ce",
            "fields": [
                {
                    "id": "08upltxw",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "Computes the derivative of y at t.\nIf the signature is ``callable(t, y, ...)``, then the argument\n`tfirst` must be set ``True``.\n`func` must not modify the data in `y`, as it is a\nview of the data used internally by the ODE solver.",
                    "type": "callable(y, t, ...) or callable(t, y, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "irkewb19",
                    "encoding": "",
                    "name": "y0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial condition on y (can be a vector).",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "p4bh1bqu",
                    "encoding": "",
                    "name": "t",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sequence of time points for which to solve for y. The initial\nvalue point should be the first element of this sequence.\nThis sequence must be monotonically increasing or monotonically\ndecreasing; repeated values are allowed.",
                    "type": "array",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3ihpz39s",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to function.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vf6_utdv",
                    "encoding": "",
                    "name": "Dfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gradient (Jacobian) of `func`.\nIf the signature is ``callable(t, y, ...)``, then the argument\n`tfirst` must be set ``True``.\n`Dfun` must not modify the data in `y`, as it is a\nview of the data used internally by the ODE solver.",
                    "type": "callable(y, t, ...) or callable(t, y, ...)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "s50ljd89",
                    "encoding": "",
                    "name": "col_deriv",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "True if `Dfun` defines derivatives down columns (faster),\notherwise `Dfun` should define derivatives across rows.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "epng4sx1",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "True if to return a dictionary of optional outputs as the second output",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2mifb__x",
                    "encoding": "",
                    "name": "ml",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "t4ptvy3j",
                    "encoding": "",
                    "name": "mu",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7t6ehj87",
                    "encoding": "",
                    "name": "rtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0yl915g7",
                    "encoding": "",
                    "name": "atol",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g4226p_8",
                    "encoding": "",
                    "name": "tcrit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Vector of critical points (e.g., singularities) where integration\ncare should be taken.",
                    "type": "ndarray",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1c5mbhr4",
                    "encoding": "",
                    "name": "h0",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The step size to be attempted on the first step.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "14vnkxl0",
                    "encoding": "",
                    "name": "hmax",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The maximum absolute step size allowed.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nlzv9g5r",
                    "encoding": "",
                    "name": "hmin",
                    "value": 0.0,
                    "defaultValue": 0.0,
                    "description": "The minimum absolute step size allowed.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "utqs107o",
                    "encoding": "",
                    "name": "ixpr",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Whether to generate extra printing at method switches.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4jigv8xv",
                    "encoding": "",
                    "name": "mxstep",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum number of (internally defined) steps allowed for each\nintegration point in t.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rlgma7_9",
                    "encoding": "",
                    "name": "mxhnil",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Maximum number of messages printed.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "hlu38s_k",
                    "encoding": "",
                    "name": "mxordn",
                    "value": 12,
                    "defaultValue": 12,
                    "description": "Maximum order to be allowed for the non-stiff (Adams) method.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "3mybyqve",
                    "encoding": "",
                    "name": "mxords",
                    "value": 5,
                    "defaultValue": 5,
                    "description": "Maximum order to be allowed for the stiff (BDF) method.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "85k0xac1",
                    "encoding": "",
                    "name": "printmessg",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Whether to print the convergence message",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "1reczyjt",
                    "encoding": "",
                    "name": "tfirst",
                    "value": false,
                    "defaultValue": false,
                    "description": "If True, the first two arguments of `func` (and `Dfun`, if given)\nmust ``t, y`` instead of the default ``y, t``.\n\n.. versionadded:: 1.1.0",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "zpb7e06v",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.odepack.odeint",
                    "defaultValue": "scipy.integrate.odepack.odeint",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4pgd69sc",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gddytngj",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "018tc_6o",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gtpgbo5w",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate.odepack",
                    "defaultValue": "scipy.integrate.odepack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e7448xcc",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "nh8yine_",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "4yst5v9m",
            "name": "quadpack.dblquad",
            "description": "Compute a double integral.\n    \n    Return the double (definite) integral of ``func(y, x)`` from ``x = a..b``\n    and ``y = gfun(x)..hfun(x)``.\n    \n    Parameters\n    ----------\n    func : callable\n        A Python function or method of at least two variables: y must be the\n        first argument and x the second argument.\n    a, b : float\n        The limits of integration in x: `a` < `b`\n    gfun : callable or float\n        The lower boundary curve in y which is a function taking a single\n        floating point argument (x) and returning a floating point result\n        or a float indicating a constant boundary curve.\n    hfun : callable or float\n        The upper boundary curve in y (same requirements as `gfun`).\n    args : sequence, optional\n        Extra arguments to pass to `func`.\n    epsabs : float, optional\n        Absolute tolerance passed directly to the inner 1-D quadrature\n        integration. Default is 1.49e-8. ``dblquad`` tries to obtain\n        an accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\n        where ``i`` = inner integral of ``func(y, x)`` from ``gfun(x)``\n        to ``hfun(x)``, and ``result`` is the numerical approximation.\n        See `epsrel` below.\n    epsrel : float, optional\n        Relative tolerance of the inner 1-D integrals. Default is 1.49e-8.\n        If ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\n        and ``50 * (machine epsilon)``. See `epsabs` above.\n    \n    Returns\n    -------\n    y : float\n        The resultant integral.\n    abserr : float\n        An estimate of the error.\n    \n    See Also\n    --------\n    quad : single integral\n    tplquad : triple integral\n    nquad : N-dimensional integrals\n    fixed_quad : fixed-order Gaussian quadrature\n    simpson : integrator for sampled data\n    romb : integrator for sampled data\n    scipy.special : for coefficients and roots of orthogonal polynomials\n    \n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Details of QUADPACK level routines**\n    \n    `quad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. For each level of integration, ``qagse``\n    is used for finite limits or ``qagie`` is used if either limit (or both!)\n    are infinite. The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    Examples\n    --------\n    Compute the double integral of ``x * y**2`` over the box\n    ``x`` ranging from 0 to 2 and ``y`` ranging from 0 to 1.\n    That is, :math:`\\int^{x=2}_{x=0} \\int^{y=1}_{y=0} x y^2 \\,dy \\,dx`.\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> f = lambda y, x: x*y**2\n    >>> integrate.dblquad(f, 0, 2, 0, 1)\n        (0.6666666666666667, 7.401486830834377e-15)\n    \n    Calculate :math:`\\int^{x=\\pi/4}_{x=0} \\int^{y=\\cos(x)}_{y=\\sin(x)} 1\n    \\,dy \\,dx`.\n    \n    >>> f = lambda y, x: 1\n    >>> integrate.dblquad(f, 0, np.pi/4, np.sin, np.cos)\n        (0.41421356237309503, 1.1083280054755938e-14)\n    \n    Calculate :math:`\\int^{x=1}_{x=0} \\int^{y=2-x}_{y=x} a x y \\,dy \\,dx`\n    for :math:`a=1, 3`.\n    \n    >>> f = lambda y, x, a: a*x*y\n    >>> integrate.dblquad(f, 0, 1, lambda x: x, lambda x: 2-x, args=(1,))\n        (0.33333333333333337, 5.551115123125783e-15)\n    >>> integrate.dblquad(f, 0, 1, lambda x: x, lambda x: 2-x, args=(3,))\n        (0.9999999999999999, 1.6653345369377348e-14)\n    \n    Compute the two-dimensional Gaussian Integral, which is the integral of the\n    Gaussian function :math:`f(x,y) = e^{-(x^{2} + y^{2})}`, over\n    :math:`(-\\infty,+\\infty)`. That is, compute the integral\n    :math:`\\iint^{+\\infty}_{-\\infty} e^{-(x^{2} + y^{2})} \\,dy\\,dx`.\n    \n    >>> f = lambda x, y: np.exp(-(x ** 2 + y ** 2))\n    >>> integrate.dblquad(f, -np.inf, np.inf, -np.inf, np.inf)\n        (3.141592653589777, 2.5173086737433208e-08)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "8bda62639c04920832bf54c49d9d788825d7a6ad78c36af8a932518f873029db",
            "fields": [
                {
                    "id": "_c5c9n71",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method of at least two variables: y must be the\nfirst argument and x the second argument.",
                    "type": "callable",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "etu147ql",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9gd0emq6",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lzkr2lul",
                    "encoding": "",
                    "name": "gfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower boundary curve in y which is a function taking a single\nfloating point argument (x) and returning a floating point result\nor a float indicating a constant boundary curve.",
                    "type": "callable or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kyk95z9h",
                    "encoding": "",
                    "name": "hfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The upper boundary curve in y (same requirements as `gfun`).",
                    "type": "callable or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "g1btdivu",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "acgura8g",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Absolute tolerance passed directly to the inner 1-D quadrature\nintegration. Default is 1.49e-8. ``dblquad`` tries to obtain\nan accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\nwhere ``i`` = inner integral of ``func(y, x)`` from ``gfun(x)``\nto ``hfun(x)``, and ``result`` is the numerical approximation.\nSee `epsrel` below.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0bet31ra",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Relative tolerance of the inner 1-D integrals. Default is 1.49e-8.\nIf ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\nand ``50 * (machine epsilon)``. See `epsabs` above.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v8l6yf2d",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.quadpack.dblquad",
                    "defaultValue": "scipy.integrate.quadpack.dblquad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "v_d2r86d",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "reyw4ino",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "8qq55chz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "o9vwl66m",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate.quadpack",
                    "defaultValue": "scipy.integrate.quadpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "tmrc20go",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9d6r1_6u",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "f2l3vs5g",
            "name": "quadpack.nquad",
            "description": "Integration over multiple variables.\n    \n    Wraps `quad` to enable integration over multiple variables.\n    Various options allow improved integration of discontinuous functions, as\n    well as the use of weighted integration, and generally finer control of the\n    integration process.\n    \n    Parameters\n    ----------\n    func : {callable, scipy.LowLevelCallable}\n        The function to be integrated. Has arguments of ``x0, ... xn``,\n        ``t0, ... tm``, where integration is carried out over ``x0, ... xn``,\n        which must be floats.  Where ``t0, ... tm`` are extra arguments\n        passed in args.\n        Function signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``.\n        Integration is carried out in order.  That is, integration over ``x0``\n        is the innermost integral, and ``xn`` is the outermost.\n    \n        If the user desires improved integration performance, then `f` may\n        be a `scipy.LowLevelCallable` with one of the signatures::\n    \n            double func(int n, double *xx)\n            double func(int n, double *xx, void *user_data)\n    \n        where ``n`` is the number of variables and args.  The ``xx`` array\n        contains the coordinates and extra arguments. ``user_data`` is the data\n        contained in the `scipy.LowLevelCallable`.\n    ranges : iterable object\n        Each element of ranges may be either a sequence  of 2 numbers, or else\n        a callable that returns such a sequence. ``ranges[0]`` corresponds to\n        integration over x0, and so on. If an element of ranges is a callable,\n        then it will be called with all of the integration arguments available,\n        as well as any parametric arguments. e.g., if\n        ``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as\n        either ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``.\n    args : iterable object, optional\n        Additional arguments ``t0, ... tn``, required by ``func``, ``ranges``,\n        and ``opts``.\n    opts : iterable object or dict, optional\n        Options to be passed to `quad`. May be empty, a dict, or\n        a sequence of dicts or functions that return a dict. If empty, the\n        default options from scipy.integrate.quad are used. If a dict, the same\n        options are used for all levels of integraion. If a sequence, then each\n        element of the sequence corresponds to a particular integration. e.g.,\n        ``opts[0]`` corresponds to integration over ``x0``, and so on. If a\n        callable, the signature must be the same as for ``ranges``. The\n        available options together with their default values are:\n    \n          - epsabs = 1.49e-08\n          - epsrel = 1.49e-08\n          - limit  = 50\n          - points = None\n          - weight = None\n          - wvar   = None\n          - wopts  = None\n    \n        For more information on these options, see `quad`.\n    \n    full_output : bool, optional\n        Partial implementation of ``full_output`` from scipy.integrate.quad.\n        The number of integrand function evaluations ``neval`` can be obtained\n        by setting ``full_output=True`` when calling nquad.\n    \n    Returns\n    -------\n    result : float\n        The result of the integration.\n    abserr : float\n        The maximum of the estimates of the absolute error in the various\n        integration results.\n    out_dict : dict, optional\n        A dict containing additional information on the integration.\n    \n    See Also\n    --------\n    quad : 1-D numerical integration\n    dblquad, tplquad : double and triple integrals\n    fixed_quad : fixed-order Gaussian quadrature\n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Details of QUADPACK level routines**\n    \n    `nquad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. The routine called depends on\n    `weight`, `points` and the integration limits `a` and `b`.\n    \n    ================  ==============  ==========  =====================\n    QUADPACK routine  `weight`        `points`    infinite bounds\n    ================  ==============  ==========  =====================\n    qagse             None            No          No\n    qagie             None            No          Yes\n    qagpe             None            Yes         No\n    qawoe             'sin', 'cos'    No          No\n    qawfe             'sin', 'cos'    No          either `a` or `b`\n    qawse             'alg*'          No          No\n    qawce             'cauchy'        No          No\n    ================  ==============  ==========  =====================\n    \n    The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    qagpe\n        serves the same purposes as QAGS, but also allows the\n        user to provide explicit information about the location\n        and type of trouble-spots i.e. the abscissae of internal\n        singularities, discontinuities and other difficulties of\n        the integrand function.\n    qawoe\n        is an integrator for the evaluation of\n        :math:`\\int^b_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^b_a \\sin(\\omega x)f(x)dx`\n        over a finite interval [a,b], where :math:`\\omega` and :math:`f`\n        are specified by the user. The rule evaluation component is based\n        on the modified Clenshaw-Curtis technique\n    \n        An adaptive subdivision scheme is used in connection\n        with an extrapolation procedure, which is a modification\n        of that in ``QAGS`` and allows the algorithm to deal with\n        singularities in :math:`f(x)`.\n    qawfe\n        calculates the Fourier transform\n        :math:`\\int^\\infty_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^\\infty_a \\sin(\\omega x)f(x)dx`\n        for user-provided :math:`\\omega` and :math:`f`. The procedure of\n        ``QAWO`` is applied on successive finite intervals, and convergence\n        acceleration by means of the :math:`\\varepsilon`-algorithm is applied\n        to the series of integral approximations.\n    qawse\n        approximate :math:`\\int^b_a w(x)f(x)dx`, with :math:`a < b` where\n        :math:`w(x) = (x-a)^{\\alpha}(b-x)^{\\beta}v(x)` with\n        :math:`\\alpha,\\beta > -1`, where :math:`v(x)` may be one of the\n        following functions: :math:`1`, :math:`\\log(x-a)`, :math:`\\log(b-x)`,\n        :math:`\\log(x-a)\\log(b-x)`.\n    \n        The user specifies :math:`\\alpha`, :math:`\\beta` and the type of the\n        function :math:`v`. A globally adaptive subdivision strategy is\n        applied, with modified Clenshaw-Curtis integration on those\n        subintervals which contain `a` or `b`.\n    qawce\n        compute :math:`\\int^b_a f(x) / (x-c)dx` where the integral must be\n        interpreted as a Cauchy principal value integral, for user specified\n        :math:`c` and :math:`f`. The strategy is globally adaptive. Modified\n        Clenshaw-Curtis integration is used on those intervals containing the\n        point :math:`x = c`.\n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    Examples\n    --------\n    Calculate\n    \n    .. math::\n    \n        \\int^{1}_{-0.15} \\int^{0.8}_{0.13} \\int^{1}_{-1} \\int^{1}_{0}\n        f(x_0, x_1, x_2, x_3) \\,dx_0 \\,dx_1 \\,dx_2 \\,dx_3 ,\n    \n    where\n    \n    .. math::\n    \n        f(x_0, x_1, x_2, x_3) = \\begin{cases}\n          x_0^2+x_1 x_2-x_3^3+ \\sin{x_0}+1 & (x_0-0.2 x_3-0.5-0.25 x_1 > 0) \\\\\n          x_0^2+x_1 x_2-x_3^3+ \\sin{x_0}+0 & (x_0-0.2 x_3-0.5-0.25 x_1 \\leq 0)\n        \\end{cases} .\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> func = lambda x0,x1,x2,x3 : x0**2 + x1*x2 - x3**3 + np.sin(x0) + (\n    ...                                 1 if (x0-.2*x3-.5-.25*x1>0) else 0)\n    >>> def opts0(*args, **kwargs):\n    ...     return {'points':[0.2*args[2] + 0.5 + 0.25*args[0]]}\n    >>> integrate.nquad(func, [[0,1], [-1,1], [.13,.8], [-.15,1]],\n    ...                 opts=[opts0,{},{},{}], full_output=True)\n    (1.5267454070738633, 2.9437360001402324e-14, {'neval': 388962})\n    \n    Calculate\n    \n    .. math::\n    \n        \\int^{t_0+t_1+1}_{t_0+t_1-1}\n        \\int^{x_2+t_0^2 t_1^3+1}_{x_2+t_0^2 t_1^3-1}\n        \\int^{t_0 x_1+t_1 x_2+1}_{t_0 x_1+t_1 x_2-1}\n        f(x_0,x_1, x_2,t_0,t_1)\n        \\,dx_0 \\,dx_1 \\,dx_2,\n    \n    where\n    \n    .. math::\n    \n        f(x_0, x_1, x_2, t_0, t_1) = \\begin{cases}\n          x_0 x_2^2 + \\sin{x_1}+2 & (x_0+t_1 x_1-t_0 > 0) \\\\\n          x_0 x_2^2 +\\sin{x_1}+1 & (x_0+t_1 x_1-t_0 \\leq 0)\n        \\end{cases}\n    \n    and :math:`(t_0, t_1) = (0, 1)` .\n    \n    >>> def func2(x0, x1, x2, t0, t1):\n    ...     return x0*x2**2 + np.sin(x1) + 1 + (1 if x0+t1*x1-t0>0 else 0)\n    >>> def lim0(x1, x2, t0, t1):\n    ...     return [t0*x1 + t1*x2 - 1, t0*x1 + t1*x2 + 1]\n    >>> def lim1(x2, t0, t1):\n    ...     return [x2 + t0**2*t1**3 - 1, x2 + t0**2*t1**3 + 1]\n    >>> def lim2(t0, t1):\n    ...     return [t0 + t1 - 1, t0 + t1 + 1]\n    >>> def opts0(x1, x2, t0, t1):\n    ...     return {'points' : [t0 - t1*x1]}\n    >>> def opts1(x2, t0, t1):\n    ...     return {}\n    >>> def opts2(t0, t1):\n    ...     return {}\n    >>> integrate.nquad(func2, [lim0, lim1, lim2], args=(0,1),\n    ...                 opts=[opts0, opts1, opts2])\n    (36.099919226771625, 1.8546948553373528e-07)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "d82455267ab8fc003f1d5ded209516fa5636c660b52c848795c274b8a12f4624",
            "fields": [
                {
                    "id": "2ywicz17",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "The function to be integrated. Has arguments of ``x0, ... xn``,\n``t0, ... tm``, where integration is carried out over ``x0, ... xn``,\nwhich must be floats.  Where ``t0, ... tm`` are extra arguments\npassed in args.\nFunction signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``.\nIntegration is carried out in order.  That is, integration over ``x0``\nis the innermost integral, and ``xn`` is the outermost.\n\nIf the user desires improved integration performance, then `f` may\nbe a `scipy.LowLevelCallable` with one of the signatures::\n\n    double func(int n, double *xx)\n    double func(int n, double *xx, void *user_data)\n\nwhere ``n`` is the number of variables and args.  The ``xx`` array\ncontains the coordinates and extra arguments. ``user_data`` is the data\ncontained in the `scipy.LowLevelCallable`.",
                    "type": "{callable, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbt5rq0a",
                    "encoding": "",
                    "name": "ranges",
                    "value": "",
                    "defaultValue": "",
                    "description": "Each element of ranges may be either a sequence  of 2 numbers, or else\na callable that returns such a sequence. ``ranges[0]`` corresponds to\nintegration over x0, and so on. If an element of ranges is a callable,\nthen it will be called with all of the integration arguments available,\nas well as any parametric arguments. e.g., if\n``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as\neither ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``.",
                    "type": "iterable object",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "16ifwsxp",
                    "encoding": "",
                    "name": "args",
                    "value": "",
                    "defaultValue": "",
                    "description": "Additional arguments ``t0, ... tn``, required by ``func``, ``ranges``,\nand ``opts``.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9trfkhj7",
                    "encoding": "",
                    "name": "opts",
                    "value": "",
                    "defaultValue": "",
                    "description": "Options to be passed to `quad`. May be empty, a dict, or\na sequence of dicts or functions that return a dict. If empty, the\ndefault options from scipy.integrate.quad are used. If a dict, the same\noptions are used for all levels of integraion. If a sequence, then each\nelement of the sequence corresponds to a particular integration. e.g.,\n``opts[0]`` corresponds to integration over ``x0``, and so on. If a\ncallable, the signature must be the same as for ``ranges``. The\navailable options together with their default values are:\n\n  - epsabs = 1.49e-08\n  - epsrel = 1.49e-08\n  - limit  = 50\n  - points = None\n  - weight = None\n  - wvar   = None\n  - wopts  = None\n\nFor more information on these options, see `quad`.",
                    "type": "iterable object or dict",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "soy1vik4",
                    "encoding": "",
                    "name": "full_output",
                    "value": false,
                    "defaultValue": false,
                    "description": "Partial implementation of ``full_output`` from scipy.integrate.quad.\nThe number of integrand function evaluations ``neval`` can be obtained\nby setting ``full_output=True`` when calling nquad.",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "l_cdiewu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.quadpack.nquad",
                    "defaultValue": "scipy.integrate.quadpack.nquad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "031zpo_1",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f16awn0y",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "wiyrvygn",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "e01tghuv",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate.quadpack",
                    "defaultValue": "scipy.integrate.quadpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "n20qm185",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "c6ah4o8w",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "7iho4di4",
            "name": "quadpack.quad",
            "description": "Compute a definite integral.\n    \n    Integrate func from `a` to `b` (possibly infinite interval) using a\n    technique from the Fortran library QUADPACK.\n    \n    Parameters\n    ----------\n    func : {function, scipy.LowLevelCallable}\n        A Python function or method to integrate. If `func` takes many\n        arguments, it is integrated along the axis corresponding to the\n        first argument.\n    \n        If the user desires improved integration performance, then `f` may\n        be a `scipy.LowLevelCallable` with one of the signatures::\n    \n            double func(double x)\n            double func(double x, void *user_data)\n            double func(int n, double *xx)\n            double func(int n, double *xx, void *user_data)\n    \n        The ``user_data`` is the data contained in the `scipy.LowLevelCallable`.\n        In the call forms with ``xx``,  ``n`` is the length of the ``xx``\n        array which contains ``xx[0] == x`` and the rest of the items are\n        numbers contained in the ``args`` argument of quad.\n    \n        In addition, certain ctypes call signatures are supported for\n        backward compatibility, but those should not be used in new code.\n    a : float\n        Lower limit of integration (use -numpy.inf for -infinity).\n    b : float\n        Upper limit of integration (use numpy.inf for +infinity).\n    args : tuple, optional\n        Extra arguments to pass to `func`.\n    full_output : int, optional\n        Non-zero to return a dictionary of integration information.\n        If non-zero, warning messages are also suppressed and the\n        message is appended to the output tuple.\n    complex_func : bool, optional\n        Indicate if the function's (`func`) return type is real\n        (``complex_func=False``: default) or complex (``complex_func=True``).\n        In both cases, the function's argument is real.\n        If full_output is also non-zero, the `infodict`, `message`, and\n        `explain` for the real and complex components are returned in\n        a dictionary with keys \"real output\" and \"imag output\".\n    \n    Returns\n    -------\n    y : float\n        The integral of func from `a` to `b`.\n    abserr : float\n        An estimate of the absolute error in the result.\n    infodict : dict\n        A dictionary containing additional information.\n    message\n        A convergence message.\n    explain\n        Appended only with 'cos' or 'sin' weighting and infinite\n        integration limits, it contains an explanation of the codes in\n        infodict['ierlst']\n    \n    Other Parameters\n    ----------------\n    epsabs : float or int, optional\n        Absolute error tolerance. Default is 1.49e-8. `quad` tries to obtain\n        an accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\n        where ``i`` = integral of `func` from `a` to `b`, and ``result`` is the\n        numerical approximation. See `epsrel` below.\n    epsrel : float or int, optional\n        Relative error tolerance. Default is 1.49e-8.\n        If ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\n        and ``50 * (machine epsilon)``. See `epsabs` above.\n    limit : float or int, optional\n        An upper bound on the number of subintervals used in the adaptive\n        algorithm.\n    points : (sequence of floats,ints), optional\n        A sequence of break points in the bounded integration interval\n        where local difficulties of the integrand may occur (e.g.,\n        singularities, discontinuities). The sequence does not have\n        to be sorted. Note that this option cannot be used in conjunction\n        with ``weight``.\n    weight : float or int, optional\n        String indicating weighting function. Full explanation for this\n        and the remaining arguments can be found below.\n    wvar : optional\n        Variables for use with weighting functions.\n    wopts : optional\n        Optional input for reusing Chebyshev moments.\n    maxp1 : float or int, optional\n        An upper bound on the number of Chebyshev moments.\n    limlst : int, optional\n        Upper bound on the number of cycles (>=3) for use with a sinusoidal\n        weighting and an infinite end-point.\n    \n    See Also\n    --------\n    dblquad : double integral\n    tplquad : triple integral\n    nquad : n-dimensional integrals (uses `quad` recursively)\n    fixed_quad : fixed-order Gaussian quadrature\n    simpson : integrator for sampled data\n    romb : integrator for sampled data\n    scipy.special : for coefficients and roots of orthogonal polynomials\n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Extra information for quad() inputs and outputs**\n    \n    If full_output is non-zero, then the third output argument\n    (infodict) is a dictionary with entries as tabulated below. For\n    infinite limits, the range is transformed to (0,1) and the\n    optional outputs are given with respect to this transformed range.\n    Let M be the input argument limit and let K be infodict['last'].\n    The entries are:\n    \n    'neval'\n        The number of function evaluations.\n    'last'\n        The number, K, of subintervals produced in the subdivision process.\n    'alist'\n        A rank-1 array of length M, the first K elements of which are the\n        left end points of the subintervals in the partition of the\n        integration range.\n    'blist'\n        A rank-1 array of length M, the first K elements of which are the\n        right end points of the subintervals.\n    'rlist'\n        A rank-1 array of length M, the first K elements of which are the\n        integral approximations on the subintervals.\n    'elist'\n        A rank-1 array of length M, the first K elements of which are the\n        moduli of the absolute error estimates on the subintervals.\n    'iord'\n        A rank-1 integer array of length M, the first L elements of\n        which are pointers to the error estimates over the subintervals\n        with ``L=K`` if ``K<=M/2+2`` or ``L=M+1-K`` otherwise. Let I be the\n        sequence ``infodict['iord']`` and let E be the sequence\n        ``infodict['elist']``.  Then ``E[I[1]], ..., E[I[L]]`` forms a\n        decreasing sequence.\n    \n    If the input argument points is provided (i.e., it is not None),\n    the following additional outputs are placed in the output\n    dictionary. Assume the points sequence is of length P.\n    \n    'pts'\n        A rank-1 array of length P+2 containing the integration limits\n        and the break points of the intervals in ascending order.\n        This is an array giving the subintervals over which integration\n        will occur.\n    'level'\n        A rank-1 integer array of length M (=limit), containing the\n        subdivision levels of the subintervals, i.e., if (aa,bb) is a\n        subinterval of ``(pts[1], pts[2])`` where ``pts[0]`` and ``pts[2]``\n        are adjacent elements of ``infodict['pts']``, then (aa,bb) has level l\n        if ``|bb-aa| = |pts[2]-pts[1]| * 2**(-l)``.\n    'ndin'\n        A rank-1 integer array of length P+2. After the first integration\n        over the intervals (pts[1], pts[2]), the error estimates over some\n        of the intervals may have been increased artificially in order to\n        put their subdivision forward. This array has ones in slots\n        corresponding to the subintervals for which this happens.\n    \n    **Weighting the integrand**\n    \n    The input variables, *weight* and *wvar*, are used to weight the\n    integrand by a select list of functions. Different integration\n    methods are used to compute the integral with these weighting\n    functions, and these do not support specifying break points. The\n    possible values of weight and the corresponding weighting functions are.\n    \n    ==========  ===================================   =====================\n    ``weight``  Weight function used                  ``wvar``\n    ==========  ===================================   =====================\n    'cos'       cos(w*x)                              wvar = w\n    'sin'       sin(w*x)                              wvar = w\n    'alg'       g(x) = ((x-a)**alpha)*((b-x)**beta)   wvar = (alpha, beta)\n    'alg-loga'  g(x)*log(x-a)                         wvar = (alpha, beta)\n    'alg-logb'  g(x)*log(b-x)                         wvar = (alpha, beta)\n    'alg-log'   g(x)*log(x-a)*log(b-x)                wvar = (alpha, beta)\n    'cauchy'    1/(x-c)                               wvar = c\n    ==========  ===================================   =====================\n    \n    wvar holds the parameter w, (alpha, beta), or c depending on the weight\n    selected. In these expressions, a and b are the integration limits.\n    \n    For the 'cos' and 'sin' weighting, additional inputs and outputs are\n    available.\n    \n    For weighted integrals with finite integration limits, the integration\n    is performed using a Clenshaw-Curtis method, which uses Chebyshev moments.\n    For repeated calculations, these moments are saved in the output dictionary:\n    \n    'momcom'\n        The maximum level of Chebyshev moments that have been computed,\n        i.e., if ``M_c`` is ``infodict['momcom']`` then the moments have been\n        computed for intervals of length ``|b-a| * 2**(-l)``,\n        ``l=0,1,...,M_c``.\n    'nnlog'\n        A rank-1 integer array of length M(=limit), containing the\n        subdivision levels of the subintervals, i.e., an element of this\n        array is equal to l if the corresponding subinterval is\n        ``|b-a|* 2**(-l)``.\n    'chebmo'\n        A rank-2 array of shape (25, maxp1) containing the computed\n        Chebyshev moments. These can be passed on to an integration\n        over the same interval by passing this array as the second\n        element of the sequence wopts and passing infodict['momcom'] as\n        the first element.\n    \n    If one of the integration limits is infinite, then a Fourier integral is\n    computed (assuming w neq 0). If full_output is 1 and a numerical error\n    is encountered, besides the error message attached to the output tuple,\n    a dictionary is also appended to the output tuple which translates the\n    error codes in the array ``info['ierlst']`` to English messages. The\n    output information dictionary contains the following entries instead of\n    'last', 'alist', 'blist', 'rlist', and 'elist':\n    \n    'lst'\n        The number of subintervals needed for the integration (call it ``K_f``).\n    'rslst'\n        A rank-1 array of length M_f=limlst, whose first ``K_f`` elements\n        contain the integral contribution over the interval\n        ``(a+(k-1)c, a+kc)`` where ``c = (2*floor(|w|) + 1) * pi / |w|``\n        and ``k=1,2,...,K_f``.\n    'erlst'\n        A rank-1 array of length ``M_f`` containing the error estimate\n        corresponding to the interval in the same position in\n        ``infodict['rslist']``.\n    'ierlst'\n        A rank-1 integer array of length ``M_f`` containing an error flag\n        corresponding to the interval in the same position in\n        ``infodict['rslist']``.  See the explanation dictionary (last entry\n        in the output tuple) for the meaning of the codes.\n    \n    \n    **Details of QUADPACK level routines**\n    \n    `quad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. The routine called depends on\n    `weight`, `points` and the integration limits `a` and `b`.\n    \n    ================  ==============  ==========  =====================\n    QUADPACK routine  `weight`        `points`    infinite bounds\n    ================  ==============  ==========  =====================\n    qagse             None            No          No\n    qagie             None            No          Yes\n    qagpe             None            Yes         No\n    qawoe             'sin', 'cos'    No          No\n    qawfe             'sin', 'cos'    No          either `a` or `b`\n    qawse             'alg*'          No          No\n    qawce             'cauchy'        No          No\n    ================  ==============  ==========  =====================\n    \n    The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    qagpe\n        serves the same purposes as QAGS, but also allows the\n        user to provide explicit information about the location\n        and type of trouble-spots i.e. the abscissae of internal\n        singularities, discontinuities and other difficulties of\n        the integrand function.\n    qawoe\n        is an integrator for the evaluation of\n        :math:`\\int^b_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^b_a \\sin(\\omega x)f(x)dx`\n        over a finite interval [a,b], where :math:`\\omega` and :math:`f`\n        are specified by the user. The rule evaluation component is based\n        on the modified Clenshaw-Curtis technique\n    \n        An adaptive subdivision scheme is used in connection\n        with an extrapolation procedure, which is a modification\n        of that in ``QAGS`` and allows the algorithm to deal with\n        singularities in :math:`f(x)`.\n    qawfe\n        calculates the Fourier transform\n        :math:`\\int^\\infty_a \\cos(\\omega x)f(x)dx` or\n        :math:`\\int^\\infty_a \\sin(\\omega x)f(x)dx`\n        for user-provided :math:`\\omega` and :math:`f`. The procedure of\n        ``QAWO`` is applied on successive finite intervals, and convergence\n        acceleration by means of the :math:`\\varepsilon`-algorithm is applied\n        to the series of integral approximations.\n    qawse\n        approximate :math:`\\int^b_a w(x)f(x)dx`, with :math:`a < b` where\n        :math:`w(x) = (x-a)^{\\alpha}(b-x)^{\\beta}v(x)` with\n        :math:`\\alpha,\\beta > -1`, where :math:`v(x)` may be one of the\n        following functions: :math:`1`, :math:`\\log(x-a)`, :math:`\\log(b-x)`,\n        :math:`\\log(x-a)\\log(b-x)`.\n    \n        The user specifies :math:`\\alpha`, :math:`\\beta` and the type of the\n        function :math:`v`. A globally adaptive subdivision strategy is\n        applied, with modified Clenshaw-Curtis integration on those\n        subintervals which contain `a` or `b`.\n    qawce\n        compute :math:`\\int^b_a f(x) / (x-c)dx` where the integral must be\n        interpreted as a Cauchy principal value integral, for user specified\n        :math:`c` and :math:`f`. The strategy is globally adaptive. Modified\n        Clenshaw-Curtis integration is used on those intervals containing the\n        point :math:`x = c`.\n    \n    **Integration of Complex Function of a Real Variable**\n    \n    A complex valued function, :math:`f`, of a real variable can be written as\n    :math:`f = g + ih`.  Similarly, the integral of :math:`f` can be\n    written as\n    \n    .. math::\n        \\int_a^b f(x) dx = \\int_a^b g(x) dx + i\\int_a^b h(x) dx\n    \n    assuming that the integrals of :math:`g` and :math:`h` exist\n    over the interval :math:`[a,b]` [2]_. Therefore, ``quad`` integrates\n    complex-valued functions by integrating the real and imaginary components\n    separately.\n    \n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    .. [2] McCullough, Thomas; Phillips, Keith (1973).\n           Foundations of Analysis in the Complex Plane.\n           Holt Rinehart Winston.\n           ISBN 0-03-086370-8\n    \n    Examples\n    --------\n    Calculate :math:`\\int^4_0 x^2 dx` and compare with an analytic result\n    \n    >>> from scipy import integrate\n    >>> import numpy as np\n    >>> x2 = lambda x: x**2\n    >>> integrate.quad(x2, 0, 4)\n    (21.333333333333332, 2.3684757858670003e-13)\n    >>> print(4**3 / 3.)  # analytical result\n    21.3333333333\n    \n    Calculate :math:`\\int^\\infty_0 e^{-x} dx`\n    \n    >>> invexp = lambda x: np.exp(-x)\n    >>> integrate.quad(invexp, 0, np.inf)\n    (1.0, 5.842605999138044e-11)\n    \n    Calculate :math:`\\int^1_0 a x \\,dx` for :math:`a = 1, 3`\n    \n    >>> f = lambda x, a: a*x\n    >>> y, err = integrate.quad(f, 0, 1, args=(1,))\n    >>> y\n    0.5\n    >>> y, err = integrate.quad(f, 0, 1, args=(3,))\n    >>> y\n    1.5\n    \n    Calculate :math:`\\int^1_0 x^2 + y^2 dx` with ctypes, holding\n    y parameter as 1::\n    \n        testlib.c =>\n            double func(int n, double args[n]){\n                return args[0]*args[0] + args[1]*args[1];}\n        compile to library testlib.*\n    \n    ::\n    \n       from scipy import integrate\n       import ctypes\n       lib = ctypes.CDLL('/home/.../testlib.*') #use absolute path\n       lib.func.restype = ctypes.c_double\n       lib.func.argtypes = (ctypes.c_int,ctypes.c_double)\n       integrate.quad(lib.func,0,1,(1))\n       #(1.3333333333333333, 1.4802973661668752e-14)\n       print((1.0**3/3.0 + 1.0) - (0.0**3/3.0 + 0.0)) #Analytic result\n       # 1.3333333333333333\n    \n    Be aware that pulse shapes and other sharp features as compared to the\n    size of the integration interval may not be integrated correctly using\n    this method. A simplified example of this limitation is integrating a\n    y-axis reflected step function with many zero values within the integrals\n    bounds.\n    \n    >>> y = lambda x: 1 if x<=0 else 0\n    >>> integrate.quad(y, -1, 1)\n    (1.0, 1.1102230246251565e-14)\n    >>> integrate.quad(y, -1, 100)\n    (1.0000000002199108, 1.0189464580163188e-08)\n    >>> integrate.quad(y, -1, 10000)\n    (0.0, 0.0)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "241cb1ebcb6dd645445b8fabdd22b7304ad057193dcbce1acb302df32c322122",
            "fields": [
                {
                    "id": "h5szr38y",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method to integrate. If `func` takes many\narguments, it is integrated along the axis corresponding to the\nfirst argument.\n\nIf the user desires improved integration performance, then `f` may\nbe a `scipy.LowLevelCallable` with one of the signatures::\n\n    double func(double x)\n    double func(double x, void *user_data)\n    double func(int n, double *xx)\n    double func(int n, double *xx, void *user_data)\n\nThe ``user_data`` is the data contained in the `scipy.LowLevelCallable`.\nIn the call forms with ``xx``,  ``n`` is the length of the ``xx``\narray which contains ``xx[0] == x`` and the rest of the items are\nnumbers contained in the ``args`` argument of quad.\n\nIn addition, certain ctypes call signatures are supported for\nbackward compatibility, but those should not be used in new code.",
                    "type": "{function, scipy.LowLevelCallable}",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "gxtjmihs",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lower limit of integration (use -numpy.inf for -infinity).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "rw1jwleg",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "Upper limit of integration (use numpy.inf for +infinity).",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wpd72dq5",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "7j9r4kxh",
                    "encoding": "",
                    "name": "full_output",
                    "value": 0,
                    "defaultValue": 0,
                    "description": "Non-zero to return a dictionary of integration information.\nIf non-zero, warning messages are also suppressed and the\nmessage is appended to the output tuple.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cn4vj5uu",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Absolute error tolerance. Default is 1.49e-8. `quad` tries to obtain\nan accuracy of ``abs(i-result) <= max(epsabs, epsrel*abs(i))``\nwhere ``i`` = integral of `func` from `a` to `b`, and ``result`` is the\nnumerical approximation. See `epsrel` below.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "m8te1fzt",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Relative error tolerance. Default is 1.49e-8.\nIf ``epsabs <= 0``, `epsrel` must be greater than both 5e-29\nand ``50 * (machine epsilon)``. See `epsabs` above.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "95ofm9nr",
                    "encoding": "",
                    "name": "limit",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "An upper bound on the number of subintervals used in the adaptive\nalgorithm.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dbhcrtmg",
                    "encoding": "",
                    "name": "points",
                    "value": "",
                    "defaultValue": "",
                    "description": "A sequence of break points in the bounded integration interval\nwhere local difficulties of the integrand may occur (e.g.,\nsingularities, discontinuities). The sequence does not have\nto be sorted. Note that this option cannot be used in conjunction\nwith ``weight``.",
                    "type": "(sequence of floats,ints)",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xtm2tsxu",
                    "encoding": "",
                    "name": "weight",
                    "value": "",
                    "defaultValue": "",
                    "description": "String indicating weighting function. Full explanation for this\nand the remaining arguments can be found below.",
                    "type": "float or int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "vu941gsm",
                    "encoding": "",
                    "name": "wvar",
                    "value": "",
                    "defaultValue": "",
                    "description": "Variables for use with weighting functions.",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "dvw7snpv",
                    "encoding": "",
                    "name": "wopts",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional input for reusing Chebyshev moments.",
                    "type": "optional",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "2411e_ag",
                    "encoding": "",
                    "name": "maxp1",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "An upper bound on the number of Chebyshev moments.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9_595g3u",
                    "encoding": "",
                    "name": "limlst",
                    "value": 50,
                    "defaultValue": 50,
                    "description": "Upper bound on the number of cycles (>=3) for use with a sinusoidal\nweighting and an infinite end-point.",
                    "type": "int",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "6hwfh0dm",
                    "encoding": "",
                    "name": "complex_func",
                    "value": false,
                    "defaultValue": false,
                    "description": "Indicate if the function's (`func`) return type is real\n(``complex_func=False``: default) or complex (``complex_func=True``).\nIn both cases, the function's argument is real.\nIf full_output is also non-zero, the `infodict`, `message`, and\n`explain` for the real and complex components are returned in\na dictionary with keys \"real output\" and \"imag output\".",
                    "type": "bool",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "9irsfog1",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.quadpack.quad",
                    "defaultValue": "scipy.integrate.quadpack.quad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "fj5fpk22",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "yyc_4ytd",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t0fzlzzz",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "4g0wx4b_",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate.quadpack",
                    "defaultValue": "scipy.integrate.quadpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "86ds9jzy",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "da4h3p18",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        },
        {
            "inputAppFields": [],
            "inputApplicationDescription": "",
            "inputApplicationId": null,
            "inputApplicationName": "",
            "inputApplicationType": "None",
            "outputAppFields": [],
            "outputApplicationDescription": "",
            "outputApplicationId": null,
            "outputApplicationName": "",
            "outputApplicationType": "None",
            "category": "PyFuncApp",
            "categoryType": "Application",
            "id": "v_s5o638",
            "name": "quadpack.tplquad",
            "description": "Compute a triple (definite) integral.\n    \n    Return the triple integral of ``func(z, y, x)`` from ``x = a..b``,\n    ``y = gfun(x)..hfun(x)``, and ``z = qfun(x,y)..rfun(x,y)``.\n    \n    Parameters\n    ----------\n    func : function\n        A Python function or method of at least three variables in the\n        order (z, y, x).\n    a, b : float\n        The limits of integration in x: `a` < `b`\n    gfun : function or float\n        The lower boundary curve in y which is a function taking a single\n        floating point argument (x) and returning a floating point result\n        or a float indicating a constant boundary curve.\n    hfun : function or float\n        The upper boundary curve in y (same requirements as `gfun`).\n    qfun : function or float\n        The lower boundary surface in z.  It must be a function that takes\n        two floats in the order (x, y) and returns a float or a float\n        indicating a constant boundary surface.\n    rfun : function or float\n        The upper boundary surface in z. (Same requirements as `qfun`.)\n    args : tuple, optional\n        Extra arguments to pass to `func`.\n    epsabs : float, optional\n        Absolute tolerance passed directly to the innermost 1-D quadrature\n        integration. Default is 1.49e-8.\n    epsrel : float, optional\n        Relative tolerance of the innermost 1-D integrals. Default is 1.49e-8.\n    \n    Returns\n    -------\n    y : float\n        The resultant integral.\n    abserr : float\n        An estimate of the error.\n    \n    See Also\n    --------\n    quad : Adaptive quadrature using QUADPACK\n    fixed_quad : Fixed-order Gaussian quadrature\n    dblquad : Double integrals\n    nquad : N-dimensional integrals\n    romb : Integrators for sampled data\n    simpson : Integrators for sampled data\n    scipy.special : For coefficients and roots of orthogonal polynomials\n    \n    Notes\n    -----\n    For valid results, the integral must converge; behavior for divergent\n    integrals is not guaranteed.\n    \n    **Details of QUADPACK level routines**\n    \n    `quad` calls routines from the FORTRAN library QUADPACK. This section\n    provides details on the conditions for each routine to be called and a\n    short description of each routine. For each level of integration, ``qagse``\n    is used for finite limits or ``qagie`` is used, if either limit (or both!)\n    are infinite. The following provides a short description from [1]_ for each\n    routine.\n    \n    qagse\n        is an integrator based on globally adaptive interval\n        subdivision in connection with extrapolation, which will\n        eliminate the effects of integrand singularities of\n        several types. The integration is is performed using a 21-point Gauss-Kronrod \n        quadrature within each subinterval.\n    qagie\n        handles integration over infinite intervals. The infinite range is\n        mapped onto a finite interval and subsequently the same strategy as\n        in ``QAGS`` is applied.\n    \n    References\n    ----------\n    \n    .. [1] Piessens, Robert; de Doncker-Kapenga, Elise;\n           \u00dcberhuber, Christoph W.; Kahaner, David (1983).\n           QUADPACK: A subroutine package for automatic integration.\n           Springer-Verlag.\n           ISBN 978-3-540-12553-2.\n    \n    Examples\n    --------\n    Compute the triple integral of ``x * y * z``, over ``x`` ranging\n    from 1 to 2, ``y`` ranging from 2 to 3, ``z`` ranging from 0 to 1.\n    That is, :math:`\\int^{x=2}_{x=1} \\int^{y=3}_{y=2} \\int^{z=1}_{z=0} x y z\n    \\,dz \\,dy \\,dx`.\n    \n    >>> import numpy as np\n    >>> from scipy import integrate\n    >>> f = lambda z, y, x: x*y*z\n    >>> integrate.tplquad(f, 1, 2, 2, 3, 0, 1)\n    (1.8749999999999998, 3.3246447942574074e-14)\n    \n    Calculate :math:`\\int^{x=1}_{x=0} \\int^{y=1-2x}_{y=0}\n    \\int^{z=1-x-2y}_{z=0} x y z \\,dz \\,dy \\,dx`.\n    Note: `qfun`/`rfun` takes arguments in the order (x, y), even though ``f``\n    takes arguments in the order (z, y, x).\n    \n    >>> f = lambda z, y, x: x*y*z\n    >>> integrate.tplquad(f, 0, 1, 0, lambda x: 1-2*x, 0, lambda x, y: 1-x-2*y)\n    (0.05416666666666668, 2.1774196738157757e-14)\n    \n    Calculate :math:`\\int^{x=1}_{x=0} \\int^{y=1}_{y=0} \\int^{z=1}_{z=0}\n    a x y z \\,dz \\,dy \\,dx` for :math:`a=1, 3`.\n    \n    >>> f = lambda z, y, x, a: a*x*y*z\n    >>> integrate.tplquad(f, 0, 1, 0, 1, 0, 1, args=(1,))\n        (0.125, 5.527033708952211e-15)\n    >>> integrate.tplquad(f, 0, 1, 0, 1, 0, 1, args=(3,))\n        (0.375, 1.6581101126856635e-14)\n    \n    Compute the three-dimensional Gaussian Integral, which is the integral of\n    the Gaussian function :math:`f(x,y,z) = e^{-(x^{2} + y^{2} + z^{2})}`, over\n    :math:`(-\\infty,+\\infty)`. That is, compute the integral\n    :math:`\\iiint^{+\\infty}_{-\\infty} e^{-(x^{2} + y^{2} + z^{2})} \\,dz\n    \\,dy\\,dx`.\n    \n    >>> f = lambda x, y, z: np.exp(-(x ** 2 + y ** 2 + z ** 2))\n    >>> integrate.tplquad(f, -np.inf, np.inf, -np.inf, np.inf, -np.inf, np.inf)\n        (5.568327996830833, 4.4619078828029765e-08)",
            "repositoryUrl": "dlg_paletteGen.generated",
            "commitHash": "0.1",
            "paletteDownloadUrl": "",
            "dataHash": "1234a0f7474e5dc967070d935d52d000ba54cea053a8c8663ea41bdd9712e9ea",
            "fields": [
                {
                    "id": "p4rjk6ik",
                    "encoding": "",
                    "name": "func",
                    "value": "",
                    "defaultValue": "",
                    "description": "A Python function or method of at least three variables in the\norder (z, y, x).",
                    "type": "function",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0ikhfyfe",
                    "encoding": "",
                    "name": "a",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lbf9dov6",
                    "encoding": "",
                    "name": "b",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "None",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "x0emdf82",
                    "encoding": "",
                    "name": "gfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower boundary curve in y which is a function taking a single\nfloating point argument (x) and returning a floating point result\nor a float indicating a constant boundary curve.",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "qj04h5pz",
                    "encoding": "",
                    "name": "hfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The upper boundary curve in y (same requirements as `gfun`).",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "0360bcli",
                    "encoding": "",
                    "name": "qfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The lower boundary surface in z.  It must be a function that takes\ntwo floats in the order (x, y) and returns a float or a float\nindicating a constant boundary surface.",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "a1d111hz",
                    "encoding": "",
                    "name": "rfun",
                    "value": "",
                    "defaultValue": "",
                    "description": "The upper boundary surface in z. (Same requirements as `qfun`.)",
                    "type": "function or float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "5dus_jq9",
                    "encoding": "",
                    "name": "args",
                    "value": "builtins.tuple",
                    "defaultValue": "builtins.tuple",
                    "description": "Extra arguments to pass to `func`.",
                    "type": "List",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "d7ritf8k",
                    "encoding": "",
                    "name": "epsabs",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Absolute tolerance passed directly to the innermost 1-D quadrature\nintegration. Default is 1.49e-8.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "xwh9ho5h",
                    "encoding": "",
                    "name": "epsrel",
                    "value": 1.49e-08,
                    "defaultValue": 1.49e-08,
                    "description": "Relative tolerance of the innermost 1-D integrals. Default is 1.49e-8.",
                    "type": "float",
                    "parameterType": "ApplicationArgument",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "lj8cnqiu",
                    "encoding": "",
                    "name": "func_name",
                    "value": "scipy.integrate.quadpack.tplquad",
                    "defaultValue": "scipy.integrate.quadpack.tplquad",
                    "description": "Complete import path of function or just a function name which is also used in func_code below.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "cx6ap0_l",
                    "encoding": "",
                    "name": "log-level",
                    "value": "NOTSET",
                    "defaultValue": "NOTSET",
                    "description": "Log-level to be used for this appplication. If empty or NOTSET, the global setting will be used.",
                    "type": "Select",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [
                        "NOTSET",
                        "DEBUG",
                        "INFO",
                        "WARNING",
                        "ERROR",
                        "CRITICAL"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "93dtn5qy",
                    "encoding": "",
                    "name": "group_start",
                    "value": false,
                    "defaultValue": null,
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false,
                    "default_value": false
                },
                {
                    "id": "t3g_f3u6",
                    "encoding": "",
                    "name": "dropclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "wfoi3mxl",
                    "encoding": "",
                    "name": "base_name",
                    "value": "scipy.integrate.quadpack",
                    "defaultValue": "scipy.integrate.quadpack",
                    "description": "The base class for this member function.",
                    "type": "String",
                    "parameterType": "ComponentParameter",
                    "usage": "NoPort",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "kafwq716",
                    "encoding": "",
                    "name": "execution_time",
                    "value": 2,
                    "defaultValue": 2,
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "id": "f_is18ch",
                    "encoding": "",
                    "name": "num_cpus",
                    "value": 1,
                    "defaultValue": 1,
                    "description": "Number of cores used.",
                    "type": "Integer",
                    "parameterType": "ConstraintParameter",
                    "usage": "NoPort",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ]
        }
    ],
    "linkDataArray": []
}